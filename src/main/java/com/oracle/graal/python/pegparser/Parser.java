/*
 * Copyright (c) 2021, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * The Universal Permissive License (UPL), Version 1.0
 *
 * Subject to the condition set forth below, permission is hereby granted to any
 * person obtaining a copy of this software, associated documentation and/or
 * data (collectively the "Software"), free of charge and under any and all
 * copyright rights in the Software, and any and all patent rights owned or
 * freely licensable by each licensor hereunder covering either (i) the
 * unmodified Software as contributed to or provided by such licensor, or (ii)
 * the Larger Works (as defined below), to deal in both
 *
 * (a) the Software, and
 *
 * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if
 * one is included with the Software each a "Larger Work" to which the Software
 * is contributed by such licensors),
 *
 * without restriction, including without limitation the rights to copy, create
 * derivative works of, display, perform, and distribute the Software and make,
 * use, sell, offer for sale, import, export, have made, and have sold the
 * Software and the Larger Work(s), and to sublicense the foregoing rights on
 * either these or other terms.
 *
 * This license is subject to the following condition:
 *
 * The above copyright notice and either this complete permission notice or at a
 * minimum a reference to the UPL must be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.oracle.graal.python.pegparser;

import com.oracle.graal.python.pegparser.sst.*;
import com.oracle.graal.python.pegparser.tokenizer.Token;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@SuppressWarnings("all")
public final class Parser extends AbstractParser {

    // parser fields
    
    // caching results for pos -> rule
    // the null results are cached as well

    // TODO make a special section for private methods
    private BinaryArithmeticSSTNode finishBinaryOp(SSTNode left, SSTNode[] right) {
        BinaryArithmeticSSTNode rightOp = (BinaryArithmeticSSTNode)right[0];
        return factory.createBinaryOp(rightOp.getOperation(), left, rightOp.getRight(), left.getStartOffset(), rightOp.getEndOffset());
    }

    private static final Object[][][] reservedKeywords = new Object[][][]{
        null,
        null,
        {
            {"if", 510},
            {"in", 518},
            {"as", 520},
            {"is", 530},
            {"or", 531},
        },
        {
            {"del", 503},
            {"try", 511},
            {"for", 517},
            {"def", 526},
            {"not", 529},
            {"and", 532},
        },
        {
            {"pass", 502},
            {"from", 514},
            {"elif", 515},
            {"else", 516},
            {"with", 519},
            {"None", 523},
            {"True", 524},
        },
        {
            {"raise", 501},
            {"yield", 504},
            {"break", 506},
            {"while", 512},
            {"False", 525},
            {"class", 527},
        },
        {
            {"return", 500},
            {"assert", 505},
            {"global", 508},
            {"import", 513},
            {"except", 521},
            {"lambda", 528},
        },
        {
            {"finally", 522},
        },
        {
            {"continue", 507},
            {"nonlocal", 509},
        },
    };
    @Override
    protected Object[][][] getReservedKeywords() { return reservedKeywords; }
    private static final String[] softKeywords = new String[]{
        "_",
        "case",
        "match",
    };
    @Override
    protected String[] getSoftKeywords() { return softKeywords; }
    private static final int FILE_ID = 1000;
    private static final int INTERACTIVE_ID = 1001;
    private static final int EVAL_ID = 1002;
    private static final int FUNC_TYPE_ID = 1003;
    private static final int FSTRING_ID = 1004;
    private static final int TYPE_EXPRESSIONS_ID = 1005;
    private static final int STATEMENTS_ID = 1006;
    private static final int STATEMENT_ID = 1007;
    private static final int STATEMENT_NEWLINE_ID = 1008;
    private static final int SIMPLE_STMTS_ID = 1009;
    private static final int SIMPLE_STMT_ID = 1010;
    private static final int COMPOUND_STMT_ID = 1011;
    private static final int ASSIGNMENT_ID = 1012;
    private static final int AUGASSIGN_ID = 1013;
    private static final int GLOBAL_STMT_ID = 1014;
    private static final int NONLOCAL_STMT_ID = 1015;
    private static final int YIELD_STMT_ID = 1016;
    private static final int ASSERT_STMT_ID = 1017;
    private static final int DEL_STMT_ID = 1018;
    private static final int IMPORT_STMT_ID = 1019;
    private static final int IMPORT_NAME_ID = 1020;
    private static final int IMPORT_FROM_ID = 1021;
    private static final int IMPORT_FROM_TARGETS_ID = 1022;
    private static final int IMPORT_FROM_AS_NAMES_ID = 1023;
    private static final int IMPORT_FROM_AS_NAME_ID = 1024;
    private static final int DOTTED_AS_NAMES_ID = 1025;
    private static final int DOTTED_AS_NAME_ID = 1026;
    private static final int DOTTED_NAME_ID = 1027;  // Left-recursive
    private static final int IF_STMT_ID = 1028;
    private static final int ELIF_STMT_ID = 1029;
    private static final int ELSE_BLOCK_ID = 1030;
    private static final int WHILE_STMT_ID = 1031;
    private static final int FOR_STMT_ID = 1032;
    private static final int WITH_STMT_ID = 1033;
    private static final int WITH_ITEM_ID = 1034;
    private static final int TRY_STMT_ID = 1035;
    private static final int EXCEPT_BLOCK_ID = 1036;
    private static final int FINALLY_BLOCK_ID = 1037;
    private static final int MATCH_STMT_ID = 1038;
    private static final int SUBJECT_EXPR_ID = 1039;
    private static final int CASE_BLOCK_ID = 1040;
    private static final int GUARD_ID = 1041;
    private static final int PATTERNS_ID = 1042;
    private static final int PATTERN_ID = 1043;
    private static final int AS_PATTERN_ID = 1044;
    private static final int OR_PATTERN_ID = 1045;
    private static final int CLOSED_PATTERN_ID = 1046;
    private static final int LITERAL_PATTERN_ID = 1047;
    private static final int SIGNED_NUMBER_ID = 1048;
    private static final int CAPTURE_PATTERN_ID = 1049;
    private static final int WILDCARD_PATTERN_ID = 1050;
    private static final int VALUE_PATTERN_ID = 1051;
    private static final int ATTR_ID = 1052;  // Left-recursive
    private static final int NAME_OR_ATTR_ID = 1053;  // Left-recursive
    private static final int GROUP_PATTERN_ID = 1054;
    private static final int SEQUENCE_PATTERN_ID = 1055;
    private static final int OPEN_SEQUENCE_PATTERN_ID = 1056;
    private static final int MAYBE_SEQUENCE_PATTERN_ID = 1057;
    private static final int MAYBE_STAR_PATTERN_ID = 1058;
    private static final int STAR_PATTERN_ID = 1059;
    private static final int MAPPING_PATTERN_ID = 1060;
    private static final int ITEMS_PATTERN_ID = 1061;
    private static final int KEY_VALUE_PATTERN_ID = 1062;
    private static final int DOUBLE_STAR_PATTERN_ID = 1063;
    private static final int CLASS_PATTERN_ID = 1064;
    private static final int POSITIONAL_PATTERNS_ID = 1065;
    private static final int KEYWORD_PATTERNS_ID = 1066;
    private static final int KEYWORD_PATTERN_ID = 1067;
    private static final int RETURN_STMT_ID = 1068;
    private static final int RAISE_STMT_ID = 1069;
    private static final int FUNCTION_DEF_ID = 1070;
    private static final int FUNCTION_DEF_RAW_ID = 1071;
    private static final int FUNC_TYPE_COMMENT_ID = 1072;
    private static final int PARAMS_ID = 1073;
    private static final int PARAMETERS_ID = 1074;
    private static final int SLASH_NO_DEFAULT_ID = 1075;
    private static final int SLASH_WITH_DEFAULT_ID = 1076;
    private static final int STAR_ETC_ID = 1077;
    private static final int KWDS_ID = 1078;
    private static final int PARAM_NO_DEFAULT_ID = 1079;
    private static final int PARAM_WITH_DEFAULT_ID = 1080;
    private static final int PARAM_MAYBE_DEFAULT_ID = 1081;
    private static final int PARAM_ID = 1082;
    private static final int ANNOTATION_ID = 1083;
    private static final int DEFAULT_PARAM_ID = 1084;
    private static final int DECORATORS_ID = 1085;
    private static final int CLASS_DEF_ID = 1086;
    private static final int CLASS_DEF_RAW_ID = 1087;
    private static final int BLOCK_ID = 1088;
    private static final int STAR_EXPRESSIONS_ID = 1089;
    private static final int STAR_EXPRESSION_ID = 1090;
    private static final int STAR_NAMED_EXPRESSIONS_ID = 1091;
    private static final int STAR_NAMED_EXPRESSION_ID = 1092;
    private static final int NAMED_EXPRESSION_ID = 1093;
    private static final int DIRECT_NAMED_EXPRESSION_ID = 1094;
    private static final int ANNOTATED_RHS_ID = 1095;
    private static final int EXPRESSIONS_ID = 1096;
    private static final int EXPRESSION_ID = 1097;
    private static final int LAMBDEF_ID = 1098;
    private static final int LAMBDA_PARAMS_ID = 1099;
    private static final int LAMBDA_PARAMETERS_ID = 1100;
    private static final int LAMBDA_SLASH_NO_DEFAULT_ID = 1101;
    private static final int LAMBDA_SLASH_WITH_DEFAULT_ID = 1102;
    private static final int LAMBDA_STAR_ETC_ID = 1103;
    private static final int LAMBDA_KWDS_ID = 1104;
    private static final int LAMBDA_PARAM_NO_DEFAULT_ID = 1105;
    private static final int LAMBDA_PARAM_WITH_DEFAULT_ID = 1106;
    private static final int LAMBDA_PARAM_MAYBE_DEFAULT_ID = 1107;
    private static final int LAMBDA_PARAM_ID = 1108;
    private static final int DISJUNCTION_ID = 1109;
    private static final int CONJUNCTION_ID = 1110;
    private static final int INVERSION_ID = 1111;
    private static final int COMPARISON_ID = 1112;
    private static final int COMPARE_OP_BITWISE_OR_PAIR_ID = 1113;
    private static final int EQ_BITWISE_OR_ID = 1114;
    private static final int NOTEQ_BITWISE_OR_ID = 1115;
    private static final int LTE_BITWISE_OR_ID = 1116;
    private static final int LT_BITWISE_OR_ID = 1117;
    private static final int GTE_BITWISE_OR_ID = 1118;
    private static final int GT_BITWISE_OR_ID = 1119;
    private static final int NOTIN_BITWISE_OR_ID = 1120;
    private static final int IN_BITWISE_OR_ID = 1121;
    private static final int ISNOT_BITWISE_OR_ID = 1122;
    private static final int IS_BITWISE_OR_ID = 1123;
    private static final int BITWISE_OR_ID = 1124;  // Left-recursive
    private static final int BITWISE_XOR_ID = 1125;  // Left-recursive
    private static final int BITWISE_AND_ID = 1126;  // Left-recursive
    private static final int SHIFT_EXPR_ID = 1127;  // Left-recursive
    private static final int SUM_ID = 1128;  // Left-recursive
    private static final int TERM_ID = 1129;  // Left-recursive
    private static final int FACTOR_ID = 1130;
    private static final int POWER_ID = 1131;
    private static final int AWAIT_PRIMARY_ID = 1132;
    private static final int PRIMARY_ID = 1133;  // Left-recursive
    private static final int SLICES_ID = 1134;
    private static final int SLICE_ID = 1135;
    private static final int ATOM_ID = 1136;
    private static final int STRINGS_ID = 1137;
    private static final int LIST_ID = 1138;
    private static final int LISTCOMP_ID = 1139;
    private static final int TUPLE_ID = 1140;
    private static final int GROUP_ID = 1141;
    private static final int GENEXP_ID = 1142;
    private static final int SET_ID = 1143;
    private static final int SETCOMP_ID = 1144;
    private static final int DICT_ID = 1145;
    private static final int DICTCOMP_ID = 1146;
    private static final int DOUBLE_STARRED_KVPAIRS_ID = 1147;
    private static final int DOUBLE_STARRED_KVPAIR_ID = 1148;
    private static final int KVPAIR_ID = 1149;
    private static final int FOR_IF_CLAUSES_ID = 1150;
    private static final int FOR_IF_CLAUSE_ID = 1151;
    private static final int YIELD_EXPR_ID = 1152;
    private static final int ARGUMENTS_ID = 1153;
    private static final int ARGS_ID = 1154;
    private static final int KWARGS_ID = 1155;
    private static final int STARRED_EXPRESSION_ID = 1156;
    private static final int KWARG_OR_STARRED_ID = 1157;
    private static final int KWARG_OR_DOUBLE_STARRED_ID = 1158;
    private static final int STAR_TARGETS_ID = 1159;
    private static final int STAR_TARGETS_LIST_SEQ_ID = 1160;
    private static final int STAR_TARGETS_TUPLE_SEQ_ID = 1161;
    private static final int STAR_TARGET_ID = 1162;
    private static final int TARGET_WITH_STAR_ATOM_ID = 1163;
    private static final int STAR_ATOM_ID = 1164;
    private static final int SINGLE_TARGET_ID = 1165;
    private static final int SINGLE_SUBSCRIPT_ATTRIBUTE_TARGET_ID = 1166;
    private static final int DEL_TARGETS_ID = 1167;
    private static final int DEL_TARGET_ID = 1168;
    private static final int DEL_T_ATOM_ID = 1169;
    private static final int TARGETS_ID = 1170;
    private static final int TARGET_ID = 1171;
    private static final int T_PRIMARY_ID = 1172;  // Left-recursive
    private static final int T_LOOKAHEAD_ID = 1173;
    private static final int T_ATOM_ID = 1174;
    private static final int INVALID_ARGUMENTS_ID = 1175;
    private static final int INVALID_KWARG_ID = 1176;
    private static final int INVALID_EXPRESSION_ID = 1177;
    private static final int INVALID_NAMED_EXPRESSION_ID = 1178;
    private static final int INVALID_ASSIGNMENT_ID = 1179;
    private static final int INVALID_ANN_ASSIGN_TARGET_ID = 1180;
    private static final int INVALID_DEL_STMT_ID = 1181;
    private static final int INVALID_BLOCK_ID = 1182;
    private static final int INVALID_PRIMARY_ID = 1183;  // Left-recursive
    private static final int INVALID_COMPREHENSION_ID = 1184;
    private static final int INVALID_DICT_COMPREHENSION_ID = 1185;
    private static final int INVALID_PARAMETERS_ID = 1186;
    private static final int INVALID_PARAMETERS_HELPER_ID = 1187;
    private static final int INVALID_LAMBDA_PARAMETERS_ID = 1188;
    private static final int INVALID_LAMBDA_PARAMETERS_HELPER_ID = 1189;
    private static final int INVALID_STAR_ETC_ID = 1190;
    private static final int INVALID_LAMBDA_STAR_ETC_ID = 1191;
    private static final int INVALID_DOUBLE_TYPE_COMMENTS_ID = 1192;
    private static final int INVALID_WITH_ITEM_ID = 1193;
    private static final int INVALID_FOR_TARGET_ID = 1194;
    private static final int INVALID_GROUP_ID = 1195;
    private static final int INVALID_IMPORT_FROM_TARGETS_ID = 1196;
    private static final int INVALID_WITH_STMT_ID = 1197;
    private static final int INVALID_EXCEPT_BLOCK_ID = 1198;
    private static final int INVALID_MATCH_STMT_ID = 1199;
    private static final int INVALID_CASE_BLOCK_ID = 1200;
    private static final int INVALID_IF_STMT_ID = 1201;
    private static final int INVALID_ELIF_STMT_ID = 1202;
    private static final int INVALID_WHILE_STMT_ID = 1203;
    private static final int INVALID_DOUBLE_STARRED_KVPAIRS_ID = 1204;
    private static final int INVALID_KVPAIR_ID = 1205;
    private static final int _TMP_1_ID = 1206;
    private static final int _LOOP0_2_ID = 1207;
    private static final int _TMP_3_ID = 1208;
    private static final int _LOOP0_4_ID = 1209;
    private static final int _LOOP0_6_ID = 1210;
    private static final int _GATHER_5_ID = 1211;
    private static final int _LOOP0_8_ID = 1212;
    private static final int _GATHER_7_ID = 1213;
    private static final int _LOOP0_10_ID = 1214;
    private static final int _GATHER_9_ID = 1215;
    private static final int _LOOP0_12_ID = 1216;
    private static final int _GATHER_11_ID = 1217;
    private static final int _LOOP1_13_ID = 1218;
    private static final int _LOOP0_15_ID = 1219;
    private static final int _GATHER_14_ID = 1220;
    private static final int _TMP_16_ID = 1221;
    private static final int _TMP_17_ID = 1222;
    private static final int _TMP_18_ID = 1223;
    private static final int _TMP_19_ID = 1224;
    private static final int _TMP_20_ID = 1225;
    private static final int _TMP_21_ID = 1226;
    private static final int _TMP_22_ID = 1227;
    private static final int _TMP_23_ID = 1228;
    private static final int _TMP_24_ID = 1229;
    private static final int _LOOP1_25_ID = 1230;
    private static final int _TMP_26_ID = 1231;
    private static final int _TMP_27_ID = 1232;
    private static final int _TMP_28_ID = 1233;
    private static final int _LOOP0_30_ID = 1234;
    private static final int _GATHER_29_ID = 1235;
    private static final int _LOOP0_32_ID = 1236;
    private static final int _GATHER_31_ID = 1237;
    private static final int _TMP_33_ID = 1238;
    private static final int _TMP_34_ID = 1239;
    private static final int _LOOP0_35_ID = 1240;
    private static final int _LOOP1_36_ID = 1241;
    private static final int _TMP_37_ID = 1242;
    private static final int _LOOP0_39_ID = 1243;
    private static final int _GATHER_38_ID = 1244;
    private static final int _TMP_40_ID = 1245;
    private static final int _LOOP0_42_ID = 1246;
    private static final int _GATHER_41_ID = 1247;
    private static final int _TMP_43_ID = 1248;
    private static final int _TMP_44_ID = 1249;
    private static final int _TMP_45_ID = 1250;
    private static final int _TMP_46_ID = 1251;
    private static final int _TMP_47_ID = 1252;
    private static final int _TMP_48_ID = 1253;
    private static final int _TMP_49_ID = 1254;
    private static final int _TMP_50_ID = 1255;
    private static final int _LOOP0_52_ID = 1256;
    private static final int _GATHER_51_ID = 1257;
    private static final int _LOOP0_54_ID = 1258;
    private static final int _GATHER_53_ID = 1259;
    private static final int _TMP_55_ID = 1260;
    private static final int _LOOP0_57_ID = 1261;
    private static final int _GATHER_56_ID = 1262;
    private static final int _LOOP0_59_ID = 1263;
    private static final int _GATHER_58_ID = 1264;
    private static final int _TMP_60_ID = 1265;
    private static final int _TMP_61_ID = 1266;
    private static final int _LOOP1_62_ID = 1267;
    private static final int _TMP_63_ID = 1268;
    private static final int _TMP_64_ID = 1269;
    private static final int _TMP_65_ID = 1270;
    private static final int _LOOP1_66_ID = 1271;
    private static final int _LOOP0_68_ID = 1272;
    private static final int _GATHER_67_ID = 1273;
    private static final int _TMP_69_ID = 1274;
    private static final int _TMP_70_ID = 1275;
    private static final int _TMP_71_ID = 1276;
    private static final int _LOOP0_73_ID = 1277;
    private static final int _GATHER_72_ID = 1278;
    private static final int _TMP_74_ID = 1279;
    private static final int _LOOP0_76_ID = 1280;
    private static final int _GATHER_75_ID = 1281;
    private static final int _TMP_77_ID = 1282;
    private static final int _LOOP0_79_ID = 1283;
    private static final int _GATHER_78_ID = 1284;
    private static final int _LOOP0_81_ID = 1285;
    private static final int _GATHER_80_ID = 1286;
    private static final int _TMP_82_ID = 1287;
    private static final int _TMP_83_ID = 1288;
    private static final int _TMP_84_ID = 1289;
    private static final int _TMP_85_ID = 1290;
    private static final int _TMP_86_ID = 1291;
    private static final int _TMP_87_ID = 1292;
    private static final int _TMP_88_ID = 1293;
    private static final int _TMP_89_ID = 1294;
    private static final int _TMP_90_ID = 1295;
    private static final int _LOOP0_91_ID = 1296;
    private static final int _LOOP0_92_ID = 1297;
    private static final int _TMP_93_ID = 1298;
    private static final int _LOOP0_94_ID = 1299;
    private static final int _TMP_95_ID = 1300;
    private static final int _LOOP1_96_ID = 1301;
    private static final int _LOOP0_97_ID = 1302;
    private static final int _TMP_98_ID = 1303;
    private static final int _LOOP1_99_ID = 1304;
    private static final int _TMP_100_ID = 1305;
    private static final int _LOOP1_101_ID = 1306;
    private static final int _LOOP1_102_ID = 1307;
    private static final int _LOOP0_103_ID = 1308;
    private static final int _LOOP1_104_ID = 1309;
    private static final int _LOOP0_105_ID = 1310;
    private static final int _LOOP1_106_ID = 1311;
    private static final int _LOOP0_107_ID = 1312;
    private static final int _TMP_108_ID = 1313;
    private static final int _LOOP1_109_ID = 1314;
    private static final int _TMP_110_ID = 1315;
    private static final int _LOOP1_111_ID = 1316;
    private static final int _TMP_112_ID = 1317;
    private static final int _LOOP1_113_ID = 1318;
    private static final int _TMP_114_ID = 1319;
    private static final int _LOOP0_116_ID = 1320;
    private static final int _GATHER_115_ID = 1321;
    private static final int _TMP_117_ID = 1322;
    private static final int _LOOP1_118_ID = 1323;
    private static final int _TMP_119_ID = 1324;
    private static final int _TMP_120_ID = 1325;
    private static final int _LOOP0_121_ID = 1326;
    private static final int _LOOP0_122_ID = 1327;
    private static final int _TMP_123_ID = 1328;
    private static final int _LOOP0_124_ID = 1329;
    private static final int _TMP_125_ID = 1330;
    private static final int _LOOP1_126_ID = 1331;
    private static final int _LOOP0_127_ID = 1332;
    private static final int _TMP_128_ID = 1333;
    private static final int _LOOP1_129_ID = 1334;
    private static final int _TMP_130_ID = 1335;
    private static final int _LOOP1_131_ID = 1336;
    private static final int _LOOP1_132_ID = 1337;
    private static final int _LOOP0_133_ID = 1338;
    private static final int _LOOP1_134_ID = 1339;
    private static final int _LOOP0_135_ID = 1340;
    private static final int _LOOP1_136_ID = 1341;
    private static final int _LOOP0_137_ID = 1342;
    private static final int _TMP_138_ID = 1343;
    private static final int _LOOP1_139_ID = 1344;
    private static final int _TMP_140_ID = 1345;
    private static final int _LOOP1_141_ID = 1346;
    private static final int _LOOP1_142_ID = 1347;
    private static final int _LOOP1_143_ID = 1348;
    private static final int _TMP_144_ID = 1349;
    private static final int _TMP_145_ID = 1350;
    private static final int _LOOP0_147_ID = 1351;
    private static final int _GATHER_146_ID = 1352;
    private static final int _TMP_148_ID = 1353;
    private static final int _TMP_149_ID = 1354;
    private static final int _TMP_150_ID = 1355;
    private static final int _TMP_151_ID = 1356;
    private static final int _TMP_152_ID = 1357;
    private static final int _TMP_153_ID = 1358;
    private static final int _TMP_154_ID = 1359;
    private static final int _LOOP1_155_ID = 1360;
    private static final int _TMP_156_ID = 1361;
    private static final int _TMP_157_ID = 1362;
    private static final int _TMP_158_ID = 1363;
    private static final int _TMP_159_ID = 1364;
    private static final int _LOOP0_161_ID = 1365;
    private static final int _GATHER_160_ID = 1366;
    private static final int _TMP_162_ID = 1367;
    private static final int _LOOP1_163_ID = 1368;
    private static final int _LOOP0_164_ID = 1369;
    private static final int _LOOP0_165_ID = 1370;
    private static final int _TMP_166_ID = 1371;
    private static final int _TMP_167_ID = 1372;
    private static final int _LOOP0_169_ID = 1373;
    private static final int _GATHER_168_ID = 1374;
    private static final int _TMP_170_ID = 1375;
    private static final int _LOOP0_172_ID = 1376;
    private static final int _GATHER_171_ID = 1377;
    private static final int _LOOP0_174_ID = 1378;
    private static final int _GATHER_173_ID = 1379;
    private static final int _LOOP0_176_ID = 1380;
    private static final int _GATHER_175_ID = 1381;
    private static final int _LOOP0_178_ID = 1382;
    private static final int _GATHER_177_ID = 1383;
    private static final int _LOOP0_179_ID = 1384;
    private static final int _TMP_180_ID = 1385;
    private static final int _LOOP0_182_ID = 1386;
    private static final int _GATHER_181_ID = 1387;
    private static final int _TMP_183_ID = 1388;
    private static final int _LOOP1_184_ID = 1389;
    private static final int _TMP_185_ID = 1390;
    private static final int _TMP_186_ID = 1391;
    private static final int _TMP_187_ID = 1392;
    private static final int _TMP_188_ID = 1393;
    private static final int _LOOP0_190_ID = 1394;
    private static final int _GATHER_189_ID = 1395;
    private static final int _TMP_191_ID = 1396;
    private static final int _TMP_192_ID = 1397;
    private static final int _TMP_193_ID = 1398;
    private static final int _LOOP0_195_ID = 1399;
    private static final int _GATHER_194_ID = 1400;
    private static final int _TMP_196_ID = 1401;
    private static final int _TMP_197_ID = 1402;
    private static final int _TMP_198_ID = 1403;
    private static final int _TMP_199_ID = 1404;
    private static final int _TMP_200_ID = 1405;
    private static final int _TMP_201_ID = 1406;
    private static final int _TMP_202_ID = 1407;
    private static final int _TMP_203_ID = 1408;
    private static final int _TMP_204_ID = 1409;
    private static final int _LOOP0_205_ID = 1410;
    private static final int _LOOP0_206_ID = 1411;
    private static final int _LOOP0_207_ID = 1412;
    private static final int _TMP_208_ID = 1413;
    private static final int _TMP_209_ID = 1414;
    private static final int _TMP_210_ID = 1415;
    private static final int _TMP_211_ID = 1416;
    private static final int _LOOP0_212_ID = 1417;
    private static final int _LOOP1_213_ID = 1418;
    private static final int _LOOP0_214_ID = 1419;
    private static final int _LOOP1_215_ID = 1420;
    private static final int _TMP_216_ID = 1421;
    private static final int _TMP_217_ID = 1422;
    private static final int _TMP_218_ID = 1423;
    private static final int _TMP_219_ID = 1424;
    private static final int _LOOP0_221_ID = 1425;
    private static final int _GATHER_220_ID = 1426;
    private static final int _TMP_222_ID = 1427;
    private static final int _LOOP0_224_ID = 1428;
    private static final int _GATHER_223_ID = 1429;
    private static final int _TMP_225_ID = 1430;
    private static final int _TMP_226_ID = 1431;
    private static final int _LOOP0_228_ID = 1432;
    private static final int _GATHER_227_ID = 1433;
    private static final int _TMP_229_ID = 1434;
    private static final int _TMP_230_ID = 1435;
    private static final int _TMP_231_ID = 1436;
    private static final int _TMP_232_ID = 1437;
    private static final int _TMP_233_ID = 1438;
    private static final int _TMP_234_ID = 1439;
    private static final int _TMP_235_ID = 1440;
    private static final int _TMP_236_ID = 1441;
    private static final int _TMP_237_ID = 1442;
    private static final int _TMP_238_ID = 1443;
    private static final int _TMP_239_ID = 1444;
    private static final int _TMP_240_ID = 1445;
    private static final int _TMP_241_ID = 1446;
    private static final int _TMP_242_ID = 1447;
    private static final int _TMP_243_ID = 1448;
    private static final int _TMP_244_ID = 1449;
    private static final int _TMP_245_ID = 1450;
    private static final int _TMP_246_ID = 1451;
    private static final int _TMP_247_ID = 1452;
    private static final int _TMP_248_ID = 1453;
    private static final int _TMP_249_ID = 1454;
    private static final int _TMP_250_ID = 1455;
    private static final int _TMP_251_ID = 1456;
    private static final int _TMP_252_ID = 1457;
    private static final int _TMP_253_ID = 1458;
    private static final int _TMP_254_ID = 1459;

    public Parser(ParserTokenizer tokenizer, NodeFactory factory, FExprParser fexprParser, ParserErrorCallback errorCb) {
        super(tokenizer, factory, fexprParser, errorCb);
    }

    // file: statements? $
    public SSTNode file_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, FILE_ID)) {
            _res = (SSTNode)cache.getResult(_mark, FILE_ID);
            level--;
            return (SSTNode)_res;
        }
        Token startToken = getAndInitializeToken();
        { // statements? $
            debugMessageln("%d> file[%d-%d]: %s", level, _mark, mark(), "statements? $");
            Object a;
            Token endmarker_var;
            if (
                ((a = _tmp_1_rule()) != null || true)  // statements?
                &&
                (endmarker_var = expect(Token.Kind.ENDMARKER)) != null  // token='ENDMARKER'
            )
            {
                debugMessageln("%d file[%d-%d]: %s succeeded!", level, _mark, mark(), "statements? $");
                Token endToken = getLastNonWhitespaceToken();
                if (endToken == null) {
                    level--;
                    return null;
                }
                _res = factory.createBlock((SSTNode[])a,startToken.startOffset,endToken.endOffset);;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "statements? $");
                cache.putResult(_mark, FILE_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s file[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "statements? $");
        }
        debugMessageln("Fail at %d: file", _mark);
        _res = null;
        cache.putResult(_mark, FILE_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // interactive: statement_newline
    public SSTNode interactive_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, INTERACTIVE_ID)) {
            _res = (SSTNode)cache.getResult(_mark, INTERACTIVE_ID);
            level--;
            return (SSTNode)_res;
        }
        { // statement_newline
            debugMessageln("%d> interactive[%d-%d]: %s", level, _mark, mark(), "statement_newline");
            SSTNode[] a;
            if (
                (a = statement_newline_rule()) != null  // statement_newline
            )
            {
                debugMessageln("%d interactive[%d-%d]: %s succeeded!", level, _mark, mark(), "statement_newline");
                // TODO: node.action: _PyAST_Interactive ( a , p -> arena )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Interactive ( a , p -> arena ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "statement_newline");
                cache.putResult(_mark, INTERACTIVE_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s interactive[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "statement_newline");
        }
        debugMessageln("Fail at %d: interactive", _mark);
        _res = null;
        cache.putResult(_mark, INTERACTIVE_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // eval: expressions NEWLINE* $
    public SSTNode eval_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, EVAL_ID)) {
            _res = (SSTNode)cache.getResult(_mark, EVAL_ID);
            level--;
            return (SSTNode)_res;
        }
        { // expressions NEWLINE* $
            debugMessageln("%d> eval[%d-%d]: %s", level, _mark, mark(), "expressions NEWLINE* $");
            SSTNode[] _loop0_2_var;
            SSTNode a;
            Token endmarker_var;
            if (
                (a = expressions_rule()) != null  // expressions
                &&
                (_loop0_2_var = _loop0_2_rule()) != null  // NEWLINE*
                &&
                (endmarker_var = expect(Token.Kind.ENDMARKER)) != null  // token='ENDMARKER'
            )
            {
                debugMessageln("%d eval[%d-%d]: %s succeeded!", level, _mark, mark(), "expressions NEWLINE* $");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "expressions NEWLINE* $");
                cache.putResult(_mark, EVAL_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s eval[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "expressions NEWLINE* $");
        }
        debugMessageln("Fail at %d: eval", _mark);
        _res = null;
        cache.putResult(_mark, EVAL_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // func_type: '(' type_expressions? ')' '->' expression NEWLINE* $
    public SSTNode func_type_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, FUNC_TYPE_ID)) {
            _res = (SSTNode)cache.getResult(_mark, FUNC_TYPE_ID);
            level--;
            return (SSTNode)_res;
        }
        { // '(' type_expressions? ')' '->' expression NEWLINE* $
            debugMessageln("%d> func_type[%d-%d]: %s", level, _mark, mark(), "'(' type_expressions? ')' '->' expression NEWLINE* $");
            Token _literal;
            Token _literal_1;
            Token _literal_2;
            SSTNode[] _loop0_4_var;
            Object a;
            SSTNode b;
            Token endmarker_var;
            if (
                (_literal = expect(7)) != null  // token='('
                &&
                ((a = _tmp_3_rule()) != null || true)  // type_expressions?
                &&
                (_literal_1 = expect(8)) != null  // token=')'
                &&
                (_literal_2 = expect(51)) != null  // token='->'
                &&
                (b = expression_rule()) != null  // expression
                &&
                (_loop0_4_var = _loop0_4_rule()) != null  // NEWLINE*
                &&
                (endmarker_var = expect(Token.Kind.ENDMARKER)) != null  // token='ENDMARKER'
            )
            {
                debugMessageln("%d func_type[%d-%d]: %s succeeded!", level, _mark, mark(), "'(' type_expressions? ')' '->' expression NEWLINE* $");
                // TODO: node.action: _PyAST_FunctionType ( a , b , p -> arena )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_FunctionType ( a , b , p -> arena ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'(' type_expressions? ')' '->' expression NEWLINE* $");
                cache.putResult(_mark, FUNC_TYPE_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s func_type[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'(' type_expressions? ')' '->' expression NEWLINE* $");
        }
        debugMessageln("Fail at %d: func_type", _mark);
        _res = null;
        cache.putResult(_mark, FUNC_TYPE_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // fstring: star_expressions
    public SSTNode fstring_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, FSTRING_ID)) {
            _res = (SSTNode)cache.getResult(_mark, FSTRING_ID);
            level--;
            return (SSTNode)_res;
        }
        { // star_expressions
            debugMessageln("%d> fstring[%d-%d]: %s", level, _mark, mark(), "star_expressions");
            SSTNode star_expressions_var;
            if (
                (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            )
            {
                debugMessageln("%d fstring[%d-%d]: %s succeeded!", level, _mark, mark(), "star_expressions");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "star_expressions");
                _res = star_expressions_var;
                cache.putResult(_mark, FSTRING_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s fstring[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_expressions");
        }
        debugMessageln("Fail at %d: fstring", _mark);
        _res = null;
        cache.putResult(_mark, FSTRING_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // type_expressions:
    //     | ','.expression+ ',' '*' expression ',' '**' expression
    //     | ','.expression+ ',' '*' expression
    //     | ','.expression+ ',' '**' expression
    //     | '*' expression ',' '**' expression
    //     | '*' expression
    //     | '**' expression
    //     | ','.expression+
    public SSTNode[] type_expressions_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, TYPE_EXPRESSIONS_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, TYPE_EXPRESSIONS_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // ','.expression+ ',' '*' expression ',' '**' expression
            debugMessageln("%d> type_expressions[%d-%d]: %s", level, _mark, mark(), "','.expression+ ',' '*' expression ',' '**' expression");
            Token _literal;
            Token _literal_1;
            Token _literal_2;
            Token _literal_3;
            SSTNode[] a;
            SSTNode b;
            SSTNode c;
            if (
                (a = _gather_5_rule()) != null  // ','.expression+
                &&
                (_literal = expect(12)) != null  // token=','
                &&
                (_literal_1 = expect(16)) != null  // token='*'
                &&
                (b = expression_rule()) != null  // expression
                &&
                (_literal_2 = expect(12)) != null  // token=','
                &&
                (_literal_3 = expect(35)) != null  // token='**'
                &&
                (c = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d type_expressions[%d-%d]: %s succeeded!", level, _mark, mark(), "','.expression+ ',' '*' expression ',' '**' expression");
                _res = this.appendToEnd(this.appendToEnd(a,b),c);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "','.expression+ ',' '*' expression ',' '**' expression");
                cache.putResult(_mark, TYPE_EXPRESSIONS_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s type_expressions[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','.expression+ ',' '*' expression ',' '**' expression");
        }
        { // ','.expression+ ',' '*' expression
            debugMessageln("%d> type_expressions[%d-%d]: %s", level, _mark, mark(), "','.expression+ ',' '*' expression");
            Token _literal;
            Token _literal_1;
            SSTNode[] a;
            SSTNode b;
            if (
                (a = _gather_7_rule()) != null  // ','.expression+
                &&
                (_literal = expect(12)) != null  // token=','
                &&
                (_literal_1 = expect(16)) != null  // token='*'
                &&
                (b = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d type_expressions[%d-%d]: %s succeeded!", level, _mark, mark(), "','.expression+ ',' '*' expression");
                _res = this.appendToEnd(a,b);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "','.expression+ ',' '*' expression");
                cache.putResult(_mark, TYPE_EXPRESSIONS_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s type_expressions[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','.expression+ ',' '*' expression");
        }
        { // ','.expression+ ',' '**' expression
            debugMessageln("%d> type_expressions[%d-%d]: %s", level, _mark, mark(), "','.expression+ ',' '**' expression");
            Token _literal;
            Token _literal_1;
            SSTNode[] a;
            SSTNode b;
            if (
                (a = _gather_9_rule()) != null  // ','.expression+
                &&
                (_literal = expect(12)) != null  // token=','
                &&
                (_literal_1 = expect(35)) != null  // token='**'
                &&
                (b = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d type_expressions[%d-%d]: %s succeeded!", level, _mark, mark(), "','.expression+ ',' '**' expression");
                _res = this.appendToEnd(a,b);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "','.expression+ ',' '**' expression");
                cache.putResult(_mark, TYPE_EXPRESSIONS_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s type_expressions[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','.expression+ ',' '**' expression");
        }
        { // '*' expression ',' '**' expression
            debugMessageln("%d> type_expressions[%d-%d]: %s", level, _mark, mark(), "'*' expression ',' '**' expression");
            Token _literal;
            Token _literal_1;
            Token _literal_2;
            SSTNode a;
            SSTNode b;
            if (
                (_literal = expect(16)) != null  // token='*'
                &&
                (a = expression_rule()) != null  // expression
                &&
                (_literal_1 = expect(12)) != null  // token=','
                &&
                (_literal_2 = expect(35)) != null  // token='**'
                &&
                (b = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d type_expressions[%d-%d]: %s succeeded!", level, _mark, mark(), "'*' expression ',' '**' expression");
                _res = this.appendToEnd(this.singletonSequence(a),b);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'*' expression ',' '**' expression");
                cache.putResult(_mark, TYPE_EXPRESSIONS_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s type_expressions[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'*' expression ',' '**' expression");
        }
        { // '*' expression
            debugMessageln("%d> type_expressions[%d-%d]: %s", level, _mark, mark(), "'*' expression");
            Token _literal;
            SSTNode a;
            if (
                (_literal = expect(16)) != null  // token='*'
                &&
                (a = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d type_expressions[%d-%d]: %s succeeded!", level, _mark, mark(), "'*' expression");
                _res = this.singletonSequence(a);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'*' expression");
                cache.putResult(_mark, TYPE_EXPRESSIONS_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s type_expressions[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'*' expression");
        }
        { // '**' expression
            debugMessageln("%d> type_expressions[%d-%d]: %s", level, _mark, mark(), "'**' expression");
            Token _literal;
            SSTNode a;
            if (
                (_literal = expect(35)) != null  // token='**'
                &&
                (a = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d type_expressions[%d-%d]: %s succeeded!", level, _mark, mark(), "'**' expression");
                _res = this.singletonSequence(a);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'**' expression");
                cache.putResult(_mark, TYPE_EXPRESSIONS_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s type_expressions[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'**' expression");
        }
        { // ','.expression+
            debugMessageln("%d> type_expressions[%d-%d]: %s", level, _mark, mark(), "','.expression+");
            SSTNode[] a;
            if (
                (a = (SSTNode[])_gather_11_rule()) != null  // ','.expression+
            )
            {
                debugMessageln("%d type_expressions[%d-%d]: %s succeeded!", level, _mark, mark(), "','.expression+");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "','.expression+");
                cache.putResult(_mark, TYPE_EXPRESSIONS_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s type_expressions[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','.expression+");
        }
        debugMessageln("Fail at %d: type_expressions", _mark);
        _res = null;
        cache.putResult(_mark, TYPE_EXPRESSIONS_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // statements: statement+
    public SSTNode[] statements_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, STATEMENTS_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, STATEMENTS_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // statement+
            debugMessageln("%d> statements[%d-%d]: %s", level, _mark, mark(), "statement+");
            SSTNode[] a;
            if (
                (a = _loop1_13_rule()) != null  // statement+
            )
            {
                debugMessageln("%d statements[%d-%d]: %s succeeded!", level, _mark, mark(), "statement+");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "statement+");
                cache.putResult(_mark, STATEMENTS_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s statements[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "statement+");
        }
        debugMessageln("Fail at %d: statements", _mark);
        _res = null;
        cache.putResult(_mark, STATEMENTS_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // statement: compound_stmt | simple_stmts
    public SSTNode[] statement_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, STATEMENT_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, STATEMENT_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // compound_stmt
            debugMessageln("%d> statement[%d-%d]: %s", level, _mark, mark(), "compound_stmt");
            SSTNode a;
            if (
                (a = compound_stmt_rule()) != null  // compound_stmt
            )
            {
                debugMessageln("%d statement[%d-%d]: %s succeeded!", level, _mark, mark(), "compound_stmt");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "compound_stmt");
                cache.putResult(_mark, STATEMENT_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s statement[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "compound_stmt");
        }
        { // simple_stmts
            debugMessageln("%d> statement[%d-%d]: %s", level, _mark, mark(), "simple_stmts");
            SSTNode[] a;
            if (
                (a = (SSTNode[])simple_stmts_rule()) != null  // simple_stmts
            )
            {
                debugMessageln("%d statement[%d-%d]: %s succeeded!", level, _mark, mark(), "simple_stmts");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "simple_stmts");
                cache.putResult(_mark, STATEMENT_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s statement[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "simple_stmts");
        }
        debugMessageln("Fail at %d: statement", _mark);
        _res = null;
        cache.putResult(_mark, STATEMENT_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // statement_newline: compound_stmt NEWLINE | simple_stmts | NEWLINE | $
    public SSTNode[] statement_newline_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, STATEMENT_NEWLINE_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, STATEMENT_NEWLINE_ID);
            level--;
            return (SSTNode[])_res;
        }
        Token startToken = getAndInitializeToken();
        { // compound_stmt NEWLINE
            debugMessageln("%d> statement_newline[%d-%d]: %s", level, _mark, mark(), "compound_stmt NEWLINE");
            SSTNode a;
            Token newline_var;
            if (
                (a = compound_stmt_rule()) != null  // compound_stmt
                &&
                (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            )
            {
                debugMessageln("%d statement_newline[%d-%d]: %s succeeded!", level, _mark, mark(), "compound_stmt NEWLINE");
                _res = this.singletonSequence(a);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "compound_stmt NEWLINE");
                cache.putResult(_mark, STATEMENT_NEWLINE_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s statement_newline[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "compound_stmt NEWLINE");
        }
        { // simple_stmts
            debugMessageln("%d> statement_newline[%d-%d]: %s", level, _mark, mark(), "simple_stmts");
            SSTNode[] simple_stmts_var;
            if (
                (simple_stmts_var = simple_stmts_rule()) != null  // simple_stmts
            )
            {
                debugMessageln("%d statement_newline[%d-%d]: %s succeeded!", level, _mark, mark(), "simple_stmts");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "simple_stmts");
                _res = simple_stmts_var;
                cache.putResult(_mark, STATEMENT_NEWLINE_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s statement_newline[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "simple_stmts");
        }
        { // NEWLINE
            debugMessageln("%d> statement_newline[%d-%d]: %s", level, _mark, mark(), "NEWLINE");
            Token newline_var;
            if (
                (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            )
            {
                debugMessageln("%d statement_newline[%d-%d]: %s succeeded!", level, _mark, mark(), "NEWLINE");
                Token endToken = getLastNonWhitespaceToken();
                if (endToken == null) {
                    level--;
                    return null;
                }
                _res = this.singletonSequence(factory.createPass(startToken.startOffset,endToken.endOffset));
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "NEWLINE");
                cache.putResult(_mark, STATEMENT_NEWLINE_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s statement_newline[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "NEWLINE");
        }
        { // $
            debugMessageln("%d> statement_newline[%d-%d]: %s", level, _mark, mark(), "$");
            Token endmarker_var;
            if (
                (endmarker_var = expect(Token.Kind.ENDMARKER)) != null  // token='ENDMARKER'
            )
            {
                debugMessageln("%d statement_newline[%d-%d]: %s succeeded!", level, _mark, mark(), "$");
                // TODO: node.action: _PyPegen_interactive_exit ( p )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_interactive_exit ( p ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "$");
                cache.putResult(_mark, STATEMENT_NEWLINE_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s statement_newline[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "$");
        }
        debugMessageln("Fail at %d: statement_newline", _mark);
        _res = null;
        cache.putResult(_mark, STATEMENT_NEWLINE_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // simple_stmts: simple_stmt !';' NEWLINE | ';'.simple_stmt+ ';'? NEWLINE
    public SSTNode[] simple_stmts_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, SIMPLE_STMTS_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, SIMPLE_STMTS_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // simple_stmt !';' NEWLINE
            debugMessageln("%d> simple_stmts[%d-%d]: %s", level, _mark, mark(), "simple_stmt !';' NEWLINE");
            SSTNode a;
            Token newline_var;
            if (
                (a = simple_stmt_rule()) != null  // simple_stmt
                &&
                genLookahead_expect(false, 13)  // token=';'
                &&
                (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            )
            {
                debugMessageln("%d simple_stmts[%d-%d]: %s succeeded!", level, _mark, mark(), "simple_stmt !';' NEWLINE");
                _res = this.singletonSequence(a);;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "simple_stmt !';' NEWLINE");
                cache.putResult(_mark, SIMPLE_STMTS_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s simple_stmts[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "simple_stmt !';' NEWLINE");
        }
        { // ';'.simple_stmt+ ';'? NEWLINE
            debugMessageln("%d> simple_stmts[%d-%d]: %s", level, _mark, mark(), "';'.simple_stmt+ ';'? NEWLINE");
            Object _opt_var;
            SSTNode[] a;
            Token newline_var;
            if (
                (a = (SSTNode[])_gather_14_rule()) != null  // ';'.simple_stmt+
                &&
                ((_opt_var = _tmp_16_rule()) != null || true)  // ';'?
                &&
                (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            )
            {
                debugMessageln("%d simple_stmts[%d-%d]: %s succeeded!", level, _mark, mark(), "';'.simple_stmt+ ';'? NEWLINE");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "';'.simple_stmt+ ';'? NEWLINE");
                cache.putResult(_mark, SIMPLE_STMTS_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s simple_stmts[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "';'.simple_stmt+ ';'? NEWLINE");
        }
        debugMessageln("Fail at %d: simple_stmts", _mark);
        _res = null;
        cache.putResult(_mark, SIMPLE_STMTS_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // simple_stmt:
    //     | assignment
    //     | star_expressions
    //     | &'return' return_stmt
    //     | &('import' | 'from') import_stmt
    //     | &'raise' raise_stmt
    //     | 'pass'
    //     | &'del' del_stmt
    //     | &'yield' yield_stmt
    //     | &'assert' assert_stmt
    //     | 'break'
    //     | 'continue'
    //     | &'global' global_stmt
    //     | &'nonlocal' nonlocal_stmt
    public SSTNode simple_stmt_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, SIMPLE_STMT_ID)) {
            _res = (SSTNode)cache.getResult(_mark, SIMPLE_STMT_ID);
            level--;
            return (SSTNode)_res;
        }
        Token startToken = getAndInitializeToken();
        { // assignment
            debugMessageln("%d> simple_stmt[%d-%d]: %s", level, _mark, mark(), "assignment");
            SSTNode assignment_var;
            if (
                (assignment_var = assignment_rule()) != null  // assignment
            )
            {
                debugMessageln("%d simple_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "assignment");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "assignment");
                _res = assignment_var;
                cache.putResult(_mark, SIMPLE_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s simple_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "assignment");
        }
        { // star_expressions
            debugMessageln("%d> simple_stmt[%d-%d]: %s", level, _mark, mark(), "star_expressions");
            SSTNode e;
            if (
                (e = star_expressions_rule()) != null  // star_expressions
            )
            {
                debugMessageln("%d simple_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "star_expressions");
                _res = e;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "star_expressions");
                cache.putResult(_mark, SIMPLE_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s simple_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_expressions");
        }
        { // &'return' return_stmt
            debugMessageln("%d> simple_stmt[%d-%d]: %s", level, _mark, mark(), "&'return' return_stmt");
            SSTNode return_stmt_var;
            if (
                genLookahead_expect(true, 500)  // token='return'
                &&
                (return_stmt_var = return_stmt_rule()) != null  // return_stmt
            )
            {
                debugMessageln("%d simple_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "&'return' return_stmt");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "&'return' return_stmt");
                _res = return_stmt_var;
                cache.putResult(_mark, SIMPLE_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s simple_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "&'return' return_stmt");
        }
        { // &('import' | 'from') import_stmt
            debugMessageln("%d> simple_stmt[%d-%d]: %s", level, _mark, mark(), "&('import' | 'from') import_stmt");
            SSTNode import_stmt_var;
            if (
                genLookahead__tmp_17_rule(true)
                &&
                (import_stmt_var = import_stmt_rule()) != null  // import_stmt
            )
            {
                debugMessageln("%d simple_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "&('import' | 'from') import_stmt");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "&('import' | 'from') import_stmt");
                _res = import_stmt_var;
                cache.putResult(_mark, SIMPLE_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s simple_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "&('import' | 'from') import_stmt");
        }
        { // &'raise' raise_stmt
            debugMessageln("%d> simple_stmt[%d-%d]: %s", level, _mark, mark(), "&'raise' raise_stmt");
            SSTNode raise_stmt_var;
            if (
                genLookahead_expect(true, 501)  // token='raise'
                &&
                (raise_stmt_var = raise_stmt_rule()) != null  // raise_stmt
            )
            {
                debugMessageln("%d simple_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "&'raise' raise_stmt");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "&'raise' raise_stmt");
                _res = raise_stmt_var;
                cache.putResult(_mark, SIMPLE_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s simple_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "&'raise' raise_stmt");
        }
        { // 'pass'
            debugMessageln("%d> simple_stmt[%d-%d]: %s", level, _mark, mark(), "'pass'");
            Token _keyword;
            if (
                (_keyword = expect(502)) != null  // token='pass'
            )
            {
                debugMessageln("%d simple_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "'pass'");
                Token endToken = getLastNonWhitespaceToken();
                if (endToken == null) {
                    level--;
                    return null;
                }
                _res = factory.createPass(startToken.startOffset,endToken.endOffset);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'pass'");
                cache.putResult(_mark, SIMPLE_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s simple_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'pass'");
        }
        { // &'del' del_stmt
            debugMessageln("%d> simple_stmt[%d-%d]: %s", level, _mark, mark(), "&'del' del_stmt");
            SSTNode del_stmt_var;
            if (
                genLookahead_expect(true, 503)  // token='del'
                &&
                (del_stmt_var = del_stmt_rule()) != null  // del_stmt
            )
            {
                debugMessageln("%d simple_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "&'del' del_stmt");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "&'del' del_stmt");
                _res = del_stmt_var;
                cache.putResult(_mark, SIMPLE_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s simple_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "&'del' del_stmt");
        }
        { // &'yield' yield_stmt
            debugMessageln("%d> simple_stmt[%d-%d]: %s", level, _mark, mark(), "&'yield' yield_stmt");
            SSTNode yield_stmt_var;
            if (
                genLookahead_expect(true, 504)  // token='yield'
                &&
                (yield_stmt_var = yield_stmt_rule()) != null  // yield_stmt
            )
            {
                debugMessageln("%d simple_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "&'yield' yield_stmt");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "&'yield' yield_stmt");
                _res = yield_stmt_var;
                cache.putResult(_mark, SIMPLE_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s simple_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "&'yield' yield_stmt");
        }
        { // &'assert' assert_stmt
            debugMessageln("%d> simple_stmt[%d-%d]: %s", level, _mark, mark(), "&'assert' assert_stmt");
            SSTNode assert_stmt_var;
            if (
                genLookahead_expect(true, 505)  // token='assert'
                &&
                (assert_stmt_var = assert_stmt_rule()) != null  // assert_stmt
            )
            {
                debugMessageln("%d simple_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "&'assert' assert_stmt");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "&'assert' assert_stmt");
                _res = assert_stmt_var;
                cache.putResult(_mark, SIMPLE_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s simple_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "&'assert' assert_stmt");
        }
        { // 'break'
            debugMessageln("%d> simple_stmt[%d-%d]: %s", level, _mark, mark(), "'break'");
            Token _keyword;
            if (
                (_keyword = expect(506)) != null  // token='break'
            )
            {
                debugMessageln("%d simple_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "'break'");
                Token endToken = getLastNonWhitespaceToken();
                if (endToken == null) {
                    level--;
                    return null;
                }
                _res = factory.createBreak(startToken.startOffset,endToken.endOffset);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'break'");
                cache.putResult(_mark, SIMPLE_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s simple_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'break'");
        }
        { // 'continue'
            debugMessageln("%d> simple_stmt[%d-%d]: %s", level, _mark, mark(), "'continue'");
            Token _keyword;
            if (
                (_keyword = expect(507)) != null  // token='continue'
            )
            {
                debugMessageln("%d simple_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "'continue'");
                Token endToken = getLastNonWhitespaceToken();
                if (endToken == null) {
                    level--;
                    return null;
                }
                _res = factory.createContinue(startToken.startOffset,endToken.endOffset);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'continue'");
                cache.putResult(_mark, SIMPLE_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s simple_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'continue'");
        }
        { // &'global' global_stmt
            debugMessageln("%d> simple_stmt[%d-%d]: %s", level, _mark, mark(), "&'global' global_stmt");
            SSTNode global_stmt_var;
            if (
                genLookahead_expect(true, 508)  // token='global'
                &&
                (global_stmt_var = global_stmt_rule()) != null  // global_stmt
            )
            {
                debugMessageln("%d simple_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "&'global' global_stmt");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "&'global' global_stmt");
                _res = global_stmt_var;
                cache.putResult(_mark, SIMPLE_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s simple_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "&'global' global_stmt");
        }
        { // &'nonlocal' nonlocal_stmt
            debugMessageln("%d> simple_stmt[%d-%d]: %s", level, _mark, mark(), "&'nonlocal' nonlocal_stmt");
            SSTNode nonlocal_stmt_var;
            if (
                genLookahead_expect(true, 509)  // token='nonlocal'
                &&
                (nonlocal_stmt_var = nonlocal_stmt_rule()) != null  // nonlocal_stmt
            )
            {
                debugMessageln("%d simple_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "&'nonlocal' nonlocal_stmt");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "&'nonlocal' nonlocal_stmt");
                _res = nonlocal_stmt_var;
                cache.putResult(_mark, SIMPLE_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s simple_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "&'nonlocal' nonlocal_stmt");
        }
        debugMessageln("Fail at %d: simple_stmt", _mark);
        _res = null;
        cache.putResult(_mark, SIMPLE_STMT_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // compound_stmt:
    //     | &('def' | '@' | ASYNC) function_def
    //     | &'if' if_stmt
    //     | &('class' | '@') class_def
    //     | &('with' | ASYNC) with_stmt
    //     | &('for' | ASYNC) for_stmt
    //     | &'try' try_stmt
    //     | &'while' while_stmt
    //     | match_stmt
    public SSTNode compound_stmt_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, COMPOUND_STMT_ID)) {
            _res = (SSTNode)cache.getResult(_mark, COMPOUND_STMT_ID);
            level--;
            return (SSTNode)_res;
        }
        { // &('def' | '@' | ASYNC) function_def
            debugMessageln("%d> compound_stmt[%d-%d]: %s", level, _mark, mark(), "&('def' | '@' | ASYNC) function_def");
            SSTNode function_def_var;
            if (
                genLookahead__tmp_18_rule(true)
                &&
                (function_def_var = function_def_rule()) != null  // function_def
            )
            {
                debugMessageln("%d compound_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "&('def' | '@' | ASYNC) function_def");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "&('def' | '@' | ASYNC) function_def");
                _res = function_def_var;
                cache.putResult(_mark, COMPOUND_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s compound_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "&('def' | '@' | ASYNC) function_def");
        }
        { // &'if' if_stmt
            debugMessageln("%d> compound_stmt[%d-%d]: %s", level, _mark, mark(), "&'if' if_stmt");
            SSTNode if_stmt_var;
            if (
                genLookahead_expect(true, 510)  // token='if'
                &&
                (if_stmt_var = if_stmt_rule()) != null  // if_stmt
            )
            {
                debugMessageln("%d compound_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "&'if' if_stmt");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "&'if' if_stmt");
                _res = if_stmt_var;
                cache.putResult(_mark, COMPOUND_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s compound_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "&'if' if_stmt");
        }
        { // &('class' | '@') class_def
            debugMessageln("%d> compound_stmt[%d-%d]: %s", level, _mark, mark(), "&('class' | '@') class_def");
            SSTNode class_def_var;
            if (
                genLookahead__tmp_19_rule(true)
                &&
                (class_def_var = class_def_rule()) != null  // class_def
            )
            {
                debugMessageln("%d compound_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "&('class' | '@') class_def");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "&('class' | '@') class_def");
                _res = class_def_var;
                cache.putResult(_mark, COMPOUND_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s compound_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "&('class' | '@') class_def");
        }
        { // &('with' | ASYNC) with_stmt
            debugMessageln("%d> compound_stmt[%d-%d]: %s", level, _mark, mark(), "&('with' | ASYNC) with_stmt");
            SSTNode with_stmt_var;
            if (
                genLookahead__tmp_20_rule(true)
                &&
                (with_stmt_var = with_stmt_rule()) != null  // with_stmt
            )
            {
                debugMessageln("%d compound_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "&('with' | ASYNC) with_stmt");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "&('with' | ASYNC) with_stmt");
                _res = with_stmt_var;
                cache.putResult(_mark, COMPOUND_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s compound_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "&('with' | ASYNC) with_stmt");
        }
        { // &('for' | ASYNC) for_stmt
            debugMessageln("%d> compound_stmt[%d-%d]: %s", level, _mark, mark(), "&('for' | ASYNC) for_stmt");
            SSTNode for_stmt_var;
            if (
                genLookahead__tmp_21_rule(true)
                &&
                (for_stmt_var = for_stmt_rule()) != null  // for_stmt
            )
            {
                debugMessageln("%d compound_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "&('for' | ASYNC) for_stmt");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "&('for' | ASYNC) for_stmt");
                _res = for_stmt_var;
                cache.putResult(_mark, COMPOUND_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s compound_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "&('for' | ASYNC) for_stmt");
        }
        { // &'try' try_stmt
            debugMessageln("%d> compound_stmt[%d-%d]: %s", level, _mark, mark(), "&'try' try_stmt");
            SSTNode try_stmt_var;
            if (
                genLookahead_expect(true, 511)  // token='try'
                &&
                (try_stmt_var = try_stmt_rule()) != null  // try_stmt
            )
            {
                debugMessageln("%d compound_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "&'try' try_stmt");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "&'try' try_stmt");
                _res = try_stmt_var;
                cache.putResult(_mark, COMPOUND_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s compound_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "&'try' try_stmt");
        }
        { // &'while' while_stmt
            debugMessageln("%d> compound_stmt[%d-%d]: %s", level, _mark, mark(), "&'while' while_stmt");
            SSTNode while_stmt_var;
            if (
                genLookahead_expect(true, 512)  // token='while'
                &&
                (while_stmt_var = while_stmt_rule()) != null  // while_stmt
            )
            {
                debugMessageln("%d compound_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "&'while' while_stmt");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "&'while' while_stmt");
                _res = while_stmt_var;
                cache.putResult(_mark, COMPOUND_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s compound_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "&'while' while_stmt");
        }
        { // match_stmt
            debugMessageln("%d> compound_stmt[%d-%d]: %s", level, _mark, mark(), "match_stmt");
            SSTNode match_stmt_var;
            if (
                (match_stmt_var = match_stmt_rule()) != null  // match_stmt
            )
            {
                debugMessageln("%d compound_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "match_stmt");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "match_stmt");
                _res = match_stmt_var;
                cache.putResult(_mark, COMPOUND_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s compound_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "match_stmt");
        }
        debugMessageln("Fail at %d: compound_stmt", _mark);
        _res = null;
        cache.putResult(_mark, COMPOUND_STMT_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // assignment:
    //     | NAME ':' expression ['=' annotated_rhs]
    //     | ('(' single_target ')' | single_subscript_attribute_target) ':' expression ['=' annotated_rhs]
    //     | ((star_targets '='))+ (yield_expr | star_expressions) !'=' TYPE_COMMENT?
    //     | single_target augassign ~ (yield_expr | star_expressions)
    //     | invalid_assignment
    public SSTNode assignment_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, ASSIGNMENT_ID)) {
            _res = (SSTNode)cache.getResult(_mark, ASSIGNMENT_ID);
            level--;
            return (SSTNode)_res;
        }
        Token startToken = getAndInitializeToken();
        { // NAME ':' expression ['=' annotated_rhs]
            debugMessageln("%d> assignment[%d-%d]: %s", level, _mark, mark(), "NAME ':' expression ['=' annotated_rhs]");
            Token _literal;
            SSTNode a;
            SSTNode b;
            Object c;
            if (
                (a = name_token()) != null  // NAME
                &&
                (_literal = expect(11)) != null  // token=':'
                &&
                (b = expression_rule()) != null  // expression
                &&
                ((c = _tmp_22_rule()) != null || true)  // ['=' annotated_rhs]
            )
            {
                debugMessageln("%d assignment[%d-%d]: %s succeeded!", level, _mark, mark(), "NAME ':' expression ['=' annotated_rhs]");
                Token endToken = getLastNonWhitespaceToken();
                if (endToken == null) {
                    level--;
                    return null;
                }
                _res = factory.createAnnAssignment(factory.createAnnotation(a,b,a.getStartOffset(),b.getEndOffset()),(SSTNode)c,startToken.startOffset,endToken.endOffset);//CHECK_VERSION(//stmt_ty,//6,//"Variableannotationsyntaxis",//_PyAST_AnnAssign(CHECK(expr_ty,_PyPegen_set_expr_context(p,a,Store)),b,c,1,EXTRA)//);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "NAME ':' expression ['=' annotated_rhs]");
                cache.putResult(_mark, ASSIGNMENT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s assignment[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "NAME ':' expression ['=' annotated_rhs]");
        }
        { // ('(' single_target ')' | single_subscript_attribute_target) ':' expression ['=' annotated_rhs]
            debugMessageln("%d> assignment[%d-%d]: %s", level, _mark, mark(), "('(' single_target ')' | single_subscript_attribute_target) ':' expression ['=' annotated_rhs]");
            Token _literal;
            Object a;
            SSTNode b;
            Object c;
            if (
                (a = _tmp_23_rule()) != null  // '(' single_target ')' | single_subscript_attribute_target
                &&
                (_literal = expect(11)) != null  // token=':'
                &&
                (b = expression_rule()) != null  // expression
                &&
                ((c = _tmp_24_rule()) != null || true)  // ['=' annotated_rhs]
            )
            {
                debugMessageln("%d assignment[%d-%d]: %s succeeded!", level, _mark, mark(), "('(' single_target ')' | single_subscript_attribute_target) ':' expression ['=' annotated_rhs]");
                // TODO: node.action: CHECK_VERSION ( stmt_ty , 6 , "Variable annotations syntax is" , _PyAST_AnnAssign ( a , b , c , 0 , EXTRA ) )
                debugMessageln("[33;5;7m!!! TODO: Convert CHECK_VERSION ( stmt_ty , 6 , 'Variable annotations syntax is' , _PyAST_AnnAssign ( a , b , c , 0 , EXTRA ) ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "('(' single_target ')' | single_subscript_attribute_target) ':' expression ['=' annotated_rhs]");
                cache.putResult(_mark, ASSIGNMENT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s assignment[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "('(' single_target ')' | single_subscript_attribute_target) ':' expression ['=' annotated_rhs]");
        }
        { // ((star_targets '='))+ (yield_expr | star_expressions) !'=' TYPE_COMMENT?
            debugMessageln("%d> assignment[%d-%d]: %s", level, _mark, mark(), "((star_targets '='))+ (yield_expr | star_expressions) !'=' TYPE_COMMENT?");
            SSTNode[] a;
            Object b;
            Object tc;
            if (
                (a = (SSTNode[])_loop1_25_rule()) != null  // ((star_targets '='))+
                &&
                (b = _tmp_26_rule()) != null  // yield_expr | star_expressions
                &&
                genLookahead_expect(false, 22)  // token='='
                &&
                ((tc = _tmp_27_rule()) != null || true)  // TYPE_COMMENT?
            )
            {
                debugMessageln("%d assignment[%d-%d]: %s succeeded!", level, _mark, mark(), "((star_targets '='))+ (yield_expr | star_expressions) !'=' TYPE_COMMENT?");
                // TODO: node.action: _PyAST_Assign ( a , b , NEW_TYPE_COMMENT ( p , tc ) , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Assign ( a , b , NEW_TYPE_COMMENT ( p , tc ) , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "((star_targets '='))+ (yield_expr | star_expressions) !'=' TYPE_COMMENT?");
                cache.putResult(_mark, ASSIGNMENT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s assignment[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "((star_targets '='))+ (yield_expr | star_expressions) !'=' TYPE_COMMENT?");
        }
        { // single_target augassign ~ (yield_expr | star_expressions)
            debugMessageln("%d> assignment[%d-%d]: %s", level, _mark, mark(), "single_target augassign ~ (yield_expr | star_expressions)");
            int _cut_var = 0;
            SSTNode a;
            SSTNode[] b;
            Object c;
            if (
                (a = single_target_rule()) != null  // single_target
                &&
                (b = augassign_rule()) != null  // augassign
                &&
                (_cut_var = 1) != 0
                &&
                (c = _tmp_28_rule()) != null  // yield_expr | star_expressions
            )
            {
                debugMessageln("%d assignment[%d-%d]: %s succeeded!", level, _mark, mark(), "single_target augassign ~ (yield_expr | star_expressions)");
                // TODO: node.action: _PyAST_AugAssign ( a , b -> kind , c , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_AugAssign ( a , b -> kind , c , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "single_target augassign ~ (yield_expr | star_expressions)");
                cache.putResult(_mark, ASSIGNMENT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s assignment[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "single_target augassign ~ (yield_expr | star_expressions)");
            if (_cut_var != 0) {
                level--;
                return null;
            }
        }
        if (callInvalidRules) { // invalid_assignment
            debugMessageln("%d> assignment[%d-%d]: %s", level, _mark, mark(), "invalid_assignment");
            Object invalid_assignment_var;
            if (
                (invalid_assignment_var = invalid_assignment_rule()) != null  // invalid_assignment
            )
            {
                debugMessageln("%d assignment[%d-%d]: %s succeeded!", level, _mark, mark(), "invalid_assignment");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "invalid_assignment");
                _res = invalid_assignment_var;
                cache.putResult(_mark, ASSIGNMENT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s assignment[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "invalid_assignment");
        }
        debugMessageln("Fail at %d: assignment", _mark);
        _res = null;
        cache.putResult(_mark, ASSIGNMENT_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // augassign:
    //     | '+='
    //     | '-='
    //     | '*='
    //     | '@='
    //     | '/='
    //     | '%='
    //     | '&='
    //     | '|='
    //     | '^='
    //     | '<<='
    //     | '>>='
    //     | '**='
    //     | '//='
    public SSTNode[] augassign_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, AUGASSIGN_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, AUGASSIGN_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // '+='
            debugMessageln("%d> augassign[%d-%d]: %s", level, _mark, mark(), "'+='");
            Token _literal;
            if (
                (_literal = expect(36)) != null  // token='+='
            )
            {
                debugMessageln("%d augassign[%d-%d]: %s succeeded!", level, _mark, mark(), "'+='");
                // TODO: node.action: _PyPegen_augoperator ( p , Add )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_augoperator ( p , Add ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'+='");
                cache.putResult(_mark, AUGASSIGN_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s augassign[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'+='");
        }
        { // '-='
            debugMessageln("%d> augassign[%d-%d]: %s", level, _mark, mark(), "'-='");
            Token _literal;
            if (
                (_literal = expect(37)) != null  // token='-='
            )
            {
                debugMessageln("%d augassign[%d-%d]: %s succeeded!", level, _mark, mark(), "'-='");
                // TODO: node.action: _PyPegen_augoperator ( p , Sub )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_augoperator ( p , Sub ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'-='");
                cache.putResult(_mark, AUGASSIGN_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s augassign[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'-='");
        }
        { // '*='
            debugMessageln("%d> augassign[%d-%d]: %s", level, _mark, mark(), "'*='");
            Token _literal;
            if (
                (_literal = expect(38)) != null  // token='*='
            )
            {
                debugMessageln("%d augassign[%d-%d]: %s succeeded!", level, _mark, mark(), "'*='");
                // TODO: node.action: _PyPegen_augoperator ( p , Mult )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_augoperator ( p , Mult ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'*='");
                cache.putResult(_mark, AUGASSIGN_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s augassign[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'*='");
        }
        { // '@='
            debugMessageln("%d> augassign[%d-%d]: %s", level, _mark, mark(), "'@='");
            Token _literal;
            if (
                (_literal = expect(50)) != null  // token='@='
            )
            {
                debugMessageln("%d augassign[%d-%d]: %s succeeded!", level, _mark, mark(), "'@='");
                // TODO: node.action: CHECK_VERSION ( AugOperator * , 5 , "The '@' operator is" , _PyPegen_augoperator ( p , MatMult ) )
                debugMessageln("[33;5;7m!!! TODO: Convert CHECK_VERSION ( AugOperator * , 5 , 'The '@' operator is' , _PyPegen_augoperator ( p , MatMult ) ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'@='");
                cache.putResult(_mark, AUGASSIGN_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s augassign[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'@='");
        }
        { // '/='
            debugMessageln("%d> augassign[%d-%d]: %s", level, _mark, mark(), "'/='");
            Token _literal;
            if (
                (_literal = expect(39)) != null  // token='/='
            )
            {
                debugMessageln("%d augassign[%d-%d]: %s succeeded!", level, _mark, mark(), "'/='");
                // TODO: node.action: _PyPegen_augoperator ( p , Div )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_augoperator ( p , Div ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'/='");
                cache.putResult(_mark, AUGASSIGN_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s augassign[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'/='");
        }
        { // '%='
            debugMessageln("%d> augassign[%d-%d]: %s", level, _mark, mark(), "'%='");
            Token _literal;
            if (
                (_literal = expect(40)) != null  // token='%='
            )
            {
                debugMessageln("%d augassign[%d-%d]: %s succeeded!", level, _mark, mark(), "'%='");
                // TODO: node.action: _PyPegen_augoperator ( p , Mod )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_augoperator ( p , Mod ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'%='");
                cache.putResult(_mark, AUGASSIGN_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s augassign[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'%='");
        }
        { // '&='
            debugMessageln("%d> augassign[%d-%d]: %s", level, _mark, mark(), "'&='");
            Token _literal;
            if (
                (_literal = expect(41)) != null  // token='&='
            )
            {
                debugMessageln("%d augassign[%d-%d]: %s succeeded!", level, _mark, mark(), "'&='");
                // TODO: node.action: _PyPegen_augoperator ( p , BitAnd )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_augoperator ( p , BitAnd ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'&='");
                cache.putResult(_mark, AUGASSIGN_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s augassign[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'&='");
        }
        { // '|='
            debugMessageln("%d> augassign[%d-%d]: %s", level, _mark, mark(), "'|='");
            Token _literal;
            if (
                (_literal = expect(42)) != null  // token='|='
            )
            {
                debugMessageln("%d augassign[%d-%d]: %s succeeded!", level, _mark, mark(), "'|='");
                // TODO: node.action: _PyPegen_augoperator ( p , BitOr )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_augoperator ( p , BitOr ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'|='");
                cache.putResult(_mark, AUGASSIGN_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s augassign[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'|='");
        }
        { // '^='
            debugMessageln("%d> augassign[%d-%d]: %s", level, _mark, mark(), "'^='");
            Token _literal;
            if (
                (_literal = expect(43)) != null  // token='^='
            )
            {
                debugMessageln("%d augassign[%d-%d]: %s succeeded!", level, _mark, mark(), "'^='");
                // TODO: node.action: _PyPegen_augoperator ( p , BitXor )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_augoperator ( p , BitXor ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'^='");
                cache.putResult(_mark, AUGASSIGN_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s augassign[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'^='");
        }
        { // '<<='
            debugMessageln("%d> augassign[%d-%d]: %s", level, _mark, mark(), "'<<='");
            Token _literal;
            if (
                (_literal = expect(44)) != null  // token='<<='
            )
            {
                debugMessageln("%d augassign[%d-%d]: %s succeeded!", level, _mark, mark(), "'<<='");
                // TODO: node.action: _PyPegen_augoperator ( p , LShift )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_augoperator ( p , LShift ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'<<='");
                cache.putResult(_mark, AUGASSIGN_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s augassign[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'<<='");
        }
        { // '>>='
            debugMessageln("%d> augassign[%d-%d]: %s", level, _mark, mark(), "'>>='");
            Token _literal;
            if (
                (_literal = expect(45)) != null  // token='>>='
            )
            {
                debugMessageln("%d augassign[%d-%d]: %s succeeded!", level, _mark, mark(), "'>>='");
                // TODO: node.action: _PyPegen_augoperator ( p , RShift )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_augoperator ( p , RShift ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'>>='");
                cache.putResult(_mark, AUGASSIGN_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s augassign[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'>>='");
        }
        { // '**='
            debugMessageln("%d> augassign[%d-%d]: %s", level, _mark, mark(), "'**='");
            Token _literal;
            if (
                (_literal = expect(46)) != null  // token='**='
            )
            {
                debugMessageln("%d augassign[%d-%d]: %s succeeded!", level, _mark, mark(), "'**='");
                // TODO: node.action: _PyPegen_augoperator ( p , Pow )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_augoperator ( p , Pow ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'**='");
                cache.putResult(_mark, AUGASSIGN_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s augassign[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'**='");
        }
        { // '//='
            debugMessageln("%d> augassign[%d-%d]: %s", level, _mark, mark(), "'//='");
            Token _literal;
            if (
                (_literal = expect(48)) != null  // token='//='
            )
            {
                debugMessageln("%d augassign[%d-%d]: %s succeeded!", level, _mark, mark(), "'//='");
                // TODO: node.action: _PyPegen_augoperator ( p , FloorDiv )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_augoperator ( p , FloorDiv ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'//='");
                cache.putResult(_mark, AUGASSIGN_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s augassign[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'//='");
        }
        debugMessageln("Fail at %d: augassign", _mark);
        _res = null;
        cache.putResult(_mark, AUGASSIGN_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // global_stmt: 'global' ','.NAME+
    public SSTNode global_stmt_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, GLOBAL_STMT_ID)) {
            _res = (SSTNode)cache.getResult(_mark, GLOBAL_STMT_ID);
            level--;
            return (SSTNode)_res;
        }
        { // 'global' ','.NAME+
            debugMessageln("%d> global_stmt[%d-%d]: %s", level, _mark, mark(), "'global' ','.NAME+");
            Token _keyword;
            SSTNode[] a;
            if (
                (_keyword = expect(508)) != null  // token='global'
                &&
                (a = (SSTNode[])_gather_29_rule()) != null  // ','.NAME+
            )
            {
                debugMessageln("%d global_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "'global' ','.NAME+");
                // TODO: node.action: _PyAST_Global ( CHECK ( asdl_identifier_seq * , _PyPegen_map_names_to_ids ( p , a ) ) , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Global ( CHECK ( asdl_identifier_seq * , _PyPegen_map_names_to_ids ( p , a ) ) , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'global' ','.NAME+");
                cache.putResult(_mark, GLOBAL_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s global_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'global' ','.NAME+");
        }
        debugMessageln("Fail at %d: global_stmt", _mark);
        _res = null;
        cache.putResult(_mark, GLOBAL_STMT_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // nonlocal_stmt: 'nonlocal' ','.NAME+
    public SSTNode nonlocal_stmt_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, NONLOCAL_STMT_ID)) {
            _res = (SSTNode)cache.getResult(_mark, NONLOCAL_STMT_ID);
            level--;
            return (SSTNode)_res;
        }
        { // 'nonlocal' ','.NAME+
            debugMessageln("%d> nonlocal_stmt[%d-%d]: %s", level, _mark, mark(), "'nonlocal' ','.NAME+");
            Token _keyword;
            SSTNode[] a;
            if (
                (_keyword = expect(509)) != null  // token='nonlocal'
                &&
                (a = (SSTNode[])_gather_31_rule()) != null  // ','.NAME+
            )
            {
                debugMessageln("%d nonlocal_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "'nonlocal' ','.NAME+");
                // TODO: node.action: _PyAST_Nonlocal ( CHECK ( asdl_identifier_seq * , _PyPegen_map_names_to_ids ( p , a ) ) , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Nonlocal ( CHECK ( asdl_identifier_seq * , _PyPegen_map_names_to_ids ( p , a ) ) , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'nonlocal' ','.NAME+");
                cache.putResult(_mark, NONLOCAL_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s nonlocal_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'nonlocal' ','.NAME+");
        }
        debugMessageln("Fail at %d: nonlocal_stmt", _mark);
        _res = null;
        cache.putResult(_mark, NONLOCAL_STMT_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // yield_stmt: yield_expr
    public SSTNode yield_stmt_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, YIELD_STMT_ID)) {
            _res = (SSTNode)cache.getResult(_mark, YIELD_STMT_ID);
            level--;
            return (SSTNode)_res;
        }
        { // yield_expr
            debugMessageln("%d> yield_stmt[%d-%d]: %s", level, _mark, mark(), "yield_expr");
            SSTNode y;
            if (
                (y = yield_expr_rule()) != null  // yield_expr
            )
            {
                debugMessageln("%d yield_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "yield_expr");
                // TODO: node.action: _PyAST_Expr ( y , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Expr ( y , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "yield_expr");
                cache.putResult(_mark, YIELD_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s yield_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "yield_expr");
        }
        debugMessageln("Fail at %d: yield_stmt", _mark);
        _res = null;
        cache.putResult(_mark, YIELD_STMT_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // assert_stmt: 'assert' expression [',' expression]
    public SSTNode assert_stmt_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, ASSERT_STMT_ID)) {
            _res = (SSTNode)cache.getResult(_mark, ASSERT_STMT_ID);
            level--;
            return (SSTNode)_res;
        }
        { // 'assert' expression [',' expression]
            debugMessageln("%d> assert_stmt[%d-%d]: %s", level, _mark, mark(), "'assert' expression [',' expression]");
            Token _keyword;
            SSTNode a;
            Object b;
            if (
                (_keyword = expect(505)) != null  // token='assert'
                &&
                (a = expression_rule()) != null  // expression
                &&
                ((b = _tmp_33_rule()) != null || true)  // [',' expression]
            )
            {
                debugMessageln("%d assert_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "'assert' expression [',' expression]");
                // TODO: node.action: _PyAST_Assert ( a , b , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Assert ( a , b , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'assert' expression [',' expression]");
                cache.putResult(_mark, ASSERT_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s assert_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'assert' expression [',' expression]");
        }
        debugMessageln("Fail at %d: assert_stmt", _mark);
        _res = null;
        cache.putResult(_mark, ASSERT_STMT_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // del_stmt: 'del' del_targets &(';' | NEWLINE) | invalid_del_stmt
    public SSTNode del_stmt_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, DEL_STMT_ID)) {
            _res = (SSTNode)cache.getResult(_mark, DEL_STMT_ID);
            level--;
            return (SSTNode)_res;
        }
        { // 'del' del_targets &(';' | NEWLINE)
            debugMessageln("%d> del_stmt[%d-%d]: %s", level, _mark, mark(), "'del' del_targets &(';' | NEWLINE)");
            Token _keyword;
            SSTNode[] a;
            if (
                (_keyword = expect(503)) != null  // token='del'
                &&
                (a = del_targets_rule()) != null  // del_targets
                &&
                genLookahead__tmp_34_rule(true)
            )
            {
                debugMessageln("%d del_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "'del' del_targets &(';' | NEWLINE)");
                // TODO: node.action: _PyAST_Delete ( a , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Delete ( a , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'del' del_targets &(';' | NEWLINE)");
                cache.putResult(_mark, DEL_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s del_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'del' del_targets &(';' | NEWLINE)");
        }
        if (callInvalidRules) { // invalid_del_stmt
            debugMessageln("%d> del_stmt[%d-%d]: %s", level, _mark, mark(), "invalid_del_stmt");
            Object invalid_del_stmt_var;
            if (
                (invalid_del_stmt_var = invalid_del_stmt_rule()) != null  // invalid_del_stmt
            )
            {
                debugMessageln("%d del_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "invalid_del_stmt");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "invalid_del_stmt");
                _res = invalid_del_stmt_var;
                cache.putResult(_mark, DEL_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s del_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "invalid_del_stmt");
        }
        debugMessageln("Fail at %d: del_stmt", _mark);
        _res = null;
        cache.putResult(_mark, DEL_STMT_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // import_stmt: import_name | import_from
    public SSTNode import_stmt_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, IMPORT_STMT_ID)) {
            _res = (SSTNode)cache.getResult(_mark, IMPORT_STMT_ID);
            level--;
            return (SSTNode)_res;
        }
        { // import_name
            debugMessageln("%d> import_stmt[%d-%d]: %s", level, _mark, mark(), "import_name");
            SSTNode import_name_var;
            if (
                (import_name_var = import_name_rule()) != null  // import_name
            )
            {
                debugMessageln("%d import_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "import_name");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "import_name");
                _res = import_name_var;
                cache.putResult(_mark, IMPORT_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s import_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "import_name");
        }
        { // import_from
            debugMessageln("%d> import_stmt[%d-%d]: %s", level, _mark, mark(), "import_from");
            SSTNode import_from_var;
            if (
                (import_from_var = import_from_rule()) != null  // import_from
            )
            {
                debugMessageln("%d import_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "import_from");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "import_from");
                _res = import_from_var;
                cache.putResult(_mark, IMPORT_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s import_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "import_from");
        }
        debugMessageln("Fail at %d: import_stmt", _mark);
        _res = null;
        cache.putResult(_mark, IMPORT_STMT_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // import_name: 'import' dotted_as_names
    public SSTNode import_name_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, IMPORT_NAME_ID)) {
            _res = (SSTNode)cache.getResult(_mark, IMPORT_NAME_ID);
            level--;
            return (SSTNode)_res;
        }
        { // 'import' dotted_as_names
            debugMessageln("%d> import_name[%d-%d]: %s", level, _mark, mark(), "'import' dotted_as_names");
            Token _keyword;
            SSTNode[] a;
            if (
                (_keyword = expect(513)) != null  // token='import'
                &&
                (a = dotted_as_names_rule()) != null  // dotted_as_names
            )
            {
                debugMessageln("%d import_name[%d-%d]: %s succeeded!", level, _mark, mark(), "'import' dotted_as_names");
                // TODO: node.action: _PyAST_Import ( a , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Import ( a , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'import' dotted_as_names");
                cache.putResult(_mark, IMPORT_NAME_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s import_name[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'import' dotted_as_names");
        }
        debugMessageln("Fail at %d: import_name", _mark);
        _res = null;
        cache.putResult(_mark, IMPORT_NAME_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // import_from:
    //     | 'from' (('.' | '...'))* dotted_name 'import' import_from_targets
    //     | 'from' (('.' | '...'))+ 'import' import_from_targets
    public SSTNode import_from_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, IMPORT_FROM_ID)) {
            _res = (SSTNode)cache.getResult(_mark, IMPORT_FROM_ID);
            level--;
            return (SSTNode)_res;
        }
        { // 'from' (('.' | '...'))* dotted_name 'import' import_from_targets
            debugMessageln("%d> import_from[%d-%d]: %s", level, _mark, mark(), "'from' (('.' | '...'))* dotted_name 'import' import_from_targets");
            Token _keyword;
            Token _keyword_1;
            SSTNode[] a;
            SSTNode b;
            SSTNode[] c;
            if (
                (_keyword = expect(514)) != null  // token='from'
                &&
                (a = _loop0_35_rule()) != null  // (('.' | '...'))*
                &&
                (b = dotted_name_rule()) != null  // dotted_name
                &&
                (_keyword_1 = expect(513)) != null  // token='import'
                &&
                (c = import_from_targets_rule()) != null  // import_from_targets
            )
            {
                debugMessageln("%d import_from[%d-%d]: %s succeeded!", level, _mark, mark(), "'from' (('.' | '...'))* dotted_name 'import' import_from_targets");
                // TODO: node.action: _PyAST_ImportFrom ( b -> v . Name . id , c , _PyPegen_seq_count_dots ( a ) , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_ImportFrom ( b -> v . Name . id , c , _PyPegen_seq_count_dots ( a ) , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'from' (('.' | '...'))* dotted_name 'import' import_from_targets");
                cache.putResult(_mark, IMPORT_FROM_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s import_from[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'from' (('.' | '...'))* dotted_name 'import' import_from_targets");
        }
        { // 'from' (('.' | '...'))+ 'import' import_from_targets
            debugMessageln("%d> import_from[%d-%d]: %s", level, _mark, mark(), "'from' (('.' | '...'))+ 'import' import_from_targets");
            Token _keyword;
            Token _keyword_1;
            SSTNode[] a;
            SSTNode[] b;
            if (
                (_keyword = expect(514)) != null  // token='from'
                &&
                (a = _loop1_36_rule()) != null  // (('.' | '...'))+
                &&
                (_keyword_1 = expect(513)) != null  // token='import'
                &&
                (b = import_from_targets_rule()) != null  // import_from_targets
            )
            {
                debugMessageln("%d import_from[%d-%d]: %s succeeded!", level, _mark, mark(), "'from' (('.' | '...'))+ 'import' import_from_targets");
                // TODO: node.action: _PyAST_ImportFrom ( NULL , b , _PyPegen_seq_count_dots ( a ) , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_ImportFrom ( NULL , b , _PyPegen_seq_count_dots ( a ) , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'from' (('.' | '...'))+ 'import' import_from_targets");
                cache.putResult(_mark, IMPORT_FROM_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s import_from[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'from' (('.' | '...'))+ 'import' import_from_targets");
        }
        debugMessageln("Fail at %d: import_from", _mark);
        _res = null;
        cache.putResult(_mark, IMPORT_FROM_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // import_from_targets:
    //     | '(' import_from_as_names ','? ')'
    //     | import_from_as_names !','
    //     | '*'
    //     | invalid_import_from_targets
    public SSTNode[] import_from_targets_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, IMPORT_FROM_TARGETS_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, IMPORT_FROM_TARGETS_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // '(' import_from_as_names ','? ')'
            debugMessageln("%d> import_from_targets[%d-%d]: %s", level, _mark, mark(), "'(' import_from_as_names ','? ')'");
            Token _literal;
            Token _literal_1;
            Object _opt_var;
            SSTNode[] a;
            if (
                (_literal = expect(7)) != null  // token='('
                &&
                (a = import_from_as_names_rule()) != null  // import_from_as_names
                &&
                ((_opt_var = _tmp_37_rule()) != null || true)  // ','?
                &&
                (_literal_1 = expect(8)) != null  // token=')'
            )
            {
                debugMessageln("%d import_from_targets[%d-%d]: %s succeeded!", level, _mark, mark(), "'(' import_from_as_names ','? ')'");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'(' import_from_as_names ','? ')'");
                cache.putResult(_mark, IMPORT_FROM_TARGETS_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s import_from_targets[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'(' import_from_as_names ','? ')'");
        }
        { // import_from_as_names !','
            debugMessageln("%d> import_from_targets[%d-%d]: %s", level, _mark, mark(), "import_from_as_names !','");
            SSTNode[] import_from_as_names_var;
            if (
                (import_from_as_names_var = import_from_as_names_rule()) != null  // import_from_as_names
                &&
                genLookahead_expect(false, 12)  // token=','
            )
            {
                debugMessageln("%d import_from_targets[%d-%d]: %s succeeded!", level, _mark, mark(), "import_from_as_names !','");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "import_from_as_names !','");
                _res = import_from_as_names_var;
                cache.putResult(_mark, IMPORT_FROM_TARGETS_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s import_from_targets[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "import_from_as_names !','");
        }
        { // '*'
            debugMessageln("%d> import_from_targets[%d-%d]: %s", level, _mark, mark(), "'*'");
            Token _literal;
            if (
                (_literal = expect(16)) != null  // token='*'
            )
            {
                debugMessageln("%d import_from_targets[%d-%d]: %s succeeded!", level, _mark, mark(), "'*'");
                // TODO: node.action: ( asdl_alias_seq * ) this . singletonSequence ( CHECK ( alias_ty , _PyPegen_alias_for_star ( p , EXTRA ) ) )
                debugMessageln("[33;5;7m!!! TODO: Convert ( asdl_alias_seq * ) this . singletonSequence ( CHECK ( alias_ty , _PyPegen_alias_for_star ( p , EXTRA ) ) ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'*'");
                cache.putResult(_mark, IMPORT_FROM_TARGETS_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s import_from_targets[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'*'");
        }
        if (callInvalidRules) { // invalid_import_from_targets
            debugMessageln("%d> import_from_targets[%d-%d]: %s", level, _mark, mark(), "invalid_import_from_targets");
            Object invalid_import_from_targets_var;
            if (
                (invalid_import_from_targets_var = invalid_import_from_targets_rule()) != null  // invalid_import_from_targets
            )
            {
                debugMessageln("%d import_from_targets[%d-%d]: %s succeeded!", level, _mark, mark(), "invalid_import_from_targets");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "invalid_import_from_targets");
                _res = invalid_import_from_targets_var;
                cache.putResult(_mark, IMPORT_FROM_TARGETS_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s import_from_targets[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "invalid_import_from_targets");
        }
        debugMessageln("Fail at %d: import_from_targets", _mark);
        _res = null;
        cache.putResult(_mark, IMPORT_FROM_TARGETS_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // import_from_as_names: ','.import_from_as_name+
    public SSTNode[] import_from_as_names_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, IMPORT_FROM_AS_NAMES_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, IMPORT_FROM_AS_NAMES_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // ','.import_from_as_name+
            debugMessageln("%d> import_from_as_names[%d-%d]: %s", level, _mark, mark(), "','.import_from_as_name+");
            SSTNode[] a;
            if (
                (a = (SSTNode[])_gather_38_rule()) != null  // ','.import_from_as_name+
            )
            {
                debugMessageln("%d import_from_as_names[%d-%d]: %s succeeded!", level, _mark, mark(), "','.import_from_as_name+");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "','.import_from_as_name+");
                cache.putResult(_mark, IMPORT_FROM_AS_NAMES_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s import_from_as_names[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','.import_from_as_name+");
        }
        debugMessageln("Fail at %d: import_from_as_names", _mark);
        _res = null;
        cache.putResult(_mark, IMPORT_FROM_AS_NAMES_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // import_from_as_name: NAME ['as' NAME]
    public SSTNode import_from_as_name_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, IMPORT_FROM_AS_NAME_ID)) {
            _res = (SSTNode)cache.getResult(_mark, IMPORT_FROM_AS_NAME_ID);
            level--;
            return (SSTNode)_res;
        }
        { // NAME ['as' NAME]
            debugMessageln("%d> import_from_as_name[%d-%d]: %s", level, _mark, mark(), "NAME ['as' NAME]");
            SSTNode a;
            Object b;
            if (
                (a = name_token()) != null  // NAME
                &&
                ((b = _tmp_40_rule()) != null || true)  // ['as' NAME]
            )
            {
                debugMessageln("%d import_from_as_name[%d-%d]: %s succeeded!", level, _mark, mark(), "NAME ['as' NAME]");
                // TODO: node.action: _PyAST_alias ( a -> v . Name . id , ( b ) ? ( ( expr_ty ) b ) -> v . Name . id : NULL , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_alias ( a -> v . Name . id , ( b ) ? ( ( expr_ty ) b ) -> v . Name . id : NULL , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "NAME ['as' NAME]");
                cache.putResult(_mark, IMPORT_FROM_AS_NAME_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s import_from_as_name[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "NAME ['as' NAME]");
        }
        debugMessageln("Fail at %d: import_from_as_name", _mark);
        _res = null;
        cache.putResult(_mark, IMPORT_FROM_AS_NAME_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // dotted_as_names: ','.dotted_as_name+
    public SSTNode[] dotted_as_names_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, DOTTED_AS_NAMES_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, DOTTED_AS_NAMES_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // ','.dotted_as_name+
            debugMessageln("%d> dotted_as_names[%d-%d]: %s", level, _mark, mark(), "','.dotted_as_name+");
            SSTNode[] a;
            if (
                (a = (SSTNode[])_gather_41_rule()) != null  // ','.dotted_as_name+
            )
            {
                debugMessageln("%d dotted_as_names[%d-%d]: %s succeeded!", level, _mark, mark(), "','.dotted_as_name+");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "','.dotted_as_name+");
                cache.putResult(_mark, DOTTED_AS_NAMES_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s dotted_as_names[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','.dotted_as_name+");
        }
        debugMessageln("Fail at %d: dotted_as_names", _mark);
        _res = null;
        cache.putResult(_mark, DOTTED_AS_NAMES_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // dotted_as_name: dotted_name ['as' NAME]
    public SSTNode dotted_as_name_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, DOTTED_AS_NAME_ID)) {
            _res = (SSTNode)cache.getResult(_mark, DOTTED_AS_NAME_ID);
            level--;
            return (SSTNode)_res;
        }
        { // dotted_name ['as' NAME]
            debugMessageln("%d> dotted_as_name[%d-%d]: %s", level, _mark, mark(), "dotted_name ['as' NAME]");
            SSTNode a;
            Object b;
            if (
                (a = dotted_name_rule()) != null  // dotted_name
                &&
                ((b = _tmp_43_rule()) != null || true)  // ['as' NAME]
            )
            {
                debugMessageln("%d dotted_as_name[%d-%d]: %s succeeded!", level, _mark, mark(), "dotted_name ['as' NAME]");
                // TODO: node.action: _PyAST_alias ( a -> v . Name . id , ( b ) ? ( ( expr_ty ) b ) -> v . Name . id : NULL , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_alias ( a -> v . Name . id , ( b ) ? ( ( expr_ty ) b ) -> v . Name . id : NULL , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "dotted_name ['as' NAME]");
                cache.putResult(_mark, DOTTED_AS_NAME_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s dotted_as_name[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "dotted_name ['as' NAME]");
        }
        debugMessageln("Fail at %d: dotted_as_name", _mark);
        _res = null;
        cache.putResult(_mark, DOTTED_AS_NAME_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // Left-recursive
    // dotted_name: dotted_name '.' NAME | NAME
    public SSTNode dotted_name_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, DOTTED_NAME_ID)) {
            _res = cache.getResult(_mark, DOTTED_NAME_ID);
            level--;
            return (SSTNode)_res;
        }
        int _resmark = mark();
        while (true) {
            cache.putResult(_mark, DOTTED_NAME_ID, _res);
            reset(_mark);
            SSTNode _raw = dotted_name_raw();
            if (_raw == null || mark() <= _resmark)
                break;
            _resmark = mark();
            _res = _raw;
        }
        reset(_resmark);
        level--;
        return (SSTNode)_res;
    }
    private SSTNode dotted_name_raw()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        { // dotted_name '.' NAME
            debugMessageln("%d> dotted_name[%d-%d]: %s", level, _mark, mark(), "dotted_name '.' NAME");
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                (a = dotted_name_rule()) != null  // dotted_name
                &&
                (_literal = expect(23)) != null  // token='.'
                &&
                (b = name_token()) != null  // NAME
            )
            {
                debugMessageln("%d dotted_name[%d-%d]: %s succeeded!", level, _mark, mark(), "dotted_name '.' NAME");
                // TODO: node.action: _PyPegen_join_names_with_dot ( p , a , b )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_join_names_with_dot ( p , a , b ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "dotted_name '.' NAME");
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s dotted_name[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "dotted_name '.' NAME");
        }
        { // NAME
            debugMessageln("%d> dotted_name[%d-%d]: %s", level, _mark, mark(), "NAME");
            SSTNode name_var;
            if (
                (name_var = name_token()) != null  // NAME
            )
            {
                debugMessageln("%d dotted_name[%d-%d]: %s succeeded!", level, _mark, mark(), "NAME");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "NAME");
                _res = name_var;
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s dotted_name[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "NAME");
        }
        debugMessageln("Fail at %d: dotted_name", _mark);
        _res = null;
        level--;
        return (SSTNode)_res;
    }

    // if_stmt:
    //     | 'if' named_expression ':' block elif_stmt
    //     | 'if' named_expression ':' block else_block?
    //     | invalid_if_stmt
    public SSTNode if_stmt_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, IF_STMT_ID)) {
            _res = (SSTNode)cache.getResult(_mark, IF_STMT_ID);
            level--;
            return (SSTNode)_res;
        }
        { // 'if' named_expression ':' block elif_stmt
            debugMessageln("%d> if_stmt[%d-%d]: %s", level, _mark, mark(), "'if' named_expression ':' block elif_stmt");
            Token _keyword;
            Token _literal;
            SSTNode a;
            SSTNode[] b;
            SSTNode c;
            if (
                (_keyword = expect(510)) != null  // token='if'
                &&
                (a = named_expression_rule()) != null  // named_expression
                &&
                (_literal = expect(11)) != null  // token=':'
                &&
                (b = block_rule()) != null  // block
                &&
                (c = elif_stmt_rule()) != null  // elif_stmt
            )
            {
                debugMessageln("%d if_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "'if' named_expression ':' block elif_stmt");
                // TODO: node.action: _PyAST_If ( a , b , CHECK ( asdl_stmt_seq * , this . singletonSequence ( c ) ) , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_If ( a , b , CHECK ( asdl_stmt_seq * , this . singletonSequence ( c ) ) , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'if' named_expression ':' block elif_stmt");
                cache.putResult(_mark, IF_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s if_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'if' named_expression ':' block elif_stmt");
        }
        { // 'if' named_expression ':' block else_block?
            debugMessageln("%d> if_stmt[%d-%d]: %s", level, _mark, mark(), "'if' named_expression ':' block else_block?");
            Token _keyword;
            Token _literal;
            SSTNode a;
            SSTNode[] b;
            Object c;
            if (
                (_keyword = expect(510)) != null  // token='if'
                &&
                (a = named_expression_rule()) != null  // named_expression
                &&
                (_literal = expect(11)) != null  // token=':'
                &&
                (b = block_rule()) != null  // block
                &&
                ((c = _tmp_44_rule()) != null || true)  // else_block?
            )
            {
                debugMessageln("%d if_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "'if' named_expression ':' block else_block?");
                // TODO: node.action: _PyAST_If ( a , b , c , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_If ( a , b , c , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'if' named_expression ':' block else_block?");
                cache.putResult(_mark, IF_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s if_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'if' named_expression ':' block else_block?");
        }
        if (callInvalidRules) { // invalid_if_stmt
            debugMessageln("%d> if_stmt[%d-%d]: %s", level, _mark, mark(), "invalid_if_stmt");
            Object invalid_if_stmt_var;
            if (
                (invalid_if_stmt_var = invalid_if_stmt_rule()) != null  // invalid_if_stmt
            )
            {
                debugMessageln("%d if_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "invalid_if_stmt");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "invalid_if_stmt");
                _res = invalid_if_stmt_var;
                cache.putResult(_mark, IF_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s if_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "invalid_if_stmt");
        }
        debugMessageln("Fail at %d: if_stmt", _mark);
        _res = null;
        cache.putResult(_mark, IF_STMT_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // elif_stmt:
    //     | 'elif' named_expression ':' block elif_stmt
    //     | 'elif' named_expression ':' block else_block?
    //     | invalid_elif_stmt
    public SSTNode elif_stmt_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, ELIF_STMT_ID)) {
            _res = (SSTNode)cache.getResult(_mark, ELIF_STMT_ID);
            level--;
            return (SSTNode)_res;
        }
        { // 'elif' named_expression ':' block elif_stmt
            debugMessageln("%d> elif_stmt[%d-%d]: %s", level, _mark, mark(), "'elif' named_expression ':' block elif_stmt");
            Token _keyword;
            Token _literal;
            SSTNode a;
            SSTNode[] b;
            SSTNode c;
            if (
                (_keyword = expect(515)) != null  // token='elif'
                &&
                (a = named_expression_rule()) != null  // named_expression
                &&
                (_literal = expect(11)) != null  // token=':'
                &&
                (b = block_rule()) != null  // block
                &&
                (c = elif_stmt_rule()) != null  // elif_stmt
            )
            {
                debugMessageln("%d elif_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "'elif' named_expression ':' block elif_stmt");
                // TODO: node.action: _PyAST_If ( a , b , CHECK ( asdl_stmt_seq * , this . singletonSequence ( c ) ) , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_If ( a , b , CHECK ( asdl_stmt_seq * , this . singletonSequence ( c ) ) , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'elif' named_expression ':' block elif_stmt");
                cache.putResult(_mark, ELIF_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s elif_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'elif' named_expression ':' block elif_stmt");
        }
        { // 'elif' named_expression ':' block else_block?
            debugMessageln("%d> elif_stmt[%d-%d]: %s", level, _mark, mark(), "'elif' named_expression ':' block else_block?");
            Token _keyword;
            Token _literal;
            SSTNode a;
            SSTNode[] b;
            Object c;
            if (
                (_keyword = expect(515)) != null  // token='elif'
                &&
                (a = named_expression_rule()) != null  // named_expression
                &&
                (_literal = expect(11)) != null  // token=':'
                &&
                (b = block_rule()) != null  // block
                &&
                ((c = _tmp_45_rule()) != null || true)  // else_block?
            )
            {
                debugMessageln("%d elif_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "'elif' named_expression ':' block else_block?");
                // TODO: node.action: _PyAST_If ( a , b , c , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_If ( a , b , c , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'elif' named_expression ':' block else_block?");
                cache.putResult(_mark, ELIF_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s elif_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'elif' named_expression ':' block else_block?");
        }
        if (callInvalidRules) { // invalid_elif_stmt
            debugMessageln("%d> elif_stmt[%d-%d]: %s", level, _mark, mark(), "invalid_elif_stmt");
            Object invalid_elif_stmt_var;
            if (
                (invalid_elif_stmt_var = invalid_elif_stmt_rule()) != null  // invalid_elif_stmt
            )
            {
                debugMessageln("%d elif_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "invalid_elif_stmt");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "invalid_elif_stmt");
                _res = invalid_elif_stmt_var;
                cache.putResult(_mark, ELIF_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s elif_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "invalid_elif_stmt");
        }
        debugMessageln("Fail at %d: elif_stmt", _mark);
        _res = null;
        cache.putResult(_mark, ELIF_STMT_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // else_block: 'else' &&':' block
    public SSTNode[] else_block_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, ELSE_BLOCK_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, ELSE_BLOCK_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // 'else' &&':' block
            debugMessageln("%d> else_block[%d-%d]: %s", level, _mark, mark(), "'else' &&':' block");
            Token _keyword;
            Token _literal;
            SSTNode[] b;
            if (
                (_keyword = expect(516)) != null  // token='else'
                &&
                (_literal = expect_forced_token(11, ":")) != null  // forced_token=':'
                &&
                (b = block_rule()) != null  // block
            )
            {
                debugMessageln("%d else_block[%d-%d]: %s succeeded!", level, _mark, mark(), "'else' &&':' block");
                _res = b;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'else' &&':' block");
                cache.putResult(_mark, ELSE_BLOCK_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s else_block[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'else' &&':' block");
        }
        debugMessageln("Fail at %d: else_block", _mark);
        _res = null;
        cache.putResult(_mark, ELSE_BLOCK_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // while_stmt: 'while' named_expression ':' block else_block? | invalid_while_stmt
    public SSTNode while_stmt_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, WHILE_STMT_ID)) {
            _res = (SSTNode)cache.getResult(_mark, WHILE_STMT_ID);
            level--;
            return (SSTNode)_res;
        }
        { // 'while' named_expression ':' block else_block?
            debugMessageln("%d> while_stmt[%d-%d]: %s", level, _mark, mark(), "'while' named_expression ':' block else_block?");
            Token _keyword;
            Token _literal;
            SSTNode a;
            SSTNode[] b;
            Object c;
            if (
                (_keyword = expect(512)) != null  // token='while'
                &&
                (a = named_expression_rule()) != null  // named_expression
                &&
                (_literal = expect(11)) != null  // token=':'
                &&
                (b = block_rule()) != null  // block
                &&
                ((c = _tmp_46_rule()) != null || true)  // else_block?
            )
            {
                debugMessageln("%d while_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "'while' named_expression ':' block else_block?");
                // TODO: node.action: _PyAST_While ( a , b , c , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_While ( a , b , c , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'while' named_expression ':' block else_block?");
                cache.putResult(_mark, WHILE_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s while_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'while' named_expression ':' block else_block?");
        }
        if (callInvalidRules) { // invalid_while_stmt
            debugMessageln("%d> while_stmt[%d-%d]: %s", level, _mark, mark(), "invalid_while_stmt");
            Object invalid_while_stmt_var;
            if (
                (invalid_while_stmt_var = invalid_while_stmt_rule()) != null  // invalid_while_stmt
            )
            {
                debugMessageln("%d while_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "invalid_while_stmt");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "invalid_while_stmt");
                _res = invalid_while_stmt_var;
                cache.putResult(_mark, WHILE_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s while_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "invalid_while_stmt");
        }
        debugMessageln("Fail at %d: while_stmt", _mark);
        _res = null;
        cache.putResult(_mark, WHILE_STMT_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // for_stmt:
    //     | 'for' star_targets 'in' ~ star_expressions &&':' TYPE_COMMENT? block else_block?
    //     | ASYNC 'for' star_targets 'in' ~ star_expressions &&':' TYPE_COMMENT? block else_block?
    //     | invalid_for_target
    public SSTNode for_stmt_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, FOR_STMT_ID)) {
            _res = (SSTNode)cache.getResult(_mark, FOR_STMT_ID);
            level--;
            return (SSTNode)_res;
        }
        { // 'for' star_targets 'in' ~ star_expressions &&':' TYPE_COMMENT? block else_block?
            debugMessageln("%d> for_stmt[%d-%d]: %s", level, _mark, mark(), "'for' star_targets 'in' ~ star_expressions &&':' TYPE_COMMENT? block else_block?");
            int _cut_var = 0;
            Token _keyword;
            Token _keyword_1;
            Token _literal;
            SSTNode[] b;
            Object el;
            SSTNode ex;
            SSTNode t;
            Object tc;
            if (
                (_keyword = expect(517)) != null  // token='for'
                &&
                (t = star_targets_rule()) != null  // star_targets
                &&
                (_keyword_1 = expect(518)) != null  // token='in'
                &&
                (_cut_var = 1) != 0
                &&
                (ex = star_expressions_rule()) != null  // star_expressions
                &&
                (_literal = expect_forced_token(11, ":")) != null  // forced_token=':'
                &&
                ((tc = _tmp_47_rule()) != null || true)  // TYPE_COMMENT?
                &&
                (b = block_rule()) != null  // block
                &&
                ((el = _tmp_48_rule()) != null || true)  // else_block?
            )
            {
                debugMessageln("%d for_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "'for' star_targets 'in' ~ star_expressions &&':' TYPE_COMMENT? block else_block?");
                // TODO: node.action: _PyAST_For ( t , ex , b , el , NEW_TYPE_COMMENT ( p , tc ) , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_For ( t , ex , b , el , NEW_TYPE_COMMENT ( p , tc ) , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'for' star_targets 'in' ~ star_expressions &&':' TYPE_COMMENT? block else_block?");
                cache.putResult(_mark, FOR_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s for_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'for' star_targets 'in' ~ star_expressions &&':' TYPE_COMMENT? block else_block?");
            if (_cut_var != 0) {
                level--;
                return null;
            }
        }
        { // ASYNC 'for' star_targets 'in' ~ star_expressions &&':' TYPE_COMMENT? block else_block?
            debugMessageln("%d> for_stmt[%d-%d]: %s", level, _mark, mark(), "ASYNC 'for' star_targets 'in' ~ star_expressions &&':' TYPE_COMMENT? block else_block?");
            int _cut_var = 0;
            Token _keyword;
            Token _keyword_1;
            Token _literal;
            Token async_var;
            SSTNode[] b;
            Object el;
            SSTNode ex;
            SSTNode t;
            Object tc;
            if (
                (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
                &&
                (_keyword = expect(517)) != null  // token='for'
                &&
                (t = star_targets_rule()) != null  // star_targets
                &&
                (_keyword_1 = expect(518)) != null  // token='in'
                &&
                (_cut_var = 1) != 0
                &&
                (ex = star_expressions_rule()) != null  // star_expressions
                &&
                (_literal = expect_forced_token(11, ":")) != null  // forced_token=':'
                &&
                ((tc = _tmp_49_rule()) != null || true)  // TYPE_COMMENT?
                &&
                (b = block_rule()) != null  // block
                &&
                ((el = _tmp_50_rule()) != null || true)  // else_block?
            )
            {
                debugMessageln("%d for_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "ASYNC 'for' star_targets 'in' ~ star_expressions &&':' TYPE_COMMENT? block else_block?");
                // TODO: node.action: CHECK_VERSION ( stmt_ty , 5 , "Async for loops are" , _PyAST_AsyncFor ( t , ex , b , el , NEW_TYPE_COMMENT ( p , tc ) , EXTRA ) )
                debugMessageln("[33;5;7m!!! TODO: Convert CHECK_VERSION ( stmt_ty , 5 , 'Async for loops are' , _PyAST_AsyncFor ( t , ex , b , el , NEW_TYPE_COMMENT ( p , tc ) , EXTRA ) ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "ASYNC 'for' star_targets 'in' ~ star_expressions &&':' TYPE_COMMENT? block else_block?");
                cache.putResult(_mark, FOR_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s for_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "ASYNC 'for' star_targets 'in' ~ star_expressions &&':' TYPE_COMMENT? block else_block?");
            if (_cut_var != 0) {
                level--;
                return null;
            }
        }
        if (callInvalidRules) { // invalid_for_target
            debugMessageln("%d> for_stmt[%d-%d]: %s", level, _mark, mark(), "invalid_for_target");
            Object invalid_for_target_var;
            if (
                (invalid_for_target_var = invalid_for_target_rule()) != null  // invalid_for_target
            )
            {
                debugMessageln("%d for_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "invalid_for_target");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "invalid_for_target");
                _res = invalid_for_target_var;
                cache.putResult(_mark, FOR_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s for_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "invalid_for_target");
        }
        debugMessageln("Fail at %d: for_stmt", _mark);
        _res = null;
        cache.putResult(_mark, FOR_STMT_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // with_stmt:
    //     | 'with' '(' ','.with_item+ ','? ')' ':' block
    //     | 'with' ','.with_item+ ':' TYPE_COMMENT? block
    //     | ASYNC 'with' '(' ','.with_item+ ','? ')' ':' block
    //     | ASYNC 'with' ','.with_item+ ':' TYPE_COMMENT? block
    //     | invalid_with_stmt
    public SSTNode with_stmt_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, WITH_STMT_ID)) {
            _res = (SSTNode)cache.getResult(_mark, WITH_STMT_ID);
            level--;
            return (SSTNode)_res;
        }
        { // 'with' '(' ','.with_item+ ','? ')' ':' block
            debugMessageln("%d> with_stmt[%d-%d]: %s", level, _mark, mark(), "'with' '(' ','.with_item+ ','? ')' ':' block");
            Token _keyword;
            Token _literal;
            Token _literal_1;
            Token _literal_2;
            Object _opt_var;
            SSTNode[] a;
            SSTNode[] b;
            if (
                (_keyword = expect(519)) != null  // token='with'
                &&
                (_literal = expect(7)) != null  // token='('
                &&
                (a = (SSTNode[])_gather_51_rule()) != null  // ','.with_item+
                &&
                ((_opt_var = expect(12)) != null || true)  // ','?
                &&
                (_literal_1 = expect(8)) != null  // token=')'
                &&
                (_literal_2 = expect(11)) != null  // token=':'
                &&
                (b = block_rule()) != null  // block
            )
            {
                debugMessageln("%d with_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "'with' '(' ','.with_item+ ','? ')' ':' block");
                // TODO: node.action: _PyAST_With ( a , b , NULL , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_With ( a , b , NULL , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'with' '(' ','.with_item+ ','? ')' ':' block");
                cache.putResult(_mark, WITH_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s with_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'with' '(' ','.with_item+ ','? ')' ':' block");
        }
        { // 'with' ','.with_item+ ':' TYPE_COMMENT? block
            debugMessageln("%d> with_stmt[%d-%d]: %s", level, _mark, mark(), "'with' ','.with_item+ ':' TYPE_COMMENT? block");
            Token _keyword;
            Token _literal;
            SSTNode[] a;
            SSTNode[] b;
            Object tc;
            if (
                (_keyword = expect(519)) != null  // token='with'
                &&
                (a = (SSTNode[])_gather_53_rule()) != null  // ','.with_item+
                &&
                (_literal = expect(11)) != null  // token=':'
                &&
                ((tc = _tmp_55_rule()) != null || true)  // TYPE_COMMENT?
                &&
                (b = block_rule()) != null  // block
            )
            {
                debugMessageln("%d with_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "'with' ','.with_item+ ':' TYPE_COMMENT? block");
                // TODO: node.action: _PyAST_With ( a , b , NEW_TYPE_COMMENT ( p , tc ) , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_With ( a , b , NEW_TYPE_COMMENT ( p , tc ) , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'with' ','.with_item+ ':' TYPE_COMMENT? block");
                cache.putResult(_mark, WITH_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s with_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'with' ','.with_item+ ':' TYPE_COMMENT? block");
        }
        { // ASYNC 'with' '(' ','.with_item+ ','? ')' ':' block
            debugMessageln("%d> with_stmt[%d-%d]: %s", level, _mark, mark(), "ASYNC 'with' '(' ','.with_item+ ','? ')' ':' block");
            Token _keyword;
            Token _literal;
            Token _literal_1;
            Token _literal_2;
            Object _opt_var;
            SSTNode[] a;
            Token async_var;
            SSTNode[] b;
            if (
                (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
                &&
                (_keyword = expect(519)) != null  // token='with'
                &&
                (_literal = expect(7)) != null  // token='('
                &&
                (a = (SSTNode[])_gather_56_rule()) != null  // ','.with_item+
                &&
                ((_opt_var = expect(12)) != null || true)  // ','?
                &&
                (_literal_1 = expect(8)) != null  // token=')'
                &&
                (_literal_2 = expect(11)) != null  // token=':'
                &&
                (b = block_rule()) != null  // block
            )
            {
                debugMessageln("%d with_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "ASYNC 'with' '(' ','.with_item+ ','? ')' ':' block");
                // TODO: node.action: CHECK_VERSION ( stmt_ty , 5 , "Async with statements are" , _PyAST_AsyncWith ( a , b , NULL , EXTRA ) )
                debugMessageln("[33;5;7m!!! TODO: Convert CHECK_VERSION ( stmt_ty , 5 , 'Async with statements are' , _PyAST_AsyncWith ( a , b , NULL , EXTRA ) ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "ASYNC 'with' '(' ','.with_item+ ','? ')' ':' block");
                cache.putResult(_mark, WITH_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s with_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "ASYNC 'with' '(' ','.with_item+ ','? ')' ':' block");
        }
        { // ASYNC 'with' ','.with_item+ ':' TYPE_COMMENT? block
            debugMessageln("%d> with_stmt[%d-%d]: %s", level, _mark, mark(), "ASYNC 'with' ','.with_item+ ':' TYPE_COMMENT? block");
            Token _keyword;
            Token _literal;
            SSTNode[] a;
            Token async_var;
            SSTNode[] b;
            Object tc;
            if (
                (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
                &&
                (_keyword = expect(519)) != null  // token='with'
                &&
                (a = (SSTNode[])_gather_58_rule()) != null  // ','.with_item+
                &&
                (_literal = expect(11)) != null  // token=':'
                &&
                ((tc = _tmp_60_rule()) != null || true)  // TYPE_COMMENT?
                &&
                (b = block_rule()) != null  // block
            )
            {
                debugMessageln("%d with_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "ASYNC 'with' ','.with_item+ ':' TYPE_COMMENT? block");
                // TODO: node.action: CHECK_VERSION ( stmt_ty , 5 , "Async with statements are" , _PyAST_AsyncWith ( a , b , NEW_TYPE_COMMENT ( p , tc ) , EXTRA ) )
                debugMessageln("[33;5;7m!!! TODO: Convert CHECK_VERSION ( stmt_ty , 5 , 'Async with statements are' , _PyAST_AsyncWith ( a , b , NEW_TYPE_COMMENT ( p , tc ) , EXTRA ) ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "ASYNC 'with' ','.with_item+ ':' TYPE_COMMENT? block");
                cache.putResult(_mark, WITH_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s with_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "ASYNC 'with' ','.with_item+ ':' TYPE_COMMENT? block");
        }
        if (callInvalidRules) { // invalid_with_stmt
            debugMessageln("%d> with_stmt[%d-%d]: %s", level, _mark, mark(), "invalid_with_stmt");
            Object invalid_with_stmt_var;
            if (
                (invalid_with_stmt_var = invalid_with_stmt_rule()) != null  // invalid_with_stmt
            )
            {
                debugMessageln("%d with_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "invalid_with_stmt");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "invalid_with_stmt");
                _res = invalid_with_stmt_var;
                cache.putResult(_mark, WITH_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s with_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "invalid_with_stmt");
        }
        debugMessageln("Fail at %d: with_stmt", _mark);
        _res = null;
        cache.putResult(_mark, WITH_STMT_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // with_item:
    //     | expression 'as' star_target &(',' | ')' | ':')
    //     | invalid_with_item
    //     | expression
    public SSTNode with_item_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, WITH_ITEM_ID)) {
            _res = (SSTNode)cache.getResult(_mark, WITH_ITEM_ID);
            level--;
            return (SSTNode)_res;
        }
        { // expression 'as' star_target &(',' | ')' | ':')
            debugMessageln("%d> with_item[%d-%d]: %s", level, _mark, mark(), "expression 'as' star_target &(',' | ')' | ':')");
            Token _keyword;
            SSTNode e;
            SSTNode t;
            if (
                (e = expression_rule()) != null  // expression
                &&
                (_keyword = expect(520)) != null  // token='as'
                &&
                (t = star_target_rule()) != null  // star_target
                &&
                genLookahead__tmp_61_rule(true)
            )
            {
                debugMessageln("%d with_item[%d-%d]: %s succeeded!", level, _mark, mark(), "expression 'as' star_target &(',' | ')' | ':')");
                // TODO: node.action: _PyAST_withitem ( e , t , p -> arena )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_withitem ( e , t , p -> arena ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "expression 'as' star_target &(',' | ')' | ':')");
                cache.putResult(_mark, WITH_ITEM_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s with_item[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "expression 'as' star_target &(',' | ')' | ':')");
        }
        if (callInvalidRules) { // invalid_with_item
            debugMessageln("%d> with_item[%d-%d]: %s", level, _mark, mark(), "invalid_with_item");
            Object invalid_with_item_var;
            if (
                (invalid_with_item_var = invalid_with_item_rule()) != null  // invalid_with_item
            )
            {
                debugMessageln("%d with_item[%d-%d]: %s succeeded!", level, _mark, mark(), "invalid_with_item");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "invalid_with_item");
                _res = invalid_with_item_var;
                cache.putResult(_mark, WITH_ITEM_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s with_item[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "invalid_with_item");
        }
        { // expression
            debugMessageln("%d> with_item[%d-%d]: %s", level, _mark, mark(), "expression");
            SSTNode e;
            if (
                (e = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d with_item[%d-%d]: %s succeeded!", level, _mark, mark(), "expression");
                // TODO: node.action: _PyAST_withitem ( e , NULL , p -> arena )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_withitem ( e , NULL , p -> arena ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "expression");
                cache.putResult(_mark, WITH_ITEM_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s with_item[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "expression");
        }
        debugMessageln("Fail at %d: with_item", _mark);
        _res = null;
        cache.putResult(_mark, WITH_ITEM_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // try_stmt:
    //     | 'try' &&':' block finally_block
    //     | 'try' &&':' block except_block+ else_block? finally_block?
    public SSTNode try_stmt_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, TRY_STMT_ID)) {
            _res = (SSTNode)cache.getResult(_mark, TRY_STMT_ID);
            level--;
            return (SSTNode)_res;
        }
        { // 'try' &&':' block finally_block
            debugMessageln("%d> try_stmt[%d-%d]: %s", level, _mark, mark(), "'try' &&':' block finally_block");
            Token _keyword;
            Token _literal;
            SSTNode[] b;
            SSTNode[] f;
            if (
                (_keyword = expect(511)) != null  // token='try'
                &&
                (_literal = expect_forced_token(11, ":")) != null  // forced_token=':'
                &&
                (b = block_rule()) != null  // block
                &&
                (f = finally_block_rule()) != null  // finally_block
            )
            {
                debugMessageln("%d try_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "'try' &&':' block finally_block");
                // TODO: node.action: _PyAST_Try ( b , NULL , NULL , f , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Try ( b , NULL , NULL , f , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'try' &&':' block finally_block");
                cache.putResult(_mark, TRY_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s try_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'try' &&':' block finally_block");
        }
        { // 'try' &&':' block except_block+ else_block? finally_block?
            debugMessageln("%d> try_stmt[%d-%d]: %s", level, _mark, mark(), "'try' &&':' block except_block+ else_block? finally_block?");
            Token _keyword;
            Token _literal;
            SSTNode[] b;
            Object el;
            SSTNode[] ex;
            Object f;
            if (
                (_keyword = expect(511)) != null  // token='try'
                &&
                (_literal = expect_forced_token(11, ":")) != null  // forced_token=':'
                &&
                (b = block_rule()) != null  // block
                &&
                (ex = (SSTNode[])_loop1_62_rule()) != null  // except_block+
                &&
                ((el = _tmp_63_rule()) != null || true)  // else_block?
                &&
                ((f = _tmp_64_rule()) != null || true)  // finally_block?
            )
            {
                debugMessageln("%d try_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "'try' &&':' block except_block+ else_block? finally_block?");
                // TODO: node.action: _PyAST_Try ( b , ex , el , f , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Try ( b , ex , el , f , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'try' &&':' block except_block+ else_block? finally_block?");
                cache.putResult(_mark, TRY_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s try_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'try' &&':' block except_block+ else_block? finally_block?");
        }
        debugMessageln("Fail at %d: try_stmt", _mark);
        _res = null;
        cache.putResult(_mark, TRY_STMT_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // except_block:
    //     | 'except' expression ['as' NAME] ':' block
    //     | 'except' ':' block
    //     | invalid_except_block
    public SSTNode except_block_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, EXCEPT_BLOCK_ID)) {
            _res = (SSTNode)cache.getResult(_mark, EXCEPT_BLOCK_ID);
            level--;
            return (SSTNode)_res;
        }
        { // 'except' expression ['as' NAME] ':' block
            debugMessageln("%d> except_block[%d-%d]: %s", level, _mark, mark(), "'except' expression ['as' NAME] ':' block");
            Token _keyword;
            Token _literal;
            SSTNode[] b;
            SSTNode e;
            Object t;
            if (
                (_keyword = expect(521)) != null  // token='except'
                &&
                (e = expression_rule()) != null  // expression
                &&
                ((t = _tmp_65_rule()) != null || true)  // ['as' NAME]
                &&
                (_literal = expect(11)) != null  // token=':'
                &&
                (b = block_rule()) != null  // block
            )
            {
                debugMessageln("%d except_block[%d-%d]: %s succeeded!", level, _mark, mark(), "'except' expression ['as' NAME] ':' block");
                // TODO: node.action: _PyAST_ExceptHandler ( e , ( t ) ? ( ( expr_ty ) t ) -> v . Name . id : NULL , b , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_ExceptHandler ( e , ( t ) ? ( ( expr_ty ) t ) -> v . Name . id : NULL , b , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'except' expression ['as' NAME] ':' block");
                cache.putResult(_mark, EXCEPT_BLOCK_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s except_block[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'except' expression ['as' NAME] ':' block");
        }
        { // 'except' ':' block
            debugMessageln("%d> except_block[%d-%d]: %s", level, _mark, mark(), "'except' ':' block");
            Token _keyword;
            Token _literal;
            SSTNode[] b;
            if (
                (_keyword = expect(521)) != null  // token='except'
                &&
                (_literal = expect(11)) != null  // token=':'
                &&
                (b = block_rule()) != null  // block
            )
            {
                debugMessageln("%d except_block[%d-%d]: %s succeeded!", level, _mark, mark(), "'except' ':' block");
                // TODO: node.action: _PyAST_ExceptHandler ( NULL , NULL , b , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_ExceptHandler ( NULL , NULL , b , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'except' ':' block");
                cache.putResult(_mark, EXCEPT_BLOCK_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s except_block[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'except' ':' block");
        }
        if (callInvalidRules) { // invalid_except_block
            debugMessageln("%d> except_block[%d-%d]: %s", level, _mark, mark(), "invalid_except_block");
            Object invalid_except_block_var;
            if (
                (invalid_except_block_var = invalid_except_block_rule()) != null  // invalid_except_block
            )
            {
                debugMessageln("%d except_block[%d-%d]: %s succeeded!", level, _mark, mark(), "invalid_except_block");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "invalid_except_block");
                _res = invalid_except_block_var;
                cache.putResult(_mark, EXCEPT_BLOCK_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s except_block[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "invalid_except_block");
        }
        debugMessageln("Fail at %d: except_block", _mark);
        _res = null;
        cache.putResult(_mark, EXCEPT_BLOCK_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // finally_block: 'finally' ':' block
    public SSTNode[] finally_block_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, FINALLY_BLOCK_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, FINALLY_BLOCK_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // 'finally' ':' block
            debugMessageln("%d> finally_block[%d-%d]: %s", level, _mark, mark(), "'finally' ':' block");
            Token _keyword;
            Token _literal;
            SSTNode[] a;
            if (
                (_keyword = expect(522)) != null  // token='finally'
                &&
                (_literal = expect(11)) != null  // token=':'
                &&
                (a = block_rule()) != null  // block
            )
            {
                debugMessageln("%d finally_block[%d-%d]: %s succeeded!", level, _mark, mark(), "'finally' ':' block");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'finally' ':' block");
                cache.putResult(_mark, FINALLY_BLOCK_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s finally_block[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'finally' ':' block");
        }
        debugMessageln("Fail at %d: finally_block", _mark);
        _res = null;
        cache.putResult(_mark, FINALLY_BLOCK_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // match_stmt:
    //     | "match" subject_expr ':' NEWLINE INDENT case_block+ DEDENT
    //     | invalid_match_stmt
    public SSTNode match_stmt_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, MATCH_STMT_ID)) {
            _res = (SSTNode)cache.getResult(_mark, MATCH_STMT_ID);
            level--;
            return (SSTNode)_res;
        }
        { // "match" subject_expr ':' NEWLINE INDENT case_block+ DEDENT
            debugMessageln("%d> match_stmt[%d-%d]: %s", level, _mark, mark(), "\"match\" subject_expr ':' NEWLINE INDENT case_block+ DEDENT");
            SSTNode _keyword;
            Token _literal;
            SSTNode[] cases;
            Token dedent_var;
            Token indent_var;
            Token newline_var;
            SSTNode subject;
            if (
                (_keyword = expect_SOFT_KEYWORD("match")) != null  // soft_keyword='"match"'
                &&
                (subject = subject_expr_rule()) != null  // subject_expr
                &&
                (_literal = expect(11)) != null  // token=':'
                &&
                (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
                &&
                (indent_var = expect(Token.Kind.INDENT)) != null  // token='INDENT'
                &&
                (cases = (SSTNode[])_loop1_66_rule()) != null  // case_block+
                &&
                (dedent_var = expect(Token.Kind.DEDENT)) != null  // token='DEDENT'
            )
            {
                debugMessageln("%d match_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "\"match\" subject_expr ':' NEWLINE INDENT case_block+ DEDENT");
                // TODO: node.action: CHECK_VERSION ( stmt_ty , 10 , "Pattern matching is" , _PyAST_Match ( subject , cases , EXTRA ) )
                debugMessageln("[33;5;7m!!! TODO: Convert CHECK_VERSION ( stmt_ty , 10 , 'Pattern matching is' , _PyAST_Match ( subject , cases , EXTRA ) ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'match' subject_expr ':' NEWLINE INDENT case_block+ DEDENT");
                cache.putResult(_mark, MATCH_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s match_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "\"match\" subject_expr ':' NEWLINE INDENT case_block+ DEDENT");
        }
        if (callInvalidRules) { // invalid_match_stmt
            debugMessageln("%d> match_stmt[%d-%d]: %s", level, _mark, mark(), "invalid_match_stmt");
            Object invalid_match_stmt_var;
            if (
                (invalid_match_stmt_var = invalid_match_stmt_rule()) != null  // invalid_match_stmt
            )
            {
                debugMessageln("%d match_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "invalid_match_stmt");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "invalid_match_stmt");
                _res = invalid_match_stmt_var;
                cache.putResult(_mark, MATCH_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s match_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "invalid_match_stmt");
        }
        debugMessageln("Fail at %d: match_stmt", _mark);
        _res = null;
        cache.putResult(_mark, MATCH_STMT_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // subject_expr: star_named_expression ',' star_named_expressions? | named_expression
    public SSTNode subject_expr_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, SUBJECT_EXPR_ID)) {
            _res = (SSTNode)cache.getResult(_mark, SUBJECT_EXPR_ID);
            level--;
            return (SSTNode)_res;
        }
        { // star_named_expression ',' star_named_expressions?
            debugMessageln("%d> subject_expr[%d-%d]: %s", level, _mark, mark(), "star_named_expression ',' star_named_expressions?");
            Token _literal;
            SSTNode value;
            Object values;
            if (
                (value = star_named_expression_rule()) != null  // star_named_expression
                &&
                (_literal = expect(12)) != null  // token=','
                &&
                ((values = star_named_expressions_rule()) != null || true)  // star_named_expressions?
            )
            {
                debugMessageln("%d subject_expr[%d-%d]: %s succeeded!", level, _mark, mark(), "star_named_expression ',' star_named_expressions?");
                // TODO: node.action: _PyAST_Tuple ( CHECK ( asdl_expr_seq * , this . insertInFront ( value , values ) ) , Load , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Tuple ( CHECK ( asdl_expr_seq * , this . insertInFront ( value , values ) ) , Load , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "star_named_expression ',' star_named_expressions?");
                cache.putResult(_mark, SUBJECT_EXPR_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s subject_expr[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_named_expression ',' star_named_expressions?");
        }
        { // named_expression
            debugMessageln("%d> subject_expr[%d-%d]: %s", level, _mark, mark(), "named_expression");
            SSTNode named_expression_var;
            if (
                (named_expression_var = named_expression_rule()) != null  // named_expression
            )
            {
                debugMessageln("%d subject_expr[%d-%d]: %s succeeded!", level, _mark, mark(), "named_expression");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "named_expression");
                _res = named_expression_var;
                cache.putResult(_mark, SUBJECT_EXPR_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s subject_expr[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "named_expression");
        }
        debugMessageln("Fail at %d: subject_expr", _mark);
        _res = null;
        cache.putResult(_mark, SUBJECT_EXPR_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // case_block: "case" patterns guard? ':' block | invalid_case_block
    public SSTNode case_block_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, CASE_BLOCK_ID)) {
            _res = (SSTNode)cache.getResult(_mark, CASE_BLOCK_ID);
            level--;
            return (SSTNode)_res;
        }
        { // "case" patterns guard? ':' block
            debugMessageln("%d> case_block[%d-%d]: %s", level, _mark, mark(), "\"case\" patterns guard? ':' block");
            SSTNode _keyword;
            Token _literal;
            SSTNode[] body;
            Object guard;
            SSTNode pattern;
            if (
                (_keyword = expect_SOFT_KEYWORD("case")) != null  // soft_keyword='"case"'
                &&
                (pattern = patterns_rule()) != null  // patterns
                &&
                ((guard = guard_rule()) != null || true)  // guard?
                &&
                (_literal = expect(11)) != null  // token=':'
                &&
                (body = block_rule()) != null  // block
            )
            {
                debugMessageln("%d case_block[%d-%d]: %s succeeded!", level, _mark, mark(), "\"case\" patterns guard? ':' block");
                // TODO: node.action: _PyAST_match_case ( pattern , guard , body , p -> arena )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_match_case ( pattern , guard , body , p -> arena ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'case' patterns guard? ':' block");
                cache.putResult(_mark, CASE_BLOCK_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s case_block[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "\"case\" patterns guard? ':' block");
        }
        if (callInvalidRules) { // invalid_case_block
            debugMessageln("%d> case_block[%d-%d]: %s", level, _mark, mark(), "invalid_case_block");
            Object invalid_case_block_var;
            if (
                (invalid_case_block_var = invalid_case_block_rule()) != null  // invalid_case_block
            )
            {
                debugMessageln("%d case_block[%d-%d]: %s succeeded!", level, _mark, mark(), "invalid_case_block");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "invalid_case_block");
                _res = invalid_case_block_var;
                cache.putResult(_mark, CASE_BLOCK_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s case_block[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "invalid_case_block");
        }
        debugMessageln("Fail at %d: case_block", _mark);
        _res = null;
        cache.putResult(_mark, CASE_BLOCK_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // guard: 'if' named_expression
    public SSTNode guard_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, GUARD_ID)) {
            _res = (SSTNode)cache.getResult(_mark, GUARD_ID);
            level--;
            return (SSTNode)_res;
        }
        { // 'if' named_expression
            debugMessageln("%d> guard[%d-%d]: %s", level, _mark, mark(), "'if' named_expression");
            Token _keyword;
            SSTNode guard;
            if (
                (_keyword = expect(510)) != null  // token='if'
                &&
                (guard = named_expression_rule()) != null  // named_expression
            )
            {
                debugMessageln("%d guard[%d-%d]: %s succeeded!", level, _mark, mark(), "'if' named_expression");
                // TODO: node.action: guard
                debugMessageln("[33;5;7m!!! TODO: Convert guard to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'if' named_expression");
                cache.putResult(_mark, GUARD_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s guard[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'if' named_expression");
        }
        debugMessageln("Fail at %d: guard", _mark);
        _res = null;
        cache.putResult(_mark, GUARD_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // patterns: open_sequence_pattern | pattern
    public SSTNode patterns_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, PATTERNS_ID)) {
            _res = (SSTNode)cache.getResult(_mark, PATTERNS_ID);
            level--;
            return (SSTNode)_res;
        }
        { // open_sequence_pattern
            debugMessageln("%d> patterns[%d-%d]: %s", level, _mark, mark(), "open_sequence_pattern");
            SSTNode[] values;
            if (
                (values = (SSTNode[])open_sequence_pattern_rule()) != null  // open_sequence_pattern
            )
            {
                debugMessageln("%d patterns[%d-%d]: %s succeeded!", level, _mark, mark(), "open_sequence_pattern");
                // TODO: node.action: _PyAST_Tuple ( values , Load , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Tuple ( values , Load , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "open_sequence_pattern");
                cache.putResult(_mark, PATTERNS_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s patterns[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "open_sequence_pattern");
        }
        { // pattern
            debugMessageln("%d> patterns[%d-%d]: %s", level, _mark, mark(), "pattern");
            SSTNode pattern_var;
            if (
                (pattern_var = pattern_rule()) != null  // pattern
            )
            {
                debugMessageln("%d patterns[%d-%d]: %s succeeded!", level, _mark, mark(), "pattern");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "pattern");
                _res = pattern_var;
                cache.putResult(_mark, PATTERNS_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s patterns[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "pattern");
        }
        debugMessageln("Fail at %d: patterns", _mark);
        _res = null;
        cache.putResult(_mark, PATTERNS_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // pattern: as_pattern | or_pattern
    public SSTNode pattern_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, PATTERN_ID)) {
            _res = (SSTNode)cache.getResult(_mark, PATTERN_ID);
            level--;
            return (SSTNode)_res;
        }
        { // as_pattern
            debugMessageln("%d> pattern[%d-%d]: %s", level, _mark, mark(), "as_pattern");
            SSTNode as_pattern_var;
            if (
                (as_pattern_var = as_pattern_rule()) != null  // as_pattern
            )
            {
                debugMessageln("%d pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "as_pattern");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "as_pattern");
                _res = as_pattern_var;
                cache.putResult(_mark, PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "as_pattern");
        }
        { // or_pattern
            debugMessageln("%d> pattern[%d-%d]: %s", level, _mark, mark(), "or_pattern");
            SSTNode or_pattern_var;
            if (
                (or_pattern_var = or_pattern_rule()) != null  // or_pattern
            )
            {
                debugMessageln("%d pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "or_pattern");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "or_pattern");
                _res = or_pattern_var;
                cache.putResult(_mark, PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "or_pattern");
        }
        debugMessageln("Fail at %d: pattern", _mark);
        _res = null;
        cache.putResult(_mark, PATTERN_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // as_pattern: or_pattern 'as' capture_pattern
    public SSTNode as_pattern_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, AS_PATTERN_ID)) {
            _res = (SSTNode)cache.getResult(_mark, AS_PATTERN_ID);
            level--;
            return (SSTNode)_res;
        }
        { // or_pattern 'as' capture_pattern
            debugMessageln("%d> as_pattern[%d-%d]: %s", level, _mark, mark(), "or_pattern 'as' capture_pattern");
            Token _keyword;
            SSTNode pattern;
            SSTNode target;
            if (
                (pattern = or_pattern_rule()) != null  // or_pattern
                &&
                (_keyword = expect(520)) != null  // token='as'
                &&
                (target = capture_pattern_rule()) != null  // capture_pattern
            )
            {
                debugMessageln("%d as_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "or_pattern 'as' capture_pattern");
                // TODO: node.action: _PyAST_MatchAs ( pattern , target -> v . Name . id , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_MatchAs ( pattern , target -> v . Name . id , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "or_pattern 'as' capture_pattern");
                cache.putResult(_mark, AS_PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s as_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "or_pattern 'as' capture_pattern");
        }
        debugMessageln("Fail at %d: as_pattern", _mark);
        _res = null;
        cache.putResult(_mark, AS_PATTERN_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // or_pattern: '|'.closed_pattern+
    public SSTNode or_pattern_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, OR_PATTERN_ID)) {
            _res = (SSTNode)cache.getResult(_mark, OR_PATTERN_ID);
            level--;
            return (SSTNode)_res;
        }
        { // '|'.closed_pattern+
            debugMessageln("%d> or_pattern[%d-%d]: %s", level, _mark, mark(), "'|'.closed_pattern+");
            SSTNode[] patterns;
            if (
                (patterns = (SSTNode[])_gather_67_rule()) != null  // '|'.closed_pattern+
            )
            {
                debugMessageln("%d or_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "'|'.closed_pattern+");
                // TODO: node.action: asdl_seq_LEN ( patterns ) == 1 ? asdl_seq_GET ( patterns , 0 ) : _PyAST_MatchOr ( patterns , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert asdl_seq_LEN ( patterns ) == 1 ? asdl_seq_GET ( patterns , 0 ) : _PyAST_MatchOr ( patterns , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'|'.closed_pattern+");
                cache.putResult(_mark, OR_PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s or_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'|'.closed_pattern+");
        }
        debugMessageln("Fail at %d: or_pattern", _mark);
        _res = null;
        cache.putResult(_mark, OR_PATTERN_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // closed_pattern:
    //     | literal_pattern
    //     | capture_pattern
    //     | wildcard_pattern
    //     | value_pattern
    //     | group_pattern
    //     | sequence_pattern
    //     | mapping_pattern
    //     | class_pattern
    public SSTNode closed_pattern_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, CLOSED_PATTERN_ID)) {
            _res = (SSTNode)cache.getResult(_mark, CLOSED_PATTERN_ID);
            level--;
            return (SSTNode)_res;
        }
        { // literal_pattern
            debugMessageln("%d> closed_pattern[%d-%d]: %s", level, _mark, mark(), "literal_pattern");
            SSTNode literal_pattern_var;
            if (
                (literal_pattern_var = literal_pattern_rule()) != null  // literal_pattern
            )
            {
                debugMessageln("%d closed_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "literal_pattern");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "literal_pattern");
                _res = literal_pattern_var;
                cache.putResult(_mark, CLOSED_PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s closed_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "literal_pattern");
        }
        { // capture_pattern
            debugMessageln("%d> closed_pattern[%d-%d]: %s", level, _mark, mark(), "capture_pattern");
            SSTNode capture_pattern_var;
            if (
                (capture_pattern_var = capture_pattern_rule()) != null  // capture_pattern
            )
            {
                debugMessageln("%d closed_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "capture_pattern");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "capture_pattern");
                _res = capture_pattern_var;
                cache.putResult(_mark, CLOSED_PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s closed_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "capture_pattern");
        }
        { // wildcard_pattern
            debugMessageln("%d> closed_pattern[%d-%d]: %s", level, _mark, mark(), "wildcard_pattern");
            SSTNode wildcard_pattern_var;
            if (
                (wildcard_pattern_var = wildcard_pattern_rule()) != null  // wildcard_pattern
            )
            {
                debugMessageln("%d closed_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "wildcard_pattern");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "wildcard_pattern");
                _res = wildcard_pattern_var;
                cache.putResult(_mark, CLOSED_PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s closed_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "wildcard_pattern");
        }
        { // value_pattern
            debugMessageln("%d> closed_pattern[%d-%d]: %s", level, _mark, mark(), "value_pattern");
            SSTNode value_pattern_var;
            if (
                (value_pattern_var = value_pattern_rule()) != null  // value_pattern
            )
            {
                debugMessageln("%d closed_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "value_pattern");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "value_pattern");
                _res = value_pattern_var;
                cache.putResult(_mark, CLOSED_PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s closed_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "value_pattern");
        }
        { // group_pattern
            debugMessageln("%d> closed_pattern[%d-%d]: %s", level, _mark, mark(), "group_pattern");
            SSTNode group_pattern_var;
            if (
                (group_pattern_var = group_pattern_rule()) != null  // group_pattern
            )
            {
                debugMessageln("%d closed_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "group_pattern");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "group_pattern");
                _res = group_pattern_var;
                cache.putResult(_mark, CLOSED_PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s closed_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "group_pattern");
        }
        { // sequence_pattern
            debugMessageln("%d> closed_pattern[%d-%d]: %s", level, _mark, mark(), "sequence_pattern");
            SSTNode sequence_pattern_var;
            if (
                (sequence_pattern_var = sequence_pattern_rule()) != null  // sequence_pattern
            )
            {
                debugMessageln("%d closed_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "sequence_pattern");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "sequence_pattern");
                _res = sequence_pattern_var;
                cache.putResult(_mark, CLOSED_PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s closed_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "sequence_pattern");
        }
        { // mapping_pattern
            debugMessageln("%d> closed_pattern[%d-%d]: %s", level, _mark, mark(), "mapping_pattern");
            SSTNode mapping_pattern_var;
            if (
                (mapping_pattern_var = mapping_pattern_rule()) != null  // mapping_pattern
            )
            {
                debugMessageln("%d closed_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "mapping_pattern");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "mapping_pattern");
                _res = mapping_pattern_var;
                cache.putResult(_mark, CLOSED_PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s closed_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "mapping_pattern");
        }
        { // class_pattern
            debugMessageln("%d> closed_pattern[%d-%d]: %s", level, _mark, mark(), "class_pattern");
            SSTNode class_pattern_var;
            if (
                (class_pattern_var = class_pattern_rule()) != null  // class_pattern
            )
            {
                debugMessageln("%d closed_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "class_pattern");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "class_pattern");
                _res = class_pattern_var;
                cache.putResult(_mark, CLOSED_PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s closed_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "class_pattern");
        }
        debugMessageln("Fail at %d: closed_pattern", _mark);
        _res = null;
        cache.putResult(_mark, CLOSED_PATTERN_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // literal_pattern:
    //     | signed_number !('+' | '-')
    //     | signed_number '+' NUMBER
    //     | signed_number '-' NUMBER
    //     | strings
    //     | 'None'
    //     | 'True'
    //     | 'False'
    public SSTNode literal_pattern_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, LITERAL_PATTERN_ID)) {
            _res = (SSTNode)cache.getResult(_mark, LITERAL_PATTERN_ID);
            level--;
            return (SSTNode)_res;
        }
        Token startToken = getAndInitializeToken();
        { // signed_number !('+' | '-')
            debugMessageln("%d> literal_pattern[%d-%d]: %s", level, _mark, mark(), "signed_number !('+' | '-')");
            SSTNode signed_number_var;
            if (
                (signed_number_var = signed_number_rule()) != null  // signed_number
                &&
                genLookahead__tmp_69_rule(false)
            )
            {
                debugMessageln("%d literal_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "signed_number !('+' | '-')");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "signed_number !('+' | '-')");
                _res = signed_number_var;
                cache.putResult(_mark, LITERAL_PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s literal_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "signed_number !('+' | '-')");
        }
        { // signed_number '+' NUMBER
            debugMessageln("%d> literal_pattern[%d-%d]: %s", level, _mark, mark(), "signed_number '+' NUMBER");
            Token _literal;
            SSTNode imag;
            SSTNode real;
            if (
                (real = signed_number_rule()) != null  // signed_number
                &&
                (_literal = expect(14)) != null  // token='+'
                &&
                (imag = number_token()) != null  // NUMBER
            )
            {
                debugMessageln("%d literal_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "signed_number '+' NUMBER");
                // TODO: node.action: _PyAST_BinOp ( real , Add , imag , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_BinOp ( real , Add , imag , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "signed_number '+' NUMBER");
                cache.putResult(_mark, LITERAL_PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s literal_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "signed_number '+' NUMBER");
        }
        { // signed_number '-' NUMBER
            debugMessageln("%d> literal_pattern[%d-%d]: %s", level, _mark, mark(), "signed_number '-' NUMBER");
            Token _literal;
            SSTNode imag;
            SSTNode real;
            if (
                (real = signed_number_rule()) != null  // signed_number
                &&
                (_literal = expect(15)) != null  // token='-'
                &&
                (imag = number_token()) != null  // NUMBER
            )
            {
                debugMessageln("%d literal_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "signed_number '-' NUMBER");
                // TODO: node.action: _PyAST_BinOp ( real , Sub , imag , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_BinOp ( real , Sub , imag , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "signed_number '-' NUMBER");
                cache.putResult(_mark, LITERAL_PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s literal_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "signed_number '-' NUMBER");
        }
        { // strings
            debugMessageln("%d> literal_pattern[%d-%d]: %s", level, _mark, mark(), "strings");
            SSTNode strings_var;
            if (
                (strings_var = strings_rule()) != null  // strings
            )
            {
                debugMessageln("%d literal_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "strings");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "strings");
                _res = strings_var;
                cache.putResult(_mark, LITERAL_PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s literal_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "strings");
        }
        { // 'None'
            debugMessageln("%d> literal_pattern[%d-%d]: %s", level, _mark, mark(), "'None'");
            Token _keyword;
            if (
                (_keyword = expect(523)) != null  // token='None'
            )
            {
                debugMessageln("%d literal_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "'None'");
                _res = factory.createNone(startToken.startOffset,startToken.endOffset);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'None'");
                cache.putResult(_mark, LITERAL_PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s literal_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'None'");
        }
        { // 'True'
            debugMessageln("%d> literal_pattern[%d-%d]: %s", level, _mark, mark(), "'True'");
            Token _keyword;
            if (
                (_keyword = expect(524)) != null  // token='True'
            )
            {
                debugMessageln("%d literal_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "'True'");
                _res = factory.createBooleanLiteral(true,startToken.startOffset,startToken.endOffset);;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'True'");
                cache.putResult(_mark, LITERAL_PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s literal_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'True'");
        }
        { // 'False'
            debugMessageln("%d> literal_pattern[%d-%d]: %s", level, _mark, mark(), "'False'");
            Token _keyword;
            if (
                (_keyword = expect(525)) != null  // token='False'
            )
            {
                debugMessageln("%d literal_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "'False'");
                _res = factory.createBooleanLiteral(false,startToken.startOffset,startToken.endOffset);;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'False'");
                cache.putResult(_mark, LITERAL_PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s literal_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'False'");
        }
        debugMessageln("Fail at %d: literal_pattern", _mark);
        _res = null;
        cache.putResult(_mark, LITERAL_PATTERN_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // signed_number: NUMBER | '-' NUMBER
    public SSTNode signed_number_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, SIGNED_NUMBER_ID)) {
            _res = (SSTNode)cache.getResult(_mark, SIGNED_NUMBER_ID);
            level--;
            return (SSTNode)_res;
        }
        { // NUMBER
            debugMessageln("%d> signed_number[%d-%d]: %s", level, _mark, mark(), "NUMBER");
            SSTNode number_var;
            if (
                (number_var = number_token()) != null  // NUMBER
            )
            {
                debugMessageln("%d signed_number[%d-%d]: %s succeeded!", level, _mark, mark(), "NUMBER");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "NUMBER");
                _res = number_var;
                cache.putResult(_mark, SIGNED_NUMBER_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s signed_number[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "NUMBER");
        }
        { // '-' NUMBER
            debugMessageln("%d> signed_number[%d-%d]: %s", level, _mark, mark(), "'-' NUMBER");
            Token _literal;
            SSTNode number;
            if (
                (_literal = expect(15)) != null  // token='-'
                &&
                (number = number_token()) != null  // NUMBER
            )
            {
                debugMessageln("%d signed_number[%d-%d]: %s succeeded!", level, _mark, mark(), "'-' NUMBER");
                // TODO: node.action: _PyAST_UnaryOp ( USub , number , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_UnaryOp ( USub , number , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'-' NUMBER");
                cache.putResult(_mark, SIGNED_NUMBER_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s signed_number[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'-' NUMBER");
        }
        debugMessageln("Fail at %d: signed_number", _mark);
        _res = null;
        cache.putResult(_mark, SIGNED_NUMBER_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // capture_pattern: !"_" NAME !('.' | '(' | '=')
    public SSTNode capture_pattern_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, CAPTURE_PATTERN_ID)) {
            _res = (SSTNode)cache.getResult(_mark, CAPTURE_PATTERN_ID);
            level--;
            return (SSTNode)_res;
        }
        { // !"_" NAME !('.' | '(' | '=')
            debugMessageln("%d> capture_pattern[%d-%d]: %s", level, _mark, mark(), "!\"_\" NAME !('.' | '(' | '=')");
            SSTNode name;
            if (
                genLookahead_expect_SOFT_KEYWORD(false, "_")
                &&
                (name = name_token()) != null  // NAME
                &&
                genLookahead__tmp_70_rule(false)
            )
            {
                debugMessageln("%d capture_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "!\"_\" NAME !('.' | '(' | '=')");
                // TODO: node.action: _PyPegen_set_expr_context ( p , name , Store )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_set_expr_context ( p , name , Store ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "!'_' NAME !('.' | '(' | '=')");
                cache.putResult(_mark, CAPTURE_PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s capture_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "!\"_\" NAME !('.' | '(' | '=')");
        }
        debugMessageln("Fail at %d: capture_pattern", _mark);
        _res = null;
        cache.putResult(_mark, CAPTURE_PATTERN_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // wildcard_pattern: "_"
    public SSTNode wildcard_pattern_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, WILDCARD_PATTERN_ID)) {
            _res = (SSTNode)cache.getResult(_mark, WILDCARD_PATTERN_ID);
            level--;
            return (SSTNode)_res;
        }
        { // "_"
            debugMessageln("%d> wildcard_pattern[%d-%d]: %s", level, _mark, mark(), "\"_\"");
            SSTNode _keyword;
            if (
                (_keyword = expect_SOFT_KEYWORD("_")) != null  // soft_keyword='"_"'
            )
            {
                debugMessageln("%d wildcard_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "\"_\"");
                // TODO: node.action: _PyAST_Name ( CHECK ( PyObject * , _PyPegen_new_identifier ( p , "_" ) ) , Store , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Name ( CHECK ( PyObject * , _PyPegen_new_identifier ( p , '_' ) ) , Store , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'_'");
                cache.putResult(_mark, WILDCARD_PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s wildcard_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "\"_\"");
        }
        debugMessageln("Fail at %d: wildcard_pattern", _mark);
        _res = null;
        cache.putResult(_mark, WILDCARD_PATTERN_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // value_pattern: attr !('.' | '(' | '=')
    public SSTNode value_pattern_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, VALUE_PATTERN_ID)) {
            _res = (SSTNode)cache.getResult(_mark, VALUE_PATTERN_ID);
            level--;
            return (SSTNode)_res;
        }
        { // attr !('.' | '(' | '=')
            debugMessageln("%d> value_pattern[%d-%d]: %s", level, _mark, mark(), "attr !('.' | '(' | '=')");
            SSTNode attr;
            if (
                (attr = attr_rule()) != null  // attr
                &&
                genLookahead__tmp_71_rule(false)
            )
            {
                debugMessageln("%d value_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "attr !('.' | '(' | '=')");
                // TODO: node.action: attr
                debugMessageln("[33;5;7m!!! TODO: Convert attr to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "attr !('.' | '(' | '=')");
                cache.putResult(_mark, VALUE_PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s value_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "attr !('.' | '(' | '=')");
        }
        debugMessageln("Fail at %d: value_pattern", _mark);
        _res = null;
        cache.putResult(_mark, VALUE_PATTERN_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // Left-recursive
    // attr: name_or_attr '.' NAME
    public SSTNode attr_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, ATTR_ID)) {
            _res = cache.getResult(_mark, ATTR_ID);
            level--;
            return (SSTNode)_res;
        }
        int _resmark = mark();
        while (true) {
            cache.putResult(_mark, ATTR_ID, _res);
            reset(_mark);
            SSTNode _raw = attr_raw();
            if (_raw == null || mark() <= _resmark)
                break;
            _resmark = mark();
            _res = _raw;
        }
        reset(_resmark);
        level--;
        return (SSTNode)_res;
    }
    private SSTNode attr_raw()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        { // name_or_attr '.' NAME
            debugMessageln("%d> attr[%d-%d]: %s", level, _mark, mark(), "name_or_attr '.' NAME");
            Token _literal;
            SSTNode attr;
            SSTNode value;
            if (
                (value = name_or_attr_rule()) != null  // name_or_attr
                &&
                (_literal = expect(23)) != null  // token='.'
                &&
                (attr = name_token()) != null  // NAME
            )
            {
                debugMessageln("%d attr[%d-%d]: %s succeeded!", level, _mark, mark(), "name_or_attr '.' NAME");
                // TODO: node.action: _PyAST_Attribute ( value , attr -> v . Name . id , Load , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Attribute ( value , attr -> v . Name . id , Load , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "name_or_attr '.' NAME");
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s attr[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "name_or_attr '.' NAME");
        }
        debugMessageln("Fail at %d: attr", _mark);
        _res = null;
        level--;
        return (SSTNode)_res;
    }

    // Left-recursive
    // name_or_attr: attr | NAME
    public SSTNode name_or_attr_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        { // attr
            debugMessageln("%d> name_or_attr[%d-%d]: %s", level, _mark, mark(), "attr");
            SSTNode attr_var;
            if (
                (attr_var = attr_rule()) != null  // attr
            )
            {
                debugMessageln("%d name_or_attr[%d-%d]: %s succeeded!", level, _mark, mark(), "attr");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "attr");
                _res = attr_var;
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s name_or_attr[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "attr");
        }
        { // NAME
            debugMessageln("%d> name_or_attr[%d-%d]: %s", level, _mark, mark(), "NAME");
            SSTNode name_var;
            if (
                (name_var = name_token()) != null  // NAME
            )
            {
                debugMessageln("%d name_or_attr[%d-%d]: %s succeeded!", level, _mark, mark(), "NAME");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "NAME");
                _res = name_var;
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s name_or_attr[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "NAME");
        }
        debugMessageln("Fail at %d: name_or_attr", _mark);
        _res = null;
        level--;
        return (SSTNode)_res;
    }

    // group_pattern: '(' pattern ')'
    public SSTNode group_pattern_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, GROUP_PATTERN_ID)) {
            _res = (SSTNode)cache.getResult(_mark, GROUP_PATTERN_ID);
            level--;
            return (SSTNode)_res;
        }
        { // '(' pattern ')'
            debugMessageln("%d> group_pattern[%d-%d]: %s", level, _mark, mark(), "'(' pattern ')'");
            Token _literal;
            Token _literal_1;
            SSTNode pattern;
            if (
                (_literal = expect(7)) != null  // token='('
                &&
                (pattern = pattern_rule()) != null  // pattern
                &&
                (_literal_1 = expect(8)) != null  // token=')'
            )
            {
                debugMessageln("%d group_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "'(' pattern ')'");
                // TODO: node.action: pattern
                debugMessageln("[33;5;7m!!! TODO: Convert pattern to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'(' pattern ')'");
                cache.putResult(_mark, GROUP_PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s group_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'(' pattern ')'");
        }
        debugMessageln("Fail at %d: group_pattern", _mark);
        _res = null;
        cache.putResult(_mark, GROUP_PATTERN_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // sequence_pattern: '[' maybe_sequence_pattern? ']' | '(' open_sequence_pattern? ')'
    public SSTNode sequence_pattern_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, SEQUENCE_PATTERN_ID)) {
            _res = (SSTNode)cache.getResult(_mark, SEQUENCE_PATTERN_ID);
            level--;
            return (SSTNode)_res;
        }
        { // '[' maybe_sequence_pattern? ']'
            debugMessageln("%d> sequence_pattern[%d-%d]: %s", level, _mark, mark(), "'[' maybe_sequence_pattern? ']'");
            Token _literal;
            Token _literal_1;
            Object values;
            if (
                (_literal = expect(9)) != null  // token='['
                &&
                ((values = maybe_sequence_pattern_rule()) != null || true)  // maybe_sequence_pattern?
                &&
                (_literal_1 = expect(10)) != null  // token=']'
            )
            {
                debugMessageln("%d sequence_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "'[' maybe_sequence_pattern? ']'");
                // TODO: node.action: _PyAST_List ( values , Load , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_List ( values , Load , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'[' maybe_sequence_pattern? ']'");
                cache.putResult(_mark, SEQUENCE_PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s sequence_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'[' maybe_sequence_pattern? ']'");
        }
        { // '(' open_sequence_pattern? ')'
            debugMessageln("%d> sequence_pattern[%d-%d]: %s", level, _mark, mark(), "'(' open_sequence_pattern? ')'");
            Token _literal;
            Token _literal_1;
            Object values;
            if (
                (_literal = expect(7)) != null  // token='('
                &&
                ((values = open_sequence_pattern_rule()) != null || true)  // open_sequence_pattern?
                &&
                (_literal_1 = expect(8)) != null  // token=')'
            )
            {
                debugMessageln("%d sequence_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "'(' open_sequence_pattern? ')'");
                // TODO: node.action: _PyAST_Tuple ( values , Load , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Tuple ( values , Load , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'(' open_sequence_pattern? ')'");
                cache.putResult(_mark, SEQUENCE_PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s sequence_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'(' open_sequence_pattern? ')'");
        }
        debugMessageln("Fail at %d: sequence_pattern", _mark);
        _res = null;
        cache.putResult(_mark, SEQUENCE_PATTERN_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // open_sequence_pattern: maybe_star_pattern ',' maybe_sequence_pattern?
    public SSTNode[] open_sequence_pattern_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, OPEN_SEQUENCE_PATTERN_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, OPEN_SEQUENCE_PATTERN_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // maybe_star_pattern ',' maybe_sequence_pattern?
            debugMessageln("%d> open_sequence_pattern[%d-%d]: %s", level, _mark, mark(), "maybe_star_pattern ',' maybe_sequence_pattern?");
            Token _literal;
            SSTNode value;
            Object values;
            if (
                (value = maybe_star_pattern_rule()) != null  // maybe_star_pattern
                &&
                (_literal = expect(12)) != null  // token=','
                &&
                ((values = maybe_sequence_pattern_rule()) != null || true)  // maybe_sequence_pattern?
            )
            {
                debugMessageln("%d open_sequence_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "maybe_star_pattern ',' maybe_sequence_pattern?");
                _res = this.insertInFront(value,(SSTNode[])values);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "maybe_star_pattern ',' maybe_sequence_pattern?");
                cache.putResult(_mark, OPEN_SEQUENCE_PATTERN_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s open_sequence_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "maybe_star_pattern ',' maybe_sequence_pattern?");
        }
        debugMessageln("Fail at %d: open_sequence_pattern", _mark);
        _res = null;
        cache.putResult(_mark, OPEN_SEQUENCE_PATTERN_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // maybe_sequence_pattern: ','.maybe_star_pattern+ ','?
    public SSTNode[] maybe_sequence_pattern_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, MAYBE_SEQUENCE_PATTERN_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, MAYBE_SEQUENCE_PATTERN_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // ','.maybe_star_pattern+ ','?
            debugMessageln("%d> maybe_sequence_pattern[%d-%d]: %s", level, _mark, mark(), "','.maybe_star_pattern+ ','?");
            Object _opt_var;
            SSTNode[] values;
            if (
                (values = _gather_72_rule()) != null  // ','.maybe_star_pattern+
                &&
                ((_opt_var = expect(12)) != null || true)  // ','?
            )
            {
                debugMessageln("%d maybe_sequence_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "','.maybe_star_pattern+ ','?");
                // TODO: node.action: values
                debugMessageln("[33;5;7m!!! TODO: Convert values to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "','.maybe_star_pattern+ ','?");
                cache.putResult(_mark, MAYBE_SEQUENCE_PATTERN_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s maybe_sequence_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','.maybe_star_pattern+ ','?");
        }
        debugMessageln("Fail at %d: maybe_sequence_pattern", _mark);
        _res = null;
        cache.putResult(_mark, MAYBE_SEQUENCE_PATTERN_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // maybe_star_pattern: star_pattern | pattern
    public SSTNode maybe_star_pattern_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, MAYBE_STAR_PATTERN_ID)) {
            _res = (SSTNode)cache.getResult(_mark, MAYBE_STAR_PATTERN_ID);
            level--;
            return (SSTNode)_res;
        }
        { // star_pattern
            debugMessageln("%d> maybe_star_pattern[%d-%d]: %s", level, _mark, mark(), "star_pattern");
            SSTNode star_pattern_var;
            if (
                (star_pattern_var = star_pattern_rule()) != null  // star_pattern
            )
            {
                debugMessageln("%d maybe_star_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "star_pattern");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "star_pattern");
                _res = star_pattern_var;
                cache.putResult(_mark, MAYBE_STAR_PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s maybe_star_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_pattern");
        }
        { // pattern
            debugMessageln("%d> maybe_star_pattern[%d-%d]: %s", level, _mark, mark(), "pattern");
            SSTNode pattern_var;
            if (
                (pattern_var = pattern_rule()) != null  // pattern
            )
            {
                debugMessageln("%d maybe_star_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "pattern");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "pattern");
                _res = pattern_var;
                cache.putResult(_mark, MAYBE_STAR_PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s maybe_star_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "pattern");
        }
        debugMessageln("Fail at %d: maybe_star_pattern", _mark);
        _res = null;
        cache.putResult(_mark, MAYBE_STAR_PATTERN_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // star_pattern: '*' (capture_pattern | wildcard_pattern)
    public SSTNode star_pattern_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, STAR_PATTERN_ID)) {
            _res = (SSTNode)cache.getResult(_mark, STAR_PATTERN_ID);
            level--;
            return (SSTNode)_res;
        }
        { // '*' (capture_pattern | wildcard_pattern)
            debugMessageln("%d> star_pattern[%d-%d]: %s", level, _mark, mark(), "'*' (capture_pattern | wildcard_pattern)");
            Token _literal;
            Object value;
            if (
                (_literal = expect(16)) != null  // token='*'
                &&
                (value = _tmp_74_rule()) != null  // capture_pattern | wildcard_pattern
            )
            {
                debugMessageln("%d star_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "'*' (capture_pattern | wildcard_pattern)");
                // TODO: node.action: _PyAST_Starred ( value , Store , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Starred ( value , Store , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'*' (capture_pattern | wildcard_pattern)");
                cache.putResult(_mark, STAR_PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s star_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'*' (capture_pattern | wildcard_pattern)");
        }
        debugMessageln("Fail at %d: star_pattern", _mark);
        _res = null;
        cache.putResult(_mark, STAR_PATTERN_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // mapping_pattern: '{' items_pattern? '}'
    public SSTNode mapping_pattern_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, MAPPING_PATTERN_ID)) {
            _res = (SSTNode)cache.getResult(_mark, MAPPING_PATTERN_ID);
            level--;
            return (SSTNode)_res;
        }
        { // '{' items_pattern? '}'
            debugMessageln("%d> mapping_pattern[%d-%d]: %s", level, _mark, mark(), "'{' items_pattern? '}'");
            Token _literal;
            Token _literal_1;
            Object items;
            if (
                (_literal = expect(25)) != null  // token='{'
                &&
                ((items = items_pattern_rule()) != null || true)  // items_pattern?
                &&
                (_literal_1 = expect(26)) != null  // token='}'
            )
            {
                debugMessageln("%d mapping_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "'{' items_pattern? '}'");
                // TODO: node.action: _PyAST_Dict ( CHECK ( asdl_expr_seq * , _PyPegen_get_keys ( p , items ) ) , CHECK ( asdl_expr_seq * , _PyPegen_get_values ( p , items ) ) , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Dict ( CHECK ( asdl_expr_seq * , _PyPegen_get_keys ( p , items ) ) , CHECK ( asdl_expr_seq * , _PyPegen_get_values ( p , items ) ) , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'{' items_pattern? '}'");
                cache.putResult(_mark, MAPPING_PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s mapping_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'{' items_pattern? '}'");
        }
        debugMessageln("Fail at %d: mapping_pattern", _mark);
        _res = null;
        cache.putResult(_mark, MAPPING_PATTERN_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // items_pattern: ','.key_value_pattern+ ','?
    public SSTNode[] items_pattern_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, ITEMS_PATTERN_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, ITEMS_PATTERN_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // ','.key_value_pattern+ ','?
            debugMessageln("%d> items_pattern[%d-%d]: %s", level, _mark, mark(), "','.key_value_pattern+ ','?");
            Object _opt_var;
            SSTNode[] items;
            if (
                (items = _gather_75_rule()) != null  // ','.key_value_pattern+
                &&
                ((_opt_var = expect(12)) != null || true)  // ','?
            )
            {
                debugMessageln("%d items_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "','.key_value_pattern+ ','?");
                // TODO: node.action: items
                debugMessageln("[33;5;7m!!! TODO: Convert items to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "','.key_value_pattern+ ','?");
                cache.putResult(_mark, ITEMS_PATTERN_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s items_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','.key_value_pattern+ ','?");
        }
        debugMessageln("Fail at %d: items_pattern", _mark);
        _res = null;
        cache.putResult(_mark, ITEMS_PATTERN_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // key_value_pattern: (literal_pattern | value_pattern) ':' pattern | double_star_pattern
    public SSTNode[] key_value_pattern_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, KEY_VALUE_PATTERN_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, KEY_VALUE_PATTERN_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // (literal_pattern | value_pattern) ':' pattern
            debugMessageln("%d> key_value_pattern[%d-%d]: %s", level, _mark, mark(), "(literal_pattern | value_pattern) ':' pattern");
            Token _literal;
            Object key;
            SSTNode value;
            if (
                (key = _tmp_77_rule()) != null  // literal_pattern | value_pattern
                &&
                (_literal = expect(11)) != null  // token=':'
                &&
                (value = pattern_rule()) != null  // pattern
            )
            {
                debugMessageln("%d key_value_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "(literal_pattern | value_pattern) ':' pattern");
                // TODO: node.action: _PyPegen_key_value_pair ( p , key , value )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_key_value_pair ( p , key , value ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "(literal_pattern | value_pattern) ':' pattern");
                cache.putResult(_mark, KEY_VALUE_PATTERN_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s key_value_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "(literal_pattern | value_pattern) ':' pattern");
        }
        { // double_star_pattern
            debugMessageln("%d> key_value_pattern[%d-%d]: %s", level, _mark, mark(), "double_star_pattern");
            SSTNode[] double_star_pattern_var;
            if (
                (double_star_pattern_var = double_star_pattern_rule()) != null  // double_star_pattern
            )
            {
                debugMessageln("%d key_value_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "double_star_pattern");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "double_star_pattern");
                _res = double_star_pattern_var;
                cache.putResult(_mark, KEY_VALUE_PATTERN_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s key_value_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "double_star_pattern");
        }
        debugMessageln("Fail at %d: key_value_pattern", _mark);
        _res = null;
        cache.putResult(_mark, KEY_VALUE_PATTERN_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // double_star_pattern: '**' capture_pattern
    public SSTNode[] double_star_pattern_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, DOUBLE_STAR_PATTERN_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, DOUBLE_STAR_PATTERN_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // '**' capture_pattern
            debugMessageln("%d> double_star_pattern[%d-%d]: %s", level, _mark, mark(), "'**' capture_pattern");
            Token _literal;
            SSTNode value;
            if (
                (_literal = expect(35)) != null  // token='**'
                &&
                (value = capture_pattern_rule()) != null  // capture_pattern
            )
            {
                debugMessageln("%d double_star_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "'**' capture_pattern");
                // TODO: node.action: _PyPegen_key_value_pair ( p , NULL , value )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_key_value_pair ( p , NULL , value ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'**' capture_pattern");
                cache.putResult(_mark, DOUBLE_STAR_PATTERN_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s double_star_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'**' capture_pattern");
        }
        debugMessageln("Fail at %d: double_star_pattern", _mark);
        _res = null;
        cache.putResult(_mark, DOUBLE_STAR_PATTERN_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // class_pattern:
    //     | name_or_attr '(' ')'
    //     | name_or_attr '(' positional_patterns ','? ')'
    //     | name_or_attr '(' keyword_patterns ','? ')'
    //     | name_or_attr '(' positional_patterns ',' keyword_patterns ','? ')'
    public SSTNode class_pattern_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, CLASS_PATTERN_ID)) {
            _res = (SSTNode)cache.getResult(_mark, CLASS_PATTERN_ID);
            level--;
            return (SSTNode)_res;
        }
        { // name_or_attr '(' ')'
            debugMessageln("%d> class_pattern[%d-%d]: %s", level, _mark, mark(), "name_or_attr '(' ')'");
            Token _literal;
            Token _literal_1;
            SSTNode func;
            if (
                (func = name_or_attr_rule()) != null  // name_or_attr
                &&
                (_literal = expect(7)) != null  // token='('
                &&
                (_literal_1 = expect(8)) != null  // token=')'
            )
            {
                debugMessageln("%d class_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "name_or_attr '(' ')'");
                // TODO: node.action: _PyAST_Call ( func , NULL , NULL , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Call ( func , NULL , NULL , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "name_or_attr '(' ')'");
                cache.putResult(_mark, CLASS_PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s class_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "name_or_attr '(' ')'");
        }
        { // name_or_attr '(' positional_patterns ','? ')'
            debugMessageln("%d> class_pattern[%d-%d]: %s", level, _mark, mark(), "name_or_attr '(' positional_patterns ','? ')'");
            Token _literal;
            Token _literal_1;
            Object _opt_var;
            SSTNode[] args;
            SSTNode func;
            if (
                (func = name_or_attr_rule()) != null  // name_or_attr
                &&
                (_literal = expect(7)) != null  // token='('
                &&
                (args = positional_patterns_rule()) != null  // positional_patterns
                &&
                ((_opt_var = expect(12)) != null || true)  // ','?
                &&
                (_literal_1 = expect(8)) != null  // token=')'
            )
            {
                debugMessageln("%d class_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "name_or_attr '(' positional_patterns ','? ')'");
                // TODO: node.action: _PyAST_Call ( func , args , NULL , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Call ( func , args , NULL , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "name_or_attr '(' positional_patterns ','? ')'");
                cache.putResult(_mark, CLASS_PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s class_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "name_or_attr '(' positional_patterns ','? ')'");
        }
        { // name_or_attr '(' keyword_patterns ','? ')'
            debugMessageln("%d> class_pattern[%d-%d]: %s", level, _mark, mark(), "name_or_attr '(' keyword_patterns ','? ')'");
            Token _literal;
            Token _literal_1;
            Object _opt_var;
            SSTNode func;
            SSTNode[] keywords;
            if (
                (func = name_or_attr_rule()) != null  // name_or_attr
                &&
                (_literal = expect(7)) != null  // token='('
                &&
                (keywords = keyword_patterns_rule()) != null  // keyword_patterns
                &&
                ((_opt_var = expect(12)) != null || true)  // ','?
                &&
                (_literal_1 = expect(8)) != null  // token=')'
            )
            {
                debugMessageln("%d class_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "name_or_attr '(' keyword_patterns ','? ')'");
                // TODO: node.action: _PyAST_Call ( func , NULL , keywords , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Call ( func , NULL , keywords , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "name_or_attr '(' keyword_patterns ','? ')'");
                cache.putResult(_mark, CLASS_PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s class_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "name_or_attr '(' keyword_patterns ','? ')'");
        }
        { // name_or_attr '(' positional_patterns ',' keyword_patterns ','? ')'
            debugMessageln("%d> class_pattern[%d-%d]: %s", level, _mark, mark(), "name_or_attr '(' positional_patterns ',' keyword_patterns ','? ')'");
            Token _literal;
            Token _literal_1;
            Token _literal_2;
            Object _opt_var;
            SSTNode[] args;
            SSTNode func;
            SSTNode[] keywords;
            if (
                (func = name_or_attr_rule()) != null  // name_or_attr
                &&
                (_literal = expect(7)) != null  // token='('
                &&
                (args = positional_patterns_rule()) != null  // positional_patterns
                &&
                (_literal_1 = expect(12)) != null  // token=','
                &&
                (keywords = keyword_patterns_rule()) != null  // keyword_patterns
                &&
                ((_opt_var = expect(12)) != null || true)  // ','?
                &&
                (_literal_2 = expect(8)) != null  // token=')'
            )
            {
                debugMessageln("%d class_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "name_or_attr '(' positional_patterns ',' keyword_patterns ','? ')'");
                // TODO: node.action: _PyAST_Call ( func , args , keywords , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Call ( func , args , keywords , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "name_or_attr '(' positional_patterns ',' keyword_patterns ','? ')'");
                cache.putResult(_mark, CLASS_PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s class_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "name_or_attr '(' positional_patterns ',' keyword_patterns ','? ')'");
        }
        debugMessageln("Fail at %d: class_pattern", _mark);
        _res = null;
        cache.putResult(_mark, CLASS_PATTERN_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // positional_patterns: ','.pattern+
    public SSTNode[] positional_patterns_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, POSITIONAL_PATTERNS_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, POSITIONAL_PATTERNS_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // ','.pattern+
            debugMessageln("%d> positional_patterns[%d-%d]: %s", level, _mark, mark(), "','.pattern+");
            SSTNode[] args;
            if (
                (args = (SSTNode[])_gather_78_rule()) != null  // ','.pattern+
            )
            {
                debugMessageln("%d positional_patterns[%d-%d]: %s succeeded!", level, _mark, mark(), "','.pattern+");
                // TODO: node.action: args
                debugMessageln("[33;5;7m!!! TODO: Convert args to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "','.pattern+");
                cache.putResult(_mark, POSITIONAL_PATTERNS_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s positional_patterns[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','.pattern+");
        }
        debugMessageln("Fail at %d: positional_patterns", _mark);
        _res = null;
        cache.putResult(_mark, POSITIONAL_PATTERNS_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // keyword_patterns: ','.keyword_pattern+
    public SSTNode[] keyword_patterns_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, KEYWORD_PATTERNS_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, KEYWORD_PATTERNS_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // ','.keyword_pattern+
            debugMessageln("%d> keyword_patterns[%d-%d]: %s", level, _mark, mark(), "','.keyword_pattern+");
            SSTNode[] keywords;
            if (
                (keywords = (SSTNode[])_gather_80_rule()) != null  // ','.keyword_pattern+
            )
            {
                debugMessageln("%d keyword_patterns[%d-%d]: %s succeeded!", level, _mark, mark(), "','.keyword_pattern+");
                // TODO: node.action: keywords
                debugMessageln("[33;5;7m!!! TODO: Convert keywords to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "','.keyword_pattern+");
                cache.putResult(_mark, KEYWORD_PATTERNS_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s keyword_patterns[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','.keyword_pattern+");
        }
        debugMessageln("Fail at %d: keyword_patterns", _mark);
        _res = null;
        cache.putResult(_mark, KEYWORD_PATTERNS_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // keyword_pattern: NAME '=' pattern
    public SSTNode keyword_pattern_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, KEYWORD_PATTERN_ID)) {
            _res = (SSTNode)cache.getResult(_mark, KEYWORD_PATTERN_ID);
            level--;
            return (SSTNode)_res;
        }
        { // NAME '=' pattern
            debugMessageln("%d> keyword_pattern[%d-%d]: %s", level, _mark, mark(), "NAME '=' pattern");
            Token _literal;
            SSTNode arg;
            SSTNode value;
            if (
                (arg = name_token()) != null  // NAME
                &&
                (_literal = expect(22)) != null  // token='='
                &&
                (value = pattern_rule()) != null  // pattern
            )
            {
                debugMessageln("%d keyword_pattern[%d-%d]: %s succeeded!", level, _mark, mark(), "NAME '=' pattern");
                // TODO: node.action: _PyAST_keyword ( arg -> v . Name . id , value , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_keyword ( arg -> v . Name . id , value , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "NAME '=' pattern");
                cache.putResult(_mark, KEYWORD_PATTERN_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s keyword_pattern[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "NAME '=' pattern");
        }
        debugMessageln("Fail at %d: keyword_pattern", _mark);
        _res = null;
        cache.putResult(_mark, KEYWORD_PATTERN_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // return_stmt: 'return' star_expressions?
    public SSTNode return_stmt_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, RETURN_STMT_ID)) {
            _res = (SSTNode)cache.getResult(_mark, RETURN_STMT_ID);
            level--;
            return (SSTNode)_res;
        }
        { // 'return' star_expressions?
            debugMessageln("%d> return_stmt[%d-%d]: %s", level, _mark, mark(), "'return' star_expressions?");
            Token _keyword;
            Object a;
            if (
                (_keyword = expect(500)) != null  // token='return'
                &&
                ((a = _tmp_82_rule()) != null || true)  // star_expressions?
            )
            {
                debugMessageln("%d return_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "'return' star_expressions?");
                // TODO: node.action: _PyAST_Return ( a , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Return ( a , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'return' star_expressions?");
                cache.putResult(_mark, RETURN_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s return_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'return' star_expressions?");
        }
        debugMessageln("Fail at %d: return_stmt", _mark);
        _res = null;
        cache.putResult(_mark, RETURN_STMT_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // raise_stmt: 'raise' expression ['from' expression] | 'raise'
    public SSTNode raise_stmt_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, RAISE_STMT_ID)) {
            _res = (SSTNode)cache.getResult(_mark, RAISE_STMT_ID);
            level--;
            return (SSTNode)_res;
        }
        { // 'raise' expression ['from' expression]
            debugMessageln("%d> raise_stmt[%d-%d]: %s", level, _mark, mark(), "'raise' expression ['from' expression]");
            Token _keyword;
            SSTNode a;
            Object b;
            if (
                (_keyword = expect(501)) != null  // token='raise'
                &&
                (a = expression_rule()) != null  // expression
                &&
                ((b = _tmp_83_rule()) != null || true)  // ['from' expression]
            )
            {
                debugMessageln("%d raise_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "'raise' expression ['from' expression]");
                // TODO: node.action: _PyAST_Raise ( a , b , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Raise ( a , b , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'raise' expression ['from' expression]");
                cache.putResult(_mark, RAISE_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s raise_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'raise' expression ['from' expression]");
        }
        { // 'raise'
            debugMessageln("%d> raise_stmt[%d-%d]: %s", level, _mark, mark(), "'raise'");
            Token _keyword;
            if (
                (_keyword = expect(501)) != null  // token='raise'
            )
            {
                debugMessageln("%d raise_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "'raise'");
                // TODO: node.action: _PyAST_Raise ( NULL , NULL , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Raise ( NULL , NULL , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'raise'");
                cache.putResult(_mark, RAISE_STMT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s raise_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'raise'");
        }
        debugMessageln("Fail at %d: raise_stmt", _mark);
        _res = null;
        cache.putResult(_mark, RAISE_STMT_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // function_def: decorators function_def_raw | function_def_raw
    public SSTNode function_def_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, FUNCTION_DEF_ID)) {
            _res = (SSTNode)cache.getResult(_mark, FUNCTION_DEF_ID);
            level--;
            return (SSTNode)_res;
        }
        { // decorators function_def_raw
            debugMessageln("%d> function_def[%d-%d]: %s", level, _mark, mark(), "decorators function_def_raw");
            SSTNode[] d;
            SSTNode f;
            if (
                (d = decorators_rule()) != null  // decorators
                &&
                (f = function_def_raw_rule()) != null  // function_def_raw
            )
            {
                debugMessageln("%d function_def[%d-%d]: %s succeeded!", level, _mark, mark(), "decorators function_def_raw");
                // TODO: node.action: _PyPegen_function_def_decorators ( p , d , f )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_function_def_decorators ( p , d , f ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "decorators function_def_raw");
                cache.putResult(_mark, FUNCTION_DEF_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s function_def[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "decorators function_def_raw");
        }
        { // function_def_raw
            debugMessageln("%d> function_def[%d-%d]: %s", level, _mark, mark(), "function_def_raw");
            SSTNode function_def_raw_var;
            if (
                (function_def_raw_var = function_def_raw_rule()) != null  // function_def_raw
            )
            {
                debugMessageln("%d function_def[%d-%d]: %s succeeded!", level, _mark, mark(), "function_def_raw");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "function_def_raw");
                _res = function_def_raw_var;
                cache.putResult(_mark, FUNCTION_DEF_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s function_def[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "function_def_raw");
        }
        debugMessageln("Fail at %d: function_def", _mark);
        _res = null;
        cache.putResult(_mark, FUNCTION_DEF_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // function_def_raw:
    //     | 'def' NAME '(' params? ')' ['->' expression] &&':' func_type_comment? block
    //     | ASYNC 'def' NAME '(' params? ')' ['->' expression] &&':' func_type_comment? block
    public SSTNode function_def_raw_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, FUNCTION_DEF_RAW_ID)) {
            _res = (SSTNode)cache.getResult(_mark, FUNCTION_DEF_RAW_ID);
            level--;
            return (SSTNode)_res;
        }
        { // 'def' NAME '(' params? ')' ['->' expression] &&':' func_type_comment? block
            debugMessageln("%d> function_def_raw[%d-%d]: %s", level, _mark, mark(), "'def' NAME '(' params? ')' ['->' expression] &&':' func_type_comment? block");
            Token _keyword;
            Token _literal;
            Token _literal_1;
            Token _literal_2;
            Object a;
            SSTNode[] b;
            SSTNode n;
            Object params;
            Object tc;
            if (
                (_keyword = expect(526)) != null  // token='def'
                &&
                (n = name_token()) != null  // NAME
                &&
                (_literal = expect(7)) != null  // token='('
                &&
                ((params = _tmp_84_rule()) != null || true)  // params?
                &&
                (_literal_1 = expect(8)) != null  // token=')'
                &&
                ((a = _tmp_85_rule()) != null || true)  // ['->' expression]
                &&
                (_literal_2 = expect_forced_token(11, ":")) != null  // forced_token=':'
                &&
                ((tc = _tmp_86_rule()) != null || true)  // func_type_comment?
                &&
                (b = block_rule()) != null  // block
            )
            {
                debugMessageln("%d function_def_raw[%d-%d]: %s succeeded!", level, _mark, mark(), "'def' NAME '(' params? ')' ['->' expression] &&':' func_type_comment? block");
                // TODO: node.action: _PyAST_FunctionDef ( n -> v . Name . id , ( params ) ? params : CHECK ( arguments_ty , _PyPegen_empty_arguments ( p ) ) , b , NULL , a , NEW_TYPE_COMMENT ( p , tc ) , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_FunctionDef ( n -> v . Name . id , ( params ) ? params : CHECK ( arguments_ty , _PyPegen_empty_arguments ( p ) ) , b , NULL , a , NEW_TYPE_COMMENT ( p , tc ) , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'def' NAME '(' params? ')' ['->' expression] &&':' func_type_comment? block");
                cache.putResult(_mark, FUNCTION_DEF_RAW_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s function_def_raw[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'def' NAME '(' params? ')' ['->' expression] &&':' func_type_comment? block");
        }
        { // ASYNC 'def' NAME '(' params? ')' ['->' expression] &&':' func_type_comment? block
            debugMessageln("%d> function_def_raw[%d-%d]: %s", level, _mark, mark(), "ASYNC 'def' NAME '(' params? ')' ['->' expression] &&':' func_type_comment? block");
            Token _keyword;
            Token _literal;
            Token _literal_1;
            Token _literal_2;
            Object a;
            Token async_var;
            SSTNode[] b;
            SSTNode n;
            Object params;
            Object tc;
            if (
                (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
                &&
                (_keyword = expect(526)) != null  // token='def'
                &&
                (n = name_token()) != null  // NAME
                &&
                (_literal = expect(7)) != null  // token='('
                &&
                ((params = _tmp_87_rule()) != null || true)  // params?
                &&
                (_literal_1 = expect(8)) != null  // token=')'
                &&
                ((a = _tmp_88_rule()) != null || true)  // ['->' expression]
                &&
                (_literal_2 = expect_forced_token(11, ":")) != null  // forced_token=':'
                &&
                ((tc = _tmp_89_rule()) != null || true)  // func_type_comment?
                &&
                (b = block_rule()) != null  // block
            )
            {
                debugMessageln("%d function_def_raw[%d-%d]: %s succeeded!", level, _mark, mark(), "ASYNC 'def' NAME '(' params? ')' ['->' expression] &&':' func_type_comment? block");
                // TODO: node.action: CHECK_VERSION ( stmt_ty , 5 , "Async functions are" , _PyAST_AsyncFunctionDef ( n -> v . Name . id , ( params ) ? params : CHECK ( arguments_ty , _PyPegen_empty_arguments ( p ) ) , b , NULL , a , NEW_TYPE_COMMENT ( p , tc ) , EXTRA ) )
                debugMessageln("[33;5;7m!!! TODO: Convert CHECK_VERSION ( stmt_ty , 5 , 'Async functions are' , _PyAST_AsyncFunctionDef ( n -> v . Name . id , ( params ) ? params : CHECK ( arguments_ty , _PyPegen_empty_arguments ( p ) ) , b , NULL , a , NEW_TYPE_COMMENT ( p , tc ) , EXTRA ) ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "ASYNC 'def' NAME '(' params? ')' ['->' expression] &&':' func_type_comment? block");
                cache.putResult(_mark, FUNCTION_DEF_RAW_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s function_def_raw[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "ASYNC 'def' NAME '(' params? ')' ['->' expression] &&':' func_type_comment? block");
        }
        debugMessageln("Fail at %d: function_def_raw", _mark);
        _res = null;
        cache.putResult(_mark, FUNCTION_DEF_RAW_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // func_type_comment:
    //     | NEWLINE TYPE_COMMENT &(NEWLINE INDENT)
    //     | invalid_double_type_comments
    //     | TYPE_COMMENT
    public SSTNode[] func_type_comment_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, FUNC_TYPE_COMMENT_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, FUNC_TYPE_COMMENT_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // NEWLINE TYPE_COMMENT &(NEWLINE INDENT)
            debugMessageln("%d> func_type_comment[%d-%d]: %s", level, _mark, mark(), "NEWLINE TYPE_COMMENT &(NEWLINE INDENT)");
            Token newline_var;
            Token t;
            if (
                (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
                &&
                (t = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
                &&
                genLookahead__tmp_90_rule(true)
            )
            {
                debugMessageln("%d func_type_comment[%d-%d]: %s succeeded!", level, _mark, mark(), "NEWLINE TYPE_COMMENT &(NEWLINE INDENT)");
                _res = t;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "NEWLINE TYPE_COMMENT &(NEWLINE INDENT)");
                cache.putResult(_mark, FUNC_TYPE_COMMENT_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s func_type_comment[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "NEWLINE TYPE_COMMENT &(NEWLINE INDENT)");
        }
        if (callInvalidRules) { // invalid_double_type_comments
            debugMessageln("%d> func_type_comment[%d-%d]: %s", level, _mark, mark(), "invalid_double_type_comments");
            Object invalid_double_type_comments_var;
            if (
                (invalid_double_type_comments_var = invalid_double_type_comments_rule()) != null  // invalid_double_type_comments
            )
            {
                debugMessageln("%d func_type_comment[%d-%d]: %s succeeded!", level, _mark, mark(), "invalid_double_type_comments");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "invalid_double_type_comments");
                _res = invalid_double_type_comments_var;
                cache.putResult(_mark, FUNC_TYPE_COMMENT_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s func_type_comment[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "invalid_double_type_comments");
        }
        { // TYPE_COMMENT
            debugMessageln("%d> func_type_comment[%d-%d]: %s", level, _mark, mark(), "TYPE_COMMENT");
            Token type_comment_var;
            if (
                (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            )
            {
                debugMessageln("%d func_type_comment[%d-%d]: %s succeeded!", level, _mark, mark(), "TYPE_COMMENT");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "TYPE_COMMENT");
                _res = type_comment_var;
                cache.putResult(_mark, FUNC_TYPE_COMMENT_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s func_type_comment[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "TYPE_COMMENT");
        }
        debugMessageln("Fail at %d: func_type_comment", _mark);
        _res = null;
        cache.putResult(_mark, FUNC_TYPE_COMMENT_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // params: invalid_parameters | parameters
    public SSTNode params_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, PARAMS_ID)) {
            _res = (SSTNode)cache.getResult(_mark, PARAMS_ID);
            level--;
            return (SSTNode)_res;
        }
        if (callInvalidRules) { // invalid_parameters
            debugMessageln("%d> params[%d-%d]: %s", level, _mark, mark(), "invalid_parameters");
            Object invalid_parameters_var;
            if (
                (invalid_parameters_var = invalid_parameters_rule()) != null  // invalid_parameters
            )
            {
                debugMessageln("%d params[%d-%d]: %s succeeded!", level, _mark, mark(), "invalid_parameters");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "invalid_parameters");
                _res = invalid_parameters_var;
                cache.putResult(_mark, PARAMS_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s params[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "invalid_parameters");
        }
        { // parameters
            debugMessageln("%d> params[%d-%d]: %s", level, _mark, mark(), "parameters");
            SSTNode parameters_var;
            if (
                (parameters_var = parameters_rule()) != null  // parameters
            )
            {
                debugMessageln("%d params[%d-%d]: %s succeeded!", level, _mark, mark(), "parameters");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "parameters");
                _res = parameters_var;
                cache.putResult(_mark, PARAMS_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s params[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "parameters");
        }
        debugMessageln("Fail at %d: params", _mark);
        _res = null;
        cache.putResult(_mark, PARAMS_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // parameters:
    //     | slash_no_default param_no_default* param_with_default* star_etc?
    //     | slash_with_default param_with_default* star_etc?
    //     | param_no_default+ param_with_default* star_etc?
    //     | param_with_default+ star_etc?
    //     | star_etc
    public SSTNode parameters_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, PARAMETERS_ID)) {
            _res = (SSTNode)cache.getResult(_mark, PARAMETERS_ID);
            level--;
            return (SSTNode)_res;
        }
        { // slash_no_default param_no_default* param_with_default* star_etc?
            debugMessageln("%d> parameters[%d-%d]: %s", level, _mark, mark(), "slash_no_default param_no_default* param_with_default* star_etc?");
            SSTNode[] a;
            SSTNode[] b;
            SSTNode[] c;
            Object d;
            if (
                (a = slash_no_default_rule()) != null  // slash_no_default
                &&
                (b = (SSTNode[])_loop0_91_rule()) != null  // param_no_default*
                &&
                (c = _loop0_92_rule()) != null  // param_with_default*
                &&
                ((d = _tmp_93_rule()) != null || true)  // star_etc?
            )
            {
                debugMessageln("%d parameters[%d-%d]: %s succeeded!", level, _mark, mark(), "slash_no_default param_no_default* param_with_default* star_etc?");
                // TODO: node.action: _PyPegen_make_arguments ( p , a , NULL , b , c , d )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_make_arguments ( p , a , NULL , b , c , d ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "slash_no_default param_no_default* param_with_default* star_etc?");
                cache.putResult(_mark, PARAMETERS_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s parameters[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "slash_no_default param_no_default* param_with_default* star_etc?");
        }
        { // slash_with_default param_with_default* star_etc?
            debugMessageln("%d> parameters[%d-%d]: %s", level, _mark, mark(), "slash_with_default param_with_default* star_etc?");
            SSTNode[] a;
            SSTNode[] b;
            Object c;
            if (
                (a = slash_with_default_rule()) != null  // slash_with_default
                &&
                (b = _loop0_94_rule()) != null  // param_with_default*
                &&
                ((c = _tmp_95_rule()) != null || true)  // star_etc?
            )
            {
                debugMessageln("%d parameters[%d-%d]: %s succeeded!", level, _mark, mark(), "slash_with_default param_with_default* star_etc?");
                // TODO: node.action: _PyPegen_make_arguments ( p , NULL , a , NULL , b , c )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_make_arguments ( p , NULL , a , NULL , b , c ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "slash_with_default param_with_default* star_etc?");
                cache.putResult(_mark, PARAMETERS_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s parameters[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "slash_with_default param_with_default* star_etc?");
        }
        { // param_no_default+ param_with_default* star_etc?
            debugMessageln("%d> parameters[%d-%d]: %s", level, _mark, mark(), "param_no_default+ param_with_default* star_etc?");
            SSTNode[] a;
            SSTNode[] b;
            Object c;
            if (
                (a = (SSTNode[])_loop1_96_rule()) != null  // param_no_default+
                &&
                (b = _loop0_97_rule()) != null  // param_with_default*
                &&
                ((c = _tmp_98_rule()) != null || true)  // star_etc?
            )
            {
                debugMessageln("%d parameters[%d-%d]: %s succeeded!", level, _mark, mark(), "param_no_default+ param_with_default* star_etc?");
                // TODO: node.action: _PyPegen_make_arguments ( p , NULL , NULL , a , b , c )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_make_arguments ( p , NULL , NULL , a , b , c ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "param_no_default+ param_with_default* star_etc?");
                cache.putResult(_mark, PARAMETERS_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s parameters[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "param_no_default+ param_with_default* star_etc?");
        }
        { // param_with_default+ star_etc?
            debugMessageln("%d> parameters[%d-%d]: %s", level, _mark, mark(), "param_with_default+ star_etc?");
            SSTNode[] a;
            Object b;
            if (
                (a = _loop1_99_rule()) != null  // param_with_default+
                &&
                ((b = _tmp_100_rule()) != null || true)  // star_etc?
            )
            {
                debugMessageln("%d parameters[%d-%d]: %s succeeded!", level, _mark, mark(), "param_with_default+ star_etc?");
                // TODO: node.action: _PyPegen_make_arguments ( p , NULL , NULL , NULL , a , b )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_make_arguments ( p , NULL , NULL , NULL , a , b ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "param_with_default+ star_etc?");
                cache.putResult(_mark, PARAMETERS_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s parameters[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "param_with_default+ star_etc?");
        }
        { // star_etc
            debugMessageln("%d> parameters[%d-%d]: %s", level, _mark, mark(), "star_etc");
            SSTNode[] a;
            if (
                (a = star_etc_rule()) != null  // star_etc
            )
            {
                debugMessageln("%d parameters[%d-%d]: %s succeeded!", level, _mark, mark(), "star_etc");
                // TODO: node.action: _PyPegen_make_arguments ( p , NULL , NULL , NULL , NULL , a )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_make_arguments ( p , NULL , NULL , NULL , NULL , a ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "star_etc");
                cache.putResult(_mark, PARAMETERS_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s parameters[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_etc");
        }
        debugMessageln("Fail at %d: parameters", _mark);
        _res = null;
        cache.putResult(_mark, PARAMETERS_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // slash_no_default: param_no_default+ '/' ',' | param_no_default+ '/' &')'
    public SSTNode[] slash_no_default_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, SLASH_NO_DEFAULT_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, SLASH_NO_DEFAULT_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // param_no_default+ '/' ','
            debugMessageln("%d> slash_no_default[%d-%d]: %s", level, _mark, mark(), "param_no_default+ '/' ','");
            Token _literal;
            Token _literal_1;
            SSTNode[] a;
            if (
                (a = (SSTNode[])_loop1_101_rule()) != null  // param_no_default+
                &&
                (_literal = expect(17)) != null  // token='/'
                &&
                (_literal_1 = expect(12)) != null  // token=','
            )
            {
                debugMessageln("%d slash_no_default[%d-%d]: %s succeeded!", level, _mark, mark(), "param_no_default+ '/' ','");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "param_no_default+ '/' ','");
                cache.putResult(_mark, SLASH_NO_DEFAULT_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s slash_no_default[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "param_no_default+ '/' ','");
        }
        { // param_no_default+ '/' &')'
            debugMessageln("%d> slash_no_default[%d-%d]: %s", level, _mark, mark(), "param_no_default+ '/' &')'");
            Token _literal;
            SSTNode[] a;
            if (
                (a = (SSTNode[])_loop1_102_rule()) != null  // param_no_default+
                &&
                (_literal = expect(17)) != null  // token='/'
                &&
                genLookahead_expect(true, 8)  // token=')'
            )
            {
                debugMessageln("%d slash_no_default[%d-%d]: %s succeeded!", level, _mark, mark(), "param_no_default+ '/' &')'");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "param_no_default+ '/' &')'");
                cache.putResult(_mark, SLASH_NO_DEFAULT_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s slash_no_default[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "param_no_default+ '/' &')'");
        }
        debugMessageln("Fail at %d: slash_no_default", _mark);
        _res = null;
        cache.putResult(_mark, SLASH_NO_DEFAULT_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // slash_with_default:
    //     | param_no_default* param_with_default+ '/' ','
    //     | param_no_default* param_with_default+ '/' &')'
    public SSTNode[] slash_with_default_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, SLASH_WITH_DEFAULT_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, SLASH_WITH_DEFAULT_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // param_no_default* param_with_default+ '/' ','
            debugMessageln("%d> slash_with_default[%d-%d]: %s", level, _mark, mark(), "param_no_default* param_with_default+ '/' ','");
            Token _literal;
            Token _literal_1;
            SSTNode[] a;
            SSTNode[] b;
            if (
                (a = _loop0_103_rule()) != null  // param_no_default*
                &&
                (b = _loop1_104_rule()) != null  // param_with_default+
                &&
                (_literal = expect(17)) != null  // token='/'
                &&
                (_literal_1 = expect(12)) != null  // token=','
            )
            {
                debugMessageln("%d slash_with_default[%d-%d]: %s succeeded!", level, _mark, mark(), "param_no_default* param_with_default+ '/' ','");
                // TODO: node.action: _PyPegen_slash_with_default ( p , ( asdl_arg_seq * ) a , b )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_slash_with_default ( p , ( asdl_arg_seq * ) a , b ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "param_no_default* param_with_default+ '/' ','");
                cache.putResult(_mark, SLASH_WITH_DEFAULT_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s slash_with_default[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "param_no_default* param_with_default+ '/' ','");
        }
        { // param_no_default* param_with_default+ '/' &')'
            debugMessageln("%d> slash_with_default[%d-%d]: %s", level, _mark, mark(), "param_no_default* param_with_default+ '/' &')'");
            Token _literal;
            SSTNode[] a;
            SSTNode[] b;
            if (
                (a = _loop0_105_rule()) != null  // param_no_default*
                &&
                (b = _loop1_106_rule()) != null  // param_with_default+
                &&
                (_literal = expect(17)) != null  // token='/'
                &&
                genLookahead_expect(true, 8)  // token=')'
            )
            {
                debugMessageln("%d slash_with_default[%d-%d]: %s succeeded!", level, _mark, mark(), "param_no_default* param_with_default+ '/' &')'");
                // TODO: node.action: _PyPegen_slash_with_default ( p , ( asdl_arg_seq * ) a , b )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_slash_with_default ( p , ( asdl_arg_seq * ) a , b ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "param_no_default* param_with_default+ '/' &')'");
                cache.putResult(_mark, SLASH_WITH_DEFAULT_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s slash_with_default[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "param_no_default* param_with_default+ '/' &')'");
        }
        debugMessageln("Fail at %d: slash_with_default", _mark);
        _res = null;
        cache.putResult(_mark, SLASH_WITH_DEFAULT_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // star_etc:
    //     | '*' param_no_default param_maybe_default* kwds?
    //     | '*' ',' param_maybe_default+ kwds?
    //     | kwds
    //     | invalid_star_etc
    public SSTNode[] star_etc_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, STAR_ETC_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, STAR_ETC_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // '*' param_no_default param_maybe_default* kwds?
            debugMessageln("%d> star_etc[%d-%d]: %s", level, _mark, mark(), "'*' param_no_default param_maybe_default* kwds?");
            Token _literal;
            SSTNode a;
            SSTNode[] b;
            Object c;
            if (
                (_literal = expect(16)) != null  // token='*'
                &&
                (a = param_no_default_rule()) != null  // param_no_default
                &&
                (b = _loop0_107_rule()) != null  // param_maybe_default*
                &&
                ((c = _tmp_108_rule()) != null || true)  // kwds?
            )
            {
                debugMessageln("%d star_etc[%d-%d]: %s succeeded!", level, _mark, mark(), "'*' param_no_default param_maybe_default* kwds?");
                // TODO: node.action: _PyPegen_star_etc ( p , a , b , c )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_star_etc ( p , a , b , c ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'*' param_no_default param_maybe_default* kwds?");
                cache.putResult(_mark, STAR_ETC_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s star_etc[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'*' param_no_default param_maybe_default* kwds?");
        }
        { // '*' ',' param_maybe_default+ kwds?
            debugMessageln("%d> star_etc[%d-%d]: %s", level, _mark, mark(), "'*' ',' param_maybe_default+ kwds?");
            Token _literal;
            Token _literal_1;
            SSTNode[] b;
            Object c;
            if (
                (_literal = expect(16)) != null  // token='*'
                &&
                (_literal_1 = expect(12)) != null  // token=','
                &&
                (b = _loop1_109_rule()) != null  // param_maybe_default+
                &&
                ((c = _tmp_110_rule()) != null || true)  // kwds?
            )
            {
                debugMessageln("%d star_etc[%d-%d]: %s succeeded!", level, _mark, mark(), "'*' ',' param_maybe_default+ kwds?");
                // TODO: node.action: _PyPegen_star_etc ( p , NULL , b , c )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_star_etc ( p , NULL , b , c ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'*' ',' param_maybe_default+ kwds?");
                cache.putResult(_mark, STAR_ETC_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s star_etc[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'*' ',' param_maybe_default+ kwds?");
        }
        { // kwds
            debugMessageln("%d> star_etc[%d-%d]: %s", level, _mark, mark(), "kwds");
            SSTNode a;
            if (
                (a = kwds_rule()) != null  // kwds
            )
            {
                debugMessageln("%d star_etc[%d-%d]: %s succeeded!", level, _mark, mark(), "kwds");
                // TODO: node.action: _PyPegen_star_etc ( p , NULL , NULL , a )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_star_etc ( p , NULL , NULL , a ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "kwds");
                cache.putResult(_mark, STAR_ETC_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s star_etc[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "kwds");
        }
        if (callInvalidRules) { // invalid_star_etc
            debugMessageln("%d> star_etc[%d-%d]: %s", level, _mark, mark(), "invalid_star_etc");
            Object invalid_star_etc_var;
            if (
                (invalid_star_etc_var = invalid_star_etc_rule()) != null  // invalid_star_etc
            )
            {
                debugMessageln("%d star_etc[%d-%d]: %s succeeded!", level, _mark, mark(), "invalid_star_etc");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "invalid_star_etc");
                _res = invalid_star_etc_var;
                cache.putResult(_mark, STAR_ETC_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s star_etc[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "invalid_star_etc");
        }
        debugMessageln("Fail at %d: star_etc", _mark);
        _res = null;
        cache.putResult(_mark, STAR_ETC_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // kwds: '**' param_no_default
    public SSTNode kwds_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, KWDS_ID)) {
            _res = (SSTNode)cache.getResult(_mark, KWDS_ID);
            level--;
            return (SSTNode)_res;
        }
        { // '**' param_no_default
            debugMessageln("%d> kwds[%d-%d]: %s", level, _mark, mark(), "'**' param_no_default");
            Token _literal;
            SSTNode a;
            if (
                (_literal = expect(35)) != null  // token='**'
                &&
                (a = param_no_default_rule()) != null  // param_no_default
            )
            {
                debugMessageln("%d kwds[%d-%d]: %s succeeded!", level, _mark, mark(), "'**' param_no_default");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'**' param_no_default");
                cache.putResult(_mark, KWDS_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s kwds[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'**' param_no_default");
        }
        debugMessageln("Fail at %d: kwds", _mark);
        _res = null;
        cache.putResult(_mark, KWDS_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // param_no_default: param ',' TYPE_COMMENT? | param TYPE_COMMENT? &')'
    public SSTNode param_no_default_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, PARAM_NO_DEFAULT_ID)) {
            _res = (SSTNode)cache.getResult(_mark, PARAM_NO_DEFAULT_ID);
            level--;
            return (SSTNode)_res;
        }
        { // param ',' TYPE_COMMENT?
            debugMessageln("%d> param_no_default[%d-%d]: %s", level, _mark, mark(), "param ',' TYPE_COMMENT?");
            Token _literal;
            SSTNode a;
            Object tc;
            if (
                (a = param_rule()) != null  // param
                &&
                (_literal = expect(12)) != null  // token=','
                &&
                ((tc = expect(Token.Kind.TYPE_COMMENT)) != null || true)  // TYPE_COMMENT?
            )
            {
                debugMessageln("%d param_no_default[%d-%d]: %s succeeded!", level, _mark, mark(), "param ',' TYPE_COMMENT?");
                // TODO: node.action: _PyPegen_add_type_comment_to_arg ( p , a , tc )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_add_type_comment_to_arg ( p , a , tc ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "param ',' TYPE_COMMENT?");
                cache.putResult(_mark, PARAM_NO_DEFAULT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s param_no_default[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "param ',' TYPE_COMMENT?");
        }
        { // param TYPE_COMMENT? &')'
            debugMessageln("%d> param_no_default[%d-%d]: %s", level, _mark, mark(), "param TYPE_COMMENT? &')'");
            SSTNode a;
            Object tc;
            if (
                (a = param_rule()) != null  // param
                &&
                ((tc = expect(Token.Kind.TYPE_COMMENT)) != null || true)  // TYPE_COMMENT?
                &&
                genLookahead_expect(true, 8)  // token=')'
            )
            {
                debugMessageln("%d param_no_default[%d-%d]: %s succeeded!", level, _mark, mark(), "param TYPE_COMMENT? &')'");
                // TODO: node.action: _PyPegen_add_type_comment_to_arg ( p , a , tc )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_add_type_comment_to_arg ( p , a , tc ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "param TYPE_COMMENT? &')'");
                cache.putResult(_mark, PARAM_NO_DEFAULT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s param_no_default[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "param TYPE_COMMENT? &')'");
        }
        debugMessageln("Fail at %d: param_no_default", _mark);
        _res = null;
        cache.putResult(_mark, PARAM_NO_DEFAULT_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // param_with_default:
    //     | param default_param ',' TYPE_COMMENT?
    //     | param default_param TYPE_COMMENT? &')'
    public SSTNode[] param_with_default_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, PARAM_WITH_DEFAULT_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, PARAM_WITH_DEFAULT_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // param default_param ',' TYPE_COMMENT?
            debugMessageln("%d> param_with_default[%d-%d]: %s", level, _mark, mark(), "param default_param ',' TYPE_COMMENT?");
            Token _literal;
            SSTNode a;
            SSTNode c;
            Object tc;
            if (
                (a = param_rule()) != null  // param
                &&
                (c = default_param_rule()) != null  // default_param
                &&
                (_literal = expect(12)) != null  // token=','
                &&
                ((tc = expect(Token.Kind.TYPE_COMMENT)) != null || true)  // TYPE_COMMENT?
            )
            {
                debugMessageln("%d param_with_default[%d-%d]: %s succeeded!", level, _mark, mark(), "param default_param ',' TYPE_COMMENT?");
                // TODO: node.action: _PyPegen_name_default_pair ( p , a , c , tc )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_name_default_pair ( p , a , c , tc ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "param default_param ',' TYPE_COMMENT?");
                cache.putResult(_mark, PARAM_WITH_DEFAULT_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s param_with_default[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "param default_param ',' TYPE_COMMENT?");
        }
        { // param default_param TYPE_COMMENT? &')'
            debugMessageln("%d> param_with_default[%d-%d]: %s", level, _mark, mark(), "param default_param TYPE_COMMENT? &')'");
            SSTNode a;
            SSTNode c;
            Object tc;
            if (
                (a = param_rule()) != null  // param
                &&
                (c = default_param_rule()) != null  // default_param
                &&
                ((tc = expect(Token.Kind.TYPE_COMMENT)) != null || true)  // TYPE_COMMENT?
                &&
                genLookahead_expect(true, 8)  // token=')'
            )
            {
                debugMessageln("%d param_with_default[%d-%d]: %s succeeded!", level, _mark, mark(), "param default_param TYPE_COMMENT? &')'");
                // TODO: node.action: _PyPegen_name_default_pair ( p , a , c , tc )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_name_default_pair ( p , a , c , tc ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "param default_param TYPE_COMMENT? &')'");
                cache.putResult(_mark, PARAM_WITH_DEFAULT_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s param_with_default[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "param default_param TYPE_COMMENT? &')'");
        }
        debugMessageln("Fail at %d: param_with_default", _mark);
        _res = null;
        cache.putResult(_mark, PARAM_WITH_DEFAULT_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // param_maybe_default:
    //     | param default_param? ',' TYPE_COMMENT?
    //     | param default_param? TYPE_COMMENT? &')'
    public SSTNode[] param_maybe_default_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, PARAM_MAYBE_DEFAULT_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, PARAM_MAYBE_DEFAULT_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // param default_param? ',' TYPE_COMMENT?
            debugMessageln("%d> param_maybe_default[%d-%d]: %s", level, _mark, mark(), "param default_param? ',' TYPE_COMMENT?");
            Token _literal;
            SSTNode a;
            Object c;
            Object tc;
            if (
                (a = param_rule()) != null  // param
                &&
                ((c = default_param_rule()) != null || true)  // default_param?
                &&
                (_literal = expect(12)) != null  // token=','
                &&
                ((tc = expect(Token.Kind.TYPE_COMMENT)) != null || true)  // TYPE_COMMENT?
            )
            {
                debugMessageln("%d param_maybe_default[%d-%d]: %s succeeded!", level, _mark, mark(), "param default_param? ',' TYPE_COMMENT?");
                // TODO: node.action: _PyPegen_name_default_pair ( p , a , c , tc )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_name_default_pair ( p , a , c , tc ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "param default_param? ',' TYPE_COMMENT?");
                cache.putResult(_mark, PARAM_MAYBE_DEFAULT_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s param_maybe_default[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "param default_param? ',' TYPE_COMMENT?");
        }
        { // param default_param? TYPE_COMMENT? &')'
            debugMessageln("%d> param_maybe_default[%d-%d]: %s", level, _mark, mark(), "param default_param? TYPE_COMMENT? &')'");
            SSTNode a;
            Object c;
            Object tc;
            if (
                (a = param_rule()) != null  // param
                &&
                ((c = default_param_rule()) != null || true)  // default_param?
                &&
                ((tc = expect(Token.Kind.TYPE_COMMENT)) != null || true)  // TYPE_COMMENT?
                &&
                genLookahead_expect(true, 8)  // token=')'
            )
            {
                debugMessageln("%d param_maybe_default[%d-%d]: %s succeeded!", level, _mark, mark(), "param default_param? TYPE_COMMENT? &')'");
                // TODO: node.action: _PyPegen_name_default_pair ( p , a , c , tc )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_name_default_pair ( p , a , c , tc ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "param default_param? TYPE_COMMENT? &')'");
                cache.putResult(_mark, PARAM_MAYBE_DEFAULT_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s param_maybe_default[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "param default_param? TYPE_COMMENT? &')'");
        }
        debugMessageln("Fail at %d: param_maybe_default", _mark);
        _res = null;
        cache.putResult(_mark, PARAM_MAYBE_DEFAULT_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // param: NAME annotation?
    public SSTNode param_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, PARAM_ID)) {
            _res = (SSTNode)cache.getResult(_mark, PARAM_ID);
            level--;
            return (SSTNode)_res;
        }
        { // NAME annotation?
            debugMessageln("%d> param[%d-%d]: %s", level, _mark, mark(), "NAME annotation?");
            SSTNode a;
            Object b;
            if (
                (a = name_token()) != null  // NAME
                &&
                ((b = annotation_rule()) != null || true)  // annotation?
            )
            {
                debugMessageln("%d param[%d-%d]: %s succeeded!", level, _mark, mark(), "NAME annotation?");
                // TODO: node.action: _PyAST_arg ( a -> v . Name . id , b , NULL , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_arg ( a -> v . Name . id , b , NULL , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "NAME annotation?");
                cache.putResult(_mark, PARAM_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s param[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "NAME annotation?");
        }
        debugMessageln("Fail at %d: param", _mark);
        _res = null;
        cache.putResult(_mark, PARAM_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // annotation: ':' expression
    public SSTNode annotation_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, ANNOTATION_ID)) {
            _res = (SSTNode)cache.getResult(_mark, ANNOTATION_ID);
            level--;
            return (SSTNode)_res;
        }
        { // ':' expression
            debugMessageln("%d> annotation[%d-%d]: %s", level, _mark, mark(), "':' expression");
            Token _literal;
            SSTNode a;
            if (
                (_literal = expect(11)) != null  // token=':'
                &&
                (a = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d annotation[%d-%d]: %s succeeded!", level, _mark, mark(), "':' expression");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "':' expression");
                cache.putResult(_mark, ANNOTATION_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s annotation[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "':' expression");
        }
        debugMessageln("Fail at %d: annotation", _mark);
        _res = null;
        cache.putResult(_mark, ANNOTATION_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // default_param: '=' expression
    public SSTNode default_param_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, DEFAULT_PARAM_ID)) {
            _res = (SSTNode)cache.getResult(_mark, DEFAULT_PARAM_ID);
            level--;
            return (SSTNode)_res;
        }
        { // '=' expression
            debugMessageln("%d> default_param[%d-%d]: %s", level, _mark, mark(), "'=' expression");
            Token _literal;
            SSTNode a;
            if (
                (_literal = expect(22)) != null  // token='='
                &&
                (a = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d default_param[%d-%d]: %s succeeded!", level, _mark, mark(), "'=' expression");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'=' expression");
                cache.putResult(_mark, DEFAULT_PARAM_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s default_param[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'=' expression");
        }
        debugMessageln("Fail at %d: default_param", _mark);
        _res = null;
        cache.putResult(_mark, DEFAULT_PARAM_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // decorators: (('@' named_expression NEWLINE))+
    public SSTNode[] decorators_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, DECORATORS_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, DECORATORS_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // (('@' named_expression NEWLINE))+
            debugMessageln("%d> decorators[%d-%d]: %s", level, _mark, mark(), "(('@' named_expression NEWLINE))+");
            SSTNode[] a;
            if (
                (a = (SSTNode[])_loop1_111_rule()) != null  // (('@' named_expression NEWLINE))+
            )
            {
                debugMessageln("%d decorators[%d-%d]: %s succeeded!", level, _mark, mark(), "(('@' named_expression NEWLINE))+");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "(('@' named_expression NEWLINE))+");
                cache.putResult(_mark, DECORATORS_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s decorators[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "(('@' named_expression NEWLINE))+");
        }
        debugMessageln("Fail at %d: decorators", _mark);
        _res = null;
        cache.putResult(_mark, DECORATORS_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // class_def: decorators class_def_raw | class_def_raw
    public SSTNode class_def_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, CLASS_DEF_ID)) {
            _res = (SSTNode)cache.getResult(_mark, CLASS_DEF_ID);
            level--;
            return (SSTNode)_res;
        }
        { // decorators class_def_raw
            debugMessageln("%d> class_def[%d-%d]: %s", level, _mark, mark(), "decorators class_def_raw");
            SSTNode[] a;
            SSTNode b;
            if (
                (a = decorators_rule()) != null  // decorators
                &&
                (b = class_def_raw_rule()) != null  // class_def_raw
            )
            {
                debugMessageln("%d class_def[%d-%d]: %s succeeded!", level, _mark, mark(), "decorators class_def_raw");
                // TODO: node.action: _PyPegen_class_def_decorators ( p , a , b )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_class_def_decorators ( p , a , b ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "decorators class_def_raw");
                cache.putResult(_mark, CLASS_DEF_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s class_def[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "decorators class_def_raw");
        }
        { // class_def_raw
            debugMessageln("%d> class_def[%d-%d]: %s", level, _mark, mark(), "class_def_raw");
            SSTNode class_def_raw_var;
            if (
                (class_def_raw_var = class_def_raw_rule()) != null  // class_def_raw
            )
            {
                debugMessageln("%d class_def[%d-%d]: %s succeeded!", level, _mark, mark(), "class_def_raw");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "class_def_raw");
                _res = class_def_raw_var;
                cache.putResult(_mark, CLASS_DEF_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s class_def[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "class_def_raw");
        }
        debugMessageln("Fail at %d: class_def", _mark);
        _res = null;
        cache.putResult(_mark, CLASS_DEF_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // class_def_raw: 'class' NAME ['(' arguments? ')'] &&':' block
    public SSTNode class_def_raw_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, CLASS_DEF_RAW_ID)) {
            _res = (SSTNode)cache.getResult(_mark, CLASS_DEF_RAW_ID);
            level--;
            return (SSTNode)_res;
        }
        { // 'class' NAME ['(' arguments? ')'] &&':' block
            debugMessageln("%d> class_def_raw[%d-%d]: %s", level, _mark, mark(), "'class' NAME ['(' arguments? ')'] &&':' block");
            Token _keyword;
            Token _literal;
            SSTNode a;
            Object b;
            SSTNode[] c;
            if (
                (_keyword = expect(527)) != null  // token='class'
                &&
                (a = name_token()) != null  // NAME
                &&
                ((b = _tmp_112_rule()) != null || true)  // ['(' arguments? ')']
                &&
                (_literal = expect_forced_token(11, ":")) != null  // forced_token=':'
                &&
                (c = block_rule()) != null  // block
            )
            {
                debugMessageln("%d class_def_raw[%d-%d]: %s succeeded!", level, _mark, mark(), "'class' NAME ['(' arguments? ')'] &&':' block");
                // TODO: node.action: _PyAST_ClassDef ( a -> v . Name . id , ( b ) ? ( ( expr_ty ) b ) -> v . Call . args : NULL , ( b ) ? ( ( expr_ty ) b ) -> v . Call . keywords : NULL , c , NULL , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_ClassDef ( a -> v . Name . id , ( b ) ? ( ( expr_ty ) b ) -> v . Call . args : NULL , ( b ) ? ( ( expr_ty ) b ) -> v . Call . keywords : NULL , c , NULL , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'class' NAME ['(' arguments? ')'] &&':' block");
                cache.putResult(_mark, CLASS_DEF_RAW_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s class_def_raw[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'class' NAME ['(' arguments? ')'] &&':' block");
        }
        debugMessageln("Fail at %d: class_def_raw", _mark);
        _res = null;
        cache.putResult(_mark, CLASS_DEF_RAW_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // block: NEWLINE INDENT statements DEDENT | simple_stmts | invalid_block
    public SSTNode[] block_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, BLOCK_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, BLOCK_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // NEWLINE INDENT statements DEDENT
            debugMessageln("%d> block[%d-%d]: %s", level, _mark, mark(), "NEWLINE INDENT statements DEDENT");
            SSTNode[] a;
            Token dedent_var;
            Token indent_var;
            Token newline_var;
            if (
                (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
                &&
                (indent_var = expect(Token.Kind.INDENT)) != null  // token='INDENT'
                &&
                (a = statements_rule()) != null  // statements
                &&
                (dedent_var = expect(Token.Kind.DEDENT)) != null  // token='DEDENT'
            )
            {
                debugMessageln("%d block[%d-%d]: %s succeeded!", level, _mark, mark(), "NEWLINE INDENT statements DEDENT");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "NEWLINE INDENT statements DEDENT");
                cache.putResult(_mark, BLOCK_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s block[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "NEWLINE INDENT statements DEDENT");
        }
        { // simple_stmts
            debugMessageln("%d> block[%d-%d]: %s", level, _mark, mark(), "simple_stmts");
            SSTNode[] simple_stmts_var;
            if (
                (simple_stmts_var = simple_stmts_rule()) != null  // simple_stmts
            )
            {
                debugMessageln("%d block[%d-%d]: %s succeeded!", level, _mark, mark(), "simple_stmts");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "simple_stmts");
                _res = simple_stmts_var;
                cache.putResult(_mark, BLOCK_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s block[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "simple_stmts");
        }
        if (callInvalidRules) { // invalid_block
            debugMessageln("%d> block[%d-%d]: %s", level, _mark, mark(), "invalid_block");
            Object invalid_block_var;
            if (
                (invalid_block_var = invalid_block_rule()) != null  // invalid_block
            )
            {
                debugMessageln("%d block[%d-%d]: %s succeeded!", level, _mark, mark(), "invalid_block");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "invalid_block");
                _res = invalid_block_var;
                cache.putResult(_mark, BLOCK_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s block[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "invalid_block");
        }
        debugMessageln("Fail at %d: block", _mark);
        _res = null;
        cache.putResult(_mark, BLOCK_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // star_expressions:
    //     | star_expression ((',' star_expression))+ ','?
    //     | star_expression ','
    //     | star_expression
    public SSTNode star_expressions_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, STAR_EXPRESSIONS_ID)) {
            _res = (SSTNode)cache.getResult(_mark, STAR_EXPRESSIONS_ID);
            level--;
            return (SSTNode)_res;
        }
        { // star_expression ((',' star_expression))+ ','?
            debugMessageln("%d> star_expressions[%d-%d]: %s", level, _mark, mark(), "star_expression ((',' star_expression))+ ','?");
            Object _opt_var;
            SSTNode a;
            SSTNode[] b;
            if (
                (a = star_expression_rule()) != null  // star_expression
                &&
                (b = _loop1_113_rule()) != null  // ((',' star_expression))+
                &&
                ((_opt_var = _tmp_114_rule()) != null || true)  // ','?
            )
            {
                debugMessageln("%d star_expressions[%d-%d]: %s succeeded!", level, _mark, mark(), "star_expression ((',' star_expression))+ ','?");
                // TODO: node.action: _PyAST_Tuple ( CHECK ( asdl_expr_seq * , this . insertInFront ( a , b ) ) , Load , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Tuple ( CHECK ( asdl_expr_seq * , this . insertInFront ( a , b ) ) , Load , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "star_expression ((',' star_expression))+ ','?");
                cache.putResult(_mark, STAR_EXPRESSIONS_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s star_expressions[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_expression ((',' star_expression))+ ','?");
        }
        { // star_expression ','
            debugMessageln("%d> star_expressions[%d-%d]: %s", level, _mark, mark(), "star_expression ','");
            Token _literal;
            SSTNode a;
            if (
                (a = star_expression_rule()) != null  // star_expression
                &&
                (_literal = expect(12)) != null  // token=','
            )
            {
                debugMessageln("%d star_expressions[%d-%d]: %s succeeded!", level, _mark, mark(), "star_expression ','");
                // TODO: node.action: _PyAST_Tuple ( CHECK ( asdl_expr_seq * , this . singletonSequence ( a ) ) , Load , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Tuple ( CHECK ( asdl_expr_seq * , this . singletonSequence ( a ) ) , Load , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "star_expression ','");
                cache.putResult(_mark, STAR_EXPRESSIONS_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s star_expressions[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_expression ','");
        }
        { // star_expression
            debugMessageln("%d> star_expressions[%d-%d]: %s", level, _mark, mark(), "star_expression");
            SSTNode star_expression_var;
            if (
                (star_expression_var = star_expression_rule()) != null  // star_expression
            )
            {
                debugMessageln("%d star_expressions[%d-%d]: %s succeeded!", level, _mark, mark(), "star_expression");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "star_expression");
                _res = star_expression_var;
                cache.putResult(_mark, STAR_EXPRESSIONS_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s star_expressions[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_expression");
        }
        debugMessageln("Fail at %d: star_expressions", _mark);
        _res = null;
        cache.putResult(_mark, STAR_EXPRESSIONS_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // star_expression: '*' bitwise_or | expression
    public SSTNode star_expression_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, STAR_EXPRESSION_ID)) {
            _res = (SSTNode)cache.getResult(_mark, STAR_EXPRESSION_ID);
            level--;
            return (SSTNode)_res;
        }
        { // '*' bitwise_or
            debugMessageln("%d> star_expression[%d-%d]: %s", level, _mark, mark(), "'*' bitwise_or");
            Token _literal;
            SSTNode a;
            if (
                (_literal = expect(16)) != null  // token='*'
                &&
                (a = bitwise_or_rule()) != null  // bitwise_or
            )
            {
                debugMessageln("%d star_expression[%d-%d]: %s succeeded!", level, _mark, mark(), "'*' bitwise_or");
                // TODO: node.action: _PyAST_Starred ( a , Load , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Starred ( a , Load , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'*' bitwise_or");
                cache.putResult(_mark, STAR_EXPRESSION_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s star_expression[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'*' bitwise_or");
        }
        { // expression
            debugMessageln("%d> star_expression[%d-%d]: %s", level, _mark, mark(), "expression");
            SSTNode expression_var;
            if (
                (expression_var = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d star_expression[%d-%d]: %s succeeded!", level, _mark, mark(), "expression");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "expression");
                _res = expression_var;
                cache.putResult(_mark, STAR_EXPRESSION_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s star_expression[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "expression");
        }
        debugMessageln("Fail at %d: star_expression", _mark);
        _res = null;
        cache.putResult(_mark, STAR_EXPRESSION_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // star_named_expressions: ','.star_named_expression+ ','?
    public SSTNode[] star_named_expressions_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, STAR_NAMED_EXPRESSIONS_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, STAR_NAMED_EXPRESSIONS_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // ','.star_named_expression+ ','?
            debugMessageln("%d> star_named_expressions[%d-%d]: %s", level, _mark, mark(), "','.star_named_expression+ ','?");
            Object _opt_var;
            SSTNode[] a;
            if (
                (a = (SSTNode[])_gather_115_rule()) != null  // ','.star_named_expression+
                &&
                ((_opt_var = _tmp_117_rule()) != null || true)  // ','?
            )
            {
                debugMessageln("%d star_named_expressions[%d-%d]: %s succeeded!", level, _mark, mark(), "','.star_named_expression+ ','?");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "','.star_named_expression+ ','?");
                cache.putResult(_mark, STAR_NAMED_EXPRESSIONS_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s star_named_expressions[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','.star_named_expression+ ','?");
        }
        debugMessageln("Fail at %d: star_named_expressions", _mark);
        _res = null;
        cache.putResult(_mark, STAR_NAMED_EXPRESSIONS_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // star_named_expression: '*' bitwise_or | named_expression
    public SSTNode star_named_expression_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, STAR_NAMED_EXPRESSION_ID)) {
            _res = (SSTNode)cache.getResult(_mark, STAR_NAMED_EXPRESSION_ID);
            level--;
            return (SSTNode)_res;
        }
        { // '*' bitwise_or
            debugMessageln("%d> star_named_expression[%d-%d]: %s", level, _mark, mark(), "'*' bitwise_or");
            Token _literal;
            SSTNode a;
            if (
                (_literal = expect(16)) != null  // token='*'
                &&
                (a = bitwise_or_rule()) != null  // bitwise_or
            )
            {
                debugMessageln("%d star_named_expression[%d-%d]: %s succeeded!", level, _mark, mark(), "'*' bitwise_or");
                // TODO: node.action: _PyAST_Starred ( a , Load , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Starred ( a , Load , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'*' bitwise_or");
                cache.putResult(_mark, STAR_NAMED_EXPRESSION_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s star_named_expression[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'*' bitwise_or");
        }
        { // named_expression
            debugMessageln("%d> star_named_expression[%d-%d]: %s", level, _mark, mark(), "named_expression");
            SSTNode named_expression_var;
            if (
                (named_expression_var = named_expression_rule()) != null  // named_expression
            )
            {
                debugMessageln("%d star_named_expression[%d-%d]: %s succeeded!", level, _mark, mark(), "named_expression");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "named_expression");
                _res = named_expression_var;
                cache.putResult(_mark, STAR_NAMED_EXPRESSION_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s star_named_expression[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "named_expression");
        }
        debugMessageln("Fail at %d: star_named_expression", _mark);
        _res = null;
        cache.putResult(_mark, STAR_NAMED_EXPRESSION_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // named_expression: NAME ':=' ~ expression | invalid_named_expression | expression !':='
    public SSTNode named_expression_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, NAMED_EXPRESSION_ID)) {
            _res = (SSTNode)cache.getResult(_mark, NAMED_EXPRESSION_ID);
            level--;
            return (SSTNode)_res;
        }
        { // NAME ':=' ~ expression
            debugMessageln("%d> named_expression[%d-%d]: %s", level, _mark, mark(), "NAME ':=' ~ expression");
            int _cut_var = 0;
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                (a = name_token()) != null  // NAME
                &&
                (_literal = expect(53)) != null  // token=':='
                &&
                (_cut_var = 1) != 0
                &&
                (b = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d named_expression[%d-%d]: %s succeeded!", level, _mark, mark(), "NAME ':=' ~ expression");
                // TODO: node.action: _PyAST_NamedExpr ( CHECK ( expr_ty , _PyPegen_set_expr_context ( p , a , Store ) ) , b , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_NamedExpr ( CHECK ( expr_ty , _PyPegen_set_expr_context ( p , a , Store ) ) , b , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "NAME ':=' ~ expression");
                cache.putResult(_mark, NAMED_EXPRESSION_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s named_expression[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "NAME ':=' ~ expression");
            if (_cut_var != 0) {
                level--;
                return null;
            }
        }
        if (callInvalidRules) { // invalid_named_expression
            debugMessageln("%d> named_expression[%d-%d]: %s", level, _mark, mark(), "invalid_named_expression");
            Object invalid_named_expression_var;
            if (
                (invalid_named_expression_var = invalid_named_expression_rule()) != null  // invalid_named_expression
            )
            {
                debugMessageln("%d named_expression[%d-%d]: %s succeeded!", level, _mark, mark(), "invalid_named_expression");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "invalid_named_expression");
                _res = invalid_named_expression_var;
                cache.putResult(_mark, NAMED_EXPRESSION_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s named_expression[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "invalid_named_expression");
        }
        { // expression !':='
            debugMessageln("%d> named_expression[%d-%d]: %s", level, _mark, mark(), "expression !':='");
            SSTNode expression_var;
            if (
                (expression_var = expression_rule()) != null  // expression
                &&
                genLookahead_expect(false, 53)  // token=':='
            )
            {
                debugMessageln("%d named_expression[%d-%d]: %s succeeded!", level, _mark, mark(), "expression !':='");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "expression !':='");
                _res = expression_var;
                cache.putResult(_mark, NAMED_EXPRESSION_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s named_expression[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "expression !':='");
        }
        debugMessageln("Fail at %d: named_expression", _mark);
        _res = null;
        cache.putResult(_mark, NAMED_EXPRESSION_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // direct_named_expression: NAME ':=' ~ expression | expression !':='
    public SSTNode direct_named_expression_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, DIRECT_NAMED_EXPRESSION_ID)) {
            _res = (SSTNode)cache.getResult(_mark, DIRECT_NAMED_EXPRESSION_ID);
            level--;
            return (SSTNode)_res;
        }
        { // NAME ':=' ~ expression
            debugMessageln("%d> direct_named_expression[%d-%d]: %s", level, _mark, mark(), "NAME ':=' ~ expression");
            int _cut_var = 0;
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                (a = name_token()) != null  // NAME
                &&
                (_literal = expect(53)) != null  // token=':='
                &&
                (_cut_var = 1) != 0
                &&
                (b = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d direct_named_expression[%d-%d]: %s succeeded!", level, _mark, mark(), "NAME ':=' ~ expression");
                // TODO: node.action: _PyAST_NamedExpr ( CHECK ( expr_ty , _PyPegen_set_expr_context ( p , a , Store ) ) , b , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_NamedExpr ( CHECK ( expr_ty , _PyPegen_set_expr_context ( p , a , Store ) ) , b , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "NAME ':=' ~ expression");
                cache.putResult(_mark, DIRECT_NAMED_EXPRESSION_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s direct_named_expression[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "NAME ':=' ~ expression");
            if (_cut_var != 0) {
                level--;
                return null;
            }
        }
        { // expression !':='
            debugMessageln("%d> direct_named_expression[%d-%d]: %s", level, _mark, mark(), "expression !':='");
            SSTNode expression_var;
            if (
                (expression_var = expression_rule()) != null  // expression
                &&
                genLookahead_expect(false, 53)  // token=':='
            )
            {
                debugMessageln("%d direct_named_expression[%d-%d]: %s succeeded!", level, _mark, mark(), "expression !':='");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "expression !':='");
                _res = expression_var;
                cache.putResult(_mark, DIRECT_NAMED_EXPRESSION_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s direct_named_expression[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "expression !':='");
        }
        debugMessageln("Fail at %d: direct_named_expression", _mark);
        _res = null;
        cache.putResult(_mark, DIRECT_NAMED_EXPRESSION_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // annotated_rhs: yield_expr | star_expressions
    public SSTNode annotated_rhs_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, ANNOTATED_RHS_ID)) {
            _res = (SSTNode)cache.getResult(_mark, ANNOTATED_RHS_ID);
            level--;
            return (SSTNode)_res;
        }
        { // yield_expr
            debugMessageln("%d> annotated_rhs[%d-%d]: %s", level, _mark, mark(), "yield_expr");
            SSTNode yield_expr_var;
            if (
                (yield_expr_var = yield_expr_rule()) != null  // yield_expr
            )
            {
                debugMessageln("%d annotated_rhs[%d-%d]: %s succeeded!", level, _mark, mark(), "yield_expr");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "yield_expr");
                _res = yield_expr_var;
                cache.putResult(_mark, ANNOTATED_RHS_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s annotated_rhs[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "yield_expr");
        }
        { // star_expressions
            debugMessageln("%d> annotated_rhs[%d-%d]: %s", level, _mark, mark(), "star_expressions");
            SSTNode star_expressions_var;
            if (
                (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            )
            {
                debugMessageln("%d annotated_rhs[%d-%d]: %s succeeded!", level, _mark, mark(), "star_expressions");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "star_expressions");
                _res = star_expressions_var;
                cache.putResult(_mark, ANNOTATED_RHS_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s annotated_rhs[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_expressions");
        }
        debugMessageln("Fail at %d: annotated_rhs", _mark);
        _res = null;
        cache.putResult(_mark, ANNOTATED_RHS_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // expressions: expression ((',' expression))+ ','? | expression ',' | expression
    public SSTNode expressions_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, EXPRESSIONS_ID)) {
            _res = (SSTNode)cache.getResult(_mark, EXPRESSIONS_ID);
            level--;
            return (SSTNode)_res;
        }
        { // expression ((',' expression))+ ','?
            debugMessageln("%d> expressions[%d-%d]: %s", level, _mark, mark(), "expression ((',' expression))+ ','?");
            Object _opt_var;
            SSTNode a;
            SSTNode[] b;
            if (
                (a = expression_rule()) != null  // expression
                &&
                (b = _loop1_118_rule()) != null  // ((',' expression))+
                &&
                ((_opt_var = _tmp_119_rule()) != null || true)  // ','?
            )
            {
                debugMessageln("%d expressions[%d-%d]: %s succeeded!", level, _mark, mark(), "expression ((',' expression))+ ','?");
                // TODO: node.action: _PyAST_Tuple ( CHECK ( asdl_expr_seq * , this . insertInFront ( a , b ) ) , Load , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Tuple ( CHECK ( asdl_expr_seq * , this . insertInFront ( a , b ) ) , Load , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "expression ((',' expression))+ ','?");
                cache.putResult(_mark, EXPRESSIONS_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s expressions[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "expression ((',' expression))+ ','?");
        }
        { // expression ','
            debugMessageln("%d> expressions[%d-%d]: %s", level, _mark, mark(), "expression ','");
            Token _literal;
            SSTNode a;
            if (
                (a = expression_rule()) != null  // expression
                &&
                (_literal = expect(12)) != null  // token=','
            )
            {
                debugMessageln("%d expressions[%d-%d]: %s succeeded!", level, _mark, mark(), "expression ','");
                // TODO: node.action: _PyAST_Tuple ( CHECK ( asdl_expr_seq * , this . singletonSequence ( a ) ) , Load , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Tuple ( CHECK ( asdl_expr_seq * , this . singletonSequence ( a ) ) , Load , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "expression ','");
                cache.putResult(_mark, EXPRESSIONS_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s expressions[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "expression ','");
        }
        { // expression
            debugMessageln("%d> expressions[%d-%d]: %s", level, _mark, mark(), "expression");
            SSTNode expression_var;
            if (
                (expression_var = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d expressions[%d-%d]: %s succeeded!", level, _mark, mark(), "expression");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "expression");
                _res = expression_var;
                cache.putResult(_mark, EXPRESSIONS_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s expressions[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "expression");
        }
        debugMessageln("Fail at %d: expressions", _mark);
        _res = null;
        cache.putResult(_mark, EXPRESSIONS_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // expression:
    //     | invalid_expression
    //     | disjunction 'if' disjunction 'else' expression
    //     | disjunction
    //     | lambdef
    public SSTNode expression_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, EXPRESSION_ID)) {
            _res = (SSTNode)cache.getResult(_mark, EXPRESSION_ID);
            level--;
            return (SSTNode)_res;
        }
        if (callInvalidRules) { // invalid_expression
            debugMessageln("%d> expression[%d-%d]: %s", level, _mark, mark(), "invalid_expression");
            Object invalid_expression_var;
            if (
                (invalid_expression_var = invalid_expression_rule()) != null  // invalid_expression
            )
            {
                debugMessageln("%d expression[%d-%d]: %s succeeded!", level, _mark, mark(), "invalid_expression");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "invalid_expression");
                _res = invalid_expression_var;
                cache.putResult(_mark, EXPRESSION_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s expression[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "invalid_expression");
        }
        { // disjunction 'if' disjunction 'else' expression
            debugMessageln("%d> expression[%d-%d]: %s", level, _mark, mark(), "disjunction 'if' disjunction 'else' expression");
            Token _keyword;
            Token _keyword_1;
            SSTNode a;
            SSTNode b;
            SSTNode c;
            if (
                (a = disjunction_rule()) != null  // disjunction
                &&
                (_keyword = expect(510)) != null  // token='if'
                &&
                (b = disjunction_rule()) != null  // disjunction
                &&
                (_keyword_1 = expect(516)) != null  // token='else'
                &&
                (c = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d expression[%d-%d]: %s succeeded!", level, _mark, mark(), "disjunction 'if' disjunction 'else' expression");
                // TODO: node.action: _PyAST_IfExp ( b , a , c , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_IfExp ( b , a , c , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "disjunction 'if' disjunction 'else' expression");
                cache.putResult(_mark, EXPRESSION_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s expression[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "disjunction 'if' disjunction 'else' expression");
        }
        { // disjunction
            debugMessageln("%d> expression[%d-%d]: %s", level, _mark, mark(), "disjunction");
            SSTNode disjunction_var;
            if (
                (disjunction_var = disjunction_rule()) != null  // disjunction
            )
            {
                debugMessageln("%d expression[%d-%d]: %s succeeded!", level, _mark, mark(), "disjunction");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "disjunction");
                _res = disjunction_var;
                cache.putResult(_mark, EXPRESSION_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s expression[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "disjunction");
        }
        { // lambdef
            debugMessageln("%d> expression[%d-%d]: %s", level, _mark, mark(), "lambdef");
            SSTNode lambdef_var;
            if (
                (lambdef_var = lambdef_rule()) != null  // lambdef
            )
            {
                debugMessageln("%d expression[%d-%d]: %s succeeded!", level, _mark, mark(), "lambdef");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "lambdef");
                _res = lambdef_var;
                cache.putResult(_mark, EXPRESSION_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s expression[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambdef");
        }
        debugMessageln("Fail at %d: expression", _mark);
        _res = null;
        cache.putResult(_mark, EXPRESSION_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // lambdef: 'lambda' lambda_params? ':' expression
    public SSTNode lambdef_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, LAMBDEF_ID)) {
            _res = (SSTNode)cache.getResult(_mark, LAMBDEF_ID);
            level--;
            return (SSTNode)_res;
        }
        { // 'lambda' lambda_params? ':' expression
            debugMessageln("%d> lambdef[%d-%d]: %s", level, _mark, mark(), "'lambda' lambda_params? ':' expression");
            Token _keyword;
            Token _literal;
            Object a;
            SSTNode b;
            if (
                (_keyword = expect(528)) != null  // token='lambda'
                &&
                ((a = _tmp_120_rule()) != null || true)  // lambda_params?
                &&
                (_literal = expect(11)) != null  // token=':'
                &&
                (b = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d lambdef[%d-%d]: %s succeeded!", level, _mark, mark(), "'lambda' lambda_params? ':' expression");
                // TODO: node.action: _PyAST_Lambda ( ( a ) ? a : CHECK ( arguments_ty , _PyPegen_empty_arguments ( p ) ) , b , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Lambda ( ( a ) ? a : CHECK ( arguments_ty , _PyPegen_empty_arguments ( p ) ) , b , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'lambda' lambda_params? ':' expression");
                cache.putResult(_mark, LAMBDEF_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s lambdef[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'lambda' lambda_params? ':' expression");
        }
        debugMessageln("Fail at %d: lambdef", _mark);
        _res = null;
        cache.putResult(_mark, LAMBDEF_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // lambda_params: invalid_lambda_parameters | lambda_parameters
    public SSTNode lambda_params_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, LAMBDA_PARAMS_ID)) {
            _res = (SSTNode)cache.getResult(_mark, LAMBDA_PARAMS_ID);
            level--;
            return (SSTNode)_res;
        }
        if (callInvalidRules) { // invalid_lambda_parameters
            debugMessageln("%d> lambda_params[%d-%d]: %s", level, _mark, mark(), "invalid_lambda_parameters");
            Object invalid_lambda_parameters_var;
            if (
                (invalid_lambda_parameters_var = invalid_lambda_parameters_rule()) != null  // invalid_lambda_parameters
            )
            {
                debugMessageln("%d lambda_params[%d-%d]: %s succeeded!", level, _mark, mark(), "invalid_lambda_parameters");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "invalid_lambda_parameters");
                _res = invalid_lambda_parameters_var;
                cache.putResult(_mark, LAMBDA_PARAMS_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s lambda_params[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "invalid_lambda_parameters");
        }
        { // lambda_parameters
            debugMessageln("%d> lambda_params[%d-%d]: %s", level, _mark, mark(), "lambda_parameters");
            SSTNode lambda_parameters_var;
            if (
                (lambda_parameters_var = lambda_parameters_rule()) != null  // lambda_parameters
            )
            {
                debugMessageln("%d lambda_params[%d-%d]: %s succeeded!", level, _mark, mark(), "lambda_parameters");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "lambda_parameters");
                _res = lambda_parameters_var;
                cache.putResult(_mark, LAMBDA_PARAMS_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s lambda_params[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_parameters");
        }
        debugMessageln("Fail at %d: lambda_params", _mark);
        _res = null;
        cache.putResult(_mark, LAMBDA_PARAMS_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // lambda_parameters:
    //     | lambda_slash_no_default lambda_param_no_default* lambda_param_with_default* lambda_star_etc?
    //     | lambda_slash_with_default lambda_param_with_default* lambda_star_etc?
    //     | lambda_param_no_default+ lambda_param_with_default* lambda_star_etc?
    //     | lambda_param_with_default+ lambda_star_etc?
    //     | lambda_star_etc
    public SSTNode lambda_parameters_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, LAMBDA_PARAMETERS_ID)) {
            _res = (SSTNode)cache.getResult(_mark, LAMBDA_PARAMETERS_ID);
            level--;
            return (SSTNode)_res;
        }
        { // lambda_slash_no_default lambda_param_no_default* lambda_param_with_default* lambda_star_etc?
            debugMessageln("%d> lambda_parameters[%d-%d]: %s", level, _mark, mark(), "lambda_slash_no_default lambda_param_no_default* lambda_param_with_default* lambda_star_etc?");
            SSTNode[] a;
            SSTNode[] b;
            SSTNode[] c;
            Object d;
            if (
                (a = lambda_slash_no_default_rule()) != null  // lambda_slash_no_default
                &&
                (b = (SSTNode[])_loop0_121_rule()) != null  // lambda_param_no_default*
                &&
                (c = _loop0_122_rule()) != null  // lambda_param_with_default*
                &&
                ((d = _tmp_123_rule()) != null || true)  // lambda_star_etc?
            )
            {
                debugMessageln("%d lambda_parameters[%d-%d]: %s succeeded!", level, _mark, mark(), "lambda_slash_no_default lambda_param_no_default* lambda_param_with_default* lambda_star_etc?");
                // TODO: node.action: _PyPegen_make_arguments ( p , a , NULL , b , c , d )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_make_arguments ( p , a , NULL , b , c , d ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "lambda_slash_no_default lambda_param_no_default* lambda_param_with_default* lambda_star_etc?");
                cache.putResult(_mark, LAMBDA_PARAMETERS_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s lambda_parameters[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_slash_no_default lambda_param_no_default* lambda_param_with_default* lambda_star_etc?");
        }
        { // lambda_slash_with_default lambda_param_with_default* lambda_star_etc?
            debugMessageln("%d> lambda_parameters[%d-%d]: %s", level, _mark, mark(), "lambda_slash_with_default lambda_param_with_default* lambda_star_etc?");
            SSTNode[] a;
            SSTNode[] b;
            Object c;
            if (
                (a = lambda_slash_with_default_rule()) != null  // lambda_slash_with_default
                &&
                (b = _loop0_124_rule()) != null  // lambda_param_with_default*
                &&
                ((c = _tmp_125_rule()) != null || true)  // lambda_star_etc?
            )
            {
                debugMessageln("%d lambda_parameters[%d-%d]: %s succeeded!", level, _mark, mark(), "lambda_slash_with_default lambda_param_with_default* lambda_star_etc?");
                // TODO: node.action: _PyPegen_make_arguments ( p , NULL , a , NULL , b , c )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_make_arguments ( p , NULL , a , NULL , b , c ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "lambda_slash_with_default lambda_param_with_default* lambda_star_etc?");
                cache.putResult(_mark, LAMBDA_PARAMETERS_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s lambda_parameters[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_slash_with_default lambda_param_with_default* lambda_star_etc?");
        }
        { // lambda_param_no_default+ lambda_param_with_default* lambda_star_etc?
            debugMessageln("%d> lambda_parameters[%d-%d]: %s", level, _mark, mark(), "lambda_param_no_default+ lambda_param_with_default* lambda_star_etc?");
            SSTNode[] a;
            SSTNode[] b;
            Object c;
            if (
                (a = (SSTNode[])_loop1_126_rule()) != null  // lambda_param_no_default+
                &&
                (b = _loop0_127_rule()) != null  // lambda_param_with_default*
                &&
                ((c = _tmp_128_rule()) != null || true)  // lambda_star_etc?
            )
            {
                debugMessageln("%d lambda_parameters[%d-%d]: %s succeeded!", level, _mark, mark(), "lambda_param_no_default+ lambda_param_with_default* lambda_star_etc?");
                // TODO: node.action: _PyPegen_make_arguments ( p , NULL , NULL , a , b , c )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_make_arguments ( p , NULL , NULL , a , b , c ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "lambda_param_no_default+ lambda_param_with_default* lambda_star_etc?");
                cache.putResult(_mark, LAMBDA_PARAMETERS_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s lambda_parameters[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_param_no_default+ lambda_param_with_default* lambda_star_etc?");
        }
        { // lambda_param_with_default+ lambda_star_etc?
            debugMessageln("%d> lambda_parameters[%d-%d]: %s", level, _mark, mark(), "lambda_param_with_default+ lambda_star_etc?");
            SSTNode[] a;
            Object b;
            if (
                (a = _loop1_129_rule()) != null  // lambda_param_with_default+
                &&
                ((b = _tmp_130_rule()) != null || true)  // lambda_star_etc?
            )
            {
                debugMessageln("%d lambda_parameters[%d-%d]: %s succeeded!", level, _mark, mark(), "lambda_param_with_default+ lambda_star_etc?");
                // TODO: node.action: _PyPegen_make_arguments ( p , NULL , NULL , NULL , a , b )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_make_arguments ( p , NULL , NULL , NULL , a , b ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "lambda_param_with_default+ lambda_star_etc?");
                cache.putResult(_mark, LAMBDA_PARAMETERS_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s lambda_parameters[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_param_with_default+ lambda_star_etc?");
        }
        { // lambda_star_etc
            debugMessageln("%d> lambda_parameters[%d-%d]: %s", level, _mark, mark(), "lambda_star_etc");
            SSTNode[] a;
            if (
                (a = lambda_star_etc_rule()) != null  // lambda_star_etc
            )
            {
                debugMessageln("%d lambda_parameters[%d-%d]: %s succeeded!", level, _mark, mark(), "lambda_star_etc");
                // TODO: node.action: _PyPegen_make_arguments ( p , NULL , NULL , NULL , NULL , a )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_make_arguments ( p , NULL , NULL , NULL , NULL , a ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "lambda_star_etc");
                cache.putResult(_mark, LAMBDA_PARAMETERS_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s lambda_parameters[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_star_etc");
        }
        debugMessageln("Fail at %d: lambda_parameters", _mark);
        _res = null;
        cache.putResult(_mark, LAMBDA_PARAMETERS_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // lambda_slash_no_default:
    //     | lambda_param_no_default+ '/' ','
    //     | lambda_param_no_default+ '/' &':'
    public SSTNode[] lambda_slash_no_default_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, LAMBDA_SLASH_NO_DEFAULT_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, LAMBDA_SLASH_NO_DEFAULT_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // lambda_param_no_default+ '/' ','
            debugMessageln("%d> lambda_slash_no_default[%d-%d]: %s", level, _mark, mark(), "lambda_param_no_default+ '/' ','");
            Token _literal;
            Token _literal_1;
            SSTNode[] a;
            if (
                (a = (SSTNode[])_loop1_131_rule()) != null  // lambda_param_no_default+
                &&
                (_literal = expect(17)) != null  // token='/'
                &&
                (_literal_1 = expect(12)) != null  // token=','
            )
            {
                debugMessageln("%d lambda_slash_no_default[%d-%d]: %s succeeded!", level, _mark, mark(), "lambda_param_no_default+ '/' ','");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "lambda_param_no_default+ '/' ','");
                cache.putResult(_mark, LAMBDA_SLASH_NO_DEFAULT_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s lambda_slash_no_default[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_param_no_default+ '/' ','");
        }
        { // lambda_param_no_default+ '/' &':'
            debugMessageln("%d> lambda_slash_no_default[%d-%d]: %s", level, _mark, mark(), "lambda_param_no_default+ '/' &':'");
            Token _literal;
            SSTNode[] a;
            if (
                (a = (SSTNode[])_loop1_132_rule()) != null  // lambda_param_no_default+
                &&
                (_literal = expect(17)) != null  // token='/'
                &&
                genLookahead_expect(true, 11)  // token=':'
            )
            {
                debugMessageln("%d lambda_slash_no_default[%d-%d]: %s succeeded!", level, _mark, mark(), "lambda_param_no_default+ '/' &':'");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "lambda_param_no_default+ '/' &':'");
                cache.putResult(_mark, LAMBDA_SLASH_NO_DEFAULT_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s lambda_slash_no_default[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_param_no_default+ '/' &':'");
        }
        debugMessageln("Fail at %d: lambda_slash_no_default", _mark);
        _res = null;
        cache.putResult(_mark, LAMBDA_SLASH_NO_DEFAULT_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // lambda_slash_with_default:
    //     | lambda_param_no_default* lambda_param_with_default+ '/' ','
    //     | lambda_param_no_default* lambda_param_with_default+ '/' &':'
    public SSTNode[] lambda_slash_with_default_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, LAMBDA_SLASH_WITH_DEFAULT_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, LAMBDA_SLASH_WITH_DEFAULT_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // lambda_param_no_default* lambda_param_with_default+ '/' ','
            debugMessageln("%d> lambda_slash_with_default[%d-%d]: %s", level, _mark, mark(), "lambda_param_no_default* lambda_param_with_default+ '/' ','");
            Token _literal;
            Token _literal_1;
            SSTNode[] a;
            SSTNode[] b;
            if (
                (a = _loop0_133_rule()) != null  // lambda_param_no_default*
                &&
                (b = _loop1_134_rule()) != null  // lambda_param_with_default+
                &&
                (_literal = expect(17)) != null  // token='/'
                &&
                (_literal_1 = expect(12)) != null  // token=','
            )
            {
                debugMessageln("%d lambda_slash_with_default[%d-%d]: %s succeeded!", level, _mark, mark(), "lambda_param_no_default* lambda_param_with_default+ '/' ','");
                // TODO: node.action: _PyPegen_slash_with_default ( p , ( asdl_arg_seq * ) a , b )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_slash_with_default ( p , ( asdl_arg_seq * ) a , b ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "lambda_param_no_default* lambda_param_with_default+ '/' ','");
                cache.putResult(_mark, LAMBDA_SLASH_WITH_DEFAULT_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s lambda_slash_with_default[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_param_no_default* lambda_param_with_default+ '/' ','");
        }
        { // lambda_param_no_default* lambda_param_with_default+ '/' &':'
            debugMessageln("%d> lambda_slash_with_default[%d-%d]: %s", level, _mark, mark(), "lambda_param_no_default* lambda_param_with_default+ '/' &':'");
            Token _literal;
            SSTNode[] a;
            SSTNode[] b;
            if (
                (a = _loop0_135_rule()) != null  // lambda_param_no_default*
                &&
                (b = _loop1_136_rule()) != null  // lambda_param_with_default+
                &&
                (_literal = expect(17)) != null  // token='/'
                &&
                genLookahead_expect(true, 11)  // token=':'
            )
            {
                debugMessageln("%d lambda_slash_with_default[%d-%d]: %s succeeded!", level, _mark, mark(), "lambda_param_no_default* lambda_param_with_default+ '/' &':'");
                // TODO: node.action: _PyPegen_slash_with_default ( p , ( asdl_arg_seq * ) a , b )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_slash_with_default ( p , ( asdl_arg_seq * ) a , b ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "lambda_param_no_default* lambda_param_with_default+ '/' &':'");
                cache.putResult(_mark, LAMBDA_SLASH_WITH_DEFAULT_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s lambda_slash_with_default[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_param_no_default* lambda_param_with_default+ '/' &':'");
        }
        debugMessageln("Fail at %d: lambda_slash_with_default", _mark);
        _res = null;
        cache.putResult(_mark, LAMBDA_SLASH_WITH_DEFAULT_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // lambda_star_etc:
    //     | '*' lambda_param_no_default lambda_param_maybe_default* lambda_kwds?
    //     | '*' ',' lambda_param_maybe_default+ lambda_kwds?
    //     | lambda_kwds
    //     | invalid_lambda_star_etc
    public SSTNode[] lambda_star_etc_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, LAMBDA_STAR_ETC_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, LAMBDA_STAR_ETC_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // '*' lambda_param_no_default lambda_param_maybe_default* lambda_kwds?
            debugMessageln("%d> lambda_star_etc[%d-%d]: %s", level, _mark, mark(), "'*' lambda_param_no_default lambda_param_maybe_default* lambda_kwds?");
            Token _literal;
            SSTNode a;
            SSTNode[] b;
            Object c;
            if (
                (_literal = expect(16)) != null  // token='*'
                &&
                (a = lambda_param_no_default_rule()) != null  // lambda_param_no_default
                &&
                (b = _loop0_137_rule()) != null  // lambda_param_maybe_default*
                &&
                ((c = _tmp_138_rule()) != null || true)  // lambda_kwds?
            )
            {
                debugMessageln("%d lambda_star_etc[%d-%d]: %s succeeded!", level, _mark, mark(), "'*' lambda_param_no_default lambda_param_maybe_default* lambda_kwds?");
                // TODO: node.action: _PyPegen_star_etc ( p , a , b , c )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_star_etc ( p , a , b , c ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'*' lambda_param_no_default lambda_param_maybe_default* lambda_kwds?");
                cache.putResult(_mark, LAMBDA_STAR_ETC_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s lambda_star_etc[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'*' lambda_param_no_default lambda_param_maybe_default* lambda_kwds?");
        }
        { // '*' ',' lambda_param_maybe_default+ lambda_kwds?
            debugMessageln("%d> lambda_star_etc[%d-%d]: %s", level, _mark, mark(), "'*' ',' lambda_param_maybe_default+ lambda_kwds?");
            Token _literal;
            Token _literal_1;
            SSTNode[] b;
            Object c;
            if (
                (_literal = expect(16)) != null  // token='*'
                &&
                (_literal_1 = expect(12)) != null  // token=','
                &&
                (b = _loop1_139_rule()) != null  // lambda_param_maybe_default+
                &&
                ((c = _tmp_140_rule()) != null || true)  // lambda_kwds?
            )
            {
                debugMessageln("%d lambda_star_etc[%d-%d]: %s succeeded!", level, _mark, mark(), "'*' ',' lambda_param_maybe_default+ lambda_kwds?");
                // TODO: node.action: _PyPegen_star_etc ( p , NULL , b , c )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_star_etc ( p , NULL , b , c ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'*' ',' lambda_param_maybe_default+ lambda_kwds?");
                cache.putResult(_mark, LAMBDA_STAR_ETC_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s lambda_star_etc[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'*' ',' lambda_param_maybe_default+ lambda_kwds?");
        }
        { // lambda_kwds
            debugMessageln("%d> lambda_star_etc[%d-%d]: %s", level, _mark, mark(), "lambda_kwds");
            SSTNode a;
            if (
                (a = lambda_kwds_rule()) != null  // lambda_kwds
            )
            {
                debugMessageln("%d lambda_star_etc[%d-%d]: %s succeeded!", level, _mark, mark(), "lambda_kwds");
                // TODO: node.action: _PyPegen_star_etc ( p , NULL , NULL , a )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_star_etc ( p , NULL , NULL , a ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "lambda_kwds");
                cache.putResult(_mark, LAMBDA_STAR_ETC_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s lambda_star_etc[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_kwds");
        }
        if (callInvalidRules) { // invalid_lambda_star_etc
            debugMessageln("%d> lambda_star_etc[%d-%d]: %s", level, _mark, mark(), "invalid_lambda_star_etc");
            Object invalid_lambda_star_etc_var;
            if (
                (invalid_lambda_star_etc_var = invalid_lambda_star_etc_rule()) != null  // invalid_lambda_star_etc
            )
            {
                debugMessageln("%d lambda_star_etc[%d-%d]: %s succeeded!", level, _mark, mark(), "invalid_lambda_star_etc");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "invalid_lambda_star_etc");
                _res = invalid_lambda_star_etc_var;
                cache.putResult(_mark, LAMBDA_STAR_ETC_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s lambda_star_etc[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "invalid_lambda_star_etc");
        }
        debugMessageln("Fail at %d: lambda_star_etc", _mark);
        _res = null;
        cache.putResult(_mark, LAMBDA_STAR_ETC_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // lambda_kwds: '**' lambda_param_no_default
    public SSTNode lambda_kwds_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, LAMBDA_KWDS_ID)) {
            _res = (SSTNode)cache.getResult(_mark, LAMBDA_KWDS_ID);
            level--;
            return (SSTNode)_res;
        }
        { // '**' lambda_param_no_default
            debugMessageln("%d> lambda_kwds[%d-%d]: %s", level, _mark, mark(), "'**' lambda_param_no_default");
            Token _literal;
            SSTNode a;
            if (
                (_literal = expect(35)) != null  // token='**'
                &&
                (a = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            )
            {
                debugMessageln("%d lambda_kwds[%d-%d]: %s succeeded!", level, _mark, mark(), "'**' lambda_param_no_default");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'**' lambda_param_no_default");
                cache.putResult(_mark, LAMBDA_KWDS_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s lambda_kwds[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'**' lambda_param_no_default");
        }
        debugMessageln("Fail at %d: lambda_kwds", _mark);
        _res = null;
        cache.putResult(_mark, LAMBDA_KWDS_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // lambda_param_no_default: lambda_param ',' | lambda_param &':'
    public SSTNode lambda_param_no_default_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, LAMBDA_PARAM_NO_DEFAULT_ID)) {
            _res = (SSTNode)cache.getResult(_mark, LAMBDA_PARAM_NO_DEFAULT_ID);
            level--;
            return (SSTNode)_res;
        }
        { // lambda_param ','
            debugMessageln("%d> lambda_param_no_default[%d-%d]: %s", level, _mark, mark(), "lambda_param ','");
            Token _literal;
            SSTNode a;
            if (
                (a = lambda_param_rule()) != null  // lambda_param
                &&
                (_literal = expect(12)) != null  // token=','
            )
            {
                debugMessageln("%d lambda_param_no_default[%d-%d]: %s succeeded!", level, _mark, mark(), "lambda_param ','");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "lambda_param ','");
                cache.putResult(_mark, LAMBDA_PARAM_NO_DEFAULT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s lambda_param_no_default[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_param ','");
        }
        { // lambda_param &':'
            debugMessageln("%d> lambda_param_no_default[%d-%d]: %s", level, _mark, mark(), "lambda_param &':'");
            SSTNode a;
            if (
                (a = lambda_param_rule()) != null  // lambda_param
                &&
                genLookahead_expect(true, 11)  // token=':'
            )
            {
                debugMessageln("%d lambda_param_no_default[%d-%d]: %s succeeded!", level, _mark, mark(), "lambda_param &':'");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "lambda_param &':'");
                cache.putResult(_mark, LAMBDA_PARAM_NO_DEFAULT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s lambda_param_no_default[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_param &':'");
        }
        debugMessageln("Fail at %d: lambda_param_no_default", _mark);
        _res = null;
        cache.putResult(_mark, LAMBDA_PARAM_NO_DEFAULT_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // lambda_param_with_default:
    //     | lambda_param default_param ','
    //     | lambda_param default_param &':'
    public SSTNode[] lambda_param_with_default_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, LAMBDA_PARAM_WITH_DEFAULT_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, LAMBDA_PARAM_WITH_DEFAULT_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // lambda_param default_param ','
            debugMessageln("%d> lambda_param_with_default[%d-%d]: %s", level, _mark, mark(), "lambda_param default_param ','");
            Token _literal;
            SSTNode a;
            SSTNode c;
            if (
                (a = lambda_param_rule()) != null  // lambda_param
                &&
                (c = default_param_rule()) != null  // default_param
                &&
                (_literal = expect(12)) != null  // token=','
            )
            {
                debugMessageln("%d lambda_param_with_default[%d-%d]: %s succeeded!", level, _mark, mark(), "lambda_param default_param ','");
                // TODO: node.action: _PyPegen_name_default_pair ( p , a , c , NULL )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_name_default_pair ( p , a , c , NULL ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "lambda_param default_param ','");
                cache.putResult(_mark, LAMBDA_PARAM_WITH_DEFAULT_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s lambda_param_with_default[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_param default_param ','");
        }
        { // lambda_param default_param &':'
            debugMessageln("%d> lambda_param_with_default[%d-%d]: %s", level, _mark, mark(), "lambda_param default_param &':'");
            SSTNode a;
            SSTNode c;
            if (
                (a = lambda_param_rule()) != null  // lambda_param
                &&
                (c = default_param_rule()) != null  // default_param
                &&
                genLookahead_expect(true, 11)  // token=':'
            )
            {
                debugMessageln("%d lambda_param_with_default[%d-%d]: %s succeeded!", level, _mark, mark(), "lambda_param default_param &':'");
                // TODO: node.action: _PyPegen_name_default_pair ( p , a , c , NULL )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_name_default_pair ( p , a , c , NULL ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "lambda_param default_param &':'");
                cache.putResult(_mark, LAMBDA_PARAM_WITH_DEFAULT_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s lambda_param_with_default[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_param default_param &':'");
        }
        debugMessageln("Fail at %d: lambda_param_with_default", _mark);
        _res = null;
        cache.putResult(_mark, LAMBDA_PARAM_WITH_DEFAULT_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // lambda_param_maybe_default:
    //     | lambda_param default_param? ','
    //     | lambda_param default_param? &':'
    public SSTNode[] lambda_param_maybe_default_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, LAMBDA_PARAM_MAYBE_DEFAULT_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, LAMBDA_PARAM_MAYBE_DEFAULT_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // lambda_param default_param? ','
            debugMessageln("%d> lambda_param_maybe_default[%d-%d]: %s", level, _mark, mark(), "lambda_param default_param? ','");
            Token _literal;
            SSTNode a;
            Object c;
            if (
                (a = lambda_param_rule()) != null  // lambda_param
                &&
                ((c = default_param_rule()) != null || true)  // default_param?
                &&
                (_literal = expect(12)) != null  // token=','
            )
            {
                debugMessageln("%d lambda_param_maybe_default[%d-%d]: %s succeeded!", level, _mark, mark(), "lambda_param default_param? ','");
                // TODO: node.action: _PyPegen_name_default_pair ( p , a , c , NULL )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_name_default_pair ( p , a , c , NULL ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "lambda_param default_param? ','");
                cache.putResult(_mark, LAMBDA_PARAM_MAYBE_DEFAULT_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s lambda_param_maybe_default[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_param default_param? ','");
        }
        { // lambda_param default_param? &':'
            debugMessageln("%d> lambda_param_maybe_default[%d-%d]: %s", level, _mark, mark(), "lambda_param default_param? &':'");
            SSTNode a;
            Object c;
            if (
                (a = lambda_param_rule()) != null  // lambda_param
                &&
                ((c = default_param_rule()) != null || true)  // default_param?
                &&
                genLookahead_expect(true, 11)  // token=':'
            )
            {
                debugMessageln("%d lambda_param_maybe_default[%d-%d]: %s succeeded!", level, _mark, mark(), "lambda_param default_param? &':'");
                // TODO: node.action: _PyPegen_name_default_pair ( p , a , c , NULL )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_name_default_pair ( p , a , c , NULL ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "lambda_param default_param? &':'");
                cache.putResult(_mark, LAMBDA_PARAM_MAYBE_DEFAULT_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s lambda_param_maybe_default[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_param default_param? &':'");
        }
        debugMessageln("Fail at %d: lambda_param_maybe_default", _mark);
        _res = null;
        cache.putResult(_mark, LAMBDA_PARAM_MAYBE_DEFAULT_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // lambda_param: NAME
    public SSTNode lambda_param_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, LAMBDA_PARAM_ID)) {
            _res = (SSTNode)cache.getResult(_mark, LAMBDA_PARAM_ID);
            level--;
            return (SSTNode)_res;
        }
        { // NAME
            debugMessageln("%d> lambda_param[%d-%d]: %s", level, _mark, mark(), "NAME");
            SSTNode a;
            if (
                (a = name_token()) != null  // NAME
            )
            {
                debugMessageln("%d lambda_param[%d-%d]: %s succeeded!", level, _mark, mark(), "NAME");
                // TODO: node.action: _PyAST_arg ( a -> v . Name . id , NULL , NULL , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_arg ( a -> v . Name . id , NULL , NULL , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "NAME");
                cache.putResult(_mark, LAMBDA_PARAM_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s lambda_param[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "NAME");
        }
        debugMessageln("Fail at %d: lambda_param", _mark);
        _res = null;
        cache.putResult(_mark, LAMBDA_PARAM_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // disjunction: conjunction (('or' conjunction))+ | conjunction
    public SSTNode disjunction_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, DISJUNCTION_ID)) {
            _res = (SSTNode)cache.getResult(_mark, DISJUNCTION_ID);
            level--;
            return (SSTNode)_res;
        }
        { // conjunction (('or' conjunction))+
            debugMessageln("%d> disjunction[%d-%d]: %s", level, _mark, mark(), "conjunction (('or' conjunction))+");
            SSTNode a;
            SSTNode[] b;
            if (
                (a = conjunction_rule()) != null  // conjunction
                &&
                (b = _loop1_141_rule()) != null  // (('or' conjunction))+
            )
            {
                debugMessageln("%d disjunction[%d-%d]: %s succeeded!", level, _mark, mark(), "conjunction (('or' conjunction))+");
                // TODO: node.action: _PyAST_BoolOp ( Or , CHECK ( asdl_expr_seq * , this . insertInFront ( a , b ) ) , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_BoolOp ( Or , CHECK ( asdl_expr_seq * , this . insertInFront ( a , b ) ) , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "conjunction (('or' conjunction))+");
                cache.putResult(_mark, DISJUNCTION_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s disjunction[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "conjunction (('or' conjunction))+");
        }
        { // conjunction
            debugMessageln("%d> disjunction[%d-%d]: %s", level, _mark, mark(), "conjunction");
            SSTNode conjunction_var;
            if (
                (conjunction_var = conjunction_rule()) != null  // conjunction
            )
            {
                debugMessageln("%d disjunction[%d-%d]: %s succeeded!", level, _mark, mark(), "conjunction");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "conjunction");
                _res = conjunction_var;
                cache.putResult(_mark, DISJUNCTION_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s disjunction[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "conjunction");
        }
        debugMessageln("Fail at %d: disjunction", _mark);
        _res = null;
        cache.putResult(_mark, DISJUNCTION_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // conjunction: inversion (('and' inversion))+ | inversion
    public SSTNode conjunction_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, CONJUNCTION_ID)) {
            _res = (SSTNode)cache.getResult(_mark, CONJUNCTION_ID);
            level--;
            return (SSTNode)_res;
        }
        { // inversion (('and' inversion))+
            debugMessageln("%d> conjunction[%d-%d]: %s", level, _mark, mark(), "inversion (('and' inversion))+");
            SSTNode a;
            SSTNode[] b;
            if (
                (a = inversion_rule()) != null  // inversion
                &&
                (b = _loop1_142_rule()) != null  // (('and' inversion))+
            )
            {
                debugMessageln("%d conjunction[%d-%d]: %s succeeded!", level, _mark, mark(), "inversion (('and' inversion))+");
                // TODO: node.action: _PyAST_BoolOp ( And , CHECK ( asdl_expr_seq * , this . insertInFront ( a , b ) ) , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_BoolOp ( And , CHECK ( asdl_expr_seq * , this . insertInFront ( a , b ) ) , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "inversion (('and' inversion))+");
                cache.putResult(_mark, CONJUNCTION_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s conjunction[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "inversion (('and' inversion))+");
        }
        { // inversion
            debugMessageln("%d> conjunction[%d-%d]: %s", level, _mark, mark(), "inversion");
            SSTNode inversion_var;
            if (
                (inversion_var = inversion_rule()) != null  // inversion
            )
            {
                debugMessageln("%d conjunction[%d-%d]: %s succeeded!", level, _mark, mark(), "inversion");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "inversion");
                _res = inversion_var;
                cache.putResult(_mark, CONJUNCTION_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s conjunction[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "inversion");
        }
        debugMessageln("Fail at %d: conjunction", _mark);
        _res = null;
        cache.putResult(_mark, CONJUNCTION_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // inversion: 'not' inversion | comparison
    public SSTNode inversion_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, INVERSION_ID)) {
            _res = (SSTNode)cache.getResult(_mark, INVERSION_ID);
            level--;
            return (SSTNode)_res;
        }
        { // 'not' inversion
            debugMessageln("%d> inversion[%d-%d]: %s", level, _mark, mark(), "'not' inversion");
            Token _keyword;
            SSTNode a;
            if (
                (_keyword = expect(529)) != null  // token='not'
                &&
                (a = inversion_rule()) != null  // inversion
            )
            {
                debugMessageln("%d inversion[%d-%d]: %s succeeded!", level, _mark, mark(), "'not' inversion");
                // TODO: node.action: _PyAST_UnaryOp ( Not , a , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_UnaryOp ( Not , a , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'not' inversion");
                cache.putResult(_mark, INVERSION_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s inversion[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'not' inversion");
        }
        { // comparison
            debugMessageln("%d> inversion[%d-%d]: %s", level, _mark, mark(), "comparison");
            SSTNode comparison_var;
            if (
                (comparison_var = comparison_rule()) != null  // comparison
            )
            {
                debugMessageln("%d inversion[%d-%d]: %s succeeded!", level, _mark, mark(), "comparison");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "comparison");
                _res = comparison_var;
                cache.putResult(_mark, INVERSION_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s inversion[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "comparison");
        }
        debugMessageln("Fail at %d: inversion", _mark);
        _res = null;
        cache.putResult(_mark, INVERSION_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // comparison: bitwise_or compare_op_bitwise_or_pair+ | bitwise_or
    public SSTNode comparison_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, COMPARISON_ID)) {
            _res = (SSTNode)cache.getResult(_mark, COMPARISON_ID);
            level--;
            return (SSTNode)_res;
        }
        { // bitwise_or compare_op_bitwise_or_pair+
            debugMessageln("%d> comparison[%d-%d]: %s", level, _mark, mark(), "bitwise_or compare_op_bitwise_or_pair+");
            SSTNode a;
            SSTNode[] b;
            if (
                (a = bitwise_or_rule()) != null  // bitwise_or
                &&
                (b = _loop1_143_rule()) != null  // compare_op_bitwise_or_pair+
            )
            {
                debugMessageln("%d comparison[%d-%d]: %s succeeded!", level, _mark, mark(), "bitwise_or compare_op_bitwise_or_pair+");
                _res = finishBinaryOp(a,b);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "bitwise_or compare_op_bitwise_or_pair+");
                cache.putResult(_mark, COMPARISON_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s comparison[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "bitwise_or compare_op_bitwise_or_pair+");
        }
        { // bitwise_or
            debugMessageln("%d> comparison[%d-%d]: %s", level, _mark, mark(), "bitwise_or");
            SSTNode bitwise_or_var;
            if (
                (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            )
            {
                debugMessageln("%d comparison[%d-%d]: %s succeeded!", level, _mark, mark(), "bitwise_or");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "bitwise_or");
                _res = bitwise_or_var;
                cache.putResult(_mark, COMPARISON_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s comparison[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "bitwise_or");
        }
        debugMessageln("Fail at %d: comparison", _mark);
        _res = null;
        cache.putResult(_mark, COMPARISON_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // compare_op_bitwise_or_pair:
    //     | eq_bitwise_or
    //     | noteq_bitwise_or
    //     | lte_bitwise_or
    //     | lt_bitwise_or
    //     | gte_bitwise_or
    //     | gt_bitwise_or
    //     | notin_bitwise_or
    //     | in_bitwise_or
    //     | isnot_bitwise_or
    //     | is_bitwise_or
    public BinaryArithmeticSSTNode compare_op_bitwise_or_pair_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, COMPARE_OP_BITWISE_OR_PAIR_ID)) {
            _res = (BinaryArithmeticSSTNode)cache.getResult(_mark, COMPARE_OP_BITWISE_OR_PAIR_ID);
            level--;
            return (BinaryArithmeticSSTNode)_res;
        }
        { // eq_bitwise_or
            debugMessageln("%d> compare_op_bitwise_or_pair[%d-%d]: %s", level, _mark, mark(), "eq_bitwise_or");
            BinaryArithmeticSSTNode eq_bitwise_or_var;
            if (
                (eq_bitwise_or_var = eq_bitwise_or_rule()) != null  // eq_bitwise_or
            )
            {
                debugMessageln("%d compare_op_bitwise_or_pair[%d-%d]: %s succeeded!", level, _mark, mark(), "eq_bitwise_or");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "eq_bitwise_or");
                _res = eq_bitwise_or_var;
                cache.putResult(_mark, COMPARE_OP_BITWISE_OR_PAIR_ID, _res);
                level--;
                return (BinaryArithmeticSSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s compare_op_bitwise_or_pair[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "eq_bitwise_or");
        }
        { // noteq_bitwise_or
            debugMessageln("%d> compare_op_bitwise_or_pair[%d-%d]: %s", level, _mark, mark(), "noteq_bitwise_or");
            SSTNode[] noteq_bitwise_or_var;
            if (
                (noteq_bitwise_or_var = noteq_bitwise_or_rule()) != null  // noteq_bitwise_or
            )
            {
                debugMessageln("%d compare_op_bitwise_or_pair[%d-%d]: %s succeeded!", level, _mark, mark(), "noteq_bitwise_or");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "noteq_bitwise_or");
                _res = noteq_bitwise_or_var;
                cache.putResult(_mark, COMPARE_OP_BITWISE_OR_PAIR_ID, _res);
                level--;
                return (BinaryArithmeticSSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s compare_op_bitwise_or_pair[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "noteq_bitwise_or");
        }
        { // lte_bitwise_or
            debugMessageln("%d> compare_op_bitwise_or_pair[%d-%d]: %s", level, _mark, mark(), "lte_bitwise_or");
            SSTNode[] lte_bitwise_or_var;
            if (
                (lte_bitwise_or_var = lte_bitwise_or_rule()) != null  // lte_bitwise_or
            )
            {
                debugMessageln("%d compare_op_bitwise_or_pair[%d-%d]: %s succeeded!", level, _mark, mark(), "lte_bitwise_or");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "lte_bitwise_or");
                _res = lte_bitwise_or_var;
                cache.putResult(_mark, COMPARE_OP_BITWISE_OR_PAIR_ID, _res);
                level--;
                return (BinaryArithmeticSSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s compare_op_bitwise_or_pair[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lte_bitwise_or");
        }
        { // lt_bitwise_or
            debugMessageln("%d> compare_op_bitwise_or_pair[%d-%d]: %s", level, _mark, mark(), "lt_bitwise_or");
            SSTNode[] lt_bitwise_or_var;
            if (
                (lt_bitwise_or_var = lt_bitwise_or_rule()) != null  // lt_bitwise_or
            )
            {
                debugMessageln("%d compare_op_bitwise_or_pair[%d-%d]: %s succeeded!", level, _mark, mark(), "lt_bitwise_or");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "lt_bitwise_or");
                _res = lt_bitwise_or_var;
                cache.putResult(_mark, COMPARE_OP_BITWISE_OR_PAIR_ID, _res);
                level--;
                return (BinaryArithmeticSSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s compare_op_bitwise_or_pair[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lt_bitwise_or");
        }
        { // gte_bitwise_or
            debugMessageln("%d> compare_op_bitwise_or_pair[%d-%d]: %s", level, _mark, mark(), "gte_bitwise_or");
            SSTNode[] gte_bitwise_or_var;
            if (
                (gte_bitwise_or_var = gte_bitwise_or_rule()) != null  // gte_bitwise_or
            )
            {
                debugMessageln("%d compare_op_bitwise_or_pair[%d-%d]: %s succeeded!", level, _mark, mark(), "gte_bitwise_or");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "gte_bitwise_or");
                _res = gte_bitwise_or_var;
                cache.putResult(_mark, COMPARE_OP_BITWISE_OR_PAIR_ID, _res);
                level--;
                return (BinaryArithmeticSSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s compare_op_bitwise_or_pair[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "gte_bitwise_or");
        }
        { // gt_bitwise_or
            debugMessageln("%d> compare_op_bitwise_or_pair[%d-%d]: %s", level, _mark, mark(), "gt_bitwise_or");
            SSTNode[] gt_bitwise_or_var;
            if (
                (gt_bitwise_or_var = gt_bitwise_or_rule()) != null  // gt_bitwise_or
            )
            {
                debugMessageln("%d compare_op_bitwise_or_pair[%d-%d]: %s succeeded!", level, _mark, mark(), "gt_bitwise_or");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "gt_bitwise_or");
                _res = gt_bitwise_or_var;
                cache.putResult(_mark, COMPARE_OP_BITWISE_OR_PAIR_ID, _res);
                level--;
                return (BinaryArithmeticSSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s compare_op_bitwise_or_pair[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "gt_bitwise_or");
        }
        { // notin_bitwise_or
            debugMessageln("%d> compare_op_bitwise_or_pair[%d-%d]: %s", level, _mark, mark(), "notin_bitwise_or");
            SSTNode[] notin_bitwise_or_var;
            if (
                (notin_bitwise_or_var = notin_bitwise_or_rule()) != null  // notin_bitwise_or
            )
            {
                debugMessageln("%d compare_op_bitwise_or_pair[%d-%d]: %s succeeded!", level, _mark, mark(), "notin_bitwise_or");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "notin_bitwise_or");
                _res = notin_bitwise_or_var;
                cache.putResult(_mark, COMPARE_OP_BITWISE_OR_PAIR_ID, _res);
                level--;
                return (BinaryArithmeticSSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s compare_op_bitwise_or_pair[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "notin_bitwise_or");
        }
        { // in_bitwise_or
            debugMessageln("%d> compare_op_bitwise_or_pair[%d-%d]: %s", level, _mark, mark(), "in_bitwise_or");
            SSTNode[] in_bitwise_or_var;
            if (
                (in_bitwise_or_var = in_bitwise_or_rule()) != null  // in_bitwise_or
            )
            {
                debugMessageln("%d compare_op_bitwise_or_pair[%d-%d]: %s succeeded!", level, _mark, mark(), "in_bitwise_or");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "in_bitwise_or");
                _res = in_bitwise_or_var;
                cache.putResult(_mark, COMPARE_OP_BITWISE_OR_PAIR_ID, _res);
                level--;
                return (BinaryArithmeticSSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s compare_op_bitwise_or_pair[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "in_bitwise_or");
        }
        { // isnot_bitwise_or
            debugMessageln("%d> compare_op_bitwise_or_pair[%d-%d]: %s", level, _mark, mark(), "isnot_bitwise_or");
            SSTNode[] isnot_bitwise_or_var;
            if (
                (isnot_bitwise_or_var = isnot_bitwise_or_rule()) != null  // isnot_bitwise_or
            )
            {
                debugMessageln("%d compare_op_bitwise_or_pair[%d-%d]: %s succeeded!", level, _mark, mark(), "isnot_bitwise_or");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "isnot_bitwise_or");
                _res = isnot_bitwise_or_var;
                cache.putResult(_mark, COMPARE_OP_BITWISE_OR_PAIR_ID, _res);
                level--;
                return (BinaryArithmeticSSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s compare_op_bitwise_or_pair[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "isnot_bitwise_or");
        }
        { // is_bitwise_or
            debugMessageln("%d> compare_op_bitwise_or_pair[%d-%d]: %s", level, _mark, mark(), "is_bitwise_or");
            SSTNode[] is_bitwise_or_var;
            if (
                (is_bitwise_or_var = is_bitwise_or_rule()) != null  // is_bitwise_or
            )
            {
                debugMessageln("%d compare_op_bitwise_or_pair[%d-%d]: %s succeeded!", level, _mark, mark(), "is_bitwise_or");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "is_bitwise_or");
                _res = is_bitwise_or_var;
                cache.putResult(_mark, COMPARE_OP_BITWISE_OR_PAIR_ID, _res);
                level--;
                return (BinaryArithmeticSSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s compare_op_bitwise_or_pair[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "is_bitwise_or");
        }
        debugMessageln("Fail at %d: compare_op_bitwise_or_pair", _mark);
        _res = null;
        cache.putResult(_mark, COMPARE_OP_BITWISE_OR_PAIR_ID, _res);
        level--;
        return (BinaryArithmeticSSTNode)_res;
    }

    // eq_bitwise_or: '==' bitwise_or
    public BinaryArithmeticSSTNode eq_bitwise_or_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, EQ_BITWISE_OR_ID)) {
            _res = (BinaryArithmeticSSTNode)cache.getResult(_mark, EQ_BITWISE_OR_ID);
            level--;
            return (BinaryArithmeticSSTNode)_res;
        }
        Token startToken = getAndInitializeToken();
        { // '==' bitwise_or
            debugMessageln("%d> eq_bitwise_or[%d-%d]: %s", level, _mark, mark(), "'==' bitwise_or");
            Token _literal;
            SSTNode a;
            if (
                (_literal = expect(27)) != null  // token='=='
                &&
                (a = bitwise_or_rule()) != null  // bitwise_or
            )
            {
                debugMessageln("%d eq_bitwise_or[%d-%d]: %s succeeded!", level, _mark, mark(), "'==' bitwise_or");
                Token endToken = getLastNonWhitespaceToken();
                if (endToken == null) {
                    level--;
                    return null;
                }
                _res = factory.createBinaryOp(BinaryArithmeticSSTNode.Type.EQ,null,a,startToken.startOffset,endToken.endOffset);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'==' bitwise_or");
                cache.putResult(_mark, EQ_BITWISE_OR_ID, _res);
                level--;
                return (BinaryArithmeticSSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s eq_bitwise_or[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'==' bitwise_or");
        }
        debugMessageln("Fail at %d: eq_bitwise_or", _mark);
        _res = null;
        cache.putResult(_mark, EQ_BITWISE_OR_ID, _res);
        level--;
        return (BinaryArithmeticSSTNode)_res;
    }

    // noteq_bitwise_or: ('!=') bitwise_or
    public SSTNode[] noteq_bitwise_or_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, NOTEQ_BITWISE_OR_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, NOTEQ_BITWISE_OR_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // ('!=') bitwise_or
            debugMessageln("%d> noteq_bitwise_or[%d-%d]: %s", level, _mark, mark(), "('!=') bitwise_or");
            Object _tmp_144_var;
            SSTNode a;
            if (
                (_tmp_144_var = _tmp_144_rule()) != null  // '!='
                &&
                (a = bitwise_or_rule()) != null  // bitwise_or
            )
            {
                debugMessageln("%d noteq_bitwise_or[%d-%d]: %s succeeded!", level, _mark, mark(), "('!=') bitwise_or");
                // TODO: node.action: _PyPegen_cmpop_expr_pair ( p , NotEq , a )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_cmpop_expr_pair ( p , NotEq , a ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "('!=') bitwise_or");
                cache.putResult(_mark, NOTEQ_BITWISE_OR_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s noteq_bitwise_or[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "('!=') bitwise_or");
        }
        debugMessageln("Fail at %d: noteq_bitwise_or", _mark);
        _res = null;
        cache.putResult(_mark, NOTEQ_BITWISE_OR_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // lte_bitwise_or: '<=' bitwise_or
    public SSTNode[] lte_bitwise_or_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, LTE_BITWISE_OR_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, LTE_BITWISE_OR_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // '<=' bitwise_or
            debugMessageln("%d> lte_bitwise_or[%d-%d]: %s", level, _mark, mark(), "'<=' bitwise_or");
            Token _literal;
            SSTNode a;
            if (
                (_literal = expect(29)) != null  // token='<='
                &&
                (a = bitwise_or_rule()) != null  // bitwise_or
            )
            {
                debugMessageln("%d lte_bitwise_or[%d-%d]: %s succeeded!", level, _mark, mark(), "'<=' bitwise_or");
                // TODO: node.action: _PyPegen_cmpop_expr_pair ( p , LtE , a )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_cmpop_expr_pair ( p , LtE , a ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'<=' bitwise_or");
                cache.putResult(_mark, LTE_BITWISE_OR_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s lte_bitwise_or[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'<=' bitwise_or");
        }
        debugMessageln("Fail at %d: lte_bitwise_or", _mark);
        _res = null;
        cache.putResult(_mark, LTE_BITWISE_OR_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // lt_bitwise_or: '<' bitwise_or
    public SSTNode[] lt_bitwise_or_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, LT_BITWISE_OR_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, LT_BITWISE_OR_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // '<' bitwise_or
            debugMessageln("%d> lt_bitwise_or[%d-%d]: %s", level, _mark, mark(), "'<' bitwise_or");
            Token _literal;
            SSTNode a;
            if (
                (_literal = expect(20)) != null  // token='<'
                &&
                (a = bitwise_or_rule()) != null  // bitwise_or
            )
            {
                debugMessageln("%d lt_bitwise_or[%d-%d]: %s succeeded!", level, _mark, mark(), "'<' bitwise_or");
                // TODO: node.action: _PyPegen_cmpop_expr_pair ( p , Lt , a )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_cmpop_expr_pair ( p , Lt , a ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'<' bitwise_or");
                cache.putResult(_mark, LT_BITWISE_OR_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s lt_bitwise_or[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'<' bitwise_or");
        }
        debugMessageln("Fail at %d: lt_bitwise_or", _mark);
        _res = null;
        cache.putResult(_mark, LT_BITWISE_OR_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // gte_bitwise_or: '>=' bitwise_or
    public SSTNode[] gte_bitwise_or_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, GTE_BITWISE_OR_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, GTE_BITWISE_OR_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // '>=' bitwise_or
            debugMessageln("%d> gte_bitwise_or[%d-%d]: %s", level, _mark, mark(), "'>=' bitwise_or");
            Token _literal;
            SSTNode a;
            if (
                (_literal = expect(30)) != null  // token='>='
                &&
                (a = bitwise_or_rule()) != null  // bitwise_or
            )
            {
                debugMessageln("%d gte_bitwise_or[%d-%d]: %s succeeded!", level, _mark, mark(), "'>=' bitwise_or");
                // TODO: node.action: _PyPegen_cmpop_expr_pair ( p , GtE , a )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_cmpop_expr_pair ( p , GtE , a ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'>=' bitwise_or");
                cache.putResult(_mark, GTE_BITWISE_OR_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s gte_bitwise_or[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'>=' bitwise_or");
        }
        debugMessageln("Fail at %d: gte_bitwise_or", _mark);
        _res = null;
        cache.putResult(_mark, GTE_BITWISE_OR_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // gt_bitwise_or: '>' bitwise_or
    public SSTNode[] gt_bitwise_or_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, GT_BITWISE_OR_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, GT_BITWISE_OR_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // '>' bitwise_or
            debugMessageln("%d> gt_bitwise_or[%d-%d]: %s", level, _mark, mark(), "'>' bitwise_or");
            Token _literal;
            SSTNode a;
            if (
                (_literal = expect(21)) != null  // token='>'
                &&
                (a = bitwise_or_rule()) != null  // bitwise_or
            )
            {
                debugMessageln("%d gt_bitwise_or[%d-%d]: %s succeeded!", level, _mark, mark(), "'>' bitwise_or");
                // TODO: node.action: _PyPegen_cmpop_expr_pair ( p , Gt , a )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_cmpop_expr_pair ( p , Gt , a ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'>' bitwise_or");
                cache.putResult(_mark, GT_BITWISE_OR_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s gt_bitwise_or[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'>' bitwise_or");
        }
        debugMessageln("Fail at %d: gt_bitwise_or", _mark);
        _res = null;
        cache.putResult(_mark, GT_BITWISE_OR_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // notin_bitwise_or: 'not' 'in' bitwise_or
    public SSTNode[] notin_bitwise_or_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, NOTIN_BITWISE_OR_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, NOTIN_BITWISE_OR_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // 'not' 'in' bitwise_or
            debugMessageln("%d> notin_bitwise_or[%d-%d]: %s", level, _mark, mark(), "'not' 'in' bitwise_or");
            Token _keyword;
            Token _keyword_1;
            SSTNode a;
            if (
                (_keyword = expect(529)) != null  // token='not'
                &&
                (_keyword_1 = expect(518)) != null  // token='in'
                &&
                (a = bitwise_or_rule()) != null  // bitwise_or
            )
            {
                debugMessageln("%d notin_bitwise_or[%d-%d]: %s succeeded!", level, _mark, mark(), "'not' 'in' bitwise_or");
                // TODO: node.action: _PyPegen_cmpop_expr_pair ( p , NotIn , a )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_cmpop_expr_pair ( p , NotIn , a ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'not' 'in' bitwise_or");
                cache.putResult(_mark, NOTIN_BITWISE_OR_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s notin_bitwise_or[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'not' 'in' bitwise_or");
        }
        debugMessageln("Fail at %d: notin_bitwise_or", _mark);
        _res = null;
        cache.putResult(_mark, NOTIN_BITWISE_OR_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // in_bitwise_or: 'in' bitwise_or
    public SSTNode[] in_bitwise_or_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, IN_BITWISE_OR_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, IN_BITWISE_OR_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // 'in' bitwise_or
            debugMessageln("%d> in_bitwise_or[%d-%d]: %s", level, _mark, mark(), "'in' bitwise_or");
            Token _keyword;
            SSTNode a;
            if (
                (_keyword = expect(518)) != null  // token='in'
                &&
                (a = bitwise_or_rule()) != null  // bitwise_or
            )
            {
                debugMessageln("%d in_bitwise_or[%d-%d]: %s succeeded!", level, _mark, mark(), "'in' bitwise_or");
                // TODO: node.action: _PyPegen_cmpop_expr_pair ( p , In , a )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_cmpop_expr_pair ( p , In , a ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'in' bitwise_or");
                cache.putResult(_mark, IN_BITWISE_OR_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s in_bitwise_or[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'in' bitwise_or");
        }
        debugMessageln("Fail at %d: in_bitwise_or", _mark);
        _res = null;
        cache.putResult(_mark, IN_BITWISE_OR_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // isnot_bitwise_or: 'is' 'not' bitwise_or
    public SSTNode[] isnot_bitwise_or_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, ISNOT_BITWISE_OR_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, ISNOT_BITWISE_OR_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // 'is' 'not' bitwise_or
            debugMessageln("%d> isnot_bitwise_or[%d-%d]: %s", level, _mark, mark(), "'is' 'not' bitwise_or");
            Token _keyword;
            Token _keyword_1;
            SSTNode a;
            if (
                (_keyword = expect(530)) != null  // token='is'
                &&
                (_keyword_1 = expect(529)) != null  // token='not'
                &&
                (a = bitwise_or_rule()) != null  // bitwise_or
            )
            {
                debugMessageln("%d isnot_bitwise_or[%d-%d]: %s succeeded!", level, _mark, mark(), "'is' 'not' bitwise_or");
                // TODO: node.action: _PyPegen_cmpop_expr_pair ( p , IsNot , a )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_cmpop_expr_pair ( p , IsNot , a ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'is' 'not' bitwise_or");
                cache.putResult(_mark, ISNOT_BITWISE_OR_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s isnot_bitwise_or[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'is' 'not' bitwise_or");
        }
        debugMessageln("Fail at %d: isnot_bitwise_or", _mark);
        _res = null;
        cache.putResult(_mark, ISNOT_BITWISE_OR_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // is_bitwise_or: 'is' bitwise_or
    public SSTNode[] is_bitwise_or_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, IS_BITWISE_OR_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, IS_BITWISE_OR_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // 'is' bitwise_or
            debugMessageln("%d> is_bitwise_or[%d-%d]: %s", level, _mark, mark(), "'is' bitwise_or");
            Token _keyword;
            SSTNode a;
            if (
                (_keyword = expect(530)) != null  // token='is'
                &&
                (a = bitwise_or_rule()) != null  // bitwise_or
            )
            {
                debugMessageln("%d is_bitwise_or[%d-%d]: %s succeeded!", level, _mark, mark(), "'is' bitwise_or");
                // TODO: node.action: _PyPegen_cmpop_expr_pair ( p , Is , a )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_cmpop_expr_pair ( p , Is , a ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'is' bitwise_or");
                cache.putResult(_mark, IS_BITWISE_OR_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s is_bitwise_or[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'is' bitwise_or");
        }
        debugMessageln("Fail at %d: is_bitwise_or", _mark);
        _res = null;
        cache.putResult(_mark, IS_BITWISE_OR_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // Left-recursive
    // bitwise_or: bitwise_or '|' bitwise_xor | bitwise_xor
    public SSTNode bitwise_or_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, BITWISE_OR_ID)) {
            _res = cache.getResult(_mark, BITWISE_OR_ID);
            level--;
            return (SSTNode)_res;
        }
        int _resmark = mark();
        while (true) {
            cache.putResult(_mark, BITWISE_OR_ID, _res);
            reset(_mark);
            SSTNode _raw = bitwise_or_raw();
            if (_raw == null || mark() <= _resmark)
                break;
            _resmark = mark();
            _res = _raw;
        }
        reset(_resmark);
        level--;
        return (SSTNode)_res;
    }
    private SSTNode bitwise_or_raw()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        { // bitwise_or '|' bitwise_xor
            debugMessageln("%d> bitwise_or[%d-%d]: %s", level, _mark, mark(), "bitwise_or '|' bitwise_xor");
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                (a = bitwise_or_rule()) != null  // bitwise_or
                &&
                (_literal = expect(18)) != null  // token='|'
                &&
                (b = bitwise_xor_rule()) != null  // bitwise_xor
            )
            {
                debugMessageln("%d bitwise_or[%d-%d]: %s succeeded!", level, _mark, mark(), "bitwise_or '|' bitwise_xor");
                // TODO: node.action: _PyAST_BinOp ( a , BitOr , b , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_BinOp ( a , BitOr , b , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "bitwise_or '|' bitwise_xor");
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s bitwise_or[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "bitwise_or '|' bitwise_xor");
        }
        { // bitwise_xor
            debugMessageln("%d> bitwise_or[%d-%d]: %s", level, _mark, mark(), "bitwise_xor");
            SSTNode bitwise_xor_var;
            if (
                (bitwise_xor_var = bitwise_xor_rule()) != null  // bitwise_xor
            )
            {
                debugMessageln("%d bitwise_or[%d-%d]: %s succeeded!", level, _mark, mark(), "bitwise_xor");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "bitwise_xor");
                _res = bitwise_xor_var;
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s bitwise_or[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "bitwise_xor");
        }
        debugMessageln("Fail at %d: bitwise_or", _mark);
        _res = null;
        level--;
        return (SSTNode)_res;
    }

    // Left-recursive
    // bitwise_xor: bitwise_xor '^' bitwise_and | bitwise_and
    public SSTNode bitwise_xor_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, BITWISE_XOR_ID)) {
            _res = cache.getResult(_mark, BITWISE_XOR_ID);
            level--;
            return (SSTNode)_res;
        }
        int _resmark = mark();
        while (true) {
            cache.putResult(_mark, BITWISE_XOR_ID, _res);
            reset(_mark);
            SSTNode _raw = bitwise_xor_raw();
            if (_raw == null || mark() <= _resmark)
                break;
            _resmark = mark();
            _res = _raw;
        }
        reset(_resmark);
        level--;
        return (SSTNode)_res;
    }
    private SSTNode bitwise_xor_raw()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        { // bitwise_xor '^' bitwise_and
            debugMessageln("%d> bitwise_xor[%d-%d]: %s", level, _mark, mark(), "bitwise_xor '^' bitwise_and");
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                (a = bitwise_xor_rule()) != null  // bitwise_xor
                &&
                (_literal = expect(32)) != null  // token='^'
                &&
                (b = bitwise_and_rule()) != null  // bitwise_and
            )
            {
                debugMessageln("%d bitwise_xor[%d-%d]: %s succeeded!", level, _mark, mark(), "bitwise_xor '^' bitwise_and");
                // TODO: node.action: _PyAST_BinOp ( a , BitXor , b , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_BinOp ( a , BitXor , b , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "bitwise_xor '^' bitwise_and");
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s bitwise_xor[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "bitwise_xor '^' bitwise_and");
        }
        { // bitwise_and
            debugMessageln("%d> bitwise_xor[%d-%d]: %s", level, _mark, mark(), "bitwise_and");
            SSTNode bitwise_and_var;
            if (
                (bitwise_and_var = bitwise_and_rule()) != null  // bitwise_and
            )
            {
                debugMessageln("%d bitwise_xor[%d-%d]: %s succeeded!", level, _mark, mark(), "bitwise_and");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "bitwise_and");
                _res = bitwise_and_var;
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s bitwise_xor[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "bitwise_and");
        }
        debugMessageln("Fail at %d: bitwise_xor", _mark);
        _res = null;
        level--;
        return (SSTNode)_res;
    }

    // Left-recursive
    // bitwise_and: bitwise_and '&' shift_expr | shift_expr
    public SSTNode bitwise_and_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, BITWISE_AND_ID)) {
            _res = cache.getResult(_mark, BITWISE_AND_ID);
            level--;
            return (SSTNode)_res;
        }
        int _resmark = mark();
        while (true) {
            cache.putResult(_mark, BITWISE_AND_ID, _res);
            reset(_mark);
            SSTNode _raw = bitwise_and_raw();
            if (_raw == null || mark() <= _resmark)
                break;
            _resmark = mark();
            _res = _raw;
        }
        reset(_resmark);
        level--;
        return (SSTNode)_res;
    }
    private SSTNode bitwise_and_raw()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        { // bitwise_and '&' shift_expr
            debugMessageln("%d> bitwise_and[%d-%d]: %s", level, _mark, mark(), "bitwise_and '&' shift_expr");
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                (a = bitwise_and_rule()) != null  // bitwise_and
                &&
                (_literal = expect(19)) != null  // token='&'
                &&
                (b = shift_expr_rule()) != null  // shift_expr
            )
            {
                debugMessageln("%d bitwise_and[%d-%d]: %s succeeded!", level, _mark, mark(), "bitwise_and '&' shift_expr");
                // TODO: node.action: _PyAST_BinOp ( a , BitAnd , b , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_BinOp ( a , BitAnd , b , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "bitwise_and '&' shift_expr");
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s bitwise_and[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "bitwise_and '&' shift_expr");
        }
        { // shift_expr
            debugMessageln("%d> bitwise_and[%d-%d]: %s", level, _mark, mark(), "shift_expr");
            SSTNode shift_expr_var;
            if (
                (shift_expr_var = shift_expr_rule()) != null  // shift_expr
            )
            {
                debugMessageln("%d bitwise_and[%d-%d]: %s succeeded!", level, _mark, mark(), "shift_expr");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "shift_expr");
                _res = shift_expr_var;
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s bitwise_and[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "shift_expr");
        }
        debugMessageln("Fail at %d: bitwise_and", _mark);
        _res = null;
        level--;
        return (SSTNode)_res;
    }

    // Left-recursive
    // shift_expr: shift_expr '<<' sum | shift_expr '>>' sum | sum
    public SSTNode shift_expr_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, SHIFT_EXPR_ID)) {
            _res = cache.getResult(_mark, SHIFT_EXPR_ID);
            level--;
            return (SSTNode)_res;
        }
        int _resmark = mark();
        while (true) {
            cache.putResult(_mark, SHIFT_EXPR_ID, _res);
            reset(_mark);
            SSTNode _raw = shift_expr_raw();
            if (_raw == null || mark() <= _resmark)
                break;
            _resmark = mark();
            _res = _raw;
        }
        reset(_resmark);
        level--;
        return (SSTNode)_res;
    }
    private SSTNode shift_expr_raw()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        { // shift_expr '<<' sum
            debugMessageln("%d> shift_expr[%d-%d]: %s", level, _mark, mark(), "shift_expr '<<' sum");
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                (a = shift_expr_rule()) != null  // shift_expr
                &&
                (_literal = expect(33)) != null  // token='<<'
                &&
                (b = sum_rule()) != null  // sum
            )
            {
                debugMessageln("%d shift_expr[%d-%d]: %s succeeded!", level, _mark, mark(), "shift_expr '<<' sum");
                // TODO: node.action: _PyAST_BinOp ( a , LShift , b , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_BinOp ( a , LShift , b , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "shift_expr '<<' sum");
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s shift_expr[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "shift_expr '<<' sum");
        }
        { // shift_expr '>>' sum
            debugMessageln("%d> shift_expr[%d-%d]: %s", level, _mark, mark(), "shift_expr '>>' sum");
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                (a = shift_expr_rule()) != null  // shift_expr
                &&
                (_literal = expect(34)) != null  // token='>>'
                &&
                (b = sum_rule()) != null  // sum
            )
            {
                debugMessageln("%d shift_expr[%d-%d]: %s succeeded!", level, _mark, mark(), "shift_expr '>>' sum");
                // TODO: node.action: _PyAST_BinOp ( a , RShift , b , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_BinOp ( a , RShift , b , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "shift_expr '>>' sum");
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s shift_expr[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "shift_expr '>>' sum");
        }
        { // sum
            debugMessageln("%d> shift_expr[%d-%d]: %s", level, _mark, mark(), "sum");
            SSTNode sum_var;
            if (
                (sum_var = sum_rule()) != null  // sum
            )
            {
                debugMessageln("%d shift_expr[%d-%d]: %s succeeded!", level, _mark, mark(), "sum");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "sum");
                _res = sum_var;
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s shift_expr[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "sum");
        }
        debugMessageln("Fail at %d: shift_expr", _mark);
        _res = null;
        level--;
        return (SSTNode)_res;
    }

    // Left-recursive
    // sum: sum '+' term | sum '-' term | term
    public SSTNode sum_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, SUM_ID)) {
            _res = cache.getResult(_mark, SUM_ID);
            level--;
            return (SSTNode)_res;
        }
        int _resmark = mark();
        while (true) {
            cache.putResult(_mark, SUM_ID, _res);
            reset(_mark);
            SSTNode _raw = sum_raw();
            if (_raw == null || mark() <= _resmark)
                break;
            _resmark = mark();
            _res = _raw;
        }
        reset(_resmark);
        level--;
        return (SSTNode)_res;
    }
    private SSTNode sum_raw()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        { // sum '+' term
            debugMessageln("%d> sum[%d-%d]: %s", level, _mark, mark(), "sum '+' term");
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                (a = sum_rule()) != null  // sum
                &&
                (_literal = expect(14)) != null  // token='+'
                &&
                (b = term_rule()) != null  // term
            )
            {
                debugMessageln("%d sum[%d-%d]: %s succeeded!", level, _mark, mark(), "sum '+' term");
                // TODO: node.action: _PyAST_BinOp ( a , Add , b , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_BinOp ( a , Add , b , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "sum '+' term");
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s sum[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "sum '+' term");
        }
        { // sum '-' term
            debugMessageln("%d> sum[%d-%d]: %s", level, _mark, mark(), "sum '-' term");
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                (a = sum_rule()) != null  // sum
                &&
                (_literal = expect(15)) != null  // token='-'
                &&
                (b = term_rule()) != null  // term
            )
            {
                debugMessageln("%d sum[%d-%d]: %s succeeded!", level, _mark, mark(), "sum '-' term");
                // TODO: node.action: _PyAST_BinOp ( a , Sub , b , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_BinOp ( a , Sub , b , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "sum '-' term");
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s sum[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "sum '-' term");
        }
        { // term
            debugMessageln("%d> sum[%d-%d]: %s", level, _mark, mark(), "term");
            SSTNode term_var;
            if (
                (term_var = term_rule()) != null  // term
            )
            {
                debugMessageln("%d sum[%d-%d]: %s succeeded!", level, _mark, mark(), "term");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "term");
                _res = term_var;
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s sum[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "term");
        }
        debugMessageln("Fail at %d: sum", _mark);
        _res = null;
        level--;
        return (SSTNode)_res;
    }

    // Left-recursive
    // term:
    //     | term '*' factor
    //     | term '/' factor
    //     | term '//' factor
    //     | term '%' factor
    //     | term '@' factor
    //     | factor
    public SSTNode term_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, TERM_ID)) {
            _res = cache.getResult(_mark, TERM_ID);
            level--;
            return (SSTNode)_res;
        }
        int _resmark = mark();
        while (true) {
            cache.putResult(_mark, TERM_ID, _res);
            reset(_mark);
            SSTNode _raw = term_raw();
            if (_raw == null || mark() <= _resmark)
                break;
            _resmark = mark();
            _res = _raw;
        }
        reset(_resmark);
        level--;
        return (SSTNode)_res;
    }
    private SSTNode term_raw()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        { // term '*' factor
            debugMessageln("%d> term[%d-%d]: %s", level, _mark, mark(), "term '*' factor");
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                (a = term_rule()) != null  // term
                &&
                (_literal = expect(16)) != null  // token='*'
                &&
                (b = factor_rule()) != null  // factor
            )
            {
                debugMessageln("%d term[%d-%d]: %s succeeded!", level, _mark, mark(), "term '*' factor");
                // TODO: node.action: _PyAST_BinOp ( a , Mult , b , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_BinOp ( a , Mult , b , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "term '*' factor");
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s term[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "term '*' factor");
        }
        { // term '/' factor
            debugMessageln("%d> term[%d-%d]: %s", level, _mark, mark(), "term '/' factor");
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                (a = term_rule()) != null  // term
                &&
                (_literal = expect(17)) != null  // token='/'
                &&
                (b = factor_rule()) != null  // factor
            )
            {
                debugMessageln("%d term[%d-%d]: %s succeeded!", level, _mark, mark(), "term '/' factor");
                // TODO: node.action: _PyAST_BinOp ( a , Div , b , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_BinOp ( a , Div , b , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "term '/' factor");
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s term[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "term '/' factor");
        }
        { // term '//' factor
            debugMessageln("%d> term[%d-%d]: %s", level, _mark, mark(), "term '//' factor");
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                (a = term_rule()) != null  // term
                &&
                (_literal = expect(47)) != null  // token='//'
                &&
                (b = factor_rule()) != null  // factor
            )
            {
                debugMessageln("%d term[%d-%d]: %s succeeded!", level, _mark, mark(), "term '//' factor");
                // TODO: node.action: _PyAST_BinOp ( a , FloorDiv , b , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_BinOp ( a , FloorDiv , b , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "term '//' factor");
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s term[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "term '//' factor");
        }
        { // term '%' factor
            debugMessageln("%d> term[%d-%d]: %s", level, _mark, mark(), "term '%' factor");
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                (a = term_rule()) != null  // term
                &&
                (_literal = expect(24)) != null  // token='%'
                &&
                (b = factor_rule()) != null  // factor
            )
            {
                debugMessageln("%d term[%d-%d]: %s succeeded!", level, _mark, mark(), "term '%' factor");
                // TODO: node.action: _PyAST_BinOp ( a , Mod , b , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_BinOp ( a , Mod , b , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "term '%' factor");
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s term[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "term '%' factor");
        }
        { // term '@' factor
            debugMessageln("%d> term[%d-%d]: %s", level, _mark, mark(), "term '@' factor");
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                (a = term_rule()) != null  // term
                &&
                (_literal = expect(49)) != null  // token='@'
                &&
                (b = factor_rule()) != null  // factor
            )
            {
                debugMessageln("%d term[%d-%d]: %s succeeded!", level, _mark, mark(), "term '@' factor");
                // TODO: node.action: CHECK_VERSION ( expr_ty , 5 , "The '@' operator is" , _PyAST_BinOp ( a , MatMult , b , EXTRA ) )
                debugMessageln("[33;5;7m!!! TODO: Convert CHECK_VERSION ( expr_ty , 5 , 'The '@' operator is' , _PyAST_BinOp ( a , MatMult , b , EXTRA ) ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "term '@' factor");
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s term[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "term '@' factor");
        }
        { // factor
            debugMessageln("%d> term[%d-%d]: %s", level, _mark, mark(), "factor");
            SSTNode factor_var;
            if (
                (factor_var = factor_rule()) != null  // factor
            )
            {
                debugMessageln("%d term[%d-%d]: %s succeeded!", level, _mark, mark(), "factor");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "factor");
                _res = factor_var;
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s term[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "factor");
        }
        debugMessageln("Fail at %d: term", _mark);
        _res = null;
        level--;
        return (SSTNode)_res;
    }

    // factor: '+' factor | '-' factor | '~' factor | power
    public SSTNode factor_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, FACTOR_ID)) {
            _res = (SSTNode)cache.getResult(_mark, FACTOR_ID);
            level--;
            return (SSTNode)_res;
        }
        Token startToken = getAndInitializeToken();
        { // '+' factor
            debugMessageln("%d> factor[%d-%d]: %s", level, _mark, mark(), "'+' factor");
            Token _literal;
            SSTNode a;
            if (
                (_literal = expect(14)) != null  // token='+'
                &&
                (a = factor_rule()) != null  // factor
            )
            {
                debugMessageln("%d factor[%d-%d]: %s succeeded!", level, _mark, mark(), "'+' factor");
                Token endToken = getLastNonWhitespaceToken();
                if (endToken == null) {
                    level--;
                    return null;
                }
                _res = factory.createUnaryOp(UnarySSTNode.Type.ADD,a,startToken.startOffset,endToken.endOffset);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'+' factor");
                cache.putResult(_mark, FACTOR_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s factor[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'+' factor");
        }
        { // '-' factor
            debugMessageln("%d> factor[%d-%d]: %s", level, _mark, mark(), "'-' factor");
            Token _literal;
            SSTNode a;
            if (
                (_literal = expect(15)) != null  // token='-'
                &&
                (a = factor_rule()) != null  // factor
            )
            {
                debugMessageln("%d factor[%d-%d]: %s succeeded!", level, _mark, mark(), "'-' factor");
                Token endToken = getLastNonWhitespaceToken();
                if (endToken == null) {
                    level--;
                    return null;
                }
                _res = factory.createUnaryOp(UnarySSTNode.Type.SUB,a,startToken.startOffset,endToken.endOffset);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'-' factor");
                cache.putResult(_mark, FACTOR_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s factor[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'-' factor");
        }
        { // '~' factor
            debugMessageln("%d> factor[%d-%d]: %s", level, _mark, mark(), "'~' factor");
            Token _literal;
            SSTNode a;
            if (
                (_literal = expect(31)) != null  // token='~'
                &&
                (a = factor_rule()) != null  // factor
            )
            {
                debugMessageln("%d factor[%d-%d]: %s succeeded!", level, _mark, mark(), "'~' factor");
                Token endToken = getLastNonWhitespaceToken();
                if (endToken == null) {
                    level--;
                    return null;
                }
                _res = factory.createUnaryOp(UnarySSTNode.Type.INVERT,a,startToken.startOffset,endToken.endOffset);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'~' factor");
                cache.putResult(_mark, FACTOR_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s factor[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'~' factor");
        }
        { // power
            debugMessageln("%d> factor[%d-%d]: %s", level, _mark, mark(), "power");
            SSTNode power_var;
            if (
                (power_var = power_rule()) != null  // power
            )
            {
                debugMessageln("%d factor[%d-%d]: %s succeeded!", level, _mark, mark(), "power");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "power");
                _res = power_var;
                cache.putResult(_mark, FACTOR_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s factor[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "power");
        }
        debugMessageln("Fail at %d: factor", _mark);
        _res = null;
        cache.putResult(_mark, FACTOR_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // power: await_primary '**' factor | await_primary
    public SSTNode power_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, POWER_ID)) {
            _res = (SSTNode)cache.getResult(_mark, POWER_ID);
            level--;
            return (SSTNode)_res;
        }
        { // await_primary '**' factor
            debugMessageln("%d> power[%d-%d]: %s", level, _mark, mark(), "await_primary '**' factor");
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                (a = await_primary_rule()) != null  // await_primary
                &&
                (_literal = expect(35)) != null  // token='**'
                &&
                (b = factor_rule()) != null  // factor
            )
            {
                debugMessageln("%d power[%d-%d]: %s succeeded!", level, _mark, mark(), "await_primary '**' factor");
                // TODO: node.action: _PyAST_BinOp ( a , Pow , b , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_BinOp ( a , Pow , b , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "await_primary '**' factor");
                cache.putResult(_mark, POWER_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s power[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "await_primary '**' factor");
        }
        { // await_primary
            debugMessageln("%d> power[%d-%d]: %s", level, _mark, mark(), "await_primary");
            SSTNode await_primary_var;
            if (
                (await_primary_var = await_primary_rule()) != null  // await_primary
            )
            {
                debugMessageln("%d power[%d-%d]: %s succeeded!", level, _mark, mark(), "await_primary");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "await_primary");
                _res = await_primary_var;
                cache.putResult(_mark, POWER_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s power[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "await_primary");
        }
        debugMessageln("Fail at %d: power", _mark);
        _res = null;
        cache.putResult(_mark, POWER_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // await_primary: AWAIT primary | primary
    public SSTNode await_primary_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, AWAIT_PRIMARY_ID)) {
            _res = (SSTNode)cache.getResult(_mark, AWAIT_PRIMARY_ID);
            level--;
            return (SSTNode)_res;
        }
        { // AWAIT primary
            debugMessageln("%d> await_primary[%d-%d]: %s", level, _mark, mark(), "AWAIT primary");
            SSTNode a;
            Token await_var;
            if (
                (await_var = expect(Token.Kind.AWAIT)) != null  // token='AWAIT'
                &&
                (a = primary_rule()) != null  // primary
            )
            {
                debugMessageln("%d await_primary[%d-%d]: %s succeeded!", level, _mark, mark(), "AWAIT primary");
                // TODO: node.action: CHECK_VERSION ( expr_ty , 5 , "Await expressions are" , _PyAST_Await ( a , EXTRA ) )
                debugMessageln("[33;5;7m!!! TODO: Convert CHECK_VERSION ( expr_ty , 5 , 'Await expressions are' , _PyAST_Await ( a , EXTRA ) ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "AWAIT primary");
                cache.putResult(_mark, AWAIT_PRIMARY_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s await_primary[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "AWAIT primary");
        }
        { // primary
            debugMessageln("%d> await_primary[%d-%d]: %s", level, _mark, mark(), "primary");
            SSTNode primary_var;
            if (
                (primary_var = primary_rule()) != null  // primary
            )
            {
                debugMessageln("%d await_primary[%d-%d]: %s succeeded!", level, _mark, mark(), "primary");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "primary");
                _res = primary_var;
                cache.putResult(_mark, AWAIT_PRIMARY_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s await_primary[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "primary");
        }
        debugMessageln("Fail at %d: await_primary", _mark);
        _res = null;
        cache.putResult(_mark, AWAIT_PRIMARY_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // Left-recursive
    // primary:
    //     | invalid_primary
    //     | primary '.' NAME
    //     | primary genexp
    //     | primary '(' arguments? ')'
    //     | primary '[' slices ']'
    //     | atom
    public SSTNode primary_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, PRIMARY_ID)) {
            _res = cache.getResult(_mark, PRIMARY_ID);
            level--;
            return (SSTNode)_res;
        }
        int _resmark = mark();
        while (true) {
            cache.putResult(_mark, PRIMARY_ID, _res);
            reset(_mark);
            SSTNode _raw = primary_raw();
            if (_raw == null || mark() <= _resmark)
                break;
            _resmark = mark();
            _res = _raw;
        }
        reset(_resmark);
        level--;
        return (SSTNode)_res;
    }
    private SSTNode primary_raw()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (callInvalidRules) { // invalid_primary
            debugMessageln("%d> primary[%d-%d]: %s", level, _mark, mark(), "invalid_primary");
            Object invalid_primary_var;
            if (
                (invalid_primary_var = invalid_primary_rule()) != null  // invalid_primary
            )
            {
                debugMessageln("%d primary[%d-%d]: %s succeeded!", level, _mark, mark(), "invalid_primary");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "invalid_primary");
                _res = invalid_primary_var;
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s primary[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "invalid_primary");
        }
        { // primary '.' NAME
            debugMessageln("%d> primary[%d-%d]: %s", level, _mark, mark(), "primary '.' NAME");
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                (a = primary_rule()) != null  // primary
                &&
                (_literal = expect(23)) != null  // token='.'
                &&
                (b = name_token()) != null  // NAME
            )
            {
                debugMessageln("%d primary[%d-%d]: %s succeeded!", level, _mark, mark(), "primary '.' NAME");
                // TODO: node.action: _PyAST_Attribute ( a , b -> v . Name . id , Load , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Attribute ( a , b -> v . Name . id , Load , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "primary '.' NAME");
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s primary[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "primary '.' NAME");
        }
        { // primary genexp
            debugMessageln("%d> primary[%d-%d]: %s", level, _mark, mark(), "primary genexp");
            SSTNode a;
            SSTNode b;
            if (
                (a = primary_rule()) != null  // primary
                &&
                (b = genexp_rule()) != null  // genexp
            )
            {
                debugMessageln("%d primary[%d-%d]: %s succeeded!", level, _mark, mark(), "primary genexp");
                // TODO: node.action: _PyAST_Call ( a , CHECK ( asdl_expr_seq * , ( asdl_expr_seq * ) this . singletonSequence ( b ) ) , NULL , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Call ( a , CHECK ( asdl_expr_seq * , ( asdl_expr_seq * ) this . singletonSequence ( b ) ) , NULL , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "primary genexp");
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s primary[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "primary genexp");
        }
        { // primary '(' arguments? ')'
            debugMessageln("%d> primary[%d-%d]: %s", level, _mark, mark(), "primary '(' arguments? ')'");
            Token _literal;
            Token _literal_1;
            SSTNode a;
            Object b;
            if (
                (a = primary_rule()) != null  // primary
                &&
                (_literal = expect(7)) != null  // token='('
                &&
                ((b = _tmp_145_rule()) != null || true)  // arguments?
                &&
                (_literal_1 = expect(8)) != null  // token=')'
            )
            {
                debugMessageln("%d primary[%d-%d]: %s succeeded!", level, _mark, mark(), "primary '(' arguments? ')'");
                // TODO: node.action: _PyAST_Call ( a , ( b ) ? ( ( expr_ty ) b ) -> v . Call . args : NULL , ( b ) ? ( ( expr_ty ) b ) -> v . Call . keywords : NULL , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Call ( a , ( b ) ? ( ( expr_ty ) b ) -> v . Call . args : NULL , ( b ) ? ( ( expr_ty ) b ) -> v . Call . keywords : NULL , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "primary '(' arguments? ')'");
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s primary[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "primary '(' arguments? ')'");
        }
        { // primary '[' slices ']'
            debugMessageln("%d> primary[%d-%d]: %s", level, _mark, mark(), "primary '[' slices ']'");
            Token _literal;
            Token _literal_1;
            SSTNode a;
            SSTNode b;
            if (
                (a = primary_rule()) != null  // primary
                &&
                (_literal = expect(9)) != null  // token='['
                &&
                (b = slices_rule()) != null  // slices
                &&
                (_literal_1 = expect(10)) != null  // token=']'
            )
            {
                debugMessageln("%d primary[%d-%d]: %s succeeded!", level, _mark, mark(), "primary '[' slices ']'");
                // TODO: node.action: _PyAST_Subscript ( a , b , Load , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Subscript ( a , b , Load , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "primary '[' slices ']'");
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s primary[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "primary '[' slices ']'");
        }
        { // atom
            debugMessageln("%d> primary[%d-%d]: %s", level, _mark, mark(), "atom");
            SSTNode atom_var;
            if (
                (atom_var = atom_rule()) != null  // atom
            )
            {
                debugMessageln("%d primary[%d-%d]: %s succeeded!", level, _mark, mark(), "atom");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "atom");
                _res = atom_var;
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s primary[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "atom");
        }
        debugMessageln("Fail at %d: primary", _mark);
        _res = null;
        level--;
        return (SSTNode)_res;
    }

    // slices: slice !',' | ','.slice+ ','?
    public SSTNode slices_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, SLICES_ID)) {
            _res = (SSTNode)cache.getResult(_mark, SLICES_ID);
            level--;
            return (SSTNode)_res;
        }
        { // slice !','
            debugMessageln("%d> slices[%d-%d]: %s", level, _mark, mark(), "slice !','");
            SSTNode a;
            if (
                (a = slice_rule()) != null  // slice
                &&
                genLookahead_expect(false, 12)  // token=','
            )
            {
                debugMessageln("%d slices[%d-%d]: %s succeeded!", level, _mark, mark(), "slice !','");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "slice !','");
                cache.putResult(_mark, SLICES_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s slices[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "slice !','");
        }
        { // ','.slice+ ','?
            debugMessageln("%d> slices[%d-%d]: %s", level, _mark, mark(), "','.slice+ ','?");
            Object _opt_var;
            SSTNode[] a;
            if (
                (a = (SSTNode[])_gather_146_rule()) != null  // ','.slice+
                &&
                ((_opt_var = _tmp_148_rule()) != null || true)  // ','?
            )
            {
                debugMessageln("%d slices[%d-%d]: %s succeeded!", level, _mark, mark(), "','.slice+ ','?");
                // TODO: node.action: _PyAST_Tuple ( a , Load , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Tuple ( a , Load , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "','.slice+ ','?");
                cache.putResult(_mark, SLICES_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s slices[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','.slice+ ','?");
        }
        debugMessageln("Fail at %d: slices", _mark);
        _res = null;
        cache.putResult(_mark, SLICES_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // slice: expression? ':' expression? [':' expression?] | named_expression
    public SSTNode slice_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, SLICE_ID)) {
            _res = (SSTNode)cache.getResult(_mark, SLICE_ID);
            level--;
            return (SSTNode)_res;
        }
        { // expression? ':' expression? [':' expression?]
            debugMessageln("%d> slice[%d-%d]: %s", level, _mark, mark(), "expression? ':' expression? [':' expression?]");
            Token _literal;
            Object a;
            Object b;
            Object c;
            if (
                ((a = _tmp_149_rule()) != null || true)  // expression?
                &&
                (_literal = expect(11)) != null  // token=':'
                &&
                ((b = _tmp_150_rule()) != null || true)  // expression?
                &&
                ((c = _tmp_151_rule()) != null || true)  // [':' expression?]
            )
            {
                debugMessageln("%d slice[%d-%d]: %s succeeded!", level, _mark, mark(), "expression? ':' expression? [':' expression?]");
                // TODO: node.action: _PyAST_Slice ( a , b , c , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Slice ( a , b , c , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "expression? ':' expression? [':' expression?]");
                cache.putResult(_mark, SLICE_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s slice[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "expression? ':' expression? [':' expression?]");
        }
        { // named_expression
            debugMessageln("%d> slice[%d-%d]: %s", level, _mark, mark(), "named_expression");
            SSTNode a;
            if (
                (a = named_expression_rule()) != null  // named_expression
            )
            {
                debugMessageln("%d slice[%d-%d]: %s succeeded!", level, _mark, mark(), "named_expression");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "named_expression");
                cache.putResult(_mark, SLICE_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s slice[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "named_expression");
        }
        debugMessageln("Fail at %d: slice", _mark);
        _res = null;
        cache.putResult(_mark, SLICE_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // atom:
    //     | NAME
    //     | 'True'
    //     | 'False'
    //     | 'None'
    //     | &STRING strings
    //     | NUMBER
    //     | &'(' (tuple | group | genexp)
    //     | &'[' (list | listcomp)
    //     | &'{' (dict | set | dictcomp | setcomp)
    //     | '...'
    public SSTNode atom_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, ATOM_ID)) {
            _res = (SSTNode)cache.getResult(_mark, ATOM_ID);
            level--;
            return (SSTNode)_res;
        }
        Token startToken = getAndInitializeToken();
        { // NAME
            debugMessageln("%d> atom[%d-%d]: %s", level, _mark, mark(), "NAME");
            SSTNode name_var;
            if (
                (name_var = name_token()) != null  // NAME
            )
            {
                debugMessageln("%d atom[%d-%d]: %s succeeded!", level, _mark, mark(), "NAME");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "NAME");
                _res = name_var;
                cache.putResult(_mark, ATOM_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s atom[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "NAME");
        }
        { // 'True'
            debugMessageln("%d> atom[%d-%d]: %s", level, _mark, mark(), "'True'");
            Token _keyword;
            if (
                (_keyword = expect(524)) != null  // token='True'
            )
            {
                debugMessageln("%d atom[%d-%d]: %s succeeded!", level, _mark, mark(), "'True'");
                Token endToken = getLastNonWhitespaceToken();
                if (endToken == null) {
                    level--;
                    return null;
                }
                _res = factory.createBooleanLiteral(true,startToken.startOffset,endToken.endOffset);;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'True'");
                cache.putResult(_mark, ATOM_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s atom[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'True'");
        }
        { // 'False'
            debugMessageln("%d> atom[%d-%d]: %s", level, _mark, mark(), "'False'");
            Token _keyword;
            if (
                (_keyword = expect(525)) != null  // token='False'
            )
            {
                debugMessageln("%d atom[%d-%d]: %s succeeded!", level, _mark, mark(), "'False'");
                Token endToken = getLastNonWhitespaceToken();
                if (endToken == null) {
                    level--;
                    return null;
                }
                _res = factory.createBooleanLiteral(false,startToken.startOffset,endToken.endOffset);;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'False'");
                cache.putResult(_mark, ATOM_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s atom[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'False'");
        }
        { // 'None'
            debugMessageln("%d> atom[%d-%d]: %s", level, _mark, mark(), "'None'");
            Token _keyword;
            if (
                (_keyword = expect(523)) != null  // token='None'
            )
            {
                debugMessageln("%d atom[%d-%d]: %s succeeded!", level, _mark, mark(), "'None'");
                _res = factory.createNone(startToken.startOffset,startToken.endOffset);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'None'");
                cache.putResult(_mark, ATOM_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s atom[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'None'");
        }
        { // &STRING strings
            debugMessageln("%d> atom[%d-%d]: %s", level, _mark, mark(), "&STRING strings");
            SSTNode strings_var;
            if (
                genLookahead_string_token(true)
                &&
                (strings_var = strings_rule()) != null  // strings
            )
            {
                debugMessageln("%d atom[%d-%d]: %s succeeded!", level, _mark, mark(), "&STRING strings");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "&STRING strings");
                _res = strings_var;
                cache.putResult(_mark, ATOM_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s atom[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "&STRING strings");
        }
        { // NUMBER
            debugMessageln("%d> atom[%d-%d]: %s", level, _mark, mark(), "NUMBER");
            SSTNode number_var;
            if (
                (number_var = number_token()) != null  // NUMBER
            )
            {
                debugMessageln("%d atom[%d-%d]: %s succeeded!", level, _mark, mark(), "NUMBER");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "NUMBER");
                _res = number_var;
                cache.putResult(_mark, ATOM_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s atom[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "NUMBER");
        }
        { // &'(' (tuple | group | genexp)
            debugMessageln("%d> atom[%d-%d]: %s", level, _mark, mark(), "&'(' (tuple | group | genexp)");
            Object _tmp_152_var;
            if (
                genLookahead_expect(true, 7)  // token='('
                &&
                (_tmp_152_var = _tmp_152_rule()) != null  // tuple | group | genexp
            )
            {
                debugMessageln("%d atom[%d-%d]: %s succeeded!", level, _mark, mark(), "&'(' (tuple | group | genexp)");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "&'(' (tuple | group | genexp)");
                _res = _tmp_152_var;
                cache.putResult(_mark, ATOM_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s atom[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "&'(' (tuple | group | genexp)");
        }
        { // &'[' (list | listcomp)
            debugMessageln("%d> atom[%d-%d]: %s", level, _mark, mark(), "&'[' (list | listcomp)");
            Object _tmp_153_var;
            if (
                genLookahead_expect(true, 9)  // token='['
                &&
                (_tmp_153_var = _tmp_153_rule()) != null  // list | listcomp
            )
            {
                debugMessageln("%d atom[%d-%d]: %s succeeded!", level, _mark, mark(), "&'[' (list | listcomp)");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "&'[' (list | listcomp)");
                _res = _tmp_153_var;
                cache.putResult(_mark, ATOM_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s atom[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "&'[' (list | listcomp)");
        }
        { // &'{' (dict | set | dictcomp | setcomp)
            debugMessageln("%d> atom[%d-%d]: %s", level, _mark, mark(), "&'{' (dict | set | dictcomp | setcomp)");
            Object _tmp_154_var;
            if (
                genLookahead_expect(true, 25)  // token='{'
                &&
                (_tmp_154_var = _tmp_154_rule()) != null  // dict | set | dictcomp | setcomp
            )
            {
                debugMessageln("%d atom[%d-%d]: %s succeeded!", level, _mark, mark(), "&'{' (dict | set | dictcomp | setcomp)");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "&'{' (dict | set | dictcomp | setcomp)");
                _res = _tmp_154_var;
                cache.putResult(_mark, ATOM_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s atom[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "&'{' (dict | set | dictcomp | setcomp)");
        }
        { // '...'
            debugMessageln("%d> atom[%d-%d]: %s", level, _mark, mark(), "'...'");
            Token _literal;
            if (
                (_literal = expect(52)) != null  // token='...'
            )
            {
                debugMessageln("%d atom[%d-%d]: %s succeeded!", level, _mark, mark(), "'...'");
                _res = factory.createEllipsis(startToken.startOffset,startToken.endOffset);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'...'");
                cache.putResult(_mark, ATOM_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s atom[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'...'");
        }
        debugMessageln("Fail at %d: atom", _mark);
        _res = null;
        cache.putResult(_mark, ATOM_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // strings: STRING+
    public SSTNode strings_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, STRINGS_ID)) {
            _res = (SSTNode)cache.getResult(_mark, STRINGS_ID);
            level--;
            return (SSTNode)_res;
        }
        { // STRING+
            debugMessageln("%d> strings[%d-%d]: %s", level, _mark, mark(), "STRING+");
            SSTNode[] a;
            if (
                (a = _loop1_155_rule()) != null  // STRING+
            )
            {
                debugMessageln("%d strings[%d-%d]: %s succeeded!", level, _mark, mark(), "STRING+");
                _res = this.concatenateStrings(a);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "STRING+");
                cache.putResult(_mark, STRINGS_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s strings[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "STRING+");
        }
        debugMessageln("Fail at %d: strings", _mark);
        _res = null;
        cache.putResult(_mark, STRINGS_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // list: '[' star_named_expressions? ']'
    public SSTNode list_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, LIST_ID)) {
            _res = (SSTNode)cache.getResult(_mark, LIST_ID);
            level--;
            return (SSTNode)_res;
        }
        Token startToken = getAndInitializeToken();
        { // '[' star_named_expressions? ']'
            debugMessageln("%d> list[%d-%d]: %s", level, _mark, mark(), "'[' star_named_expressions? ']'");
            Token _literal;
            Token _literal_1;
            Object a;
            if (
                (_literal = expect(9)) != null  // token='['
                &&
                ((a = _tmp_156_rule()) != null || true)  // star_named_expressions?
                &&
                (_literal_1 = expect(10)) != null  // token=']'
            )
            {
                debugMessageln("%d list[%d-%d]: %s succeeded!", level, _mark, mark(), "'[' star_named_expressions? ']'");
                Token endToken = getLastNonWhitespaceToken();
                if (endToken == null) {
                    level--;
                    return null;
                }
                _res = factory.createList((SSTNode[])a,startToken.startOffset,endToken.endOffset);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'[' star_named_expressions? ']'");
                cache.putResult(_mark, LIST_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s list[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'[' star_named_expressions? ']'");
        }
        debugMessageln("Fail at %d: list", _mark);
        _res = null;
        cache.putResult(_mark, LIST_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // listcomp: '[' named_expression for_if_clauses ']' | invalid_comprehension
    public SSTNode listcomp_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, LISTCOMP_ID)) {
            _res = (SSTNode)cache.getResult(_mark, LISTCOMP_ID);
            level--;
            return (SSTNode)_res;
        }
        Token startToken = getAndInitializeToken();
        { // '[' named_expression for_if_clauses ']'
            debugMessageln("%d> listcomp[%d-%d]: %s", level, _mark, mark(), "'[' named_expression for_if_clauses ']'");
            Token _literal;
            Token _literal_1;
            SSTNode a;
            ForComprehensionSSTNode[] b;
            if (
                (_literal = expect(9)) != null  // token='['
                &&
                (a = named_expression_rule()) != null  // named_expression
                &&
                (b = for_if_clauses_rule()) != null  // for_if_clauses
                &&
                (_literal_1 = expect(10)) != null  // token=']'
            )
            {
                debugMessageln("%d listcomp[%d-%d]: %s succeeded!", level, _mark, mark(), "'[' named_expression for_if_clauses ']'");
                Token endToken = getLastNonWhitespaceToken();
                if (endToken == null) {
                    level--;
                    return null;
                }
                _res = factory.createListComprehension(a,b,startToken.startOffset,endToken.endOffset);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'[' named_expression for_if_clauses ']'");
                cache.putResult(_mark, LISTCOMP_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s listcomp[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'[' named_expression for_if_clauses ']'");
        }
        if (callInvalidRules) { // invalid_comprehension
            debugMessageln("%d> listcomp[%d-%d]: %s", level, _mark, mark(), "invalid_comprehension");
            Object invalid_comprehension_var;
            if (
                (invalid_comprehension_var = invalid_comprehension_rule()) != null  // invalid_comprehension
            )
            {
                debugMessageln("%d listcomp[%d-%d]: %s succeeded!", level, _mark, mark(), "invalid_comprehension");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "invalid_comprehension");
                _res = invalid_comprehension_var;
                cache.putResult(_mark, LISTCOMP_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s listcomp[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "invalid_comprehension");
        }
        debugMessageln("Fail at %d: listcomp", _mark);
        _res = null;
        cache.putResult(_mark, LISTCOMP_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // tuple: '(' [star_named_expression ',' star_named_expressions?] ')'
    public SSTNode tuple_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, TUPLE_ID)) {
            _res = (SSTNode)cache.getResult(_mark, TUPLE_ID);
            level--;
            return (SSTNode)_res;
        }
        Token startToken = getAndInitializeToken();
        { // '(' [star_named_expression ',' star_named_expressions?] ')'
            debugMessageln("%d> tuple[%d-%d]: %s", level, _mark, mark(), "'(' [star_named_expression ',' star_named_expressions?] ')'");
            Token _literal;
            Token _literal_1;
            Object a;
            if (
                (_literal = expect(7)) != null  // token='('
                &&
                ((a = _tmp_157_rule()) != null || true)  // [star_named_expression ',' star_named_expressions?]
                &&
                (_literal_1 = expect(8)) != null  // token=')'
            )
            {
                debugMessageln("%d tuple[%d-%d]: %s succeeded!", level, _mark, mark(), "'(' [star_named_expression ',' star_named_expressions?] ')'");
                Token endToken = getLastNonWhitespaceToken();
                if (endToken == null) {
                    level--;
                    return null;
                }
                _res = factory.createTuple((SSTNode[])a,startToken.startOffset,endToken.endOffset);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'(' [star_named_expression ',' star_named_expressions?] ')'");
                cache.putResult(_mark, TUPLE_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s tuple[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'(' [star_named_expression ',' star_named_expressions?] ')'");
        }
        debugMessageln("Fail at %d: tuple", _mark);
        _res = null;
        cache.putResult(_mark, TUPLE_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // group: '(' (yield_expr | named_expression) ')' | invalid_group
    public SSTNode group_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, GROUP_ID)) {
            _res = (SSTNode)cache.getResult(_mark, GROUP_ID);
            level--;
            return (SSTNode)_res;
        }
        { // '(' (yield_expr | named_expression) ')'
            debugMessageln("%d> group[%d-%d]: %s", level, _mark, mark(), "'(' (yield_expr | named_expression) ')'");
            Token _literal;
            Token _literal_1;
            Object a;
            if (
                (_literal = expect(7)) != null  // token='('
                &&
                (a = _tmp_158_rule()) != null  // yield_expr | named_expression
                &&
                (_literal_1 = expect(8)) != null  // token=')'
            )
            {
                debugMessageln("%d group[%d-%d]: %s succeeded!", level, _mark, mark(), "'(' (yield_expr | named_expression) ')'");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'(' (yield_expr | named_expression) ')'");
                cache.putResult(_mark, GROUP_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s group[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'(' (yield_expr | named_expression) ')'");
        }
        if (callInvalidRules) { // invalid_group
            debugMessageln("%d> group[%d-%d]: %s", level, _mark, mark(), "invalid_group");
            Object invalid_group_var;
            if (
                (invalid_group_var = invalid_group_rule()) != null  // invalid_group
            )
            {
                debugMessageln("%d group[%d-%d]: %s succeeded!", level, _mark, mark(), "invalid_group");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "invalid_group");
                _res = invalid_group_var;
                cache.putResult(_mark, GROUP_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s group[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "invalid_group");
        }
        debugMessageln("Fail at %d: group", _mark);
        _res = null;
        cache.putResult(_mark, GROUP_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // genexp: '(' direct_named_expression for_if_clauses ')' | invalid_comprehension
    public SSTNode genexp_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, GENEXP_ID)) {
            _res = (SSTNode)cache.getResult(_mark, GENEXP_ID);
            level--;
            return (SSTNode)_res;
        }
        Token startToken = getAndInitializeToken();
        { // '(' direct_named_expression for_if_clauses ')'
            debugMessageln("%d> genexp[%d-%d]: %s", level, _mark, mark(), "'(' direct_named_expression for_if_clauses ')'");
            Token _literal;
            Token _literal_1;
            SSTNode a;
            ForComprehensionSSTNode[] b;
            if (
                (_literal = expect(7)) != null  // token='('
                &&
                (a = direct_named_expression_rule()) != null  // direct_named_expression
                &&
                (b = for_if_clauses_rule()) != null  // for_if_clauses
                &&
                (_literal_1 = expect(8)) != null  // token=')'
            )
            {
                debugMessageln("%d genexp[%d-%d]: %s succeeded!", level, _mark, mark(), "'(' direct_named_expression for_if_clauses ')'");
                Token endToken = getLastNonWhitespaceToken();
                if (endToken == null) {
                    level--;
                    return null;
                }
                _res = factory.createGenerator(a,b,startToken.startOffset,endToken.endOffset);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'(' direct_named_expression for_if_clauses ')'");
                cache.putResult(_mark, GENEXP_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s genexp[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'(' direct_named_expression for_if_clauses ')'");
        }
        if (callInvalidRules) { // invalid_comprehension
            debugMessageln("%d> genexp[%d-%d]: %s", level, _mark, mark(), "invalid_comprehension");
            Object invalid_comprehension_var;
            if (
                (invalid_comprehension_var = invalid_comprehension_rule()) != null  // invalid_comprehension
            )
            {
                debugMessageln("%d genexp[%d-%d]: %s succeeded!", level, _mark, mark(), "invalid_comprehension");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "invalid_comprehension");
                _res = invalid_comprehension_var;
                cache.putResult(_mark, GENEXP_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s genexp[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "invalid_comprehension");
        }
        debugMessageln("Fail at %d: genexp", _mark);
        _res = null;
        cache.putResult(_mark, GENEXP_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // set: '{' star_named_expressions '}'
    public SSTNode set_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, SET_ID)) {
            _res = (SSTNode)cache.getResult(_mark, SET_ID);
            level--;
            return (SSTNode)_res;
        }
        Token startToken = getAndInitializeToken();
        { // '{' star_named_expressions '}'
            debugMessageln("%d> set[%d-%d]: %s", level, _mark, mark(), "'{' star_named_expressions '}'");
            Token _literal;
            Token _literal_1;
            SSTNode[] a;
            if (
                (_literal = expect(25)) != null  // token='{'
                &&
                (a = star_named_expressions_rule()) != null  // star_named_expressions
                &&
                (_literal_1 = expect(26)) != null  // token='}'
            )
            {
                debugMessageln("%d set[%d-%d]: %s succeeded!", level, _mark, mark(), "'{' star_named_expressions '}'");
                Token endToken = getLastNonWhitespaceToken();
                if (endToken == null) {
                    level--;
                    return null;
                }
                _res = factory.createSet((SSTNode[])a,startToken.startOffset,endToken.endOffset);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'{' star_named_expressions '}'");
                cache.putResult(_mark, SET_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s set[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'{' star_named_expressions '}'");
        }
        debugMessageln("Fail at %d: set", _mark);
        _res = null;
        cache.putResult(_mark, SET_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // setcomp: '{' named_expression for_if_clauses '}' | invalid_comprehension
    public SSTNode setcomp_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, SETCOMP_ID)) {
            _res = (SSTNode)cache.getResult(_mark, SETCOMP_ID);
            level--;
            return (SSTNode)_res;
        }
        Token startToken = getAndInitializeToken();
        { // '{' named_expression for_if_clauses '}'
            debugMessageln("%d> setcomp[%d-%d]: %s", level, _mark, mark(), "'{' named_expression for_if_clauses '}'");
            Token _literal;
            Token _literal_1;
            SSTNode a;
            ForComprehensionSSTNode[] b;
            if (
                (_literal = expect(25)) != null  // token='{'
                &&
                (a = named_expression_rule()) != null  // named_expression
                &&
                (b = for_if_clauses_rule()) != null  // for_if_clauses
                &&
                (_literal_1 = expect(26)) != null  // token='}'
            )
            {
                debugMessageln("%d setcomp[%d-%d]: %s succeeded!", level, _mark, mark(), "'{' named_expression for_if_clauses '}'");
                Token endToken = getLastNonWhitespaceToken();
                if (endToken == null) {
                    level--;
                    return null;
                }
                _res = factory.createSetComprehension(a,b,startToken.startOffset,endToken.endOffset);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'{' named_expression for_if_clauses '}'");
                cache.putResult(_mark, SETCOMP_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s setcomp[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'{' named_expression for_if_clauses '}'");
        }
        if (callInvalidRules) { // invalid_comprehension
            debugMessageln("%d> setcomp[%d-%d]: %s", level, _mark, mark(), "invalid_comprehension");
            Object invalid_comprehension_var;
            if (
                (invalid_comprehension_var = invalid_comprehension_rule()) != null  // invalid_comprehension
            )
            {
                debugMessageln("%d setcomp[%d-%d]: %s succeeded!", level, _mark, mark(), "invalid_comprehension");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "invalid_comprehension");
                _res = invalid_comprehension_var;
                cache.putResult(_mark, SETCOMP_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s setcomp[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "invalid_comprehension");
        }
        debugMessageln("Fail at %d: setcomp", _mark);
        _res = null;
        cache.putResult(_mark, SETCOMP_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // dict: '{' double_starred_kvpairs? '}' | '{' invalid_double_starred_kvpairs '}'
    public SSTNode dict_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, DICT_ID)) {
            _res = (SSTNode)cache.getResult(_mark, DICT_ID);
            level--;
            return (SSTNode)_res;
        }
        Token startToken = getAndInitializeToken();
        { // '{' double_starred_kvpairs? '}'
            debugMessageln("%d> dict[%d-%d]: %s", level, _mark, mark(), "'{' double_starred_kvpairs? '}'");
            Token _literal;
            Token _literal_1;
            Object a;
            if (
                (_literal = expect(25)) != null  // token='{'
                &&
                ((a = _tmp_159_rule()) != null || true)  // double_starred_kvpairs?
                &&
                (_literal_1 = expect(26)) != null  // token='}'
            )
            {
                debugMessageln("%d dict[%d-%d]: %s succeeded!", level, _mark, mark(), "'{' double_starred_kvpairs? '}'");
                Token endToken = getLastNonWhitespaceToken();
                if (endToken == null) {
                    level--;
                    return null;
                }
                _res = factory.createDict((SSTNode[])a,startToken.startOffset,endToken.endOffset);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'{' double_starred_kvpairs? '}'");
                cache.putResult(_mark, DICT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s dict[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'{' double_starred_kvpairs? '}'");
        }
        { // '{' invalid_double_starred_kvpairs '}'
            debugMessageln("%d> dict[%d-%d]: %s", level, _mark, mark(), "'{' invalid_double_starred_kvpairs '}'");
            Token _literal;
            Token _literal_1;
            Object invalid_double_starred_kvpairs_var;
            if (
                (_literal = expect(25)) != null  // token='{'
                &&
                (invalid_double_starred_kvpairs_var = invalid_double_starred_kvpairs_rule()) != null  // invalid_double_starred_kvpairs
                &&
                (_literal_1 = expect(26)) != null  // token='}'
            )
            {
                debugMessageln("%d dict[%d-%d]: %s succeeded!", level, _mark, mark(), "'{' invalid_double_starred_kvpairs '}'");
                debugMessageln("Hit without action [%d:%d]: %s", _mark, mark(), "'{' invalid_double_starred_kvpairs '}'");
                _res = dummyName(_literal, invalid_double_starred_kvpairs_var, _literal_1);
                cache.putResult(_mark, DICT_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s dict[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'{' invalid_double_starred_kvpairs '}'");
        }
        debugMessageln("Fail at %d: dict", _mark);
        _res = null;
        cache.putResult(_mark, DICT_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // dictcomp: '{' kvpair for_if_clauses '}' | invalid_dict_comprehension
    public SSTNode dictcomp_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, DICTCOMP_ID)) {
            _res = (SSTNode)cache.getResult(_mark, DICTCOMP_ID);
            level--;
            return (SSTNode)_res;
        }
        Token startToken = getAndInitializeToken();
        { // '{' kvpair for_if_clauses '}'
            debugMessageln("%d> dictcomp[%d-%d]: %s", level, _mark, mark(), "'{' kvpair for_if_clauses '}'");
            Token _literal;
            Token _literal_1;
            KeyValueSSTNode a;
            ForComprehensionSSTNode[] b;
            if (
                (_literal = expect(25)) != null  // token='{'
                &&
                (a = kvpair_rule()) != null  // kvpair
                &&
                (b = for_if_clauses_rule()) != null  // for_if_clauses
                &&
                (_literal_1 = expect(26)) != null  // token='}'
            )
            {
                debugMessageln("%d dictcomp[%d-%d]: %s succeeded!", level, _mark, mark(), "'{' kvpair for_if_clauses '}'");
                Token endToken = getLastNonWhitespaceToken();
                if (endToken == null) {
                    level--;
                    return null;
                }
                _res = factory.createDictComprehension(a,b,startToken.startOffset,endToken.endOffset);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'{' kvpair for_if_clauses '}'");
                cache.putResult(_mark, DICTCOMP_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s dictcomp[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'{' kvpair for_if_clauses '}'");
        }
        if (callInvalidRules) { // invalid_dict_comprehension
            debugMessageln("%d> dictcomp[%d-%d]: %s", level, _mark, mark(), "invalid_dict_comprehension");
            Object invalid_dict_comprehension_var;
            if (
                (invalid_dict_comprehension_var = invalid_dict_comprehension_rule()) != null  // invalid_dict_comprehension
            )
            {
                debugMessageln("%d dictcomp[%d-%d]: %s succeeded!", level, _mark, mark(), "invalid_dict_comprehension");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "invalid_dict_comprehension");
                _res = invalid_dict_comprehension_var;
                cache.putResult(_mark, DICTCOMP_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s dictcomp[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "invalid_dict_comprehension");
        }
        debugMessageln("Fail at %d: dictcomp", _mark);
        _res = null;
        cache.putResult(_mark, DICTCOMP_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // double_starred_kvpairs: ','.double_starred_kvpair+ ','?
    public KeyValueSSTNode[] double_starred_kvpairs_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, DOUBLE_STARRED_KVPAIRS_ID)) {
            _res = (KeyValueSSTNode[])cache.getResult(_mark, DOUBLE_STARRED_KVPAIRS_ID);
            level--;
            return (KeyValueSSTNode[])_res;
        }
        { // ','.double_starred_kvpair+ ','?
            debugMessageln("%d> double_starred_kvpairs[%d-%d]: %s", level, _mark, mark(), "','.double_starred_kvpair+ ','?");
            Object _opt_var;
            SSTNode[] a;
            if (
                (a = _gather_160_rule()) != null  // ','.double_starred_kvpair+
                &&
                ((_opt_var = _tmp_162_rule()) != null || true)  // ','?
            )
            {
                debugMessageln("%d double_starred_kvpairs[%d-%d]: %s succeeded!", level, _mark, mark(), "','.double_starred_kvpair+ ','?");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "','.double_starred_kvpair+ ','?");
                cache.putResult(_mark, DOUBLE_STARRED_KVPAIRS_ID, _res);
                level--;
                return (KeyValueSSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s double_starred_kvpairs[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','.double_starred_kvpair+ ','?");
        }
        debugMessageln("Fail at %d: double_starred_kvpairs", _mark);
        _res = null;
        cache.putResult(_mark, DOUBLE_STARRED_KVPAIRS_ID, _res);
        level--;
        return (KeyValueSSTNode[])_res;
    }

    // double_starred_kvpair: '**' bitwise_or | kvpair
    public KeyValueSSTNode double_starred_kvpair_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, DOUBLE_STARRED_KVPAIR_ID)) {
            _res = (KeyValueSSTNode)cache.getResult(_mark, DOUBLE_STARRED_KVPAIR_ID);
            level--;
            return (KeyValueSSTNode)_res;
        }
        { // '**' bitwise_or
            debugMessageln("%d> double_starred_kvpair[%d-%d]: %s", level, _mark, mark(), "'**' bitwise_or");
            Token _literal;
            SSTNode a;
            if (
                (_literal = expect(35)) != null  // token='**'
                &&
                (a = bitwise_or_rule()) != null  // bitwise_or
            )
            {
                debugMessageln("%d double_starred_kvpair[%d-%d]: %s succeeded!", level, _mark, mark(), "'**' bitwise_or");
                _res = factory.createKeyValuePair(null,a);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'**' bitwise_or");
                cache.putResult(_mark, DOUBLE_STARRED_KVPAIR_ID, _res);
                level--;
                return (KeyValueSSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s double_starred_kvpair[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'**' bitwise_or");
        }
        { // kvpair
            debugMessageln("%d> double_starred_kvpair[%d-%d]: %s", level, _mark, mark(), "kvpair");
            KeyValueSSTNode kvpair_var;
            if (
                (kvpair_var = kvpair_rule()) != null  // kvpair
            )
            {
                debugMessageln("%d double_starred_kvpair[%d-%d]: %s succeeded!", level, _mark, mark(), "kvpair");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "kvpair");
                _res = kvpair_var;
                cache.putResult(_mark, DOUBLE_STARRED_KVPAIR_ID, _res);
                level--;
                return (KeyValueSSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s double_starred_kvpair[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "kvpair");
        }
        debugMessageln("Fail at %d: double_starred_kvpair", _mark);
        _res = null;
        cache.putResult(_mark, DOUBLE_STARRED_KVPAIR_ID, _res);
        level--;
        return (KeyValueSSTNode)_res;
    }

    // kvpair: expression ':' expression
    public KeyValueSSTNode kvpair_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, KVPAIR_ID)) {
            _res = (KeyValueSSTNode)cache.getResult(_mark, KVPAIR_ID);
            level--;
            return (KeyValueSSTNode)_res;
        }
        { // expression ':' expression
            debugMessageln("%d> kvpair[%d-%d]: %s", level, _mark, mark(), "expression ':' expression");
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                (a = expression_rule()) != null  // expression
                &&
                (_literal = expect(11)) != null  // token=':'
                &&
                (b = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d kvpair[%d-%d]: %s succeeded!", level, _mark, mark(), "expression ':' expression");
                _res = factory.createKeyValuePair(a,b);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "expression ':' expression");
                cache.putResult(_mark, KVPAIR_ID, _res);
                level--;
                return (KeyValueSSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s kvpair[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "expression ':' expression");
        }
        debugMessageln("Fail at %d: kvpair", _mark);
        _res = null;
        cache.putResult(_mark, KVPAIR_ID, _res);
        level--;
        return (KeyValueSSTNode)_res;
    }

    // for_if_clauses: for_if_clause+
    public ForComprehensionSSTNode[] for_if_clauses_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, FOR_IF_CLAUSES_ID)) {
            _res = (ForComprehensionSSTNode[])cache.getResult(_mark, FOR_IF_CLAUSES_ID);
            level--;
            return (ForComprehensionSSTNode[])_res;
        }
        { // for_if_clause+
            debugMessageln("%d> for_if_clauses[%d-%d]: %s", level, _mark, mark(), "for_if_clause+");
            ForComprehensionSSTNode[] a;
            if (
                (a = (ForComprehensionSSTNode[])_loop1_163_rule()) != null  // for_if_clause+
            )
            {
                debugMessageln("%d for_if_clauses[%d-%d]: %s succeeded!", level, _mark, mark(), "for_if_clause+");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "for_if_clause+");
                cache.putResult(_mark, FOR_IF_CLAUSES_ID, _res);
                level--;
                return (ForComprehensionSSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s for_if_clauses[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "for_if_clause+");
        }
        debugMessageln("Fail at %d: for_if_clauses", _mark);
        _res = null;
        cache.putResult(_mark, FOR_IF_CLAUSES_ID, _res);
        level--;
        return (ForComprehensionSSTNode[])_res;
    }

    // for_if_clause:
    //     | ASYNC 'for' star_targets 'in' ~ disjunction (('if' disjunction))*
    //     | 'for' star_targets 'in' ~ disjunction (('if' disjunction))*
    //     | invalid_for_target
    public ForComprehensionSSTNode for_if_clause_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, FOR_IF_CLAUSE_ID)) {
            _res = (ForComprehensionSSTNode)cache.getResult(_mark, FOR_IF_CLAUSE_ID);
            level--;
            return (ForComprehensionSSTNode)_res;
        }
        Token startToken = getAndInitializeToken();
        { // ASYNC 'for' star_targets 'in' ~ disjunction (('if' disjunction))*
            debugMessageln("%d> for_if_clause[%d-%d]: %s", level, _mark, mark(), "ASYNC 'for' star_targets 'in' ~ disjunction (('if' disjunction))*");
            int _cut_var = 0;
            Token _keyword;
            Token _keyword_1;
            SSTNode a;
            Token async_var;
            SSTNode b;
            SSTNode[] c;
            if (
                (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
                &&
                (_keyword = expect(517)) != null  // token='for'
                &&
                (a = star_targets_rule()) != null  // star_targets
                &&
                (_keyword_1 = expect(518)) != null  // token='in'
                &&
                (_cut_var = 1) != 0
                &&
                (b = disjunction_rule()) != null  // disjunction
                &&
                (c = (SSTNode[])_loop0_164_rule()) != null  // (('if' disjunction))*
            )
            {
                debugMessageln("%d for_if_clause[%d-%d]: %s succeeded!", level, _mark, mark(), "ASYNC 'for' star_targets 'in' ~ disjunction (('if' disjunction))*");
                // TODO: node.action: CHECK_VERSION ( comprehension_ty , 6 , "Async comprehensions are" , _PyAST_comprehension ( a , b , c , 1 , p -> arena ) )
                debugMessageln("[33;5;7m!!! TODO: Convert CHECK_VERSION ( comprehension_ty , 6 , 'Async comprehensions are' , _PyAST_comprehension ( a , b , c , 1 , p -> arena ) ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "ASYNC 'for' star_targets 'in' ~ disjunction (('if' disjunction))*");
                cache.putResult(_mark, FOR_IF_CLAUSE_ID, _res);
                level--;
                return (ForComprehensionSSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s for_if_clause[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "ASYNC 'for' star_targets 'in' ~ disjunction (('if' disjunction))*");
            if (_cut_var != 0) {
                level--;
                return null;
            }
        }
        { // 'for' star_targets 'in' ~ disjunction (('if' disjunction))*
            debugMessageln("%d> for_if_clause[%d-%d]: %s", level, _mark, mark(), "'for' star_targets 'in' ~ disjunction (('if' disjunction))*");
            int _cut_var = 0;
            Token _keyword;
            Token _keyword_1;
            SSTNode a;
            SSTNode b;
            SSTNode[] c;
            if (
                (_keyword = expect(517)) != null  // token='for'
                &&
                (a = star_targets_rule()) != null  // star_targets
                &&
                (_keyword_1 = expect(518)) != null  // token='in'
                &&
                (_cut_var = 1) != 0
                &&
                (b = disjunction_rule()) != null  // disjunction
                &&
                (c = (SSTNode[])_loop0_165_rule()) != null  // (('if' disjunction))*
            )
            {
                debugMessageln("%d for_if_clause[%d-%d]: %s succeeded!", level, _mark, mark(), "'for' star_targets 'in' ~ disjunction (('if' disjunction))*");
                Token endToken = getLastNonWhitespaceToken();
                if (endToken == null) {
                    level--;
                    return null;
                }
                _res = factory.createComprehension(a,b,c,false,startToken.startOffset,endToken.endOffset);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'for' star_targets 'in' ~ disjunction (('if' disjunction))*");
                cache.putResult(_mark, FOR_IF_CLAUSE_ID, _res);
                level--;
                return (ForComprehensionSSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s for_if_clause[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'for' star_targets 'in' ~ disjunction (('if' disjunction))*");
            if (_cut_var != 0) {
                level--;
                return null;
            }
        }
        if (callInvalidRules) { // invalid_for_target
            debugMessageln("%d> for_if_clause[%d-%d]: %s", level, _mark, mark(), "invalid_for_target");
            Object invalid_for_target_var;
            if (
                (invalid_for_target_var = invalid_for_target_rule()) != null  // invalid_for_target
            )
            {
                debugMessageln("%d for_if_clause[%d-%d]: %s succeeded!", level, _mark, mark(), "invalid_for_target");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "invalid_for_target");
                _res = invalid_for_target_var;
                cache.putResult(_mark, FOR_IF_CLAUSE_ID, _res);
                level--;
                return (ForComprehensionSSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s for_if_clause[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "invalid_for_target");
        }
        debugMessageln("Fail at %d: for_if_clause", _mark);
        _res = null;
        cache.putResult(_mark, FOR_IF_CLAUSE_ID, _res);
        level--;
        return (ForComprehensionSSTNode)_res;
    }

    // yield_expr: 'yield' 'from' expression | 'yield' star_expressions?
    public SSTNode yield_expr_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, YIELD_EXPR_ID)) {
            _res = (SSTNode)cache.getResult(_mark, YIELD_EXPR_ID);
            level--;
            return (SSTNode)_res;
        }
        { // 'yield' 'from' expression
            debugMessageln("%d> yield_expr[%d-%d]: %s", level, _mark, mark(), "'yield' 'from' expression");
            Token _keyword;
            Token _keyword_1;
            SSTNode a;
            if (
                (_keyword = expect(504)) != null  // token='yield'
                &&
                (_keyword_1 = expect(514)) != null  // token='from'
                &&
                (a = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d yield_expr[%d-%d]: %s succeeded!", level, _mark, mark(), "'yield' 'from' expression");
                // TODO: node.action: _PyAST_YieldFrom ( a , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_YieldFrom ( a , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'yield' 'from' expression");
                cache.putResult(_mark, YIELD_EXPR_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s yield_expr[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'yield' 'from' expression");
        }
        { // 'yield' star_expressions?
            debugMessageln("%d> yield_expr[%d-%d]: %s", level, _mark, mark(), "'yield' star_expressions?");
            Token _keyword;
            Object a;
            if (
                (_keyword = expect(504)) != null  // token='yield'
                &&
                ((a = _tmp_166_rule()) != null || true)  // star_expressions?
            )
            {
                debugMessageln("%d yield_expr[%d-%d]: %s succeeded!", level, _mark, mark(), "'yield' star_expressions?");
                // TODO: node.action: _PyAST_Yield ( a , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Yield ( a , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'yield' star_expressions?");
                cache.putResult(_mark, YIELD_EXPR_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s yield_expr[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'yield' star_expressions?");
        }
        debugMessageln("Fail at %d: yield_expr", _mark);
        _res = null;
        cache.putResult(_mark, YIELD_EXPR_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // arguments: args ','? &')' | invalid_arguments
    public SSTNode arguments_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, ARGUMENTS_ID)) {
            _res = (SSTNode)cache.getResult(_mark, ARGUMENTS_ID);
            level--;
            return (SSTNode)_res;
        }
        { // args ','? &')'
            debugMessageln("%d> arguments[%d-%d]: %s", level, _mark, mark(), "args ','? &')'");
            Object _opt_var;
            SSTNode a;
            if (
                (a = args_rule()) != null  // args
                &&
                ((_opt_var = _tmp_167_rule()) != null || true)  // ','?
                &&
                genLookahead_expect(true, 8)  // token=')'
            )
            {
                debugMessageln("%d arguments[%d-%d]: %s succeeded!", level, _mark, mark(), "args ','? &')'");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "args ','? &')'");
                cache.putResult(_mark, ARGUMENTS_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s arguments[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "args ','? &')'");
        }
        if (callInvalidRules) { // invalid_arguments
            debugMessageln("%d> arguments[%d-%d]: %s", level, _mark, mark(), "invalid_arguments");
            Object invalid_arguments_var;
            if (
                (invalid_arguments_var = invalid_arguments_rule()) != null  // invalid_arguments
            )
            {
                debugMessageln("%d arguments[%d-%d]: %s succeeded!", level, _mark, mark(), "invalid_arguments");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "invalid_arguments");
                _res = invalid_arguments_var;
                cache.putResult(_mark, ARGUMENTS_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s arguments[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "invalid_arguments");
        }
        debugMessageln("Fail at %d: arguments", _mark);
        _res = null;
        cache.putResult(_mark, ARGUMENTS_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // args: ','.(starred_expression | direct_named_expression !'=')+ [',' kwargs] | kwargs
    public SSTNode args_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, ARGS_ID)) {
            _res = (SSTNode)cache.getResult(_mark, ARGS_ID);
            level--;
            return (SSTNode)_res;
        }
        { // ','.(starred_expression | direct_named_expression !'=')+ [',' kwargs]
            debugMessageln("%d> args[%d-%d]: %s", level, _mark, mark(), "','.(starred_expression | direct_named_expression !'=')+ [',' kwargs]");
            SSTNode[] a;
            Object b;
            if (
                (a = (SSTNode[])_gather_168_rule()) != null  // ','.(starred_expression | direct_named_expression !'=')+
                &&
                ((b = _tmp_170_rule()) != null || true)  // [',' kwargs]
            )
            {
                debugMessageln("%d args[%d-%d]: %s succeeded!", level, _mark, mark(), "','.(starred_expression | direct_named_expression !'=')+ [',' kwargs]");
                // TODO: node.action: _PyPegen_collect_call_seqs ( p , a , b , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_collect_call_seqs ( p , a , b , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "','.(starred_expression | direct_named_expression !'=')+ [',' kwargs]");
                cache.putResult(_mark, ARGS_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s args[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','.(starred_expression | direct_named_expression !'=')+ [',' kwargs]");
        }
        { // kwargs
            debugMessageln("%d> args[%d-%d]: %s", level, _mark, mark(), "kwargs");
            SSTNode[] a;
            if (
                (a = kwargs_rule()) != null  // kwargs
            )
            {
                debugMessageln("%d args[%d-%d]: %s succeeded!", level, _mark, mark(), "kwargs");
                // TODO: node.action: _PyAST_Call ( _PyPegen_dummy_name ( p ) , CHECK_NULL_ALLOWED ( asdl_expr_seq * , _PyPegen_seq_extract_starred_exprs ( p , a ) ) , CHECK_NULL_ALLOWED ( asdl_keyword_seq * , _PyPegen_seq_delete_starred_exprs ( p , a ) ) , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Call ( _PyPegen_dummy_name ( p ) , CHECK_NULL_ALLOWED ( asdl_expr_seq * , _PyPegen_seq_extract_starred_exprs ( p , a ) ) , CHECK_NULL_ALLOWED ( asdl_keyword_seq * , _PyPegen_seq_delete_starred_exprs ( p , a ) ) , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "kwargs");
                cache.putResult(_mark, ARGS_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s args[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "kwargs");
        }
        debugMessageln("Fail at %d: args", _mark);
        _res = null;
        cache.putResult(_mark, ARGS_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // kwargs:
    //     | ','.kwarg_or_starred+ ',' ','.kwarg_or_double_starred+
    //     | ','.kwarg_or_starred+
    //     | ','.kwarg_or_double_starred+
    public SSTNode[] kwargs_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, KWARGS_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, KWARGS_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // ','.kwarg_or_starred+ ',' ','.kwarg_or_double_starred+
            debugMessageln("%d> kwargs[%d-%d]: %s", level, _mark, mark(), "','.kwarg_or_starred+ ',' ','.kwarg_or_double_starred+");
            Token _literal;
            SSTNode[] a;
            SSTNode[] b;
            if (
                (a = _gather_171_rule()) != null  // ','.kwarg_or_starred+
                &&
                (_literal = expect(12)) != null  // token=','
                &&
                (b = _gather_173_rule()) != null  // ','.kwarg_or_double_starred+
            )
            {
                debugMessageln("%d kwargs[%d-%d]: %s succeeded!", level, _mark, mark(), "','.kwarg_or_starred+ ',' ','.kwarg_or_double_starred+");
                // TODO: node.action: _PyPegen_join_sequences ( p , a , b )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_join_sequences ( p , a , b ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "','.kwarg_or_starred+ ',' ','.kwarg_or_double_starred+");
                cache.putResult(_mark, KWARGS_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s kwargs[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','.kwarg_or_starred+ ',' ','.kwarg_or_double_starred+");
        }
        { // ','.kwarg_or_starred+
            debugMessageln("%d> kwargs[%d-%d]: %s", level, _mark, mark(), "','.kwarg_or_starred+");
            SSTNode[] _gather_175_var;
            if (
                (_gather_175_var = _gather_175_rule()) != null  // ','.kwarg_or_starred+
            )
            {
                debugMessageln("%d kwargs[%d-%d]: %s succeeded!", level, _mark, mark(), "','.kwarg_or_starred+");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "','.kwarg_or_starred+");
                _res = _gather_175_var;
                cache.putResult(_mark, KWARGS_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s kwargs[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','.kwarg_or_starred+");
        }
        { // ','.kwarg_or_double_starred+
            debugMessageln("%d> kwargs[%d-%d]: %s", level, _mark, mark(), "','.kwarg_or_double_starred+");
            SSTNode[] _gather_177_var;
            if (
                (_gather_177_var = _gather_177_rule()) != null  // ','.kwarg_or_double_starred+
            )
            {
                debugMessageln("%d kwargs[%d-%d]: %s succeeded!", level, _mark, mark(), "','.kwarg_or_double_starred+");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "','.kwarg_or_double_starred+");
                _res = _gather_177_var;
                cache.putResult(_mark, KWARGS_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s kwargs[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','.kwarg_or_double_starred+");
        }
        debugMessageln("Fail at %d: kwargs", _mark);
        _res = null;
        cache.putResult(_mark, KWARGS_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // starred_expression: '*' expression
    public SSTNode starred_expression_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, STARRED_EXPRESSION_ID)) {
            _res = (SSTNode)cache.getResult(_mark, STARRED_EXPRESSION_ID);
            level--;
            return (SSTNode)_res;
        }
        { // '*' expression
            debugMessageln("%d> starred_expression[%d-%d]: %s", level, _mark, mark(), "'*' expression");
            Token _literal;
            SSTNode a;
            if (
                (_literal = expect(16)) != null  // token='*'
                &&
                (a = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d starred_expression[%d-%d]: %s succeeded!", level, _mark, mark(), "'*' expression");
                // TODO: node.action: _PyAST_Starred ( a , Load , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Starred ( a , Load , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'*' expression");
                cache.putResult(_mark, STARRED_EXPRESSION_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s starred_expression[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'*' expression");
        }
        debugMessageln("Fail at %d: starred_expression", _mark);
        _res = null;
        cache.putResult(_mark, STARRED_EXPRESSION_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // kwarg_or_starred: NAME '=' expression | starred_expression | invalid_kwarg
    public SSTNode[] kwarg_or_starred_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, KWARG_OR_STARRED_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, KWARG_OR_STARRED_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // NAME '=' expression
            debugMessageln("%d> kwarg_or_starred[%d-%d]: %s", level, _mark, mark(), "NAME '=' expression");
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                (a = name_token()) != null  // NAME
                &&
                (_literal = expect(22)) != null  // token='='
                &&
                (b = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d kwarg_or_starred[%d-%d]: %s succeeded!", level, _mark, mark(), "NAME '=' expression");
                // TODO: node.action: _PyPegen_keyword_or_starred ( p , CHECK ( keyword_ty , _PyAST_keyword ( a -> v . Name . id , b , EXTRA ) ) , 1 )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_keyword_or_starred ( p , CHECK ( keyword_ty , _PyAST_keyword ( a -> v . Name . id , b , EXTRA ) ) , 1 ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "NAME '=' expression");
                cache.putResult(_mark, KWARG_OR_STARRED_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s kwarg_or_starred[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "NAME '=' expression");
        }
        { // starred_expression
            debugMessageln("%d> kwarg_or_starred[%d-%d]: %s", level, _mark, mark(), "starred_expression");
            SSTNode a;
            if (
                (a = starred_expression_rule()) != null  // starred_expression
            )
            {
                debugMessageln("%d kwarg_or_starred[%d-%d]: %s succeeded!", level, _mark, mark(), "starred_expression");
                // TODO: node.action: _PyPegen_keyword_or_starred ( p , a , 0 )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_keyword_or_starred ( p , a , 0 ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "starred_expression");
                cache.putResult(_mark, KWARG_OR_STARRED_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s kwarg_or_starred[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "starred_expression");
        }
        if (callInvalidRules) { // invalid_kwarg
            debugMessageln("%d> kwarg_or_starred[%d-%d]: %s", level, _mark, mark(), "invalid_kwarg");
            Object invalid_kwarg_var;
            if (
                (invalid_kwarg_var = invalid_kwarg_rule()) != null  // invalid_kwarg
            )
            {
                debugMessageln("%d kwarg_or_starred[%d-%d]: %s succeeded!", level, _mark, mark(), "invalid_kwarg");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "invalid_kwarg");
                _res = invalid_kwarg_var;
                cache.putResult(_mark, KWARG_OR_STARRED_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s kwarg_or_starred[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "invalid_kwarg");
        }
        debugMessageln("Fail at %d: kwarg_or_starred", _mark);
        _res = null;
        cache.putResult(_mark, KWARG_OR_STARRED_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // kwarg_or_double_starred: NAME '=' expression | '**' expression | invalid_kwarg
    public SSTNode[] kwarg_or_double_starred_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, KWARG_OR_DOUBLE_STARRED_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, KWARG_OR_DOUBLE_STARRED_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // NAME '=' expression
            debugMessageln("%d> kwarg_or_double_starred[%d-%d]: %s", level, _mark, mark(), "NAME '=' expression");
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                (a = name_token()) != null  // NAME
                &&
                (_literal = expect(22)) != null  // token='='
                &&
                (b = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d kwarg_or_double_starred[%d-%d]: %s succeeded!", level, _mark, mark(), "NAME '=' expression");
                // TODO: node.action: _PyPegen_keyword_or_starred ( p , CHECK ( keyword_ty , _PyAST_keyword ( a -> v . Name . id , b , EXTRA ) ) , 1 )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_keyword_or_starred ( p , CHECK ( keyword_ty , _PyAST_keyword ( a -> v . Name . id , b , EXTRA ) ) , 1 ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "NAME '=' expression");
                cache.putResult(_mark, KWARG_OR_DOUBLE_STARRED_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s kwarg_or_double_starred[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "NAME '=' expression");
        }
        { // '**' expression
            debugMessageln("%d> kwarg_or_double_starred[%d-%d]: %s", level, _mark, mark(), "'**' expression");
            Token _literal;
            SSTNode a;
            if (
                (_literal = expect(35)) != null  // token='**'
                &&
                (a = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d kwarg_or_double_starred[%d-%d]: %s succeeded!", level, _mark, mark(), "'**' expression");
                // TODO: node.action: _PyPegen_keyword_or_starred ( p , CHECK ( keyword_ty , _PyAST_keyword ( NULL , a , EXTRA ) ) , 1 )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_keyword_or_starred ( p , CHECK ( keyword_ty , _PyAST_keyword ( NULL , a , EXTRA ) ) , 1 ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'**' expression");
                cache.putResult(_mark, KWARG_OR_DOUBLE_STARRED_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s kwarg_or_double_starred[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'**' expression");
        }
        if (callInvalidRules) { // invalid_kwarg
            debugMessageln("%d> kwarg_or_double_starred[%d-%d]: %s", level, _mark, mark(), "invalid_kwarg");
            Object invalid_kwarg_var;
            if (
                (invalid_kwarg_var = invalid_kwarg_rule()) != null  // invalid_kwarg
            )
            {
                debugMessageln("%d kwarg_or_double_starred[%d-%d]: %s succeeded!", level, _mark, mark(), "invalid_kwarg");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "invalid_kwarg");
                _res = invalid_kwarg_var;
                cache.putResult(_mark, KWARG_OR_DOUBLE_STARRED_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s kwarg_or_double_starred[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "invalid_kwarg");
        }
        debugMessageln("Fail at %d: kwarg_or_double_starred", _mark);
        _res = null;
        cache.putResult(_mark, KWARG_OR_DOUBLE_STARRED_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // star_targets: star_target !',' | star_target ((',' star_target))* ','?
    public SSTNode star_targets_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, STAR_TARGETS_ID)) {
            _res = (SSTNode)cache.getResult(_mark, STAR_TARGETS_ID);
            level--;
            return (SSTNode)_res;
        }
        Token startToken = getAndInitializeToken();
        { // star_target !','
            debugMessageln("%d> star_targets[%d-%d]: %s", level, _mark, mark(), "star_target !','");
            SSTNode a;
            if (
                (a = star_target_rule()) != null  // star_target
                &&
                genLookahead_expect(false, 12)  // token=','
            )
            {
                debugMessageln("%d star_targets[%d-%d]: %s succeeded!", level, _mark, mark(), "star_target !','");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "star_target !','");
                cache.putResult(_mark, STAR_TARGETS_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s star_targets[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_target !','");
        }
        { // star_target ((',' star_target))* ','?
            debugMessageln("%d> star_targets[%d-%d]: %s", level, _mark, mark(), "star_target ((',' star_target))* ','?");
            Object _opt_var;
            SSTNode a;
            SSTNode[] b;
            if (
                (a = star_target_rule()) != null  // star_target
                &&
                (b = _loop0_179_rule()) != null  // ((',' star_target))*
                &&
                ((_opt_var = _tmp_180_rule()) != null || true)  // ','?
            )
            {
                debugMessageln("%d star_targets[%d-%d]: %s succeeded!", level, _mark, mark(), "star_target ((',' star_target))* ','?");
                Token endToken = getLastNonWhitespaceToken();
                if (endToken == null) {
                    level--;
                    return null;
                }
                _res = factory.createTuple(this.insertInFront(a,b),startToken.startOffset,endToken.endOffset);//Store;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "star_target ((',' star_target))* ','?");
                cache.putResult(_mark, STAR_TARGETS_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s star_targets[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_target ((',' star_target))* ','?");
        }
        debugMessageln("Fail at %d: star_targets", _mark);
        _res = null;
        cache.putResult(_mark, STAR_TARGETS_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // star_targets_list_seq: ','.star_target+ ','?
    public SSTNode[] star_targets_list_seq_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, STAR_TARGETS_LIST_SEQ_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, STAR_TARGETS_LIST_SEQ_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // ','.star_target+ ','?
            debugMessageln("%d> star_targets_list_seq[%d-%d]: %s", level, _mark, mark(), "','.star_target+ ','?");
            Object _opt_var;
            SSTNode[] a;
            if (
                (a = (SSTNode[])_gather_181_rule()) != null  // ','.star_target+
                &&
                ((_opt_var = _tmp_183_rule()) != null || true)  // ','?
            )
            {
                debugMessageln("%d star_targets_list_seq[%d-%d]: %s succeeded!", level, _mark, mark(), "','.star_target+ ','?");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "','.star_target+ ','?");
                cache.putResult(_mark, STAR_TARGETS_LIST_SEQ_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s star_targets_list_seq[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','.star_target+ ','?");
        }
        debugMessageln("Fail at %d: star_targets_list_seq", _mark);
        _res = null;
        cache.putResult(_mark, STAR_TARGETS_LIST_SEQ_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // star_targets_tuple_seq: star_target ((',' star_target))+ ','? | star_target ','
    public SSTNode[] star_targets_tuple_seq_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, STAR_TARGETS_TUPLE_SEQ_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, STAR_TARGETS_TUPLE_SEQ_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // star_target ((',' star_target))+ ','?
            debugMessageln("%d> star_targets_tuple_seq[%d-%d]: %s", level, _mark, mark(), "star_target ((',' star_target))+ ','?");
            Object _opt_var;
            SSTNode a;
            SSTNode[] b;
            if (
                (a = star_target_rule()) != null  // star_target
                &&
                (b = _loop1_184_rule()) != null  // ((',' star_target))+
                &&
                ((_opt_var = _tmp_185_rule()) != null || true)  // ','?
            )
            {
                debugMessageln("%d star_targets_tuple_seq[%d-%d]: %s succeeded!", level, _mark, mark(), "star_target ((',' star_target))+ ','?");
                // TODO: node.action: ( asdl_expr_seq * ) this . insertInFront ( a , b )
                debugMessageln("[33;5;7m!!! TODO: Convert ( asdl_expr_seq * ) this . insertInFront ( a , b ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "star_target ((',' star_target))+ ','?");
                cache.putResult(_mark, STAR_TARGETS_TUPLE_SEQ_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s star_targets_tuple_seq[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_target ((',' star_target))+ ','?");
        }
        { // star_target ','
            debugMessageln("%d> star_targets_tuple_seq[%d-%d]: %s", level, _mark, mark(), "star_target ','");
            Token _literal;
            SSTNode a;
            if (
                (a = star_target_rule()) != null  // star_target
                &&
                (_literal = expect(12)) != null  // token=','
            )
            {
                debugMessageln("%d star_targets_tuple_seq[%d-%d]: %s succeeded!", level, _mark, mark(), "star_target ','");
                // TODO: node.action: ( asdl_expr_seq * ) this . singletonSequence ( a )
                debugMessageln("[33;5;7m!!! TODO: Convert ( asdl_expr_seq * ) this . singletonSequence ( a ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "star_target ','");
                cache.putResult(_mark, STAR_TARGETS_TUPLE_SEQ_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s star_targets_tuple_seq[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_target ','");
        }
        debugMessageln("Fail at %d: star_targets_tuple_seq", _mark);
        _res = null;
        cache.putResult(_mark, STAR_TARGETS_TUPLE_SEQ_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // star_target: '*' (!'*' star_target) | target_with_star_atom
    public SSTNode star_target_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, STAR_TARGET_ID)) {
            _res = (SSTNode)cache.getResult(_mark, STAR_TARGET_ID);
            level--;
            return (SSTNode)_res;
        }
        { // '*' (!'*' star_target)
            debugMessageln("%d> star_target[%d-%d]: %s", level, _mark, mark(), "'*' (!'*' star_target)");
            Token _literal;
            Object a;
            if (
                (_literal = expect(16)) != null  // token='*'
                &&
                (a = _tmp_186_rule()) != null  // !'*' star_target
            )
            {
                debugMessageln("%d star_target[%d-%d]: %s succeeded!", level, _mark, mark(), "'*' (!'*' star_target)");
                // TODO: node.action: _PyAST_Starred ( CHECK ( expr_ty , _PyPegen_set_expr_context ( p , a , Store ) ) , Store , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Starred ( CHECK ( expr_ty , _PyPegen_set_expr_context ( p , a , Store ) ) , Store , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'*' (!'*' star_target)");
                cache.putResult(_mark, STAR_TARGET_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s star_target[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'*' (!'*' star_target)");
        }
        { // target_with_star_atom
            debugMessageln("%d> star_target[%d-%d]: %s", level, _mark, mark(), "target_with_star_atom");
            SSTNode target_with_star_atom_var;
            if (
                (target_with_star_atom_var = target_with_star_atom_rule()) != null  // target_with_star_atom
            )
            {
                debugMessageln("%d star_target[%d-%d]: %s succeeded!", level, _mark, mark(), "target_with_star_atom");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "target_with_star_atom");
                _res = target_with_star_atom_var;
                cache.putResult(_mark, STAR_TARGET_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s star_target[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "target_with_star_atom");
        }
        debugMessageln("Fail at %d: star_target", _mark);
        _res = null;
        cache.putResult(_mark, STAR_TARGET_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // target_with_star_atom:
    //     | t_primary '.' NAME !t_lookahead
    //     | t_primary '[' slices ']' !t_lookahead
    //     | star_atom
    public SSTNode target_with_star_atom_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, TARGET_WITH_STAR_ATOM_ID)) {
            _res = (SSTNode)cache.getResult(_mark, TARGET_WITH_STAR_ATOM_ID);
            level--;
            return (SSTNode)_res;
        }
        { // t_primary '.' NAME !t_lookahead
            debugMessageln("%d> target_with_star_atom[%d-%d]: %s", level, _mark, mark(), "t_primary '.' NAME !t_lookahead");
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                (a = t_primary_rule()) != null  // t_primary
                &&
                (_literal = expect(23)) != null  // token='.'
                &&
                (b = name_token()) != null  // NAME
                &&
                genLookahead_t_lookahead_rule(false)
            )
            {
                debugMessageln("%d target_with_star_atom[%d-%d]: %s succeeded!", level, _mark, mark(), "t_primary '.' NAME !t_lookahead");
                // TODO: node.action: _PyAST_Attribute ( a , b -> v . Name . id , Store , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Attribute ( a , b -> v . Name . id , Store , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "t_primary '.' NAME !t_lookahead");
                cache.putResult(_mark, TARGET_WITH_STAR_ATOM_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s target_with_star_atom[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "t_primary '.' NAME !t_lookahead");
        }
        { // t_primary '[' slices ']' !t_lookahead
            debugMessageln("%d> target_with_star_atom[%d-%d]: %s", level, _mark, mark(), "t_primary '[' slices ']' !t_lookahead");
            Token _literal;
            Token _literal_1;
            SSTNode a;
            SSTNode b;
            if (
                (a = t_primary_rule()) != null  // t_primary
                &&
                (_literal = expect(9)) != null  // token='['
                &&
                (b = slices_rule()) != null  // slices
                &&
                (_literal_1 = expect(10)) != null  // token=']'
                &&
                genLookahead_t_lookahead_rule(false)
            )
            {
                debugMessageln("%d target_with_star_atom[%d-%d]: %s succeeded!", level, _mark, mark(), "t_primary '[' slices ']' !t_lookahead");
                // TODO: node.action: _PyAST_Subscript ( a , b , Store , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Subscript ( a , b , Store , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "t_primary '[' slices ']' !t_lookahead");
                cache.putResult(_mark, TARGET_WITH_STAR_ATOM_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s target_with_star_atom[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "t_primary '[' slices ']' !t_lookahead");
        }
        { // star_atom
            debugMessageln("%d> target_with_star_atom[%d-%d]: %s", level, _mark, mark(), "star_atom");
            SSTNode star_atom_var;
            if (
                (star_atom_var = star_atom_rule()) != null  // star_atom
            )
            {
                debugMessageln("%d target_with_star_atom[%d-%d]: %s succeeded!", level, _mark, mark(), "star_atom");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "star_atom");
                _res = star_atom_var;
                cache.putResult(_mark, TARGET_WITH_STAR_ATOM_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s target_with_star_atom[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_atom");
        }
        debugMessageln("Fail at %d: target_with_star_atom", _mark);
        _res = null;
        cache.putResult(_mark, TARGET_WITH_STAR_ATOM_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // star_atom:
    //     | NAME
    //     | '(' target_with_star_atom ')'
    //     | '(' star_targets_tuple_seq? ')'
    //     | '[' star_targets_list_seq? ']'
    public SSTNode star_atom_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, STAR_ATOM_ID)) {
            _res = (SSTNode)cache.getResult(_mark, STAR_ATOM_ID);
            level--;
            return (SSTNode)_res;
        }
        Token startToken = getAndInitializeToken();
        { // NAME
            debugMessageln("%d> star_atom[%d-%d]: %s", level, _mark, mark(), "NAME");
            SSTNode a;
            if (
                (a = name_token()) != null  // NAME
            )
            {
                debugMessageln("%d star_atom[%d-%d]: %s succeeded!", level, _mark, mark(), "NAME");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "NAME");
                cache.putResult(_mark, STAR_ATOM_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s star_atom[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "NAME");
        }
        { // '(' target_with_star_atom ')'
            debugMessageln("%d> star_atom[%d-%d]: %s", level, _mark, mark(), "'(' target_with_star_atom ')'");
            Token _literal;
            Token _literal_1;
            SSTNode a;
            if (
                (_literal = expect(7)) != null  // token='('
                &&
                (a = target_with_star_atom_rule()) != null  // target_with_star_atom
                &&
                (_literal_1 = expect(8)) != null  // token=')'
            )
            {
                debugMessageln("%d star_atom[%d-%d]: %s succeeded!", level, _mark, mark(), "'(' target_with_star_atom ')'");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'(' target_with_star_atom ')'");
                cache.putResult(_mark, STAR_ATOM_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s star_atom[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'(' target_with_star_atom ')'");
        }
        { // '(' star_targets_tuple_seq? ')'
            debugMessageln("%d> star_atom[%d-%d]: %s", level, _mark, mark(), "'(' star_targets_tuple_seq? ')'");
            Token _literal;
            Token _literal_1;
            Object a;
            if (
                (_literal = expect(7)) != null  // token='('
                &&
                ((a = _tmp_187_rule()) != null || true)  // star_targets_tuple_seq?
                &&
                (_literal_1 = expect(8)) != null  // token=')'
            )
            {
                debugMessageln("%d star_atom[%d-%d]: %s succeeded!", level, _mark, mark(), "'(' star_targets_tuple_seq? ')'");
                Token endToken = getLastNonWhitespaceToken();
                if (endToken == null) {
                    level--;
                    return null;
                }
                _res = factory.createTuple((SSTNode[])a,startToken.startOffset,endToken.endOffset);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'(' star_targets_tuple_seq? ')'");
                cache.putResult(_mark, STAR_ATOM_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s star_atom[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'(' star_targets_tuple_seq? ')'");
        }
        { // '[' star_targets_list_seq? ']'
            debugMessageln("%d> star_atom[%d-%d]: %s", level, _mark, mark(), "'[' star_targets_list_seq? ']'");
            Token _literal;
            Token _literal_1;
            Object a;
            if (
                (_literal = expect(9)) != null  // token='['
                &&
                ((a = _tmp_188_rule()) != null || true)  // star_targets_list_seq?
                &&
                (_literal_1 = expect(10)) != null  // token=']'
            )
            {
                debugMessageln("%d star_atom[%d-%d]: %s succeeded!", level, _mark, mark(), "'[' star_targets_list_seq? ']'");
                Token endToken = getLastNonWhitespaceToken();
                if (endToken == null) {
                    level--;
                    return null;
                }
                _res = factory.createList((SSTNode[])a,startToken.startOffset,endToken.endOffset);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'[' star_targets_list_seq? ']'");
                cache.putResult(_mark, STAR_ATOM_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s star_atom[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'[' star_targets_list_seq? ']'");
        }
        debugMessageln("Fail at %d: star_atom", _mark);
        _res = null;
        cache.putResult(_mark, STAR_ATOM_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // single_target: single_subscript_attribute_target | NAME | '(' single_target ')'
    public SSTNode single_target_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, SINGLE_TARGET_ID)) {
            _res = (SSTNode)cache.getResult(_mark, SINGLE_TARGET_ID);
            level--;
            return (SSTNode)_res;
        }
        { // single_subscript_attribute_target
            debugMessageln("%d> single_target[%d-%d]: %s", level, _mark, mark(), "single_subscript_attribute_target");
            SSTNode single_subscript_attribute_target_var;
            if (
                (single_subscript_attribute_target_var = single_subscript_attribute_target_rule()) != null  // single_subscript_attribute_target
            )
            {
                debugMessageln("%d single_target[%d-%d]: %s succeeded!", level, _mark, mark(), "single_subscript_attribute_target");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "single_subscript_attribute_target");
                _res = single_subscript_attribute_target_var;
                cache.putResult(_mark, SINGLE_TARGET_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s single_target[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "single_subscript_attribute_target");
        }
        { // NAME
            debugMessageln("%d> single_target[%d-%d]: %s", level, _mark, mark(), "NAME");
            SSTNode a;
            if (
                (a = name_token()) != null  // NAME
            )
            {
                debugMessageln("%d single_target[%d-%d]: %s succeeded!", level, _mark, mark(), "NAME");
                // TODO: node.action: _PyPegen_set_expr_context ( p , a , Store )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_set_expr_context ( p , a , Store ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "NAME");
                cache.putResult(_mark, SINGLE_TARGET_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s single_target[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "NAME");
        }
        { // '(' single_target ')'
            debugMessageln("%d> single_target[%d-%d]: %s", level, _mark, mark(), "'(' single_target ')'");
            Token _literal;
            Token _literal_1;
            SSTNode a;
            if (
                (_literal = expect(7)) != null  // token='('
                &&
                (a = single_target_rule()) != null  // single_target
                &&
                (_literal_1 = expect(8)) != null  // token=')'
            )
            {
                debugMessageln("%d single_target[%d-%d]: %s succeeded!", level, _mark, mark(), "'(' single_target ')'");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'(' single_target ')'");
                cache.putResult(_mark, SINGLE_TARGET_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s single_target[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'(' single_target ')'");
        }
        debugMessageln("Fail at %d: single_target", _mark);
        _res = null;
        cache.putResult(_mark, SINGLE_TARGET_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // single_subscript_attribute_target:
    //     | t_primary '.' NAME !t_lookahead
    //     | t_primary '[' slices ']' !t_lookahead
    public SSTNode single_subscript_attribute_target_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, SINGLE_SUBSCRIPT_ATTRIBUTE_TARGET_ID)) {
            _res = (SSTNode)cache.getResult(_mark, SINGLE_SUBSCRIPT_ATTRIBUTE_TARGET_ID);
            level--;
            return (SSTNode)_res;
        }
        { // t_primary '.' NAME !t_lookahead
            debugMessageln("%d> single_subscript_attribute_target[%d-%d]: %s", level, _mark, mark(), "t_primary '.' NAME !t_lookahead");
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                (a = t_primary_rule()) != null  // t_primary
                &&
                (_literal = expect(23)) != null  // token='.'
                &&
                (b = name_token()) != null  // NAME
                &&
                genLookahead_t_lookahead_rule(false)
            )
            {
                debugMessageln("%d single_subscript_attribute_target[%d-%d]: %s succeeded!", level, _mark, mark(), "t_primary '.' NAME !t_lookahead");
                // TODO: node.action: _PyAST_Attribute ( a , b -> v . Name . id , Store , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Attribute ( a , b -> v . Name . id , Store , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "t_primary '.' NAME !t_lookahead");
                cache.putResult(_mark, SINGLE_SUBSCRIPT_ATTRIBUTE_TARGET_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s single_subscript_attribute_target[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "t_primary '.' NAME !t_lookahead");
        }
        { // t_primary '[' slices ']' !t_lookahead
            debugMessageln("%d> single_subscript_attribute_target[%d-%d]: %s", level, _mark, mark(), "t_primary '[' slices ']' !t_lookahead");
            Token _literal;
            Token _literal_1;
            SSTNode a;
            SSTNode b;
            if (
                (a = t_primary_rule()) != null  // t_primary
                &&
                (_literal = expect(9)) != null  // token='['
                &&
                (b = slices_rule()) != null  // slices
                &&
                (_literal_1 = expect(10)) != null  // token=']'
                &&
                genLookahead_t_lookahead_rule(false)
            )
            {
                debugMessageln("%d single_subscript_attribute_target[%d-%d]: %s succeeded!", level, _mark, mark(), "t_primary '[' slices ']' !t_lookahead");
                // TODO: node.action: _PyAST_Subscript ( a , b , Store , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Subscript ( a , b , Store , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "t_primary '[' slices ']' !t_lookahead");
                cache.putResult(_mark, SINGLE_SUBSCRIPT_ATTRIBUTE_TARGET_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s single_subscript_attribute_target[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "t_primary '[' slices ']' !t_lookahead");
        }
        debugMessageln("Fail at %d: single_subscript_attribute_target", _mark);
        _res = null;
        cache.putResult(_mark, SINGLE_SUBSCRIPT_ATTRIBUTE_TARGET_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // del_targets: ','.del_target+ ','?
    public SSTNode[] del_targets_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, DEL_TARGETS_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, DEL_TARGETS_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // ','.del_target+ ','?
            debugMessageln("%d> del_targets[%d-%d]: %s", level, _mark, mark(), "','.del_target+ ','?");
            Object _opt_var;
            SSTNode[] a;
            if (
                (a = (SSTNode[])_gather_189_rule()) != null  // ','.del_target+
                &&
                ((_opt_var = _tmp_191_rule()) != null || true)  // ','?
            )
            {
                debugMessageln("%d del_targets[%d-%d]: %s succeeded!", level, _mark, mark(), "','.del_target+ ','?");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "','.del_target+ ','?");
                cache.putResult(_mark, DEL_TARGETS_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s del_targets[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','.del_target+ ','?");
        }
        debugMessageln("Fail at %d: del_targets", _mark);
        _res = null;
        cache.putResult(_mark, DEL_TARGETS_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // del_target:
    //     | t_primary '.' NAME !t_lookahead
    //     | t_primary '[' slices ']' !t_lookahead
    //     | del_t_atom
    public SSTNode del_target_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, DEL_TARGET_ID)) {
            _res = (SSTNode)cache.getResult(_mark, DEL_TARGET_ID);
            level--;
            return (SSTNode)_res;
        }
        { // t_primary '.' NAME !t_lookahead
            debugMessageln("%d> del_target[%d-%d]: %s", level, _mark, mark(), "t_primary '.' NAME !t_lookahead");
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                (a = t_primary_rule()) != null  // t_primary
                &&
                (_literal = expect(23)) != null  // token='.'
                &&
                (b = name_token()) != null  // NAME
                &&
                genLookahead_t_lookahead_rule(false)
            )
            {
                debugMessageln("%d del_target[%d-%d]: %s succeeded!", level, _mark, mark(), "t_primary '.' NAME !t_lookahead");
                // TODO: node.action: _PyAST_Attribute ( a , b -> v . Name . id , Del , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Attribute ( a , b -> v . Name . id , Del , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "t_primary '.' NAME !t_lookahead");
                cache.putResult(_mark, DEL_TARGET_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s del_target[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "t_primary '.' NAME !t_lookahead");
        }
        { // t_primary '[' slices ']' !t_lookahead
            debugMessageln("%d> del_target[%d-%d]: %s", level, _mark, mark(), "t_primary '[' slices ']' !t_lookahead");
            Token _literal;
            Token _literal_1;
            SSTNode a;
            SSTNode b;
            if (
                (a = t_primary_rule()) != null  // t_primary
                &&
                (_literal = expect(9)) != null  // token='['
                &&
                (b = slices_rule()) != null  // slices
                &&
                (_literal_1 = expect(10)) != null  // token=']'
                &&
                genLookahead_t_lookahead_rule(false)
            )
            {
                debugMessageln("%d del_target[%d-%d]: %s succeeded!", level, _mark, mark(), "t_primary '[' slices ']' !t_lookahead");
                // TODO: node.action: _PyAST_Subscript ( a , b , Del , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Subscript ( a , b , Del , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "t_primary '[' slices ']' !t_lookahead");
                cache.putResult(_mark, DEL_TARGET_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s del_target[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "t_primary '[' slices ']' !t_lookahead");
        }
        { // del_t_atom
            debugMessageln("%d> del_target[%d-%d]: %s", level, _mark, mark(), "del_t_atom");
            SSTNode del_t_atom_var;
            if (
                (del_t_atom_var = del_t_atom_rule()) != null  // del_t_atom
            )
            {
                debugMessageln("%d del_target[%d-%d]: %s succeeded!", level, _mark, mark(), "del_t_atom");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "del_t_atom");
                _res = del_t_atom_var;
                cache.putResult(_mark, DEL_TARGET_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s del_target[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "del_t_atom");
        }
        debugMessageln("Fail at %d: del_target", _mark);
        _res = null;
        cache.putResult(_mark, DEL_TARGET_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // del_t_atom: NAME | '(' del_target ')' | '(' del_targets? ')' | '[' del_targets? ']'
    public SSTNode del_t_atom_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, DEL_T_ATOM_ID)) {
            _res = (SSTNode)cache.getResult(_mark, DEL_T_ATOM_ID);
            level--;
            return (SSTNode)_res;
        }
        { // NAME
            debugMessageln("%d> del_t_atom[%d-%d]: %s", level, _mark, mark(), "NAME");
            SSTNode a;
            if (
                (a = name_token()) != null  // NAME
            )
            {
                debugMessageln("%d del_t_atom[%d-%d]: %s succeeded!", level, _mark, mark(), "NAME");
                // TODO: node.action: _PyPegen_set_expr_context ( p , a , Del )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_set_expr_context ( p , a , Del ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "NAME");
                cache.putResult(_mark, DEL_T_ATOM_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s del_t_atom[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "NAME");
        }
        { // '(' del_target ')'
            debugMessageln("%d> del_t_atom[%d-%d]: %s", level, _mark, mark(), "'(' del_target ')'");
            Token _literal;
            Token _literal_1;
            SSTNode a;
            if (
                (_literal = expect(7)) != null  // token='('
                &&
                (a = del_target_rule()) != null  // del_target
                &&
                (_literal_1 = expect(8)) != null  // token=')'
            )
            {
                debugMessageln("%d del_t_atom[%d-%d]: %s succeeded!", level, _mark, mark(), "'(' del_target ')'");
                // TODO: node.action: _PyPegen_set_expr_context ( p , a , Del )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_set_expr_context ( p , a , Del ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'(' del_target ')'");
                cache.putResult(_mark, DEL_T_ATOM_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s del_t_atom[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'(' del_target ')'");
        }
        { // '(' del_targets? ')'
            debugMessageln("%d> del_t_atom[%d-%d]: %s", level, _mark, mark(), "'(' del_targets? ')'");
            Token _literal;
            Token _literal_1;
            Object a;
            if (
                (_literal = expect(7)) != null  // token='('
                &&
                ((a = _tmp_192_rule()) != null || true)  // del_targets?
                &&
                (_literal_1 = expect(8)) != null  // token=')'
            )
            {
                debugMessageln("%d del_t_atom[%d-%d]: %s succeeded!", level, _mark, mark(), "'(' del_targets? ')'");
                // TODO: node.action: _PyAST_Tuple ( a , Del , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Tuple ( a , Del , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'(' del_targets? ')'");
                cache.putResult(_mark, DEL_T_ATOM_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s del_t_atom[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'(' del_targets? ')'");
        }
        { // '[' del_targets? ']'
            debugMessageln("%d> del_t_atom[%d-%d]: %s", level, _mark, mark(), "'[' del_targets? ']'");
            Token _literal;
            Token _literal_1;
            Object a;
            if (
                (_literal = expect(9)) != null  // token='['
                &&
                ((a = _tmp_193_rule()) != null || true)  // del_targets?
                &&
                (_literal_1 = expect(10)) != null  // token=']'
            )
            {
                debugMessageln("%d del_t_atom[%d-%d]: %s succeeded!", level, _mark, mark(), "'[' del_targets? ']'");
                // TODO: node.action: _PyAST_List ( a , Del , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_List ( a , Del , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'[' del_targets? ']'");
                cache.putResult(_mark, DEL_T_ATOM_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s del_t_atom[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'[' del_targets? ']'");
        }
        debugMessageln("Fail at %d: del_t_atom", _mark);
        _res = null;
        cache.putResult(_mark, DEL_T_ATOM_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // targets: ','.target+ ','?
    public SSTNode[] targets_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, TARGETS_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, TARGETS_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // ','.target+ ','?
            debugMessageln("%d> targets[%d-%d]: %s", level, _mark, mark(), "','.target+ ','?");
            Object _opt_var;
            SSTNode[] a;
            if (
                (a = (SSTNode[])_gather_194_rule()) != null  // ','.target+
                &&
                ((_opt_var = _tmp_196_rule()) != null || true)  // ','?
            )
            {
                debugMessageln("%d targets[%d-%d]: %s succeeded!", level, _mark, mark(), "','.target+ ','?");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "','.target+ ','?");
                cache.putResult(_mark, TARGETS_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s targets[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','.target+ ','?");
        }
        debugMessageln("Fail at %d: targets", _mark);
        _res = null;
        cache.putResult(_mark, TARGETS_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // target:
    //     | t_primary '.' NAME !t_lookahead
    //     | t_primary '[' slices ']' !t_lookahead
    //     | t_atom
    public SSTNode target_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, TARGET_ID)) {
            _res = (SSTNode)cache.getResult(_mark, TARGET_ID);
            level--;
            return (SSTNode)_res;
        }
        { // t_primary '.' NAME !t_lookahead
            debugMessageln("%d> target[%d-%d]: %s", level, _mark, mark(), "t_primary '.' NAME !t_lookahead");
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                (a = t_primary_rule()) != null  // t_primary
                &&
                (_literal = expect(23)) != null  // token='.'
                &&
                (b = name_token()) != null  // NAME
                &&
                genLookahead_t_lookahead_rule(false)
            )
            {
                debugMessageln("%d target[%d-%d]: %s succeeded!", level, _mark, mark(), "t_primary '.' NAME !t_lookahead");
                // TODO: node.action: _PyAST_Attribute ( a , b -> v . Name . id , Store , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Attribute ( a , b -> v . Name . id , Store , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "t_primary '.' NAME !t_lookahead");
                cache.putResult(_mark, TARGET_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s target[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "t_primary '.' NAME !t_lookahead");
        }
        { // t_primary '[' slices ']' !t_lookahead
            debugMessageln("%d> target[%d-%d]: %s", level, _mark, mark(), "t_primary '[' slices ']' !t_lookahead");
            Token _literal;
            Token _literal_1;
            SSTNode a;
            SSTNode b;
            if (
                (a = t_primary_rule()) != null  // t_primary
                &&
                (_literal = expect(9)) != null  // token='['
                &&
                (b = slices_rule()) != null  // slices
                &&
                (_literal_1 = expect(10)) != null  // token=']'
                &&
                genLookahead_t_lookahead_rule(false)
            )
            {
                debugMessageln("%d target[%d-%d]: %s succeeded!", level, _mark, mark(), "t_primary '[' slices ']' !t_lookahead");
                // TODO: node.action: _PyAST_Subscript ( a , b , Store , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Subscript ( a , b , Store , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "t_primary '[' slices ']' !t_lookahead");
                cache.putResult(_mark, TARGET_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s target[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "t_primary '[' slices ']' !t_lookahead");
        }
        { // t_atom
            debugMessageln("%d> target[%d-%d]: %s", level, _mark, mark(), "t_atom");
            SSTNode t_atom_var;
            if (
                (t_atom_var = t_atom_rule()) != null  // t_atom
            )
            {
                debugMessageln("%d target[%d-%d]: %s succeeded!", level, _mark, mark(), "t_atom");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "t_atom");
                _res = t_atom_var;
                cache.putResult(_mark, TARGET_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s target[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "t_atom");
        }
        debugMessageln("Fail at %d: target", _mark);
        _res = null;
        cache.putResult(_mark, TARGET_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // Left-recursive
    // t_primary:
    //     | t_primary '.' NAME &t_lookahead
    //     | t_primary '[' slices ']' &t_lookahead
    //     | t_primary genexp &t_lookahead
    //     | t_primary '(' arguments? ')' &t_lookahead
    //     | atom &t_lookahead
    public SSTNode t_primary_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, T_PRIMARY_ID)) {
            _res = cache.getResult(_mark, T_PRIMARY_ID);
            level--;
            return (SSTNode)_res;
        }
        int _resmark = mark();
        while (true) {
            cache.putResult(_mark, T_PRIMARY_ID, _res);
            reset(_mark);
            SSTNode _raw = t_primary_raw();
            if (_raw == null || mark() <= _resmark)
                break;
            _resmark = mark();
            _res = _raw;
        }
        reset(_resmark);
        level--;
        return (SSTNode)_res;
    }
    private SSTNode t_primary_raw()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        { // t_primary '.' NAME &t_lookahead
            debugMessageln("%d> t_primary[%d-%d]: %s", level, _mark, mark(), "t_primary '.' NAME &t_lookahead");
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                (a = t_primary_rule()) != null  // t_primary
                &&
                (_literal = expect(23)) != null  // token='.'
                &&
                (b = name_token()) != null  // NAME
                &&
                genLookahead_t_lookahead_rule(true)
            )
            {
                debugMessageln("%d t_primary[%d-%d]: %s succeeded!", level, _mark, mark(), "t_primary '.' NAME &t_lookahead");
                // TODO: node.action: _PyAST_Attribute ( a , b -> v . Name . id , Load , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Attribute ( a , b -> v . Name . id , Load , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "t_primary '.' NAME &t_lookahead");
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s t_primary[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "t_primary '.' NAME &t_lookahead");
        }
        { // t_primary '[' slices ']' &t_lookahead
            debugMessageln("%d> t_primary[%d-%d]: %s", level, _mark, mark(), "t_primary '[' slices ']' &t_lookahead");
            Token _literal;
            Token _literal_1;
            SSTNode a;
            SSTNode b;
            if (
                (a = t_primary_rule()) != null  // t_primary
                &&
                (_literal = expect(9)) != null  // token='['
                &&
                (b = slices_rule()) != null  // slices
                &&
                (_literal_1 = expect(10)) != null  // token=']'
                &&
                genLookahead_t_lookahead_rule(true)
            )
            {
                debugMessageln("%d t_primary[%d-%d]: %s succeeded!", level, _mark, mark(), "t_primary '[' slices ']' &t_lookahead");
                // TODO: node.action: _PyAST_Subscript ( a , b , Load , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Subscript ( a , b , Load , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "t_primary '[' slices ']' &t_lookahead");
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s t_primary[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "t_primary '[' slices ']' &t_lookahead");
        }
        { // t_primary genexp &t_lookahead
            debugMessageln("%d> t_primary[%d-%d]: %s", level, _mark, mark(), "t_primary genexp &t_lookahead");
            SSTNode a;
            SSTNode b;
            if (
                (a = t_primary_rule()) != null  // t_primary
                &&
                (b = genexp_rule()) != null  // genexp
                &&
                genLookahead_t_lookahead_rule(true)
            )
            {
                debugMessageln("%d t_primary[%d-%d]: %s succeeded!", level, _mark, mark(), "t_primary genexp &t_lookahead");
                // TODO: node.action: _PyAST_Call ( a , CHECK ( asdl_expr_seq * , ( asdl_expr_seq * ) this . singletonSequence ( b ) ) , NULL , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Call ( a , CHECK ( asdl_expr_seq * , ( asdl_expr_seq * ) this . singletonSequence ( b ) ) , NULL , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "t_primary genexp &t_lookahead");
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s t_primary[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "t_primary genexp &t_lookahead");
        }
        { // t_primary '(' arguments? ')' &t_lookahead
            debugMessageln("%d> t_primary[%d-%d]: %s", level, _mark, mark(), "t_primary '(' arguments? ')' &t_lookahead");
            Token _literal;
            Token _literal_1;
            SSTNode a;
            Object b;
            if (
                (a = t_primary_rule()) != null  // t_primary
                &&
                (_literal = expect(7)) != null  // token='('
                &&
                ((b = _tmp_197_rule()) != null || true)  // arguments?
                &&
                (_literal_1 = expect(8)) != null  // token=')'
                &&
                genLookahead_t_lookahead_rule(true)
            )
            {
                debugMessageln("%d t_primary[%d-%d]: %s succeeded!", level, _mark, mark(), "t_primary '(' arguments? ')' &t_lookahead");
                // TODO: node.action: _PyAST_Call ( a , ( b ) ? ( ( expr_ty ) b ) -> v . Call . args : NULL , ( b ) ? ( ( expr_ty ) b ) -> v . Call . keywords : NULL , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Call ( a , ( b ) ? ( ( expr_ty ) b ) -> v . Call . args : NULL , ( b ) ? ( ( expr_ty ) b ) -> v . Call . keywords : NULL , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "t_primary '(' arguments? ')' &t_lookahead");
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s t_primary[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "t_primary '(' arguments? ')' &t_lookahead");
        }
        { // atom &t_lookahead
            debugMessageln("%d> t_primary[%d-%d]: %s", level, _mark, mark(), "atom &t_lookahead");
            SSTNode a;
            if (
                (a = atom_rule()) != null  // atom
                &&
                genLookahead_t_lookahead_rule(true)
            )
            {
                debugMessageln("%d t_primary[%d-%d]: %s succeeded!", level, _mark, mark(), "atom &t_lookahead");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "atom &t_lookahead");
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s t_primary[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "atom &t_lookahead");
        }
        debugMessageln("Fail at %d: t_primary", _mark);
        _res = null;
        level--;
        return (SSTNode)_res;
    }

    // t_lookahead: '(' | '[' | '.'
    public Object t_lookahead_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, T_LOOKAHEAD_ID)) {
            _res = (Object)cache.getResult(_mark, T_LOOKAHEAD_ID);
            level--;
            return (Object)_res;
        }
        { // '('
            debugMessageln("%d> t_lookahead[%d-%d]: %s", level, _mark, mark(), "'('");
            Token _literal;
            if (
                (_literal = expect(7)) != null  // token='('
            )
            {
                debugMessageln("%d t_lookahead[%d-%d]: %s succeeded!", level, _mark, mark(), "'('");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'('");
                _res = _literal;
                cache.putResult(_mark, T_LOOKAHEAD_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s t_lookahead[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'('");
        }
        { // '['
            debugMessageln("%d> t_lookahead[%d-%d]: %s", level, _mark, mark(), "'['");
            Token _literal;
            if (
                (_literal = expect(9)) != null  // token='['
            )
            {
                debugMessageln("%d t_lookahead[%d-%d]: %s succeeded!", level, _mark, mark(), "'['");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'['");
                _res = _literal;
                cache.putResult(_mark, T_LOOKAHEAD_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s t_lookahead[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'['");
        }
        { // '.'
            debugMessageln("%d> t_lookahead[%d-%d]: %s", level, _mark, mark(), "'.'");
            Token _literal;
            if (
                (_literal = expect(23)) != null  // token='.'
            )
            {
                debugMessageln("%d t_lookahead[%d-%d]: %s succeeded!", level, _mark, mark(), "'.'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'.'");
                _res = _literal;
                cache.putResult(_mark, T_LOOKAHEAD_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s t_lookahead[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'.'");
        }
        debugMessageln("Fail at %d: t_lookahead", _mark);
        _res = null;
        cache.putResult(_mark, T_LOOKAHEAD_ID, _res);
        level--;
        return (Object)_res;
    }

    // t_atom: NAME | '(' target ')' | '(' targets? ')' | '[' targets? ']'
    public SSTNode t_atom_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, T_ATOM_ID)) {
            _res = (SSTNode)cache.getResult(_mark, T_ATOM_ID);
            level--;
            return (SSTNode)_res;
        }
        { // NAME
            debugMessageln("%d> t_atom[%d-%d]: %s", level, _mark, mark(), "NAME");
            SSTNode a;
            if (
                (a = name_token()) != null  // NAME
            )
            {
                debugMessageln("%d t_atom[%d-%d]: %s succeeded!", level, _mark, mark(), "NAME");
                // TODO: node.action: _PyPegen_set_expr_context ( p , a , Store )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_set_expr_context ( p , a , Store ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "NAME");
                cache.putResult(_mark, T_ATOM_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s t_atom[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "NAME");
        }
        { // '(' target ')'
            debugMessageln("%d> t_atom[%d-%d]: %s", level, _mark, mark(), "'(' target ')'");
            Token _literal;
            Token _literal_1;
            SSTNode a;
            if (
                (_literal = expect(7)) != null  // token='('
                &&
                (a = target_rule()) != null  // target
                &&
                (_literal_1 = expect(8)) != null  // token=')'
            )
            {
                debugMessageln("%d t_atom[%d-%d]: %s succeeded!", level, _mark, mark(), "'(' target ')'");
                // TODO: node.action: _PyPegen_set_expr_context ( p , a , Store )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_set_expr_context ( p , a , Store ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'(' target ')'");
                cache.putResult(_mark, T_ATOM_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s t_atom[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'(' target ')'");
        }
        { // '(' targets? ')'
            debugMessageln("%d> t_atom[%d-%d]: %s", level, _mark, mark(), "'(' targets? ')'");
            Token _literal;
            Token _literal_1;
            Object b;
            if (
                (_literal = expect(7)) != null  // token='('
                &&
                ((b = _tmp_198_rule()) != null || true)  // targets?
                &&
                (_literal_1 = expect(8)) != null  // token=')'
            )
            {
                debugMessageln("%d t_atom[%d-%d]: %s succeeded!", level, _mark, mark(), "'(' targets? ')'");
                // TODO: node.action: _PyAST_Tuple ( b , Store , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_Tuple ( b , Store , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'(' targets? ')'");
                cache.putResult(_mark, T_ATOM_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s t_atom[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'(' targets? ')'");
        }
        { // '[' targets? ']'
            debugMessageln("%d> t_atom[%d-%d]: %s", level, _mark, mark(), "'[' targets? ']'");
            Token _literal;
            Token _literal_1;
            Object b;
            if (
                (_literal = expect(9)) != null  // token='['
                &&
                ((b = _tmp_199_rule()) != null || true)  // targets?
                &&
                (_literal_1 = expect(10)) != null  // token=']'
            )
            {
                debugMessageln("%d t_atom[%d-%d]: %s succeeded!", level, _mark, mark(), "'[' targets? ']'");
                // TODO: node.action: _PyAST_List ( b , Store , EXTRA )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyAST_List ( b , Store , EXTRA ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'[' targets? ']'");
                cache.putResult(_mark, T_ATOM_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s t_atom[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'[' targets? ']'");
        }
        debugMessageln("Fail at %d: t_atom", _mark);
        _res = null;
        cache.putResult(_mark, T_ATOM_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // invalid_arguments:
    //     | args ',' '*'
    //     | expression for_if_clauses ',' [args | expression for_if_clauses]
    //     | args for_if_clauses
    //     | args ',' expression for_if_clauses
    //     | args ',' args
    public Object invalid_arguments_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, INVALID_ARGUMENTS_ID)) {
            _res = (Object)cache.getResult(_mark, INVALID_ARGUMENTS_ID);
            level--;
            return (Object)_res;
        }
        { // args ',' '*'
            debugMessageln("%d> invalid_arguments[%d-%d]: %s", level, _mark, mark(), "args ',' '*'");
            Token _literal;
            Token _literal_1;
            SSTNode args_var;
            if (
                (args_var = args_rule()) != null  // args
                &&
                (_literal = expect(12)) != null  // token=','
                &&
                (_literal_1 = expect(16)) != null  // token='*'
            )
            {
                debugMessageln("%d invalid_arguments[%d-%d]: %s succeeded!", level, _mark, mark(), "args ',' '*'");
                // TODO: node.action: RAISE_SYNTAX_ERROR ( "iterable argument unpacking follows keyword argument unpacking" )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR ( 'iterable argument unpacking follows keyword argument unpacking' ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "args ',' '*'");
                cache.putResult(_mark, INVALID_ARGUMENTS_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_arguments[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "args ',' '*'");
        }
        { // expression for_if_clauses ',' [args | expression for_if_clauses]
            debugMessageln("%d> invalid_arguments[%d-%d]: %s", level, _mark, mark(), "expression for_if_clauses ',' [args | expression for_if_clauses]");
            Token _literal;
            Object _opt_var;
            SSTNode a;
            ForComprehensionSSTNode[] for_if_clauses_var;
            if (
                (a = expression_rule()) != null  // expression
                &&
                (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
                &&
                (_literal = expect(12)) != null  // token=','
                &&
                ((_opt_var = _tmp_200_rule()) != null || true)  // [args | expression for_if_clauses]
            )
            {
                debugMessageln("%d invalid_arguments[%d-%d]: %s succeeded!", level, _mark, mark(), "expression for_if_clauses ',' [args | expression for_if_clauses]");
                // TODO: node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "Generator expression must be parenthesized" )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , 'Generator expression must be parenthesized' ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "expression for_if_clauses ',' [args | expression for_if_clauses]");
                cache.putResult(_mark, INVALID_ARGUMENTS_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_arguments[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "expression for_if_clauses ',' [args | expression for_if_clauses]");
        }
        { // args for_if_clauses
            debugMessageln("%d> invalid_arguments[%d-%d]: %s", level, _mark, mark(), "args for_if_clauses");
            SSTNode a;
            ForComprehensionSSTNode[] for_if_clauses_var;
            if (
                (a = args_rule()) != null  // args
                &&
                (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            )
            {
                debugMessageln("%d invalid_arguments[%d-%d]: %s succeeded!", level, _mark, mark(), "args for_if_clauses");
                // TODO: node.action: _PyPegen_nonparen_genexp_in_call ( p , a )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_nonparen_genexp_in_call ( p , a ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "args for_if_clauses");
                cache.putResult(_mark, INVALID_ARGUMENTS_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_arguments[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "args for_if_clauses");
        }
        { // args ',' expression for_if_clauses
            debugMessageln("%d> invalid_arguments[%d-%d]: %s", level, _mark, mark(), "args ',' expression for_if_clauses");
            Token _literal;
            SSTNode a;
            SSTNode args_var;
            ForComprehensionSSTNode[] for_if_clauses_var;
            if (
                (args_var = args_rule()) != null  // args
                &&
                (_literal = expect(12)) != null  // token=','
                &&
                (a = expression_rule()) != null  // expression
                &&
                (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            )
            {
                debugMessageln("%d invalid_arguments[%d-%d]: %s succeeded!", level, _mark, mark(), "args ',' expression for_if_clauses");
                // TODO: node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "Generator expression must be parenthesized" )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , 'Generator expression must be parenthesized' ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "args ',' expression for_if_clauses");
                cache.putResult(_mark, INVALID_ARGUMENTS_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_arguments[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "args ',' expression for_if_clauses");
        }
        { // args ',' args
            debugMessageln("%d> invalid_arguments[%d-%d]: %s", level, _mark, mark(), "args ',' args");
            Token _literal;
            SSTNode a;
            SSTNode args_var;
            if (
                (a = args_rule()) != null  // args
                &&
                (_literal = expect(12)) != null  // token=','
                &&
                (args_var = args_rule()) != null  // args
            )
            {
                debugMessageln("%d invalid_arguments[%d-%d]: %s succeeded!", level, _mark, mark(), "args ',' args");
                // TODO: node.action: _PyPegen_arguments_parsing_error ( p , a )
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_arguments_parsing_error ( p , a ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "args ',' args");
                cache.putResult(_mark, INVALID_ARGUMENTS_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_arguments[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "args ',' args");
        }
        debugMessageln("Fail at %d: invalid_arguments", _mark);
        _res = null;
        cache.putResult(_mark, INVALID_ARGUMENTS_ID, _res);
        level--;
        return (Object)_res;
    }

    // invalid_kwarg: expression '='
    public Object invalid_kwarg_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, INVALID_KWARG_ID)) {
            _res = (Object)cache.getResult(_mark, INVALID_KWARG_ID);
            level--;
            return (Object)_res;
        }
        { // expression '='
            debugMessageln("%d> invalid_kwarg[%d-%d]: %s", level, _mark, mark(), "expression '='");
            Token a;
            SSTNode expression_var;
            if (
                (expression_var = expression_rule()) != null  // expression
                &&
                (a = expect(22)) != null  // token='='
            )
            {
                debugMessageln("%d invalid_kwarg[%d-%d]: %s succeeded!", level, _mark, mark(), "expression '='");
                // TODO: node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "expression cannot contain assignment, perhaps you meant \"==\"?" )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , 'expression cannot contain assignment, perhaps you meant \'==\'?' ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "expression '='");
                cache.putResult(_mark, INVALID_KWARG_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_kwarg[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "expression '='");
        }
        debugMessageln("Fail at %d: invalid_kwarg", _mark);
        _res = null;
        cache.putResult(_mark, INVALID_KWARG_ID, _res);
        level--;
        return (Object)_res;
    }

    // invalid_expression: !(NAME STRING | SOFT_KEYWORD) disjunction expression
    public Object invalid_expression_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, INVALID_EXPRESSION_ID)) {
            _res = (Object)cache.getResult(_mark, INVALID_EXPRESSION_ID);
            level--;
            return (Object)_res;
        }
        { // !(NAME STRING | SOFT_KEYWORD) disjunction expression
            debugMessageln("%d> invalid_expression[%d-%d]: %s", level, _mark, mark(), "!(NAME STRING | SOFT_KEYWORD) disjunction expression");
            SSTNode a;
            SSTNode expression_var;
            if (
                genLookahead__tmp_201_rule(false)
                &&
                (a = disjunction_rule()) != null  // disjunction
                &&
                (expression_var = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d invalid_expression[%d-%d]: %s succeeded!", level, _mark, mark(), "!(NAME STRING | SOFT_KEYWORD) disjunction expression");
                // TODO: node.action: RAISE_ERROR_KNOWN_LOCATION ( p , PyExc_SyntaxError , a -> lineno , a -> end_col_offset - 1 , "invalid syntax. Perhaps you forgot a comma?" )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_ERROR_KNOWN_LOCATION ( p , PyExc_SyntaxError , a -> lineno , a -> end_col_offset - 1 , 'invalid syntax. Perhaps you forgot a comma?' ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "!(NAME STRING | SOFT_KEYWORD) disjunction expression");
                cache.putResult(_mark, INVALID_EXPRESSION_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_expression[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "!(NAME STRING | SOFT_KEYWORD) disjunction expression");
        }
        debugMessageln("Fail at %d: invalid_expression", _mark);
        _res = null;
        cache.putResult(_mark, INVALID_EXPRESSION_ID, _res);
        level--;
        return (Object)_res;
    }

    // invalid_named_expression:
    //     | expression ':=' expression
    //     | NAME '=' bitwise_or !('=' | ':=' | ',')
    //     | !(list | tuple | genexp | 'True' | 'None' | 'False') bitwise_or '=' bitwise_or !('=' | ':=' | ',')
    public Object invalid_named_expression_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, INVALID_NAMED_EXPRESSION_ID)) {
            _res = (Object)cache.getResult(_mark, INVALID_NAMED_EXPRESSION_ID);
            level--;
            return (Object)_res;
        }
        { // expression ':=' expression
            debugMessageln("%d> invalid_named_expression[%d-%d]: %s", level, _mark, mark(), "expression ':=' expression");
            Token _literal;
            SSTNode a;
            SSTNode expression_var;
            if (
                (a = expression_rule()) != null  // expression
                &&
                (_literal = expect(53)) != null  // token=':='
                &&
                (expression_var = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d invalid_named_expression[%d-%d]: %s succeeded!", level, _mark, mark(), "expression ':=' expression");
                // TODO: node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "cannot use assignment expressions with %s" , _PyPegen_get_expr_name ( a ) )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , 'cannot use assignment expressions with %s' , _PyPegen_get_expr_name ( a ) ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "expression ':=' expression");
                cache.putResult(_mark, INVALID_NAMED_EXPRESSION_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_named_expression[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "expression ':=' expression");
        }
        { // NAME '=' bitwise_or !('=' | ':=' | ',')
            debugMessageln("%d> invalid_named_expression[%d-%d]: %s", level, _mark, mark(), "NAME '=' bitwise_or !('=' | ':=' | ',')");
            SSTNode a;
            Token b;
            SSTNode bitwise_or_var;
            if (
                (a = name_token()) != null  // NAME
                &&
                (b = expect(22)) != null  // token='='
                &&
                (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
                &&
                genLookahead__tmp_202_rule(false)
            )
            {
                debugMessageln("%d invalid_named_expression[%d-%d]: %s succeeded!", level, _mark, mark(), "NAME '=' bitwise_or !('=' | ':=' | ',')");
                // TODO: node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( b , "invalid syntax. Maybe you meant '==' or ':=' instead of '='?" )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( b , 'invalid syntax. Maybe you meant '==' or ':=' instead of '='?' ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "NAME '=' bitwise_or !('=' | ':=' | ',')");
                cache.putResult(_mark, INVALID_NAMED_EXPRESSION_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_named_expression[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "NAME '=' bitwise_or !('=' | ':=' | ',')");
        }
        { // !(list | tuple | genexp | 'True' | 'None' | 'False') bitwise_or '=' bitwise_or !('=' | ':=' | ',')
            debugMessageln("%d> invalid_named_expression[%d-%d]: %s", level, _mark, mark(), "!(list | tuple | genexp | 'True' | 'None' | 'False') bitwise_or '=' bitwise_or !('=' | ':=' | ',')");
            SSTNode a;
            Token b;
            SSTNode bitwise_or_var;
            if (
                genLookahead__tmp_203_rule(false)
                &&
                (a = bitwise_or_rule()) != null  // bitwise_or
                &&
                (b = expect(22)) != null  // token='='
                &&
                (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
                &&
                genLookahead__tmp_204_rule(false)
            )
            {
                debugMessageln("%d invalid_named_expression[%d-%d]: %s succeeded!", level, _mark, mark(), "!(list | tuple | genexp | 'True' | 'None' | 'False') bitwise_or '=' bitwise_or !('=' | ':=' | ',')");
                // TODO: node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( b , "cannot assign to %s here. Maybe you meant '==' instead of '='?" , _PyPegen_get_expr_name ( a ) )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( b , 'cannot assign to %s here. Maybe you meant '==' instead of '='?' , _PyPegen_get_expr_name ( a ) ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "!(list | tuple | genexp | 'True' | 'None' | 'False') bitwise_or '=' bitwise_or !('=' | ':=' | ',')");
                cache.putResult(_mark, INVALID_NAMED_EXPRESSION_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_named_expression[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "!(list | tuple | genexp | 'True' | 'None' | 'False') bitwise_or '=' bitwise_or !('=' | ':=' | ',')");
        }
        debugMessageln("Fail at %d: invalid_named_expression", _mark);
        _res = null;
        cache.putResult(_mark, INVALID_NAMED_EXPRESSION_ID, _res);
        level--;
        return (Object)_res;
    }

    // invalid_assignment:
    //     | invalid_ann_assign_target ':' expression
    //     | star_named_expression ',' star_named_expressions* ':' expression
    //     | expression ':' expression
    //     | ((star_targets '='))* star_expressions '='
    //     | ((star_targets '='))* yield_expr '='
    //     | star_expressions augassign (yield_expr | star_expressions)
    public Object invalid_assignment_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, INVALID_ASSIGNMENT_ID)) {
            _res = (Object)cache.getResult(_mark, INVALID_ASSIGNMENT_ID);
            level--;
            return (Object)_res;
        }
        { // invalid_ann_assign_target ':' expression
            debugMessageln("%d> invalid_assignment[%d-%d]: %s", level, _mark, mark(), "invalid_ann_assign_target ':' expression");
            Token _literal;
            SSTNode a;
            SSTNode expression_var;
            if (
                (a = invalid_ann_assign_target_rule()) != null  // invalid_ann_assign_target
                &&
                (_literal = expect(11)) != null  // token=':'
                &&
                (expression_var = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d invalid_assignment[%d-%d]: %s succeeded!", level, _mark, mark(), "invalid_ann_assign_target ':' expression");
                // TODO: node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "only single target (not %s) can be annotated" , _PyPegen_get_expr_name ( a ) )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , 'only single target (not %s) can be annotated' , _PyPegen_get_expr_name ( a ) ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "invalid_ann_assign_target ':' expression");
                cache.putResult(_mark, INVALID_ASSIGNMENT_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_assignment[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "invalid_ann_assign_target ':' expression");
        }
        { // star_named_expression ',' star_named_expressions* ':' expression
            debugMessageln("%d> invalid_assignment[%d-%d]: %s", level, _mark, mark(), "star_named_expression ',' star_named_expressions* ':' expression");
            Token _literal;
            Token _literal_1;
            SSTNode[] _loop0_205_var;
            SSTNode a;
            SSTNode expression_var;
            if (
                (a = star_named_expression_rule()) != null  // star_named_expression
                &&
                (_literal = expect(12)) != null  // token=','
                &&
                (_loop0_205_var = _loop0_205_rule()) != null  // star_named_expressions*
                &&
                (_literal_1 = expect(11)) != null  // token=':'
                &&
                (expression_var = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d invalid_assignment[%d-%d]: %s succeeded!", level, _mark, mark(), "star_named_expression ',' star_named_expressions* ':' expression");
                // TODO: node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "only single target (not tuple) can be annotated" )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , 'only single target (not tuple) can be annotated' ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "star_named_expression ',' star_named_expressions* ':' expression");
                cache.putResult(_mark, INVALID_ASSIGNMENT_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_assignment[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_named_expression ',' star_named_expressions* ':' expression");
        }
        { // expression ':' expression
            debugMessageln("%d> invalid_assignment[%d-%d]: %s", level, _mark, mark(), "expression ':' expression");
            Token _literal;
            SSTNode a;
            SSTNode expression_var;
            if (
                (a = expression_rule()) != null  // expression
                &&
                (_literal = expect(11)) != null  // token=':'
                &&
                (expression_var = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d invalid_assignment[%d-%d]: %s succeeded!", level, _mark, mark(), "expression ':' expression");
                // TODO: node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "illegal target for annotation" )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , 'illegal target for annotation' ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "expression ':' expression");
                cache.putResult(_mark, INVALID_ASSIGNMENT_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_assignment[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "expression ':' expression");
        }
        { // ((star_targets '='))* star_expressions '='
            debugMessageln("%d> invalid_assignment[%d-%d]: %s", level, _mark, mark(), "((star_targets '='))* star_expressions '='");
            Token _literal;
            SSTNode[] _loop0_206_var;
            SSTNode a;
            if (
                (_loop0_206_var = _loop0_206_rule()) != null  // ((star_targets '='))*
                &&
                (a = star_expressions_rule()) != null  // star_expressions
                &&
                (_literal = expect(22)) != null  // token='='
            )
            {
                debugMessageln("%d invalid_assignment[%d-%d]: %s succeeded!", level, _mark, mark(), "((star_targets '='))* star_expressions '='");
                // TODO: node.action: RAISE_SYNTAX_ERROR_INVALID_TARGET ( STAR_TARGETS , a )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR_INVALID_TARGET ( STAR_TARGETS , a ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "((star_targets '='))* star_expressions '='");
                cache.putResult(_mark, INVALID_ASSIGNMENT_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_assignment[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "((star_targets '='))* star_expressions '='");
        }
        { // ((star_targets '='))* yield_expr '='
            debugMessageln("%d> invalid_assignment[%d-%d]: %s", level, _mark, mark(), "((star_targets '='))* yield_expr '='");
            Token _literal;
            SSTNode[] _loop0_207_var;
            SSTNode a;
            if (
                (_loop0_207_var = _loop0_207_rule()) != null  // ((star_targets '='))*
                &&
                (a = yield_expr_rule()) != null  // yield_expr
                &&
                (_literal = expect(22)) != null  // token='='
            )
            {
                debugMessageln("%d invalid_assignment[%d-%d]: %s succeeded!", level, _mark, mark(), "((star_targets '='))* yield_expr '='");
                // TODO: node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "assignment to yield expression not possible" )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , 'assignment to yield expression not possible' ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "((star_targets '='))* yield_expr '='");
                cache.putResult(_mark, INVALID_ASSIGNMENT_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_assignment[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "((star_targets '='))* yield_expr '='");
        }
        { // star_expressions augassign (yield_expr | star_expressions)
            debugMessageln("%d> invalid_assignment[%d-%d]: %s", level, _mark, mark(), "star_expressions augassign (yield_expr | star_expressions)");
            Object _tmp_208_var;
            SSTNode a;
            SSTNode[] augassign_var;
            if (
                (a = star_expressions_rule()) != null  // star_expressions
                &&
                (augassign_var = augassign_rule()) != null  // augassign
                &&
                (_tmp_208_var = _tmp_208_rule()) != null  // yield_expr | star_expressions
            )
            {
                debugMessageln("%d invalid_assignment[%d-%d]: %s succeeded!", level, _mark, mark(), "star_expressions augassign (yield_expr | star_expressions)");
                // TODO: node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "'%s' is an illegal expression for augmented assignment" , _PyPegen_get_expr_name ( a ) )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , ''%s' is an illegal expression for augmented assignment' , _PyPegen_get_expr_name ( a ) ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "star_expressions augassign (yield_expr | star_expressions)");
                cache.putResult(_mark, INVALID_ASSIGNMENT_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_assignment[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_expressions augassign (yield_expr | star_expressions)");
        }
        debugMessageln("Fail at %d: invalid_assignment", _mark);
        _res = null;
        cache.putResult(_mark, INVALID_ASSIGNMENT_ID, _res);
        level--;
        return (Object)_res;
    }

    // invalid_ann_assign_target: list | tuple | '(' invalid_ann_assign_target ')'
    public SSTNode invalid_ann_assign_target_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, INVALID_ANN_ASSIGN_TARGET_ID)) {
            _res = (SSTNode)cache.getResult(_mark, INVALID_ANN_ASSIGN_TARGET_ID);
            level--;
            return (SSTNode)_res;
        }
        { // list
            debugMessageln("%d> invalid_ann_assign_target[%d-%d]: %s", level, _mark, mark(), "list");
            SSTNode list_var;
            if (
                (list_var = list_rule()) != null  // list
            )
            {
                debugMessageln("%d invalid_ann_assign_target[%d-%d]: %s succeeded!", level, _mark, mark(), "list");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "list");
                _res = list_var;
                cache.putResult(_mark, INVALID_ANN_ASSIGN_TARGET_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_ann_assign_target[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "list");
        }
        { // tuple
            debugMessageln("%d> invalid_ann_assign_target[%d-%d]: %s", level, _mark, mark(), "tuple");
            SSTNode tuple_var;
            if (
                (tuple_var = tuple_rule()) != null  // tuple
            )
            {
                debugMessageln("%d invalid_ann_assign_target[%d-%d]: %s succeeded!", level, _mark, mark(), "tuple");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "tuple");
                _res = tuple_var;
                cache.putResult(_mark, INVALID_ANN_ASSIGN_TARGET_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_ann_assign_target[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "tuple");
        }
        { // '(' invalid_ann_assign_target ')'
            debugMessageln("%d> invalid_ann_assign_target[%d-%d]: %s", level, _mark, mark(), "'(' invalid_ann_assign_target ')'");
            Token _literal;
            Token _literal_1;
            SSTNode a;
            if (
                (_literal = expect(7)) != null  // token='('
                &&
                (a = invalid_ann_assign_target_rule()) != null  // invalid_ann_assign_target
                &&
                (_literal_1 = expect(8)) != null  // token=')'
            )
            {
                debugMessageln("%d invalid_ann_assign_target[%d-%d]: %s succeeded!", level, _mark, mark(), "'(' invalid_ann_assign_target ')'");
                _res = a;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'(' invalid_ann_assign_target ')'");
                cache.putResult(_mark, INVALID_ANN_ASSIGN_TARGET_ID, _res);
                level--;
                return (SSTNode)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_ann_assign_target[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'(' invalid_ann_assign_target ')'");
        }
        debugMessageln("Fail at %d: invalid_ann_assign_target", _mark);
        _res = null;
        cache.putResult(_mark, INVALID_ANN_ASSIGN_TARGET_ID, _res);
        level--;
        return (SSTNode)_res;
    }

    // invalid_del_stmt: 'del' star_expressions
    public Object invalid_del_stmt_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, INVALID_DEL_STMT_ID)) {
            _res = (Object)cache.getResult(_mark, INVALID_DEL_STMT_ID);
            level--;
            return (Object)_res;
        }
        { // 'del' star_expressions
            debugMessageln("%d> invalid_del_stmt[%d-%d]: %s", level, _mark, mark(), "'del' star_expressions");
            Token _keyword;
            SSTNode a;
            if (
                (_keyword = expect(503)) != null  // token='del'
                &&
                (a = star_expressions_rule()) != null  // star_expressions
            )
            {
                debugMessageln("%d invalid_del_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "'del' star_expressions");
                // TODO: node.action: RAISE_SYNTAX_ERROR_INVALID_TARGET ( DEL_TARGETS , a )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR_INVALID_TARGET ( DEL_TARGETS , a ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'del' star_expressions");
                cache.putResult(_mark, INVALID_DEL_STMT_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_del_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'del' star_expressions");
        }
        debugMessageln("Fail at %d: invalid_del_stmt", _mark);
        _res = null;
        cache.putResult(_mark, INVALID_DEL_STMT_ID, _res);
        level--;
        return (Object)_res;
    }

    // invalid_block: NEWLINE !INDENT
    public Object invalid_block_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, INVALID_BLOCK_ID)) {
            _res = (Object)cache.getResult(_mark, INVALID_BLOCK_ID);
            level--;
            return (Object)_res;
        }
        { // NEWLINE !INDENT
            debugMessageln("%d> invalid_block[%d-%d]: %s", level, _mark, mark(), "NEWLINE !INDENT");
            Token newline_var;
            if (
                (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
                &&
                genLookahead_expect(false, Token.Kind.INDENT)  // token=INDENT
            )
            {
                debugMessageln("%d invalid_block[%d-%d]: %s succeeded!", level, _mark, mark(), "NEWLINE !INDENT");
                // TODO: node.action: RAISE_INDENTATION_ERROR ( "expected an indented block" )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_INDENTATION_ERROR ( 'expected an indented block' ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "NEWLINE !INDENT");
                cache.putResult(_mark, INVALID_BLOCK_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_block[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "NEWLINE !INDENT");
        }
        debugMessageln("Fail at %d: invalid_block", _mark);
        _res = null;
        cache.putResult(_mark, INVALID_BLOCK_ID, _res);
        level--;
        return (Object)_res;
    }

    // Left-recursive
    // invalid_primary: primary '{'
    public Object invalid_primary_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        { // primary '{'
            debugMessageln("%d> invalid_primary[%d-%d]: %s", level, _mark, mark(), "primary '{'");
            Token a;
            SSTNode primary_var;
            if (
                (primary_var = primary_rule()) != null  // primary
                &&
                (a = expect(25)) != null  // token='{'
            )
            {
                debugMessageln("%d invalid_primary[%d-%d]: %s succeeded!", level, _mark, mark(), "primary '{'");
                // TODO: node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "invalid syntax" )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , 'invalid syntax' ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "primary '{'");
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_primary[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "primary '{'");
        }
        debugMessageln("Fail at %d: invalid_primary", _mark);
        _res = null;
        level--;
        return (Object)_res;
    }

    // invalid_comprehension:
    //     | ('[' | '(' | '{') starred_expression for_if_clauses
    //     | ('[' | '{') star_named_expression ',' star_named_expressions? for_if_clauses
    public Object invalid_comprehension_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, INVALID_COMPREHENSION_ID)) {
            _res = (Object)cache.getResult(_mark, INVALID_COMPREHENSION_ID);
            level--;
            return (Object)_res;
        }
        { // ('[' | '(' | '{') starred_expression for_if_clauses
            debugMessageln("%d> invalid_comprehension[%d-%d]: %s", level, _mark, mark(), "('[' | '(' | '{') starred_expression for_if_clauses");
            Object _tmp_209_var;
            SSTNode a;
            ForComprehensionSSTNode[] for_if_clauses_var;
            if (
                (_tmp_209_var = _tmp_209_rule()) != null  // '[' | '(' | '{'
                &&
                (a = starred_expression_rule()) != null  // starred_expression
                &&
                (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            )
            {
                debugMessageln("%d invalid_comprehension[%d-%d]: %s succeeded!", level, _mark, mark(), "('[' | '(' | '{') starred_expression for_if_clauses");
                // TODO: node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "iterable unpacking cannot be used in comprehension" )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , 'iterable unpacking cannot be used in comprehension' ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "('[' | '(' | '{') starred_expression for_if_clauses");
                cache.putResult(_mark, INVALID_COMPREHENSION_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_comprehension[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "('[' | '(' | '{') starred_expression for_if_clauses");
        }
        { // ('[' | '{') star_named_expression ',' star_named_expressions? for_if_clauses
            debugMessageln("%d> invalid_comprehension[%d-%d]: %s", level, _mark, mark(), "('[' | '{') star_named_expression ',' star_named_expressions? for_if_clauses");
            Token _literal;
            Object _opt_var;
            Object _tmp_210_var;
            SSTNode a;
            ForComprehensionSSTNode[] for_if_clauses_var;
            if (
                (_tmp_210_var = _tmp_210_rule()) != null  // '[' | '{'
                &&
                (a = star_named_expression_rule()) != null  // star_named_expression
                &&
                (_literal = expect(12)) != null  // token=','
                &&
                ((_opt_var = _tmp_211_rule()) != null || true)  // star_named_expressions?
                &&
                (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            )
            {
                debugMessageln("%d invalid_comprehension[%d-%d]: %s succeeded!", level, _mark, mark(), "('[' | '{') star_named_expression ',' star_named_expressions? for_if_clauses");
                // TODO: node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "did you forget parentheses around the comprehension target?" )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , 'did you forget parentheses around the comprehension target?' ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "('[' | '{') star_named_expression ',' star_named_expressions? for_if_clauses");
                cache.putResult(_mark, INVALID_COMPREHENSION_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_comprehension[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "('[' | '{') star_named_expression ',' star_named_expressions? for_if_clauses");
        }
        debugMessageln("Fail at %d: invalid_comprehension", _mark);
        _res = null;
        cache.putResult(_mark, INVALID_COMPREHENSION_ID, _res);
        level--;
        return (Object)_res;
    }

    // invalid_dict_comprehension: '{' '**' bitwise_or for_if_clauses '}'
    public Object invalid_dict_comprehension_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, INVALID_DICT_COMPREHENSION_ID)) {
            _res = (Object)cache.getResult(_mark, INVALID_DICT_COMPREHENSION_ID);
            level--;
            return (Object)_res;
        }
        { // '{' '**' bitwise_or for_if_clauses '}'
            debugMessageln("%d> invalid_dict_comprehension[%d-%d]: %s", level, _mark, mark(), "'{' '**' bitwise_or for_if_clauses '}'");
            Token _literal;
            Token _literal_1;
            Token a;
            SSTNode bitwise_or_var;
            ForComprehensionSSTNode[] for_if_clauses_var;
            if (
                (_literal = expect(25)) != null  // token='{'
                &&
                (a = expect(35)) != null  // token='**'
                &&
                (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
                &&
                (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
                &&
                (_literal_1 = expect(26)) != null  // token='}'
            )
            {
                debugMessageln("%d invalid_dict_comprehension[%d-%d]: %s succeeded!", level, _mark, mark(), "'{' '**' bitwise_or for_if_clauses '}'");
                // TODO: node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "dict unpacking cannot be used in dict comprehension" )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , 'dict unpacking cannot be used in dict comprehension' ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'{' '**' bitwise_or for_if_clauses '}'");
                cache.putResult(_mark, INVALID_DICT_COMPREHENSION_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_dict_comprehension[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'{' '**' bitwise_or for_if_clauses '}'");
        }
        debugMessageln("Fail at %d: invalid_dict_comprehension", _mark);
        _res = null;
        cache.putResult(_mark, INVALID_DICT_COMPREHENSION_ID, _res);
        level--;
        return (Object)_res;
    }

    // invalid_parameters: param_no_default* invalid_parameters_helper param_no_default
    public Object invalid_parameters_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, INVALID_PARAMETERS_ID)) {
            _res = (Object)cache.getResult(_mark, INVALID_PARAMETERS_ID);
            level--;
            return (Object)_res;
        }
        { // param_no_default* invalid_parameters_helper param_no_default
            debugMessageln("%d> invalid_parameters[%d-%d]: %s", level, _mark, mark(), "param_no_default* invalid_parameters_helper param_no_default");
            SSTNode[] _loop0_212_var;
            Object invalid_parameters_helper_var;
            SSTNode param_no_default_var;
            if (
                (_loop0_212_var = _loop0_212_rule()) != null  // param_no_default*
                &&
                (invalid_parameters_helper_var = invalid_parameters_helper_rule()) != null  // invalid_parameters_helper
                &&
                (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            )
            {
                debugMessageln("%d invalid_parameters[%d-%d]: %s succeeded!", level, _mark, mark(), "param_no_default* invalid_parameters_helper param_no_default");
                // TODO: node.action: RAISE_SYNTAX_ERROR ( "non-default argument follows default argument" )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR ( 'non-default argument follows default argument' ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "param_no_default* invalid_parameters_helper param_no_default");
                cache.putResult(_mark, INVALID_PARAMETERS_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_parameters[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "param_no_default* invalid_parameters_helper param_no_default");
        }
        debugMessageln("Fail at %d: invalid_parameters", _mark);
        _res = null;
        cache.putResult(_mark, INVALID_PARAMETERS_ID, _res);
        level--;
        return (Object)_res;
    }

    // invalid_parameters_helper: slash_with_default | param_with_default+
    public Object invalid_parameters_helper_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, INVALID_PARAMETERS_HELPER_ID)) {
            _res = (Object)cache.getResult(_mark, INVALID_PARAMETERS_HELPER_ID);
            level--;
            return (Object)_res;
        }
        { // slash_with_default
            debugMessageln("%d> invalid_parameters_helper[%d-%d]: %s", level, _mark, mark(), "slash_with_default");
            SSTNode[] a;
            if (
                (a = slash_with_default_rule()) != null  // slash_with_default
            )
            {
                debugMessageln("%d invalid_parameters_helper[%d-%d]: %s succeeded!", level, _mark, mark(), "slash_with_default");
                _res = this.singletonSequence(a);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "slash_with_default");
                cache.putResult(_mark, INVALID_PARAMETERS_HELPER_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_parameters_helper[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "slash_with_default");
        }
        { // param_with_default+
            debugMessageln("%d> invalid_parameters_helper[%d-%d]: %s", level, _mark, mark(), "param_with_default+");
            SSTNode[] _loop1_213_var;
            if (
                (_loop1_213_var = _loop1_213_rule()) != null  // param_with_default+
            )
            {
                debugMessageln("%d invalid_parameters_helper[%d-%d]: %s succeeded!", level, _mark, mark(), "param_with_default+");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "param_with_default+");
                _res = _loop1_213_var;
                cache.putResult(_mark, INVALID_PARAMETERS_HELPER_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_parameters_helper[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "param_with_default+");
        }
        debugMessageln("Fail at %d: invalid_parameters_helper", _mark);
        _res = null;
        cache.putResult(_mark, INVALID_PARAMETERS_HELPER_ID, _res);
        level--;
        return (Object)_res;
    }

    // invalid_lambda_parameters:
    //     | lambda_param_no_default* invalid_lambda_parameters_helper lambda_param_no_default
    public Object invalid_lambda_parameters_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, INVALID_LAMBDA_PARAMETERS_ID)) {
            _res = (Object)cache.getResult(_mark, INVALID_LAMBDA_PARAMETERS_ID);
            level--;
            return (Object)_res;
        }
        { // lambda_param_no_default* invalid_lambda_parameters_helper lambda_param_no_default
            debugMessageln("%d> invalid_lambda_parameters[%d-%d]: %s", level, _mark, mark(), "lambda_param_no_default* invalid_lambda_parameters_helper lambda_param_no_default");
            SSTNode[] _loop0_214_var;
            Object invalid_lambda_parameters_helper_var;
            SSTNode lambda_param_no_default_var;
            if (
                (_loop0_214_var = _loop0_214_rule()) != null  // lambda_param_no_default*
                &&
                (invalid_lambda_parameters_helper_var = invalid_lambda_parameters_helper_rule()) != null  // invalid_lambda_parameters_helper
                &&
                (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            )
            {
                debugMessageln("%d invalid_lambda_parameters[%d-%d]: %s succeeded!", level, _mark, mark(), "lambda_param_no_default* invalid_lambda_parameters_helper lambda_param_no_default");
                // TODO: node.action: RAISE_SYNTAX_ERROR ( "non-default argument follows default argument" )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR ( 'non-default argument follows default argument' ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "lambda_param_no_default* invalid_lambda_parameters_helper lambda_param_no_default");
                cache.putResult(_mark, INVALID_LAMBDA_PARAMETERS_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_lambda_parameters[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_param_no_default* invalid_lambda_parameters_helper lambda_param_no_default");
        }
        debugMessageln("Fail at %d: invalid_lambda_parameters", _mark);
        _res = null;
        cache.putResult(_mark, INVALID_LAMBDA_PARAMETERS_ID, _res);
        level--;
        return (Object)_res;
    }

    // invalid_lambda_parameters_helper:
    //     | lambda_slash_with_default
    //     | lambda_param_with_default+
    public Object invalid_lambda_parameters_helper_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, INVALID_LAMBDA_PARAMETERS_HELPER_ID)) {
            _res = (Object)cache.getResult(_mark, INVALID_LAMBDA_PARAMETERS_HELPER_ID);
            level--;
            return (Object)_res;
        }
        { // lambda_slash_with_default
            debugMessageln("%d> invalid_lambda_parameters_helper[%d-%d]: %s", level, _mark, mark(), "lambda_slash_with_default");
            SSTNode[] a;
            if (
                (a = lambda_slash_with_default_rule()) != null  // lambda_slash_with_default
            )
            {
                debugMessageln("%d invalid_lambda_parameters_helper[%d-%d]: %s succeeded!", level, _mark, mark(), "lambda_slash_with_default");
                _res = this.singletonSequence(a);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "lambda_slash_with_default");
                cache.putResult(_mark, INVALID_LAMBDA_PARAMETERS_HELPER_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_lambda_parameters_helper[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_slash_with_default");
        }
        { // lambda_param_with_default+
            debugMessageln("%d> invalid_lambda_parameters_helper[%d-%d]: %s", level, _mark, mark(), "lambda_param_with_default+");
            SSTNode[] _loop1_215_var;
            if (
                (_loop1_215_var = _loop1_215_rule()) != null  // lambda_param_with_default+
            )
            {
                debugMessageln("%d invalid_lambda_parameters_helper[%d-%d]: %s succeeded!", level, _mark, mark(), "lambda_param_with_default+");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "lambda_param_with_default+");
                _res = _loop1_215_var;
                cache.putResult(_mark, INVALID_LAMBDA_PARAMETERS_HELPER_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_lambda_parameters_helper[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_param_with_default+");
        }
        debugMessageln("Fail at %d: invalid_lambda_parameters_helper", _mark);
        _res = null;
        cache.putResult(_mark, INVALID_LAMBDA_PARAMETERS_HELPER_ID, _res);
        level--;
        return (Object)_res;
    }

    // invalid_star_etc: '*' (')' | ',' (')' | '**')) | '*' ',' TYPE_COMMENT
    public Object invalid_star_etc_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, INVALID_STAR_ETC_ID)) {
            _res = (Object)cache.getResult(_mark, INVALID_STAR_ETC_ID);
            level--;
            return (Object)_res;
        }
        { // '*' (')' | ',' (')' | '**'))
            debugMessageln("%d> invalid_star_etc[%d-%d]: %s", level, _mark, mark(), "'*' (')' | ',' (')' | '**'))");
            Token _literal;
            Object _tmp_216_var;
            if (
                (_literal = expect(16)) != null  // token='*'
                &&
                (_tmp_216_var = _tmp_216_rule()) != null  // ')' | ',' (')' | '**')
            )
            {
                debugMessageln("%d invalid_star_etc[%d-%d]: %s succeeded!", level, _mark, mark(), "'*' (')' | ',' (')' | '**'))");
                // TODO: node.action: RAISE_SYNTAX_ERROR ( "named arguments must follow bare *" )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR ( 'named arguments must follow bare *' ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'*' (')' | ',' (')' | '**'))");
                cache.putResult(_mark, INVALID_STAR_ETC_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_star_etc[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'*' (')' | ',' (')' | '**'))");
        }
        { // '*' ',' TYPE_COMMENT
            debugMessageln("%d> invalid_star_etc[%d-%d]: %s", level, _mark, mark(), "'*' ',' TYPE_COMMENT");
            Token _literal;
            Token _literal_1;
            Token type_comment_var;
            if (
                (_literal = expect(16)) != null  // token='*'
                &&
                (_literal_1 = expect(12)) != null  // token=','
                &&
                (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            )
            {
                debugMessageln("%d invalid_star_etc[%d-%d]: %s succeeded!", level, _mark, mark(), "'*' ',' TYPE_COMMENT");
                // TODO: node.action: RAISE_SYNTAX_ERROR ( "bare * has associated type comment" )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR ( 'bare * has associated type comment' ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'*' ',' TYPE_COMMENT");
                cache.putResult(_mark, INVALID_STAR_ETC_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_star_etc[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'*' ',' TYPE_COMMENT");
        }
        debugMessageln("Fail at %d: invalid_star_etc", _mark);
        _res = null;
        cache.putResult(_mark, INVALID_STAR_ETC_ID, _res);
        level--;
        return (Object)_res;
    }

    // invalid_lambda_star_etc: '*' (':' | ',' (':' | '**'))
    public Object invalid_lambda_star_etc_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, INVALID_LAMBDA_STAR_ETC_ID)) {
            _res = (Object)cache.getResult(_mark, INVALID_LAMBDA_STAR_ETC_ID);
            level--;
            return (Object)_res;
        }
        { // '*' (':' | ',' (':' | '**'))
            debugMessageln("%d> invalid_lambda_star_etc[%d-%d]: %s", level, _mark, mark(), "'*' (':' | ',' (':' | '**'))");
            Token _literal;
            Object _tmp_217_var;
            if (
                (_literal = expect(16)) != null  // token='*'
                &&
                (_tmp_217_var = _tmp_217_rule()) != null  // ':' | ',' (':' | '**')
            )
            {
                debugMessageln("%d invalid_lambda_star_etc[%d-%d]: %s succeeded!", level, _mark, mark(), "'*' (':' | ',' (':' | '**'))");
                // TODO: node.action: RAISE_SYNTAX_ERROR ( "named arguments must follow bare *" )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR ( 'named arguments must follow bare *' ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'*' (':' | ',' (':' | '**'))");
                cache.putResult(_mark, INVALID_LAMBDA_STAR_ETC_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_lambda_star_etc[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'*' (':' | ',' (':' | '**'))");
        }
        debugMessageln("Fail at %d: invalid_lambda_star_etc", _mark);
        _res = null;
        cache.putResult(_mark, INVALID_LAMBDA_STAR_ETC_ID, _res);
        level--;
        return (Object)_res;
    }

    // invalid_double_type_comments: TYPE_COMMENT NEWLINE TYPE_COMMENT NEWLINE INDENT
    public Object invalid_double_type_comments_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, INVALID_DOUBLE_TYPE_COMMENTS_ID)) {
            _res = (Object)cache.getResult(_mark, INVALID_DOUBLE_TYPE_COMMENTS_ID);
            level--;
            return (Object)_res;
        }
        { // TYPE_COMMENT NEWLINE TYPE_COMMENT NEWLINE INDENT
            debugMessageln("%d> invalid_double_type_comments[%d-%d]: %s", level, _mark, mark(), "TYPE_COMMENT NEWLINE TYPE_COMMENT NEWLINE INDENT");
            Token indent_var;
            Token newline_var;
            Token newline_var_1;
            Token type_comment_var;
            Token type_comment_var_1;
            if (
                (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
                &&
                (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
                &&
                (type_comment_var_1 = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
                &&
                (newline_var_1 = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
                &&
                (indent_var = expect(Token.Kind.INDENT)) != null  // token='INDENT'
            )
            {
                debugMessageln("%d invalid_double_type_comments[%d-%d]: %s succeeded!", level, _mark, mark(), "TYPE_COMMENT NEWLINE TYPE_COMMENT NEWLINE INDENT");
                // TODO: node.action: RAISE_SYNTAX_ERROR ( "Cannot have two type comments on def" )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR ( 'Cannot have two type comments on def' ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "TYPE_COMMENT NEWLINE TYPE_COMMENT NEWLINE INDENT");
                cache.putResult(_mark, INVALID_DOUBLE_TYPE_COMMENTS_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_double_type_comments[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "TYPE_COMMENT NEWLINE TYPE_COMMENT NEWLINE INDENT");
        }
        debugMessageln("Fail at %d: invalid_double_type_comments", _mark);
        _res = null;
        cache.putResult(_mark, INVALID_DOUBLE_TYPE_COMMENTS_ID, _res);
        level--;
        return (Object)_res;
    }

    // invalid_with_item: expression 'as' expression &(',' | ')' | ':')
    public Object invalid_with_item_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, INVALID_WITH_ITEM_ID)) {
            _res = (Object)cache.getResult(_mark, INVALID_WITH_ITEM_ID);
            level--;
            return (Object)_res;
        }
        { // expression 'as' expression &(',' | ')' | ':')
            debugMessageln("%d> invalid_with_item[%d-%d]: %s", level, _mark, mark(), "expression 'as' expression &(',' | ')' | ':')");
            Token _keyword;
            SSTNode a;
            SSTNode expression_var;
            if (
                (expression_var = expression_rule()) != null  // expression
                &&
                (_keyword = expect(520)) != null  // token='as'
                &&
                (a = expression_rule()) != null  // expression
                &&
                genLookahead__tmp_218_rule(true)
            )
            {
                debugMessageln("%d invalid_with_item[%d-%d]: %s succeeded!", level, _mark, mark(), "expression 'as' expression &(',' | ')' | ':')");
                // TODO: node.action: RAISE_SYNTAX_ERROR_INVALID_TARGET ( STAR_TARGETS , a )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR_INVALID_TARGET ( STAR_TARGETS , a ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "expression 'as' expression &(',' | ')' | ':')");
                cache.putResult(_mark, INVALID_WITH_ITEM_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_with_item[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "expression 'as' expression &(',' | ')' | ':')");
        }
        debugMessageln("Fail at %d: invalid_with_item", _mark);
        _res = null;
        cache.putResult(_mark, INVALID_WITH_ITEM_ID, _res);
        level--;
        return (Object)_res;
    }

    // invalid_for_target: ASYNC? 'for' star_expressions
    public Object invalid_for_target_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, INVALID_FOR_TARGET_ID)) {
            _res = (Object)cache.getResult(_mark, INVALID_FOR_TARGET_ID);
            level--;
            return (Object)_res;
        }
        { // ASYNC? 'for' star_expressions
            debugMessageln("%d> invalid_for_target[%d-%d]: %s", level, _mark, mark(), "ASYNC? 'for' star_expressions");
            Token _keyword;
            Object _opt_var;
            SSTNode a;
            if (
                ((_opt_var = expect(Token.Kind.ASYNC)) != null || true)  // ASYNC?
                &&
                (_keyword = expect(517)) != null  // token='for'
                &&
                (a = star_expressions_rule()) != null  // star_expressions
            )
            {
                debugMessageln("%d invalid_for_target[%d-%d]: %s succeeded!", level, _mark, mark(), "ASYNC? 'for' star_expressions");
                // TODO: node.action: RAISE_SYNTAX_ERROR_INVALID_TARGET ( FOR_TARGETS , a )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR_INVALID_TARGET ( FOR_TARGETS , a ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "ASYNC? 'for' star_expressions");
                cache.putResult(_mark, INVALID_FOR_TARGET_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_for_target[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "ASYNC? 'for' star_expressions");
        }
        debugMessageln("Fail at %d: invalid_for_target", _mark);
        _res = null;
        cache.putResult(_mark, INVALID_FOR_TARGET_ID, _res);
        level--;
        return (Object)_res;
    }

    // invalid_group: '(' starred_expression ')' | '(' '**' expression ')'
    public Object invalid_group_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, INVALID_GROUP_ID)) {
            _res = (Object)cache.getResult(_mark, INVALID_GROUP_ID);
            level--;
            return (Object)_res;
        }
        { // '(' starred_expression ')'
            debugMessageln("%d> invalid_group[%d-%d]: %s", level, _mark, mark(), "'(' starred_expression ')'");
            Token _literal;
            Token _literal_1;
            SSTNode a;
            if (
                (_literal = expect(7)) != null  // token='('
                &&
                (a = starred_expression_rule()) != null  // starred_expression
                &&
                (_literal_1 = expect(8)) != null  // token=')'
            )
            {
                debugMessageln("%d invalid_group[%d-%d]: %s succeeded!", level, _mark, mark(), "'(' starred_expression ')'");
                // TODO: node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "cannot use starred expression here" )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , 'cannot use starred expression here' ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'(' starred_expression ')'");
                cache.putResult(_mark, INVALID_GROUP_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_group[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'(' starred_expression ')'");
        }
        { // '(' '**' expression ')'
            debugMessageln("%d> invalid_group[%d-%d]: %s", level, _mark, mark(), "'(' '**' expression ')'");
            Token _literal;
            Token _literal_1;
            Token a;
            SSTNode expression_var;
            if (
                (_literal = expect(7)) != null  // token='('
                &&
                (a = expect(35)) != null  // token='**'
                &&
                (expression_var = expression_rule()) != null  // expression
                &&
                (_literal_1 = expect(8)) != null  // token=')'
            )
            {
                debugMessageln("%d invalid_group[%d-%d]: %s succeeded!", level, _mark, mark(), "'(' '**' expression ')'");
                // TODO: node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "cannot use double starred expression here" )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , 'cannot use double starred expression here' ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'(' '**' expression ')'");
                cache.putResult(_mark, INVALID_GROUP_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_group[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'(' '**' expression ')'");
        }
        debugMessageln("Fail at %d: invalid_group", _mark);
        _res = null;
        cache.putResult(_mark, INVALID_GROUP_ID, _res);
        level--;
        return (Object)_res;
    }

    // invalid_import_from_targets: import_from_as_names ','
    public Object invalid_import_from_targets_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, INVALID_IMPORT_FROM_TARGETS_ID)) {
            _res = (Object)cache.getResult(_mark, INVALID_IMPORT_FROM_TARGETS_ID);
            level--;
            return (Object)_res;
        }
        { // import_from_as_names ','
            debugMessageln("%d> invalid_import_from_targets[%d-%d]: %s", level, _mark, mark(), "import_from_as_names ','");
            Token _literal;
            SSTNode[] import_from_as_names_var;
            if (
                (import_from_as_names_var = import_from_as_names_rule()) != null  // import_from_as_names
                &&
                (_literal = expect(12)) != null  // token=','
            )
            {
                debugMessageln("%d invalid_import_from_targets[%d-%d]: %s succeeded!", level, _mark, mark(), "import_from_as_names ','");
                // TODO: node.action: RAISE_SYNTAX_ERROR ( "trailing comma not allowed without surrounding parentheses" )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR ( 'trailing comma not allowed without surrounding parentheses' ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "import_from_as_names ','");
                cache.putResult(_mark, INVALID_IMPORT_FROM_TARGETS_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_import_from_targets[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "import_from_as_names ','");
        }
        debugMessageln("Fail at %d: invalid_import_from_targets", _mark);
        _res = null;
        cache.putResult(_mark, INVALID_IMPORT_FROM_TARGETS_ID, _res);
        level--;
        return (Object)_res;
    }

    // invalid_with_stmt:
    //     | ASYNC? 'with' ','.(expression ['as' star_target])+ &&':'
    //     | ASYNC? 'with' '(' ','.(expressions ['as' star_target])+ ','? ')' &&':'
    public Object invalid_with_stmt_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, INVALID_WITH_STMT_ID)) {
            _res = (Object)cache.getResult(_mark, INVALID_WITH_STMT_ID);
            level--;
            return (Object)_res;
        }
        { // ASYNC? 'with' ','.(expression ['as' star_target])+ &&':'
            debugMessageln("%d> invalid_with_stmt[%d-%d]: %s", level, _mark, mark(), "ASYNC? 'with' ','.(expression ['as' star_target])+ &&':'");
            SSTNode[] _gather_220_var;
            Token _keyword;
            Token _literal;
            Object _opt_var;
            if (
                ((_opt_var = _tmp_219_rule()) != null || true)  // ASYNC?
                &&
                (_keyword = expect(519)) != null  // token='with'
                &&
                (_gather_220_var = _gather_220_rule()) != null  // ','.(expression ['as' star_target])+
                &&
                (_literal = expect_forced_token(11, ":")) != null  // forced_token=':'
            )
            {
                debugMessageln("%d invalid_with_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "ASYNC? 'with' ','.(expression ['as' star_target])+ &&':'");
                debugMessageln("Hit without action [%d:%d]: %s", _mark, mark(), "ASYNC? 'with' ','.(expression ['as' star_target])+ &&':'");
                _res = dummyName(_opt_var, _keyword, _gather_220_var, _literal);
                cache.putResult(_mark, INVALID_WITH_STMT_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_with_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "ASYNC? 'with' ','.(expression ['as' star_target])+ &&':'");
        }
        { // ASYNC? 'with' '(' ','.(expressions ['as' star_target])+ ','? ')' &&':'
            debugMessageln("%d> invalid_with_stmt[%d-%d]: %s", level, _mark, mark(), "ASYNC? 'with' '(' ','.(expressions ['as' star_target])+ ','? ')' &&':'");
            SSTNode[] _gather_223_var;
            Token _keyword;
            Token _literal;
            Token _literal_1;
            Token _literal_2;
            Object _opt_var;
            Object _opt_var_1;
            if (
                ((_opt_var = _tmp_222_rule()) != null || true)  // ASYNC?
                &&
                (_keyword = expect(519)) != null  // token='with'
                &&
                (_literal = expect(7)) != null  // token='('
                &&
                (_gather_223_var = _gather_223_rule()) != null  // ','.(expressions ['as' star_target])+
                &&
                ((_opt_var_1 = expect(12)) != null || true)  // ','?
                &&
                (_literal_1 = expect(8)) != null  // token=')'
                &&
                (_literal_2 = expect_forced_token(11, ":")) != null  // forced_token=':'
            )
            {
                debugMessageln("%d invalid_with_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "ASYNC? 'with' '(' ','.(expressions ['as' star_target])+ ','? ')' &&':'");
                debugMessageln("Hit without action [%d:%d]: %s", _mark, mark(), "ASYNC? 'with' '(' ','.(expressions ['as' star_target])+ ','? ')' &&':'");
                _res = dummyName(_opt_var, _keyword, _literal, _gather_223_var, _opt_var_1, _literal_1, _literal_2);
                cache.putResult(_mark, INVALID_WITH_STMT_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_with_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "ASYNC? 'with' '(' ','.(expressions ['as' star_target])+ ','? ')' &&':'");
        }
        debugMessageln("Fail at %d: invalid_with_stmt", _mark);
        _res = null;
        cache.putResult(_mark, INVALID_WITH_STMT_ID, _res);
        level--;
        return (Object)_res;
    }

    // invalid_except_block:
    //     | 'except' expression ',' expressions ['as' NAME] ':'
    //     | 'except' expression ['as' NAME] &&':'
    //     | 'except' &&':'
    public Object invalid_except_block_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, INVALID_EXCEPT_BLOCK_ID)) {
            _res = (Object)cache.getResult(_mark, INVALID_EXCEPT_BLOCK_ID);
            level--;
            return (Object)_res;
        }
        { // 'except' expression ',' expressions ['as' NAME] ':'
            debugMessageln("%d> invalid_except_block[%d-%d]: %s", level, _mark, mark(), "'except' expression ',' expressions ['as' NAME] ':'");
            Token _keyword;
            Token _literal;
            Token _literal_1;
            Object _opt_var;
            SSTNode a;
            SSTNode expressions_var;
            if (
                (_keyword = expect(521)) != null  // token='except'
                &&
                (a = expression_rule()) != null  // expression
                &&
                (_literal = expect(12)) != null  // token=','
                &&
                (expressions_var = expressions_rule()) != null  // expressions
                &&
                ((_opt_var = _tmp_225_rule()) != null || true)  // ['as' NAME]
                &&
                (_literal_1 = expect(11)) != null  // token=':'
            )
            {
                debugMessageln("%d invalid_except_block[%d-%d]: %s succeeded!", level, _mark, mark(), "'except' expression ',' expressions ['as' NAME] ':'");
                // TODO: node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "exception group must be parenthesized" )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , 'exception group must be parenthesized' ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'except' expression ',' expressions ['as' NAME] ':'");
                cache.putResult(_mark, INVALID_EXCEPT_BLOCK_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_except_block[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'except' expression ',' expressions ['as' NAME] ':'");
        }
        { // 'except' expression ['as' NAME] &&':'
            debugMessageln("%d> invalid_except_block[%d-%d]: %s", level, _mark, mark(), "'except' expression ['as' NAME] &&':'");
            Token _keyword;
            Token _literal;
            Object _opt_var;
            SSTNode expression_var;
            if (
                (_keyword = expect(521)) != null  // token='except'
                &&
                (expression_var = expression_rule()) != null  // expression
                &&
                ((_opt_var = _tmp_226_rule()) != null || true)  // ['as' NAME]
                &&
                (_literal = expect_forced_token(11, ":")) != null  // forced_token=':'
            )
            {
                debugMessageln("%d invalid_except_block[%d-%d]: %s succeeded!", level, _mark, mark(), "'except' expression ['as' NAME] &&':'");
                debugMessageln("Hit without action [%d:%d]: %s", _mark, mark(), "'except' expression ['as' NAME] &&':'");
                _res = dummyName(_keyword, expression_var, _opt_var, _literal);
                cache.putResult(_mark, INVALID_EXCEPT_BLOCK_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_except_block[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'except' expression ['as' NAME] &&':'");
        }
        { // 'except' &&':'
            debugMessageln("%d> invalid_except_block[%d-%d]: %s", level, _mark, mark(), "'except' &&':'");
            Token _keyword;
            Token _literal;
            if (
                (_keyword = expect(521)) != null  // token='except'
                &&
                (_literal = expect_forced_token(11, ":")) != null  // forced_token=':'
            )
            {
                debugMessageln("%d invalid_except_block[%d-%d]: %s succeeded!", level, _mark, mark(), "'except' &&':'");
                debugMessageln("Hit without action [%d:%d]: %s", _mark, mark(), "'except' &&':'");
                _res = dummyName(_keyword, _literal);
                cache.putResult(_mark, INVALID_EXCEPT_BLOCK_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_except_block[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'except' &&':'");
        }
        debugMessageln("Fail at %d: invalid_except_block", _mark);
        _res = null;
        cache.putResult(_mark, INVALID_EXCEPT_BLOCK_ID, _res);
        level--;
        return (Object)_res;
    }

    // invalid_match_stmt: "match" subject_expr !':'
    public Object invalid_match_stmt_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, INVALID_MATCH_STMT_ID)) {
            _res = (Object)cache.getResult(_mark, INVALID_MATCH_STMT_ID);
            level--;
            return (Object)_res;
        }
        { // "match" subject_expr !':'
            debugMessageln("%d> invalid_match_stmt[%d-%d]: %s", level, _mark, mark(), "\"match\" subject_expr !':'");
            SSTNode _keyword;
            SSTNode subject_expr_var;
            if (
                (_keyword = expect_SOFT_KEYWORD("match")) != null  // soft_keyword='"match"'
                &&
                (subject_expr_var = subject_expr_rule()) != null  // subject_expr
                &&
                genLookahead_expect(false, 11)  // token=':'
            )
            {
                debugMessageln("%d invalid_match_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "\"match\" subject_expr !':'");
                // TODO: node.action: CHECK_VERSION ( void * , 10 , "Pattern matching is" , RAISE_SYNTAX_ERROR ( "expected ':'" ) )
                debugMessageln("[33;5;7m!!! TODO: Convert CHECK_VERSION ( void * , 10 , 'Pattern matching is' , RAISE_SYNTAX_ERROR ( 'expected ':'' ) ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'match' subject_expr !':'");
                cache.putResult(_mark, INVALID_MATCH_STMT_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_match_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "\"match\" subject_expr !':'");
        }
        debugMessageln("Fail at %d: invalid_match_stmt", _mark);
        _res = null;
        cache.putResult(_mark, INVALID_MATCH_STMT_ID, _res);
        level--;
        return (Object)_res;
    }

    // invalid_case_block: "case" patterns guard? !':'
    public Object invalid_case_block_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, INVALID_CASE_BLOCK_ID)) {
            _res = (Object)cache.getResult(_mark, INVALID_CASE_BLOCK_ID);
            level--;
            return (Object)_res;
        }
        { // "case" patterns guard? !':'
            debugMessageln("%d> invalid_case_block[%d-%d]: %s", level, _mark, mark(), "\"case\" patterns guard? !':'");
            SSTNode _keyword;
            Object _opt_var;
            SSTNode patterns_var;
            if (
                (_keyword = expect_SOFT_KEYWORD("case")) != null  // soft_keyword='"case"'
                &&
                (patterns_var = patterns_rule()) != null  // patterns
                &&
                ((_opt_var = guard_rule()) != null || true)  // guard?
                &&
                genLookahead_expect(false, 11)  // token=':'
            )
            {
                debugMessageln("%d invalid_case_block[%d-%d]: %s succeeded!", level, _mark, mark(), "\"case\" patterns guard? !':'");
                // TODO: node.action: RAISE_SYNTAX_ERROR ( "expected ':'" )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR ( 'expected ':'' ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'case' patterns guard? !':'");
                cache.putResult(_mark, INVALID_CASE_BLOCK_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_case_block[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "\"case\" patterns guard? !':'");
        }
        debugMessageln("Fail at %d: invalid_case_block", _mark);
        _res = null;
        cache.putResult(_mark, INVALID_CASE_BLOCK_ID, _res);
        level--;
        return (Object)_res;
    }

    // invalid_if_stmt: 'if' named_expression NEWLINE
    public Object invalid_if_stmt_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, INVALID_IF_STMT_ID)) {
            _res = (Object)cache.getResult(_mark, INVALID_IF_STMT_ID);
            level--;
            return (Object)_res;
        }
        { // 'if' named_expression NEWLINE
            debugMessageln("%d> invalid_if_stmt[%d-%d]: %s", level, _mark, mark(), "'if' named_expression NEWLINE");
            Token _keyword;
            SSTNode named_expression_var;
            Token newline_var;
            if (
                (_keyword = expect(510)) != null  // token='if'
                &&
                (named_expression_var = named_expression_rule()) != null  // named_expression
                &&
                (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            )
            {
                debugMessageln("%d invalid_if_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "'if' named_expression NEWLINE");
                // TODO: node.action: RAISE_SYNTAX_ERROR ( "expected ':'" )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR ( 'expected ':'' ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'if' named_expression NEWLINE");
                cache.putResult(_mark, INVALID_IF_STMT_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_if_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'if' named_expression NEWLINE");
        }
        debugMessageln("Fail at %d: invalid_if_stmt", _mark);
        _res = null;
        cache.putResult(_mark, INVALID_IF_STMT_ID, _res);
        level--;
        return (Object)_res;
    }

    // invalid_elif_stmt: 'elif' named_expression NEWLINE
    public Object invalid_elif_stmt_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, INVALID_ELIF_STMT_ID)) {
            _res = (Object)cache.getResult(_mark, INVALID_ELIF_STMT_ID);
            level--;
            return (Object)_res;
        }
        { // 'elif' named_expression NEWLINE
            debugMessageln("%d> invalid_elif_stmt[%d-%d]: %s", level, _mark, mark(), "'elif' named_expression NEWLINE");
            Token _keyword;
            SSTNode named_expression_var;
            Token newline_var;
            if (
                (_keyword = expect(515)) != null  // token='elif'
                &&
                (named_expression_var = named_expression_rule()) != null  // named_expression
                &&
                (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            )
            {
                debugMessageln("%d invalid_elif_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "'elif' named_expression NEWLINE");
                // TODO: node.action: RAISE_SYNTAX_ERROR ( "expected ':'" )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR ( 'expected ':'' ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'elif' named_expression NEWLINE");
                cache.putResult(_mark, INVALID_ELIF_STMT_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_elif_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'elif' named_expression NEWLINE");
        }
        debugMessageln("Fail at %d: invalid_elif_stmt", _mark);
        _res = null;
        cache.putResult(_mark, INVALID_ELIF_STMT_ID, _res);
        level--;
        return (Object)_res;
    }

    // invalid_while_stmt: 'while' named_expression NEWLINE
    public Object invalid_while_stmt_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, INVALID_WHILE_STMT_ID)) {
            _res = (Object)cache.getResult(_mark, INVALID_WHILE_STMT_ID);
            level--;
            return (Object)_res;
        }
        { // 'while' named_expression NEWLINE
            debugMessageln("%d> invalid_while_stmt[%d-%d]: %s", level, _mark, mark(), "'while' named_expression NEWLINE");
            Token _keyword;
            SSTNode named_expression_var;
            Token newline_var;
            if (
                (_keyword = expect(512)) != null  // token='while'
                &&
                (named_expression_var = named_expression_rule()) != null  // named_expression
                &&
                (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            )
            {
                debugMessageln("%d invalid_while_stmt[%d-%d]: %s succeeded!", level, _mark, mark(), "'while' named_expression NEWLINE");
                // TODO: node.action: RAISE_SYNTAX_ERROR ( "expected ':'" )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR ( 'expected ':'' ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'while' named_expression NEWLINE");
                cache.putResult(_mark, INVALID_WHILE_STMT_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_while_stmt[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'while' named_expression NEWLINE");
        }
        debugMessageln("Fail at %d: invalid_while_stmt", _mark);
        _res = null;
        cache.putResult(_mark, INVALID_WHILE_STMT_ID, _res);
        level--;
        return (Object)_res;
    }

    // invalid_double_starred_kvpairs:
    //     | ','.double_starred_kvpair+ ',' invalid_kvpair
    //     | expression ':' '*' bitwise_or
    //     | expression ':' &('}' | ',')
    public Object invalid_double_starred_kvpairs_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, INVALID_DOUBLE_STARRED_KVPAIRS_ID)) {
            _res = (Object)cache.getResult(_mark, INVALID_DOUBLE_STARRED_KVPAIRS_ID);
            level--;
            return (Object)_res;
        }
        { // ','.double_starred_kvpair+ ',' invalid_kvpair
            debugMessageln("%d> invalid_double_starred_kvpairs[%d-%d]: %s", level, _mark, mark(), "','.double_starred_kvpair+ ',' invalid_kvpair");
            SSTNode[] _gather_227_var;
            Token _literal;
            Object invalid_kvpair_var;
            if (
                (_gather_227_var = _gather_227_rule()) != null  // ','.double_starred_kvpair+
                &&
                (_literal = expect(12)) != null  // token=','
                &&
                (invalid_kvpair_var = invalid_kvpair_rule()) != null  // invalid_kvpair
            )
            {
                debugMessageln("%d invalid_double_starred_kvpairs[%d-%d]: %s succeeded!", level, _mark, mark(), "','.double_starred_kvpair+ ',' invalid_kvpair");
                debugMessageln("Hit without action [%d:%d]: %s", _mark, mark(), "','.double_starred_kvpair+ ',' invalid_kvpair");
                _res = dummyName(_gather_227_var, _literal, invalid_kvpair_var);
                cache.putResult(_mark, INVALID_DOUBLE_STARRED_KVPAIRS_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_double_starred_kvpairs[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','.double_starred_kvpair+ ',' invalid_kvpair");
        }
        { // expression ':' '*' bitwise_or
            debugMessageln("%d> invalid_double_starred_kvpairs[%d-%d]: %s", level, _mark, mark(), "expression ':' '*' bitwise_or");
            Token _literal;
            Token a;
            SSTNode bitwise_or_var;
            SSTNode expression_var;
            if (
                (expression_var = expression_rule()) != null  // expression
                &&
                (_literal = expect(11)) != null  // token=':'
                &&
                (a = expect(16)) != null  // token='*'
                &&
                (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            )
            {
                debugMessageln("%d invalid_double_starred_kvpairs[%d-%d]: %s succeeded!", level, _mark, mark(), "expression ':' '*' bitwise_or");
                // TODO: node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "cannot use a starred expression in a dictionary value" )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , 'cannot use a starred expression in a dictionary value' ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "expression ':' '*' bitwise_or");
                cache.putResult(_mark, INVALID_DOUBLE_STARRED_KVPAIRS_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_double_starred_kvpairs[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "expression ':' '*' bitwise_or");
        }
        { // expression ':' &('}' | ',')
            debugMessageln("%d> invalid_double_starred_kvpairs[%d-%d]: %s", level, _mark, mark(), "expression ':' &('}' | ',')");
            Token a;
            SSTNode expression_var;
            if (
                (expression_var = expression_rule()) != null  // expression
                &&
                (a = expect(11)) != null  // token=':'
                &&
                genLookahead__tmp_229_rule(true)
            )
            {
                debugMessageln("%d invalid_double_starred_kvpairs[%d-%d]: %s succeeded!", level, _mark, mark(), "expression ':' &('}' | ',')");
                // TODO: node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "expression expected after dictionary key and ':'" )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , 'expression expected after dictionary key and ':'' ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "expression ':' &('}' | ',')");
                cache.putResult(_mark, INVALID_DOUBLE_STARRED_KVPAIRS_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_double_starred_kvpairs[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "expression ':' &('}' | ',')");
        }
        debugMessageln("Fail at %d: invalid_double_starred_kvpairs", _mark);
        _res = null;
        cache.putResult(_mark, INVALID_DOUBLE_STARRED_KVPAIRS_ID, _res);
        level--;
        return (Object)_res;
    }

    // invalid_kvpair: expression !(':') | expression ':' '*' bitwise_or | expression ':'
    public Object invalid_kvpair_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, INVALID_KVPAIR_ID)) {
            _res = (Object)cache.getResult(_mark, INVALID_KVPAIR_ID);
            level--;
            return (Object)_res;
        }
        { // expression !(':')
            debugMessageln("%d> invalid_kvpair[%d-%d]: %s", level, _mark, mark(), "expression !(':')");
            SSTNode a;
            if (
                (a = expression_rule()) != null  // expression
                &&
                genLookahead__tmp_230_rule(false)
            )
            {
                debugMessageln("%d invalid_kvpair[%d-%d]: %s succeeded!", level, _mark, mark(), "expression !(':')");
                // TODO: node.action: RAISE_ERROR_KNOWN_LOCATION ( p , PyExc_SyntaxError , a -> lineno , a -> end_col_offset - 1 , "':' expected after dictionary key" )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_ERROR_KNOWN_LOCATION ( p , PyExc_SyntaxError , a -> lineno , a -> end_col_offset - 1 , '':' expected after dictionary key' ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "expression !(':')");
                cache.putResult(_mark, INVALID_KVPAIR_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_kvpair[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "expression !(':')");
        }
        { // expression ':' '*' bitwise_or
            debugMessageln("%d> invalid_kvpair[%d-%d]: %s", level, _mark, mark(), "expression ':' '*' bitwise_or");
            Token _literal;
            Token a;
            SSTNode bitwise_or_var;
            SSTNode expression_var;
            if (
                (expression_var = expression_rule()) != null  // expression
                &&
                (_literal = expect(11)) != null  // token=':'
                &&
                (a = expect(16)) != null  // token='*'
                &&
                (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            )
            {
                debugMessageln("%d invalid_kvpair[%d-%d]: %s succeeded!", level, _mark, mark(), "expression ':' '*' bitwise_or");
                // TODO: node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "cannot use a starred expression in a dictionary value" )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , 'cannot use a starred expression in a dictionary value' ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "expression ':' '*' bitwise_or");
                cache.putResult(_mark, INVALID_KVPAIR_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_kvpair[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "expression ':' '*' bitwise_or");
        }
        { // expression ':'
            debugMessageln("%d> invalid_kvpair[%d-%d]: %s", level, _mark, mark(), "expression ':'");
            Token a;
            SSTNode expression_var;
            if (
                (expression_var = expression_rule()) != null  // expression
                &&
                (a = expect(11)) != null  // token=':'
            )
            {
                debugMessageln("%d invalid_kvpair[%d-%d]: %s succeeded!", level, _mark, mark(), "expression ':'");
                // TODO: node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "expression expected after dictionary key and ':'" )
                debugMessageln("[33;5;7m!!! TODO: Convert RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , 'expression expected after dictionary key and ':'' ) to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "expression ':'");
                cache.putResult(_mark, INVALID_KVPAIR_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s invalid_kvpair[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "expression ':'");
        }
        debugMessageln("Fail at %d: invalid_kvpair", _mark);
        _res = null;
        cache.putResult(_mark, INVALID_KVPAIR_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_1: statements
    public Object _tmp_1_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_1_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_1_ID);
            level--;
            return (Object)_res;
        }
        { // statements
            debugMessageln("%d> _tmp_1[%d-%d]: %s", level, _mark, mark(), "statements");
            SSTNode[] statements_var;
            if (
                (statements_var = statements_rule()) != null  // statements
            )
            {
                debugMessageln("%d _tmp_1[%d-%d]: %s succeeded!", level, _mark, mark(), "statements");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "statements");
                _res = statements_var;
                cache.putResult(_mark, _TMP_1_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_1[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "statements");
        }
        debugMessageln("Fail at %d: _tmp_1", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_1_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop0_2: NEWLINE
    public SSTNode[] _loop0_2_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_2_ID)) {
            _res = cache.getResult(_mark, _LOOP0_2_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // NEWLINE
            debugMessageln("%d> _loop0_2[%d-%d]: %s", level, _mark, mark(), "NEWLINE");
            Token newline_var;
            while (
                (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "NEWLINE");
                _res = newline_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_2[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "NEWLINE");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_2_ID, _seq);
        level--;
        return _seq;
    }

    // _tmp_3: type_expressions
    public Object _tmp_3_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_3_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_3_ID);
            level--;
            return (Object)_res;
        }
        { // type_expressions
            debugMessageln("%d> _tmp_3[%d-%d]: %s", level, _mark, mark(), "type_expressions");
            SSTNode[] type_expressions_var;
            if (
                (type_expressions_var = type_expressions_rule()) != null  // type_expressions
            )
            {
                debugMessageln("%d _tmp_3[%d-%d]: %s succeeded!", level, _mark, mark(), "type_expressions");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "type_expressions");
                _res = type_expressions_var;
                cache.putResult(_mark, _TMP_3_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_3[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "type_expressions");
        }
        debugMessageln("Fail at %d: _tmp_3", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_3_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop0_4: NEWLINE
    public SSTNode[] _loop0_4_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_4_ID)) {
            _res = cache.getResult(_mark, _LOOP0_4_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // NEWLINE
            debugMessageln("%d> _loop0_4[%d-%d]: %s", level, _mark, mark(), "NEWLINE");
            Token newline_var;
            while (
                (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "NEWLINE");
                _res = newline_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_4[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "NEWLINE");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_4_ID, _seq);
        level--;
        return _seq;
    }

    // _loop0_6: ',' expression
    public SSTNode[] _loop0_6_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_6_ID)) {
            _res = cache.getResult(_mark, _LOOP0_6_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ',' expression
            debugMessageln("%d> _loop0_6[%d-%d]: %s", level, _mark, mark(), "',' expression");
            Token _literal;
            SSTNode elem;
            while (
                (_literal = expect(12)) != null  // token=','
                &&
                (elem = expression_rule()) != null  // expression
            )
            {
                _res = elem;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' expression");
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_6[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' expression");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_6_ID, _seq);
        level--;
        return _seq;
    }

    // _gather_5: expression _loop0_6
    public SSTNode[] _gather_5_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _GATHER_5_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, _GATHER_5_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // expression _loop0_6
            debugMessageln("%d> _gather_5[%d-%d]: %s", level, _mark, mark(), "expression _loop0_6");
            SSTNode elem;
            SSTNode[] seq;
            if (
                (elem = expression_rule()) != null  // expression
                &&
                (seq = _loop0_6_rule()) != null  // _loop0_6
            )
            {
                debugMessageln("%d _gather_5[%d-%d]: %s succeeded!", level, _mark, mark(), "expression _loop0_6");
                _res = insertInFront(elem, seq);
                cache.putResult(_mark, _GATHER_5_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s _gather_5[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "expression _loop0_6");
        }
        debugMessageln("Fail at %d: _gather_5", _mark);
        _res = null;
        cache.putResult(_mark, _GATHER_5_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // _loop0_8: ',' expression
    public SSTNode[] _loop0_8_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_8_ID)) {
            _res = cache.getResult(_mark, _LOOP0_8_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ',' expression
            debugMessageln("%d> _loop0_8[%d-%d]: %s", level, _mark, mark(), "',' expression");
            Token _literal;
            SSTNode elem;
            while (
                (_literal = expect(12)) != null  // token=','
                &&
                (elem = expression_rule()) != null  // expression
            )
            {
                _res = elem;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' expression");
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_8[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' expression");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_8_ID, _seq);
        level--;
        return _seq;
    }

    // _gather_7: expression _loop0_8
    public SSTNode[] _gather_7_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _GATHER_7_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, _GATHER_7_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // expression _loop0_8
            debugMessageln("%d> _gather_7[%d-%d]: %s", level, _mark, mark(), "expression _loop0_8");
            SSTNode elem;
            SSTNode[] seq;
            if (
                (elem = expression_rule()) != null  // expression
                &&
                (seq = _loop0_8_rule()) != null  // _loop0_8
            )
            {
                debugMessageln("%d _gather_7[%d-%d]: %s succeeded!", level, _mark, mark(), "expression _loop0_8");
                _res = insertInFront(elem, seq);
                cache.putResult(_mark, _GATHER_7_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s _gather_7[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "expression _loop0_8");
        }
        debugMessageln("Fail at %d: _gather_7", _mark);
        _res = null;
        cache.putResult(_mark, _GATHER_7_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // _loop0_10: ',' expression
    public SSTNode[] _loop0_10_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_10_ID)) {
            _res = cache.getResult(_mark, _LOOP0_10_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ',' expression
            debugMessageln("%d> _loop0_10[%d-%d]: %s", level, _mark, mark(), "',' expression");
            Token _literal;
            SSTNode elem;
            while (
                (_literal = expect(12)) != null  // token=','
                &&
                (elem = expression_rule()) != null  // expression
            )
            {
                _res = elem;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' expression");
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_10[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' expression");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_10_ID, _seq);
        level--;
        return _seq;
    }

    // _gather_9: expression _loop0_10
    public SSTNode[] _gather_9_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _GATHER_9_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, _GATHER_9_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // expression _loop0_10
            debugMessageln("%d> _gather_9[%d-%d]: %s", level, _mark, mark(), "expression _loop0_10");
            SSTNode elem;
            SSTNode[] seq;
            if (
                (elem = expression_rule()) != null  // expression
                &&
                (seq = _loop0_10_rule()) != null  // _loop0_10
            )
            {
                debugMessageln("%d _gather_9[%d-%d]: %s succeeded!", level, _mark, mark(), "expression _loop0_10");
                _res = insertInFront(elem, seq);
                cache.putResult(_mark, _GATHER_9_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s _gather_9[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "expression _loop0_10");
        }
        debugMessageln("Fail at %d: _gather_9", _mark);
        _res = null;
        cache.putResult(_mark, _GATHER_9_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // _loop0_12: ',' expression
    public SSTNode[] _loop0_12_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_12_ID)) {
            _res = cache.getResult(_mark, _LOOP0_12_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ',' expression
            debugMessageln("%d> _loop0_12[%d-%d]: %s", level, _mark, mark(), "',' expression");
            Token _literal;
            SSTNode elem;
            while (
                (_literal = expect(12)) != null  // token=','
                &&
                (elem = expression_rule()) != null  // expression
            )
            {
                _res = elem;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' expression");
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_12[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' expression");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_12_ID, _seq);
        level--;
        return _seq;
    }

    // _gather_11: expression _loop0_12
    public SSTNode[] _gather_11_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _GATHER_11_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, _GATHER_11_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // expression _loop0_12
            debugMessageln("%d> _gather_11[%d-%d]: %s", level, _mark, mark(), "expression _loop0_12");
            SSTNode elem;
            SSTNode[] seq;
            if (
                (elem = expression_rule()) != null  // expression
                &&
                (seq = _loop0_12_rule()) != null  // _loop0_12
            )
            {
                debugMessageln("%d _gather_11[%d-%d]: %s succeeded!", level, _mark, mark(), "expression _loop0_12");
                _res = insertInFront(elem, seq);
                cache.putResult(_mark, _GATHER_11_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s _gather_11[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "expression _loop0_12");
        }
        debugMessageln("Fail at %d: _gather_11", _mark);
        _res = null;
        cache.putResult(_mark, _GATHER_11_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // _loop1_13: statement
    public SSTNode[] _loop1_13_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP1_13_ID)) {
            _res = cache.getResult(_mark, _LOOP1_13_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // statement
            debugMessageln("%d> _loop1_13[%d-%d]: %s", level, _mark, mark(), "statement");
            SSTNode[] statement_var;
            while (
                (statement_var = statement_rule()) != null  // statement
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "statement");
                _res = statement_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop1_13[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "statement");
        }
        if (_children.size() == 0) {
            level--;
            return null;
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP1_13_ID, _seq);
        level--;
        return _seq;
    }

    // _loop0_15: ';' simple_stmt
    public SSTNode[] _loop0_15_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_15_ID)) {
            _res = cache.getResult(_mark, _LOOP0_15_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ';' simple_stmt
            debugMessageln("%d> _loop0_15[%d-%d]: %s", level, _mark, mark(), "';' simple_stmt");
            Token _literal;
            SSTNode elem;
            while (
                (_literal = expect(13)) != null  // token=';'
                &&
                (elem = simple_stmt_rule()) != null  // simple_stmt
            )
            {
                _res = elem;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "';' simple_stmt");
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_15[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "';' simple_stmt");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_15_ID, _seq);
        level--;
        return _seq;
    }

    // _gather_14: simple_stmt _loop0_15
    public SSTNode[] _gather_14_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _GATHER_14_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, _GATHER_14_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // simple_stmt _loop0_15
            debugMessageln("%d> _gather_14[%d-%d]: %s", level, _mark, mark(), "simple_stmt _loop0_15");
            SSTNode elem;
            SSTNode[] seq;
            if (
                (elem = simple_stmt_rule()) != null  // simple_stmt
                &&
                (seq = _loop0_15_rule()) != null  // _loop0_15
            )
            {
                debugMessageln("%d _gather_14[%d-%d]: %s succeeded!", level, _mark, mark(), "simple_stmt _loop0_15");
                _res = insertInFront(elem, seq);
                cache.putResult(_mark, _GATHER_14_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s _gather_14[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "simple_stmt _loop0_15");
        }
        debugMessageln("Fail at %d: _gather_14", _mark);
        _res = null;
        cache.putResult(_mark, _GATHER_14_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // _tmp_16: ';'
    public Object _tmp_16_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_16_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_16_ID);
            level--;
            return (Object)_res;
        }
        { // ';'
            debugMessageln("%d> _tmp_16[%d-%d]: %s", level, _mark, mark(), "';'");
            Token _literal;
            if (
                (_literal = expect(13)) != null  // token=';'
            )
            {
                debugMessageln("%d _tmp_16[%d-%d]: %s succeeded!", level, _mark, mark(), "';'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "';'");
                _res = _literal;
                cache.putResult(_mark, _TMP_16_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_16[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "';'");
        }
        debugMessageln("Fail at %d: _tmp_16", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_16_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_17: 'import' | 'from'
    public Object _tmp_17_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_17_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_17_ID);
            level--;
            return (Object)_res;
        }
        { // 'import'
            debugMessageln("%d> _tmp_17[%d-%d]: %s", level, _mark, mark(), "'import'");
            Token _keyword;
            if (
                (_keyword = expect(513)) != null  // token='import'
            )
            {
                debugMessageln("%d _tmp_17[%d-%d]: %s succeeded!", level, _mark, mark(), "'import'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'import'");
                _res = _keyword;
                cache.putResult(_mark, _TMP_17_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_17[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'import'");
        }
        { // 'from'
            debugMessageln("%d> _tmp_17[%d-%d]: %s", level, _mark, mark(), "'from'");
            Token _keyword;
            if (
                (_keyword = expect(514)) != null  // token='from'
            )
            {
                debugMessageln("%d _tmp_17[%d-%d]: %s succeeded!", level, _mark, mark(), "'from'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'from'");
                _res = _keyword;
                cache.putResult(_mark, _TMP_17_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_17[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'from'");
        }
        debugMessageln("Fail at %d: _tmp_17", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_17_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_18: 'def' | '@' | ASYNC
    public Object _tmp_18_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_18_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_18_ID);
            level--;
            return (Object)_res;
        }
        { // 'def'
            debugMessageln("%d> _tmp_18[%d-%d]: %s", level, _mark, mark(), "'def'");
            Token _keyword;
            if (
                (_keyword = expect(526)) != null  // token='def'
            )
            {
                debugMessageln("%d _tmp_18[%d-%d]: %s succeeded!", level, _mark, mark(), "'def'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'def'");
                _res = _keyword;
                cache.putResult(_mark, _TMP_18_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_18[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'def'");
        }
        { // '@'
            debugMessageln("%d> _tmp_18[%d-%d]: %s", level, _mark, mark(), "'@'");
            Token _literal;
            if (
                (_literal = expect(49)) != null  // token='@'
            )
            {
                debugMessageln("%d _tmp_18[%d-%d]: %s succeeded!", level, _mark, mark(), "'@'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'@'");
                _res = _literal;
                cache.putResult(_mark, _TMP_18_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_18[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'@'");
        }
        { // ASYNC
            debugMessageln("%d> _tmp_18[%d-%d]: %s", level, _mark, mark(), "ASYNC");
            Token async_var;
            if (
                (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            )
            {
                debugMessageln("%d _tmp_18[%d-%d]: %s succeeded!", level, _mark, mark(), "ASYNC");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "ASYNC");
                _res = async_var;
                cache.putResult(_mark, _TMP_18_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_18[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "ASYNC");
        }
        debugMessageln("Fail at %d: _tmp_18", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_18_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_19: 'class' | '@'
    public Object _tmp_19_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_19_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_19_ID);
            level--;
            return (Object)_res;
        }
        { // 'class'
            debugMessageln("%d> _tmp_19[%d-%d]: %s", level, _mark, mark(), "'class'");
            Token _keyword;
            if (
                (_keyword = expect(527)) != null  // token='class'
            )
            {
                debugMessageln("%d _tmp_19[%d-%d]: %s succeeded!", level, _mark, mark(), "'class'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'class'");
                _res = _keyword;
                cache.putResult(_mark, _TMP_19_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_19[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'class'");
        }
        { // '@'
            debugMessageln("%d> _tmp_19[%d-%d]: %s", level, _mark, mark(), "'@'");
            Token _literal;
            if (
                (_literal = expect(49)) != null  // token='@'
            )
            {
                debugMessageln("%d _tmp_19[%d-%d]: %s succeeded!", level, _mark, mark(), "'@'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'@'");
                _res = _literal;
                cache.putResult(_mark, _TMP_19_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_19[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'@'");
        }
        debugMessageln("Fail at %d: _tmp_19", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_19_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_20: 'with' | ASYNC
    public Object _tmp_20_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_20_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_20_ID);
            level--;
            return (Object)_res;
        }
        { // 'with'
            debugMessageln("%d> _tmp_20[%d-%d]: %s", level, _mark, mark(), "'with'");
            Token _keyword;
            if (
                (_keyword = expect(519)) != null  // token='with'
            )
            {
                debugMessageln("%d _tmp_20[%d-%d]: %s succeeded!", level, _mark, mark(), "'with'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'with'");
                _res = _keyword;
                cache.putResult(_mark, _TMP_20_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_20[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'with'");
        }
        { // ASYNC
            debugMessageln("%d> _tmp_20[%d-%d]: %s", level, _mark, mark(), "ASYNC");
            Token async_var;
            if (
                (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            )
            {
                debugMessageln("%d _tmp_20[%d-%d]: %s succeeded!", level, _mark, mark(), "ASYNC");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "ASYNC");
                _res = async_var;
                cache.putResult(_mark, _TMP_20_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_20[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "ASYNC");
        }
        debugMessageln("Fail at %d: _tmp_20", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_20_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_21: 'for' | ASYNC
    public Object _tmp_21_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_21_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_21_ID);
            level--;
            return (Object)_res;
        }
        { // 'for'
            debugMessageln("%d> _tmp_21[%d-%d]: %s", level, _mark, mark(), "'for'");
            Token _keyword;
            if (
                (_keyword = expect(517)) != null  // token='for'
            )
            {
                debugMessageln("%d _tmp_21[%d-%d]: %s succeeded!", level, _mark, mark(), "'for'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'for'");
                _res = _keyword;
                cache.putResult(_mark, _TMP_21_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_21[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'for'");
        }
        { // ASYNC
            debugMessageln("%d> _tmp_21[%d-%d]: %s", level, _mark, mark(), "ASYNC");
            Token async_var;
            if (
                (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            )
            {
                debugMessageln("%d _tmp_21[%d-%d]: %s succeeded!", level, _mark, mark(), "ASYNC");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "ASYNC");
                _res = async_var;
                cache.putResult(_mark, _TMP_21_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_21[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "ASYNC");
        }
        debugMessageln("Fail at %d: _tmp_21", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_21_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_22: '=' annotated_rhs
    public Object _tmp_22_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_22_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_22_ID);
            level--;
            return (Object)_res;
        }
        { // '=' annotated_rhs
            debugMessageln("%d> _tmp_22[%d-%d]: %s", level, _mark, mark(), "'=' annotated_rhs");
            Token _literal;
            SSTNode d;
            if (
                (_literal = expect(22)) != null  // token='='
                &&
                (d = annotated_rhs_rule()) != null  // annotated_rhs
            )
            {
                debugMessageln("%d _tmp_22[%d-%d]: %s succeeded!", level, _mark, mark(), "'=' annotated_rhs");
                _res = d;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'=' annotated_rhs");
                cache.putResult(_mark, _TMP_22_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_22[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'=' annotated_rhs");
        }
        debugMessageln("Fail at %d: _tmp_22", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_22_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_23: '(' single_target ')' | single_subscript_attribute_target
    public Object _tmp_23_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_23_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_23_ID);
            level--;
            return (Object)_res;
        }
        { // '(' single_target ')'
            debugMessageln("%d> _tmp_23[%d-%d]: %s", level, _mark, mark(), "'(' single_target ')'");
            Token _literal;
            Token _literal_1;
            SSTNode b;
            if (
                (_literal = expect(7)) != null  // token='('
                &&
                (b = single_target_rule()) != null  // single_target
                &&
                (_literal_1 = expect(8)) != null  // token=')'
            )
            {
                debugMessageln("%d _tmp_23[%d-%d]: %s succeeded!", level, _mark, mark(), "'(' single_target ')'");
                _res = b;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'(' single_target ')'");
                cache.putResult(_mark, _TMP_23_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_23[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'(' single_target ')'");
        }
        { // single_subscript_attribute_target
            debugMessageln("%d> _tmp_23[%d-%d]: %s", level, _mark, mark(), "single_subscript_attribute_target");
            SSTNode single_subscript_attribute_target_var;
            if (
                (single_subscript_attribute_target_var = single_subscript_attribute_target_rule()) != null  // single_subscript_attribute_target
            )
            {
                debugMessageln("%d _tmp_23[%d-%d]: %s succeeded!", level, _mark, mark(), "single_subscript_attribute_target");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "single_subscript_attribute_target");
                _res = single_subscript_attribute_target_var;
                cache.putResult(_mark, _TMP_23_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_23[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "single_subscript_attribute_target");
        }
        debugMessageln("Fail at %d: _tmp_23", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_23_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_24: '=' annotated_rhs
    public Object _tmp_24_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_24_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_24_ID);
            level--;
            return (Object)_res;
        }
        { // '=' annotated_rhs
            debugMessageln("%d> _tmp_24[%d-%d]: %s", level, _mark, mark(), "'=' annotated_rhs");
            Token _literal;
            SSTNode d;
            if (
                (_literal = expect(22)) != null  // token='='
                &&
                (d = annotated_rhs_rule()) != null  // annotated_rhs
            )
            {
                debugMessageln("%d _tmp_24[%d-%d]: %s succeeded!", level, _mark, mark(), "'=' annotated_rhs");
                _res = d;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'=' annotated_rhs");
                cache.putResult(_mark, _TMP_24_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_24[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'=' annotated_rhs");
        }
        debugMessageln("Fail at %d: _tmp_24", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_24_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop1_25: (star_targets '=')
    public SSTNode[] _loop1_25_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP1_25_ID)) {
            _res = cache.getResult(_mark, _LOOP1_25_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // (star_targets '=')
            debugMessageln("%d> _loop1_25[%d-%d]: %s", level, _mark, mark(), "(star_targets '=')");
            Object _tmp_231_var;
            while (
                (_tmp_231_var = _tmp_231_rule()) != null  // star_targets '='
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "(star_targets '=')");
                _res = _tmp_231_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop1_25[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "(star_targets '=')");
        }
        if (_children.size() == 0) {
            level--;
            return null;
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP1_25_ID, _seq);
        level--;
        return _seq;
    }

    // _tmp_26: yield_expr | star_expressions
    public Object _tmp_26_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_26_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_26_ID);
            level--;
            return (Object)_res;
        }
        { // yield_expr
            debugMessageln("%d> _tmp_26[%d-%d]: %s", level, _mark, mark(), "yield_expr");
            SSTNode yield_expr_var;
            if (
                (yield_expr_var = yield_expr_rule()) != null  // yield_expr
            )
            {
                debugMessageln("%d _tmp_26[%d-%d]: %s succeeded!", level, _mark, mark(), "yield_expr");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "yield_expr");
                _res = yield_expr_var;
                cache.putResult(_mark, _TMP_26_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_26[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "yield_expr");
        }
        { // star_expressions
            debugMessageln("%d> _tmp_26[%d-%d]: %s", level, _mark, mark(), "star_expressions");
            SSTNode star_expressions_var;
            if (
                (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            )
            {
                debugMessageln("%d _tmp_26[%d-%d]: %s succeeded!", level, _mark, mark(), "star_expressions");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "star_expressions");
                _res = star_expressions_var;
                cache.putResult(_mark, _TMP_26_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_26[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_expressions");
        }
        debugMessageln("Fail at %d: _tmp_26", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_26_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_27: TYPE_COMMENT
    public Object _tmp_27_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_27_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_27_ID);
            level--;
            return (Object)_res;
        }
        { // TYPE_COMMENT
            debugMessageln("%d> _tmp_27[%d-%d]: %s", level, _mark, mark(), "TYPE_COMMENT");
            Token type_comment_var;
            if (
                (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            )
            {
                debugMessageln("%d _tmp_27[%d-%d]: %s succeeded!", level, _mark, mark(), "TYPE_COMMENT");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "TYPE_COMMENT");
                _res = type_comment_var;
                cache.putResult(_mark, _TMP_27_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_27[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "TYPE_COMMENT");
        }
        debugMessageln("Fail at %d: _tmp_27", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_27_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_28: yield_expr | star_expressions
    public Object _tmp_28_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_28_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_28_ID);
            level--;
            return (Object)_res;
        }
        { // yield_expr
            debugMessageln("%d> _tmp_28[%d-%d]: %s", level, _mark, mark(), "yield_expr");
            SSTNode yield_expr_var;
            if (
                (yield_expr_var = yield_expr_rule()) != null  // yield_expr
            )
            {
                debugMessageln("%d _tmp_28[%d-%d]: %s succeeded!", level, _mark, mark(), "yield_expr");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "yield_expr");
                _res = yield_expr_var;
                cache.putResult(_mark, _TMP_28_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_28[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "yield_expr");
        }
        { // star_expressions
            debugMessageln("%d> _tmp_28[%d-%d]: %s", level, _mark, mark(), "star_expressions");
            SSTNode star_expressions_var;
            if (
                (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            )
            {
                debugMessageln("%d _tmp_28[%d-%d]: %s succeeded!", level, _mark, mark(), "star_expressions");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "star_expressions");
                _res = star_expressions_var;
                cache.putResult(_mark, _TMP_28_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_28[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_expressions");
        }
        debugMessageln("Fail at %d: _tmp_28", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_28_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop0_30: ',' NAME
    public SSTNode[] _loop0_30_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_30_ID)) {
            _res = cache.getResult(_mark, _LOOP0_30_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ',' NAME
            debugMessageln("%d> _loop0_30[%d-%d]: %s", level, _mark, mark(), "',' NAME");
            Token _literal;
            SSTNode elem;
            while (
                (_literal = expect(12)) != null  // token=','
                &&
                (elem = name_token()) != null  // NAME
            )
            {
                _res = elem;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' NAME");
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_30[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' NAME");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_30_ID, _seq);
        level--;
        return _seq;
    }

    // _gather_29: NAME _loop0_30
    public SSTNode[] _gather_29_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _GATHER_29_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, _GATHER_29_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // NAME _loop0_30
            debugMessageln("%d> _gather_29[%d-%d]: %s", level, _mark, mark(), "NAME _loop0_30");
            SSTNode elem;
            SSTNode[] seq;
            if (
                (elem = name_token()) != null  // NAME
                &&
                (seq = _loop0_30_rule()) != null  // _loop0_30
            )
            {
                debugMessageln("%d _gather_29[%d-%d]: %s succeeded!", level, _mark, mark(), "NAME _loop0_30");
                _res = insertInFront(elem, seq);
                cache.putResult(_mark, _GATHER_29_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s _gather_29[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "NAME _loop0_30");
        }
        debugMessageln("Fail at %d: _gather_29", _mark);
        _res = null;
        cache.putResult(_mark, _GATHER_29_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // _loop0_32: ',' NAME
    public SSTNode[] _loop0_32_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_32_ID)) {
            _res = cache.getResult(_mark, _LOOP0_32_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ',' NAME
            debugMessageln("%d> _loop0_32[%d-%d]: %s", level, _mark, mark(), "',' NAME");
            Token _literal;
            SSTNode elem;
            while (
                (_literal = expect(12)) != null  // token=','
                &&
                (elem = name_token()) != null  // NAME
            )
            {
                _res = elem;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' NAME");
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_32[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' NAME");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_32_ID, _seq);
        level--;
        return _seq;
    }

    // _gather_31: NAME _loop0_32
    public SSTNode[] _gather_31_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _GATHER_31_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, _GATHER_31_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // NAME _loop0_32
            debugMessageln("%d> _gather_31[%d-%d]: %s", level, _mark, mark(), "NAME _loop0_32");
            SSTNode elem;
            SSTNode[] seq;
            if (
                (elem = name_token()) != null  // NAME
                &&
                (seq = _loop0_32_rule()) != null  // _loop0_32
            )
            {
                debugMessageln("%d _gather_31[%d-%d]: %s succeeded!", level, _mark, mark(), "NAME _loop0_32");
                _res = insertInFront(elem, seq);
                cache.putResult(_mark, _GATHER_31_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s _gather_31[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "NAME _loop0_32");
        }
        debugMessageln("Fail at %d: _gather_31", _mark);
        _res = null;
        cache.putResult(_mark, _GATHER_31_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // _tmp_33: ',' expression
    public Object _tmp_33_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_33_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_33_ID);
            level--;
            return (Object)_res;
        }
        { // ',' expression
            debugMessageln("%d> _tmp_33[%d-%d]: %s", level, _mark, mark(), "',' expression");
            Token _literal;
            SSTNode z;
            if (
                (_literal = expect(12)) != null  // token=','
                &&
                (z = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d _tmp_33[%d-%d]: %s succeeded!", level, _mark, mark(), "',' expression");
                _res = z;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' expression");
                cache.putResult(_mark, _TMP_33_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_33[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' expression");
        }
        debugMessageln("Fail at %d: _tmp_33", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_33_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_34: ';' | NEWLINE
    public Object _tmp_34_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_34_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_34_ID);
            level--;
            return (Object)_res;
        }
        { // ';'
            debugMessageln("%d> _tmp_34[%d-%d]: %s", level, _mark, mark(), "';'");
            Token _literal;
            if (
                (_literal = expect(13)) != null  // token=';'
            )
            {
                debugMessageln("%d _tmp_34[%d-%d]: %s succeeded!", level, _mark, mark(), "';'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "';'");
                _res = _literal;
                cache.putResult(_mark, _TMP_34_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_34[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "';'");
        }
        { // NEWLINE
            debugMessageln("%d> _tmp_34[%d-%d]: %s", level, _mark, mark(), "NEWLINE");
            Token newline_var;
            if (
                (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            )
            {
                debugMessageln("%d _tmp_34[%d-%d]: %s succeeded!", level, _mark, mark(), "NEWLINE");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "NEWLINE");
                _res = newline_var;
                cache.putResult(_mark, _TMP_34_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_34[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "NEWLINE");
        }
        debugMessageln("Fail at %d: _tmp_34", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_34_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop0_35: ('.' | '...')
    public SSTNode[] _loop0_35_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_35_ID)) {
            _res = cache.getResult(_mark, _LOOP0_35_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ('.' | '...')
            debugMessageln("%d> _loop0_35[%d-%d]: %s", level, _mark, mark(), "('.' | '...')");
            Object _tmp_232_var;
            while (
                (_tmp_232_var = _tmp_232_rule()) != null  // '.' | '...'
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "('.' | '...')");
                _res = _tmp_232_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_35[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "('.' | '...')");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_35_ID, _seq);
        level--;
        return _seq;
    }

    // _loop1_36: ('.' | '...')
    public SSTNode[] _loop1_36_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP1_36_ID)) {
            _res = cache.getResult(_mark, _LOOP1_36_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ('.' | '...')
            debugMessageln("%d> _loop1_36[%d-%d]: %s", level, _mark, mark(), "('.' | '...')");
            Object _tmp_233_var;
            while (
                (_tmp_233_var = _tmp_233_rule()) != null  // '.' | '...'
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "('.' | '...')");
                _res = _tmp_233_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop1_36[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "('.' | '...')");
        }
        if (_children.size() == 0) {
            level--;
            return null;
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP1_36_ID, _seq);
        level--;
        return _seq;
    }

    // _tmp_37: ','
    public Object _tmp_37_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_37_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_37_ID);
            level--;
            return (Object)_res;
        }
        { // ','
            debugMessageln("%d> _tmp_37[%d-%d]: %s", level, _mark, mark(), "','");
            Token _literal;
            if (
                (_literal = expect(12)) != null  // token=','
            )
            {
                debugMessageln("%d _tmp_37[%d-%d]: %s succeeded!", level, _mark, mark(), "','");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "','");
                _res = _literal;
                cache.putResult(_mark, _TMP_37_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_37[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','");
        }
        debugMessageln("Fail at %d: _tmp_37", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_37_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop0_39: ',' import_from_as_name
    public SSTNode[] _loop0_39_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_39_ID)) {
            _res = cache.getResult(_mark, _LOOP0_39_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ',' import_from_as_name
            debugMessageln("%d> _loop0_39[%d-%d]: %s", level, _mark, mark(), "',' import_from_as_name");
            Token _literal;
            SSTNode elem;
            while (
                (_literal = expect(12)) != null  // token=','
                &&
                (elem = import_from_as_name_rule()) != null  // import_from_as_name
            )
            {
                _res = elem;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' import_from_as_name");
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_39[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' import_from_as_name");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_39_ID, _seq);
        level--;
        return _seq;
    }

    // _gather_38: import_from_as_name _loop0_39
    public SSTNode[] _gather_38_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _GATHER_38_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, _GATHER_38_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // import_from_as_name _loop0_39
            debugMessageln("%d> _gather_38[%d-%d]: %s", level, _mark, mark(), "import_from_as_name _loop0_39");
            SSTNode elem;
            SSTNode[] seq;
            if (
                (elem = import_from_as_name_rule()) != null  // import_from_as_name
                &&
                (seq = _loop0_39_rule()) != null  // _loop0_39
            )
            {
                debugMessageln("%d _gather_38[%d-%d]: %s succeeded!", level, _mark, mark(), "import_from_as_name _loop0_39");
                _res = insertInFront(elem, seq);
                cache.putResult(_mark, _GATHER_38_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s _gather_38[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "import_from_as_name _loop0_39");
        }
        debugMessageln("Fail at %d: _gather_38", _mark);
        _res = null;
        cache.putResult(_mark, _GATHER_38_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // _tmp_40: 'as' NAME
    public Object _tmp_40_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_40_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_40_ID);
            level--;
            return (Object)_res;
        }
        { // 'as' NAME
            debugMessageln("%d> _tmp_40[%d-%d]: %s", level, _mark, mark(), "'as' NAME");
            Token _keyword;
            SSTNode z;
            if (
                (_keyword = expect(520)) != null  // token='as'
                &&
                (z = name_token()) != null  // NAME
            )
            {
                debugMessageln("%d _tmp_40[%d-%d]: %s succeeded!", level, _mark, mark(), "'as' NAME");
                _res = z;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'as' NAME");
                cache.putResult(_mark, _TMP_40_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_40[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'as' NAME");
        }
        debugMessageln("Fail at %d: _tmp_40", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_40_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop0_42: ',' dotted_as_name
    public SSTNode[] _loop0_42_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_42_ID)) {
            _res = cache.getResult(_mark, _LOOP0_42_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ',' dotted_as_name
            debugMessageln("%d> _loop0_42[%d-%d]: %s", level, _mark, mark(), "',' dotted_as_name");
            Token _literal;
            SSTNode elem;
            while (
                (_literal = expect(12)) != null  // token=','
                &&
                (elem = dotted_as_name_rule()) != null  // dotted_as_name
            )
            {
                _res = elem;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' dotted_as_name");
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_42[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' dotted_as_name");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_42_ID, _seq);
        level--;
        return _seq;
    }

    // _gather_41: dotted_as_name _loop0_42
    public SSTNode[] _gather_41_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _GATHER_41_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, _GATHER_41_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // dotted_as_name _loop0_42
            debugMessageln("%d> _gather_41[%d-%d]: %s", level, _mark, mark(), "dotted_as_name _loop0_42");
            SSTNode elem;
            SSTNode[] seq;
            if (
                (elem = dotted_as_name_rule()) != null  // dotted_as_name
                &&
                (seq = _loop0_42_rule()) != null  // _loop0_42
            )
            {
                debugMessageln("%d _gather_41[%d-%d]: %s succeeded!", level, _mark, mark(), "dotted_as_name _loop0_42");
                _res = insertInFront(elem, seq);
                cache.putResult(_mark, _GATHER_41_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s _gather_41[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "dotted_as_name _loop0_42");
        }
        debugMessageln("Fail at %d: _gather_41", _mark);
        _res = null;
        cache.putResult(_mark, _GATHER_41_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // _tmp_43: 'as' NAME
    public Object _tmp_43_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_43_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_43_ID);
            level--;
            return (Object)_res;
        }
        { // 'as' NAME
            debugMessageln("%d> _tmp_43[%d-%d]: %s", level, _mark, mark(), "'as' NAME");
            Token _keyword;
            SSTNode z;
            if (
                (_keyword = expect(520)) != null  // token='as'
                &&
                (z = name_token()) != null  // NAME
            )
            {
                debugMessageln("%d _tmp_43[%d-%d]: %s succeeded!", level, _mark, mark(), "'as' NAME");
                _res = z;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'as' NAME");
                cache.putResult(_mark, _TMP_43_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_43[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'as' NAME");
        }
        debugMessageln("Fail at %d: _tmp_43", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_43_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_44: else_block
    public Object _tmp_44_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_44_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_44_ID);
            level--;
            return (Object)_res;
        }
        { // else_block
            debugMessageln("%d> _tmp_44[%d-%d]: %s", level, _mark, mark(), "else_block");
            SSTNode[] else_block_var;
            if (
                (else_block_var = else_block_rule()) != null  // else_block
            )
            {
                debugMessageln("%d _tmp_44[%d-%d]: %s succeeded!", level, _mark, mark(), "else_block");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "else_block");
                _res = else_block_var;
                cache.putResult(_mark, _TMP_44_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_44[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "else_block");
        }
        debugMessageln("Fail at %d: _tmp_44", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_44_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_45: else_block
    public Object _tmp_45_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_45_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_45_ID);
            level--;
            return (Object)_res;
        }
        { // else_block
            debugMessageln("%d> _tmp_45[%d-%d]: %s", level, _mark, mark(), "else_block");
            SSTNode[] else_block_var;
            if (
                (else_block_var = else_block_rule()) != null  // else_block
            )
            {
                debugMessageln("%d _tmp_45[%d-%d]: %s succeeded!", level, _mark, mark(), "else_block");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "else_block");
                _res = else_block_var;
                cache.putResult(_mark, _TMP_45_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_45[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "else_block");
        }
        debugMessageln("Fail at %d: _tmp_45", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_45_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_46: else_block
    public Object _tmp_46_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_46_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_46_ID);
            level--;
            return (Object)_res;
        }
        { // else_block
            debugMessageln("%d> _tmp_46[%d-%d]: %s", level, _mark, mark(), "else_block");
            SSTNode[] else_block_var;
            if (
                (else_block_var = else_block_rule()) != null  // else_block
            )
            {
                debugMessageln("%d _tmp_46[%d-%d]: %s succeeded!", level, _mark, mark(), "else_block");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "else_block");
                _res = else_block_var;
                cache.putResult(_mark, _TMP_46_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_46[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "else_block");
        }
        debugMessageln("Fail at %d: _tmp_46", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_46_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_47: TYPE_COMMENT
    public Object _tmp_47_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_47_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_47_ID);
            level--;
            return (Object)_res;
        }
        { // TYPE_COMMENT
            debugMessageln("%d> _tmp_47[%d-%d]: %s", level, _mark, mark(), "TYPE_COMMENT");
            Token type_comment_var;
            if (
                (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            )
            {
                debugMessageln("%d _tmp_47[%d-%d]: %s succeeded!", level, _mark, mark(), "TYPE_COMMENT");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "TYPE_COMMENT");
                _res = type_comment_var;
                cache.putResult(_mark, _TMP_47_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_47[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "TYPE_COMMENT");
        }
        debugMessageln("Fail at %d: _tmp_47", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_47_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_48: else_block
    public Object _tmp_48_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_48_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_48_ID);
            level--;
            return (Object)_res;
        }
        { // else_block
            debugMessageln("%d> _tmp_48[%d-%d]: %s", level, _mark, mark(), "else_block");
            SSTNode[] else_block_var;
            if (
                (else_block_var = else_block_rule()) != null  // else_block
            )
            {
                debugMessageln("%d _tmp_48[%d-%d]: %s succeeded!", level, _mark, mark(), "else_block");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "else_block");
                _res = else_block_var;
                cache.putResult(_mark, _TMP_48_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_48[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "else_block");
        }
        debugMessageln("Fail at %d: _tmp_48", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_48_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_49: TYPE_COMMENT
    public Object _tmp_49_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_49_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_49_ID);
            level--;
            return (Object)_res;
        }
        { // TYPE_COMMENT
            debugMessageln("%d> _tmp_49[%d-%d]: %s", level, _mark, mark(), "TYPE_COMMENT");
            Token type_comment_var;
            if (
                (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            )
            {
                debugMessageln("%d _tmp_49[%d-%d]: %s succeeded!", level, _mark, mark(), "TYPE_COMMENT");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "TYPE_COMMENT");
                _res = type_comment_var;
                cache.putResult(_mark, _TMP_49_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_49[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "TYPE_COMMENT");
        }
        debugMessageln("Fail at %d: _tmp_49", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_49_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_50: else_block
    public Object _tmp_50_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_50_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_50_ID);
            level--;
            return (Object)_res;
        }
        { // else_block
            debugMessageln("%d> _tmp_50[%d-%d]: %s", level, _mark, mark(), "else_block");
            SSTNode[] else_block_var;
            if (
                (else_block_var = else_block_rule()) != null  // else_block
            )
            {
                debugMessageln("%d _tmp_50[%d-%d]: %s succeeded!", level, _mark, mark(), "else_block");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "else_block");
                _res = else_block_var;
                cache.putResult(_mark, _TMP_50_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_50[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "else_block");
        }
        debugMessageln("Fail at %d: _tmp_50", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_50_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop0_52: ',' with_item
    public SSTNode[] _loop0_52_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_52_ID)) {
            _res = cache.getResult(_mark, _LOOP0_52_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ',' with_item
            debugMessageln("%d> _loop0_52[%d-%d]: %s", level, _mark, mark(), "',' with_item");
            Token _literal;
            SSTNode elem;
            while (
                (_literal = expect(12)) != null  // token=','
                &&
                (elem = with_item_rule()) != null  // with_item
            )
            {
                _res = elem;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' with_item");
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_52[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' with_item");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_52_ID, _seq);
        level--;
        return _seq;
    }

    // _gather_51: with_item _loop0_52
    public SSTNode[] _gather_51_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _GATHER_51_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, _GATHER_51_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // with_item _loop0_52
            debugMessageln("%d> _gather_51[%d-%d]: %s", level, _mark, mark(), "with_item _loop0_52");
            SSTNode elem;
            SSTNode[] seq;
            if (
                (elem = with_item_rule()) != null  // with_item
                &&
                (seq = _loop0_52_rule()) != null  // _loop0_52
            )
            {
                debugMessageln("%d _gather_51[%d-%d]: %s succeeded!", level, _mark, mark(), "with_item _loop0_52");
                _res = insertInFront(elem, seq);
                cache.putResult(_mark, _GATHER_51_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s _gather_51[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "with_item _loop0_52");
        }
        debugMessageln("Fail at %d: _gather_51", _mark);
        _res = null;
        cache.putResult(_mark, _GATHER_51_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // _loop0_54: ',' with_item
    public SSTNode[] _loop0_54_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_54_ID)) {
            _res = cache.getResult(_mark, _LOOP0_54_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ',' with_item
            debugMessageln("%d> _loop0_54[%d-%d]: %s", level, _mark, mark(), "',' with_item");
            Token _literal;
            SSTNode elem;
            while (
                (_literal = expect(12)) != null  // token=','
                &&
                (elem = with_item_rule()) != null  // with_item
            )
            {
                _res = elem;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' with_item");
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_54[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' with_item");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_54_ID, _seq);
        level--;
        return _seq;
    }

    // _gather_53: with_item _loop0_54
    public SSTNode[] _gather_53_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _GATHER_53_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, _GATHER_53_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // with_item _loop0_54
            debugMessageln("%d> _gather_53[%d-%d]: %s", level, _mark, mark(), "with_item _loop0_54");
            SSTNode elem;
            SSTNode[] seq;
            if (
                (elem = with_item_rule()) != null  // with_item
                &&
                (seq = _loop0_54_rule()) != null  // _loop0_54
            )
            {
                debugMessageln("%d _gather_53[%d-%d]: %s succeeded!", level, _mark, mark(), "with_item _loop0_54");
                _res = insertInFront(elem, seq);
                cache.putResult(_mark, _GATHER_53_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s _gather_53[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "with_item _loop0_54");
        }
        debugMessageln("Fail at %d: _gather_53", _mark);
        _res = null;
        cache.putResult(_mark, _GATHER_53_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // _tmp_55: TYPE_COMMENT
    public Object _tmp_55_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_55_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_55_ID);
            level--;
            return (Object)_res;
        }
        { // TYPE_COMMENT
            debugMessageln("%d> _tmp_55[%d-%d]: %s", level, _mark, mark(), "TYPE_COMMENT");
            Token type_comment_var;
            if (
                (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            )
            {
                debugMessageln("%d _tmp_55[%d-%d]: %s succeeded!", level, _mark, mark(), "TYPE_COMMENT");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "TYPE_COMMENT");
                _res = type_comment_var;
                cache.putResult(_mark, _TMP_55_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_55[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "TYPE_COMMENT");
        }
        debugMessageln("Fail at %d: _tmp_55", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_55_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop0_57: ',' with_item
    public SSTNode[] _loop0_57_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_57_ID)) {
            _res = cache.getResult(_mark, _LOOP0_57_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ',' with_item
            debugMessageln("%d> _loop0_57[%d-%d]: %s", level, _mark, mark(), "',' with_item");
            Token _literal;
            SSTNode elem;
            while (
                (_literal = expect(12)) != null  // token=','
                &&
                (elem = with_item_rule()) != null  // with_item
            )
            {
                _res = elem;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' with_item");
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_57[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' with_item");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_57_ID, _seq);
        level--;
        return _seq;
    }

    // _gather_56: with_item _loop0_57
    public SSTNode[] _gather_56_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _GATHER_56_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, _GATHER_56_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // with_item _loop0_57
            debugMessageln("%d> _gather_56[%d-%d]: %s", level, _mark, mark(), "with_item _loop0_57");
            SSTNode elem;
            SSTNode[] seq;
            if (
                (elem = with_item_rule()) != null  // with_item
                &&
                (seq = _loop0_57_rule()) != null  // _loop0_57
            )
            {
                debugMessageln("%d _gather_56[%d-%d]: %s succeeded!", level, _mark, mark(), "with_item _loop0_57");
                _res = insertInFront(elem, seq);
                cache.putResult(_mark, _GATHER_56_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s _gather_56[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "with_item _loop0_57");
        }
        debugMessageln("Fail at %d: _gather_56", _mark);
        _res = null;
        cache.putResult(_mark, _GATHER_56_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // _loop0_59: ',' with_item
    public SSTNode[] _loop0_59_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_59_ID)) {
            _res = cache.getResult(_mark, _LOOP0_59_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ',' with_item
            debugMessageln("%d> _loop0_59[%d-%d]: %s", level, _mark, mark(), "',' with_item");
            Token _literal;
            SSTNode elem;
            while (
                (_literal = expect(12)) != null  // token=','
                &&
                (elem = with_item_rule()) != null  // with_item
            )
            {
                _res = elem;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' with_item");
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_59[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' with_item");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_59_ID, _seq);
        level--;
        return _seq;
    }

    // _gather_58: with_item _loop0_59
    public SSTNode[] _gather_58_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _GATHER_58_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, _GATHER_58_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // with_item _loop0_59
            debugMessageln("%d> _gather_58[%d-%d]: %s", level, _mark, mark(), "with_item _loop0_59");
            SSTNode elem;
            SSTNode[] seq;
            if (
                (elem = with_item_rule()) != null  // with_item
                &&
                (seq = _loop0_59_rule()) != null  // _loop0_59
            )
            {
                debugMessageln("%d _gather_58[%d-%d]: %s succeeded!", level, _mark, mark(), "with_item _loop0_59");
                _res = insertInFront(elem, seq);
                cache.putResult(_mark, _GATHER_58_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s _gather_58[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "with_item _loop0_59");
        }
        debugMessageln("Fail at %d: _gather_58", _mark);
        _res = null;
        cache.putResult(_mark, _GATHER_58_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // _tmp_60: TYPE_COMMENT
    public Object _tmp_60_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_60_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_60_ID);
            level--;
            return (Object)_res;
        }
        { // TYPE_COMMENT
            debugMessageln("%d> _tmp_60[%d-%d]: %s", level, _mark, mark(), "TYPE_COMMENT");
            Token type_comment_var;
            if (
                (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            )
            {
                debugMessageln("%d _tmp_60[%d-%d]: %s succeeded!", level, _mark, mark(), "TYPE_COMMENT");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "TYPE_COMMENT");
                _res = type_comment_var;
                cache.putResult(_mark, _TMP_60_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_60[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "TYPE_COMMENT");
        }
        debugMessageln("Fail at %d: _tmp_60", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_60_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_61: ',' | ')' | ':'
    public Object _tmp_61_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_61_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_61_ID);
            level--;
            return (Object)_res;
        }
        { // ','
            debugMessageln("%d> _tmp_61[%d-%d]: %s", level, _mark, mark(), "','");
            Token _literal;
            if (
                (_literal = expect(12)) != null  // token=','
            )
            {
                debugMessageln("%d _tmp_61[%d-%d]: %s succeeded!", level, _mark, mark(), "','");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "','");
                _res = _literal;
                cache.putResult(_mark, _TMP_61_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_61[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','");
        }
        { // ')'
            debugMessageln("%d> _tmp_61[%d-%d]: %s", level, _mark, mark(), "')'");
            Token _literal;
            if (
                (_literal = expect(8)) != null  // token=')'
            )
            {
                debugMessageln("%d _tmp_61[%d-%d]: %s succeeded!", level, _mark, mark(), "')'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "')'");
                _res = _literal;
                cache.putResult(_mark, _TMP_61_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_61[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "')'");
        }
        { // ':'
            debugMessageln("%d> _tmp_61[%d-%d]: %s", level, _mark, mark(), "':'");
            Token _literal;
            if (
                (_literal = expect(11)) != null  // token=':'
            )
            {
                debugMessageln("%d _tmp_61[%d-%d]: %s succeeded!", level, _mark, mark(), "':'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "':'");
                _res = _literal;
                cache.putResult(_mark, _TMP_61_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_61[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "':'");
        }
        debugMessageln("Fail at %d: _tmp_61", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_61_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop1_62: except_block
    public SSTNode[] _loop1_62_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP1_62_ID)) {
            _res = cache.getResult(_mark, _LOOP1_62_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // except_block
            debugMessageln("%d> _loop1_62[%d-%d]: %s", level, _mark, mark(), "except_block");
            SSTNode except_block_var;
            while (
                (except_block_var = except_block_rule()) != null  // except_block
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "except_block");
                _res = except_block_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop1_62[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "except_block");
        }
        if (_children.size() == 0) {
            level--;
            return null;
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP1_62_ID, _seq);
        level--;
        return _seq;
    }

    // _tmp_63: else_block
    public Object _tmp_63_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_63_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_63_ID);
            level--;
            return (Object)_res;
        }
        { // else_block
            debugMessageln("%d> _tmp_63[%d-%d]: %s", level, _mark, mark(), "else_block");
            SSTNode[] else_block_var;
            if (
                (else_block_var = else_block_rule()) != null  // else_block
            )
            {
                debugMessageln("%d _tmp_63[%d-%d]: %s succeeded!", level, _mark, mark(), "else_block");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "else_block");
                _res = else_block_var;
                cache.putResult(_mark, _TMP_63_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_63[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "else_block");
        }
        debugMessageln("Fail at %d: _tmp_63", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_63_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_64: finally_block
    public Object _tmp_64_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_64_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_64_ID);
            level--;
            return (Object)_res;
        }
        { // finally_block
            debugMessageln("%d> _tmp_64[%d-%d]: %s", level, _mark, mark(), "finally_block");
            SSTNode[] finally_block_var;
            if (
                (finally_block_var = finally_block_rule()) != null  // finally_block
            )
            {
                debugMessageln("%d _tmp_64[%d-%d]: %s succeeded!", level, _mark, mark(), "finally_block");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "finally_block");
                _res = finally_block_var;
                cache.putResult(_mark, _TMP_64_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_64[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "finally_block");
        }
        debugMessageln("Fail at %d: _tmp_64", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_64_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_65: 'as' NAME
    public Object _tmp_65_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_65_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_65_ID);
            level--;
            return (Object)_res;
        }
        { // 'as' NAME
            debugMessageln("%d> _tmp_65[%d-%d]: %s", level, _mark, mark(), "'as' NAME");
            Token _keyword;
            SSTNode z;
            if (
                (_keyword = expect(520)) != null  // token='as'
                &&
                (z = name_token()) != null  // NAME
            )
            {
                debugMessageln("%d _tmp_65[%d-%d]: %s succeeded!", level, _mark, mark(), "'as' NAME");
                _res = z;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'as' NAME");
                cache.putResult(_mark, _TMP_65_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_65[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'as' NAME");
        }
        debugMessageln("Fail at %d: _tmp_65", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_65_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop1_66: case_block
    public SSTNode[] _loop1_66_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP1_66_ID)) {
            _res = cache.getResult(_mark, _LOOP1_66_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // case_block
            debugMessageln("%d> _loop1_66[%d-%d]: %s", level, _mark, mark(), "case_block");
            SSTNode case_block_var;
            while (
                (case_block_var = case_block_rule()) != null  // case_block
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "case_block");
                _res = case_block_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop1_66[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "case_block");
        }
        if (_children.size() == 0) {
            level--;
            return null;
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP1_66_ID, _seq);
        level--;
        return _seq;
    }

    // _loop0_68: '|' closed_pattern
    public SSTNode[] _loop0_68_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_68_ID)) {
            _res = cache.getResult(_mark, _LOOP0_68_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // '|' closed_pattern
            debugMessageln("%d> _loop0_68[%d-%d]: %s", level, _mark, mark(), "'|' closed_pattern");
            Token _literal;
            SSTNode elem;
            while (
                (_literal = expect(18)) != null  // token='|'
                &&
                (elem = closed_pattern_rule()) != null  // closed_pattern
            )
            {
                _res = elem;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'|' closed_pattern");
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_68[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'|' closed_pattern");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_68_ID, _seq);
        level--;
        return _seq;
    }

    // _gather_67: closed_pattern _loop0_68
    public SSTNode[] _gather_67_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _GATHER_67_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, _GATHER_67_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // closed_pattern _loop0_68
            debugMessageln("%d> _gather_67[%d-%d]: %s", level, _mark, mark(), "closed_pattern _loop0_68");
            SSTNode elem;
            SSTNode[] seq;
            if (
                (elem = closed_pattern_rule()) != null  // closed_pattern
                &&
                (seq = _loop0_68_rule()) != null  // _loop0_68
            )
            {
                debugMessageln("%d _gather_67[%d-%d]: %s succeeded!", level, _mark, mark(), "closed_pattern _loop0_68");
                _res = insertInFront(elem, seq);
                cache.putResult(_mark, _GATHER_67_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s _gather_67[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "closed_pattern _loop0_68");
        }
        debugMessageln("Fail at %d: _gather_67", _mark);
        _res = null;
        cache.putResult(_mark, _GATHER_67_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // _tmp_69: '+' | '-'
    public Object _tmp_69_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_69_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_69_ID);
            level--;
            return (Object)_res;
        }
        { // '+'
            debugMessageln("%d> _tmp_69[%d-%d]: %s", level, _mark, mark(), "'+'");
            Token _literal;
            if (
                (_literal = expect(14)) != null  // token='+'
            )
            {
                debugMessageln("%d _tmp_69[%d-%d]: %s succeeded!", level, _mark, mark(), "'+'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'+'");
                _res = _literal;
                cache.putResult(_mark, _TMP_69_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_69[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'+'");
        }
        { // '-'
            debugMessageln("%d> _tmp_69[%d-%d]: %s", level, _mark, mark(), "'-'");
            Token _literal;
            if (
                (_literal = expect(15)) != null  // token='-'
            )
            {
                debugMessageln("%d _tmp_69[%d-%d]: %s succeeded!", level, _mark, mark(), "'-'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'-'");
                _res = _literal;
                cache.putResult(_mark, _TMP_69_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_69[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'-'");
        }
        debugMessageln("Fail at %d: _tmp_69", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_69_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_70: '.' | '(' | '='
    public Object _tmp_70_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_70_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_70_ID);
            level--;
            return (Object)_res;
        }
        { // '.'
            debugMessageln("%d> _tmp_70[%d-%d]: %s", level, _mark, mark(), "'.'");
            Token _literal;
            if (
                (_literal = expect(23)) != null  // token='.'
            )
            {
                debugMessageln("%d _tmp_70[%d-%d]: %s succeeded!", level, _mark, mark(), "'.'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'.'");
                _res = _literal;
                cache.putResult(_mark, _TMP_70_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_70[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'.'");
        }
        { // '('
            debugMessageln("%d> _tmp_70[%d-%d]: %s", level, _mark, mark(), "'('");
            Token _literal;
            if (
                (_literal = expect(7)) != null  // token='('
            )
            {
                debugMessageln("%d _tmp_70[%d-%d]: %s succeeded!", level, _mark, mark(), "'('");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'('");
                _res = _literal;
                cache.putResult(_mark, _TMP_70_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_70[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'('");
        }
        { // '='
            debugMessageln("%d> _tmp_70[%d-%d]: %s", level, _mark, mark(), "'='");
            Token _literal;
            if (
                (_literal = expect(22)) != null  // token='='
            )
            {
                debugMessageln("%d _tmp_70[%d-%d]: %s succeeded!", level, _mark, mark(), "'='");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'='");
                _res = _literal;
                cache.putResult(_mark, _TMP_70_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_70[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'='");
        }
        debugMessageln("Fail at %d: _tmp_70", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_70_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_71: '.' | '(' | '='
    public Object _tmp_71_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_71_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_71_ID);
            level--;
            return (Object)_res;
        }
        { // '.'
            debugMessageln("%d> _tmp_71[%d-%d]: %s", level, _mark, mark(), "'.'");
            Token _literal;
            if (
                (_literal = expect(23)) != null  // token='.'
            )
            {
                debugMessageln("%d _tmp_71[%d-%d]: %s succeeded!", level, _mark, mark(), "'.'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'.'");
                _res = _literal;
                cache.putResult(_mark, _TMP_71_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_71[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'.'");
        }
        { // '('
            debugMessageln("%d> _tmp_71[%d-%d]: %s", level, _mark, mark(), "'('");
            Token _literal;
            if (
                (_literal = expect(7)) != null  // token='('
            )
            {
                debugMessageln("%d _tmp_71[%d-%d]: %s succeeded!", level, _mark, mark(), "'('");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'('");
                _res = _literal;
                cache.putResult(_mark, _TMP_71_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_71[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'('");
        }
        { // '='
            debugMessageln("%d> _tmp_71[%d-%d]: %s", level, _mark, mark(), "'='");
            Token _literal;
            if (
                (_literal = expect(22)) != null  // token='='
            )
            {
                debugMessageln("%d _tmp_71[%d-%d]: %s succeeded!", level, _mark, mark(), "'='");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'='");
                _res = _literal;
                cache.putResult(_mark, _TMP_71_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_71[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'='");
        }
        debugMessageln("Fail at %d: _tmp_71", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_71_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop0_73: ',' maybe_star_pattern
    public SSTNode[] _loop0_73_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_73_ID)) {
            _res = cache.getResult(_mark, _LOOP0_73_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ',' maybe_star_pattern
            debugMessageln("%d> _loop0_73[%d-%d]: %s", level, _mark, mark(), "',' maybe_star_pattern");
            Token _literal;
            SSTNode elem;
            while (
                (_literal = expect(12)) != null  // token=','
                &&
                (elem = maybe_star_pattern_rule()) != null  // maybe_star_pattern
            )
            {
                _res = elem;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' maybe_star_pattern");
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_73[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' maybe_star_pattern");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_73_ID, _seq);
        level--;
        return _seq;
    }

    // _gather_72: maybe_star_pattern _loop0_73
    public SSTNode[] _gather_72_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _GATHER_72_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, _GATHER_72_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // maybe_star_pattern _loop0_73
            debugMessageln("%d> _gather_72[%d-%d]: %s", level, _mark, mark(), "maybe_star_pattern _loop0_73");
            SSTNode elem;
            SSTNode[] seq;
            if (
                (elem = maybe_star_pattern_rule()) != null  // maybe_star_pattern
                &&
                (seq = _loop0_73_rule()) != null  // _loop0_73
            )
            {
                debugMessageln("%d _gather_72[%d-%d]: %s succeeded!", level, _mark, mark(), "maybe_star_pattern _loop0_73");
                _res = insertInFront(elem, seq);
                cache.putResult(_mark, _GATHER_72_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s _gather_72[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "maybe_star_pattern _loop0_73");
        }
        debugMessageln("Fail at %d: _gather_72", _mark);
        _res = null;
        cache.putResult(_mark, _GATHER_72_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // _tmp_74: capture_pattern | wildcard_pattern
    public Object _tmp_74_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_74_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_74_ID);
            level--;
            return (Object)_res;
        }
        { // capture_pattern
            debugMessageln("%d> _tmp_74[%d-%d]: %s", level, _mark, mark(), "capture_pattern");
            SSTNode capture_pattern_var;
            if (
                (capture_pattern_var = capture_pattern_rule()) != null  // capture_pattern
            )
            {
                debugMessageln("%d _tmp_74[%d-%d]: %s succeeded!", level, _mark, mark(), "capture_pattern");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "capture_pattern");
                _res = capture_pattern_var;
                cache.putResult(_mark, _TMP_74_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_74[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "capture_pattern");
        }
        { // wildcard_pattern
            debugMessageln("%d> _tmp_74[%d-%d]: %s", level, _mark, mark(), "wildcard_pattern");
            SSTNode wildcard_pattern_var;
            if (
                (wildcard_pattern_var = wildcard_pattern_rule()) != null  // wildcard_pattern
            )
            {
                debugMessageln("%d _tmp_74[%d-%d]: %s succeeded!", level, _mark, mark(), "wildcard_pattern");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "wildcard_pattern");
                _res = wildcard_pattern_var;
                cache.putResult(_mark, _TMP_74_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_74[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "wildcard_pattern");
        }
        debugMessageln("Fail at %d: _tmp_74", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_74_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop0_76: ',' key_value_pattern
    public SSTNode[] _loop0_76_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_76_ID)) {
            _res = cache.getResult(_mark, _LOOP0_76_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ',' key_value_pattern
            debugMessageln("%d> _loop0_76[%d-%d]: %s", level, _mark, mark(), "',' key_value_pattern");
            Token _literal;
            SSTNode[] elem;
            while (
                (_literal = expect(12)) != null  // token=','
                &&
                (elem = key_value_pattern_rule()) != null  // key_value_pattern
            )
            {
                _res = elem;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' key_value_pattern");
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_76[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' key_value_pattern");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_76_ID, _seq);
        level--;
        return _seq;
    }

    // _gather_75: key_value_pattern _loop0_76
    public SSTNode[] _gather_75_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _GATHER_75_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, _GATHER_75_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // key_value_pattern _loop0_76
            debugMessageln("%d> _gather_75[%d-%d]: %s", level, _mark, mark(), "key_value_pattern _loop0_76");
            SSTNode[] elem;
            SSTNode[] seq;
            if (
                (elem = key_value_pattern_rule()) != null  // key_value_pattern
                &&
                (seq = _loop0_76_rule()) != null  // _loop0_76
            )
            {
                debugMessageln("%d _gather_75[%d-%d]: %s succeeded!", level, _mark, mark(), "key_value_pattern _loop0_76");
                _res = insertInFront(elem, seq);
                cache.putResult(_mark, _GATHER_75_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s _gather_75[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "key_value_pattern _loop0_76");
        }
        debugMessageln("Fail at %d: _gather_75", _mark);
        _res = null;
        cache.putResult(_mark, _GATHER_75_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // _tmp_77: literal_pattern | value_pattern
    public Object _tmp_77_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_77_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_77_ID);
            level--;
            return (Object)_res;
        }
        { // literal_pattern
            debugMessageln("%d> _tmp_77[%d-%d]: %s", level, _mark, mark(), "literal_pattern");
            SSTNode literal_pattern_var;
            if (
                (literal_pattern_var = literal_pattern_rule()) != null  // literal_pattern
            )
            {
                debugMessageln("%d _tmp_77[%d-%d]: %s succeeded!", level, _mark, mark(), "literal_pattern");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "literal_pattern");
                _res = literal_pattern_var;
                cache.putResult(_mark, _TMP_77_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_77[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "literal_pattern");
        }
        { // value_pattern
            debugMessageln("%d> _tmp_77[%d-%d]: %s", level, _mark, mark(), "value_pattern");
            SSTNode value_pattern_var;
            if (
                (value_pattern_var = value_pattern_rule()) != null  // value_pattern
            )
            {
                debugMessageln("%d _tmp_77[%d-%d]: %s succeeded!", level, _mark, mark(), "value_pattern");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "value_pattern");
                _res = value_pattern_var;
                cache.putResult(_mark, _TMP_77_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_77[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "value_pattern");
        }
        debugMessageln("Fail at %d: _tmp_77", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_77_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop0_79: ',' pattern
    public SSTNode[] _loop0_79_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_79_ID)) {
            _res = cache.getResult(_mark, _LOOP0_79_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ',' pattern
            debugMessageln("%d> _loop0_79[%d-%d]: %s", level, _mark, mark(), "',' pattern");
            Token _literal;
            SSTNode elem;
            while (
                (_literal = expect(12)) != null  // token=','
                &&
                (elem = pattern_rule()) != null  // pattern
            )
            {
                _res = elem;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' pattern");
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_79[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' pattern");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_79_ID, _seq);
        level--;
        return _seq;
    }

    // _gather_78: pattern _loop0_79
    public SSTNode[] _gather_78_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _GATHER_78_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, _GATHER_78_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // pattern _loop0_79
            debugMessageln("%d> _gather_78[%d-%d]: %s", level, _mark, mark(), "pattern _loop0_79");
            SSTNode elem;
            SSTNode[] seq;
            if (
                (elem = pattern_rule()) != null  // pattern
                &&
                (seq = _loop0_79_rule()) != null  // _loop0_79
            )
            {
                debugMessageln("%d _gather_78[%d-%d]: %s succeeded!", level, _mark, mark(), "pattern _loop0_79");
                _res = insertInFront(elem, seq);
                cache.putResult(_mark, _GATHER_78_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s _gather_78[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "pattern _loop0_79");
        }
        debugMessageln("Fail at %d: _gather_78", _mark);
        _res = null;
        cache.putResult(_mark, _GATHER_78_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // _loop0_81: ',' keyword_pattern
    public SSTNode[] _loop0_81_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_81_ID)) {
            _res = cache.getResult(_mark, _LOOP0_81_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ',' keyword_pattern
            debugMessageln("%d> _loop0_81[%d-%d]: %s", level, _mark, mark(), "',' keyword_pattern");
            Token _literal;
            SSTNode elem;
            while (
                (_literal = expect(12)) != null  // token=','
                &&
                (elem = keyword_pattern_rule()) != null  // keyword_pattern
            )
            {
                _res = elem;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' keyword_pattern");
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_81[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' keyword_pattern");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_81_ID, _seq);
        level--;
        return _seq;
    }

    // _gather_80: keyword_pattern _loop0_81
    public SSTNode[] _gather_80_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _GATHER_80_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, _GATHER_80_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // keyword_pattern _loop0_81
            debugMessageln("%d> _gather_80[%d-%d]: %s", level, _mark, mark(), "keyword_pattern _loop0_81");
            SSTNode elem;
            SSTNode[] seq;
            if (
                (elem = keyword_pattern_rule()) != null  // keyword_pattern
                &&
                (seq = _loop0_81_rule()) != null  // _loop0_81
            )
            {
                debugMessageln("%d _gather_80[%d-%d]: %s succeeded!", level, _mark, mark(), "keyword_pattern _loop0_81");
                _res = insertInFront(elem, seq);
                cache.putResult(_mark, _GATHER_80_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s _gather_80[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "keyword_pattern _loop0_81");
        }
        debugMessageln("Fail at %d: _gather_80", _mark);
        _res = null;
        cache.putResult(_mark, _GATHER_80_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // _tmp_82: star_expressions
    public Object _tmp_82_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_82_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_82_ID);
            level--;
            return (Object)_res;
        }
        { // star_expressions
            debugMessageln("%d> _tmp_82[%d-%d]: %s", level, _mark, mark(), "star_expressions");
            SSTNode star_expressions_var;
            if (
                (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            )
            {
                debugMessageln("%d _tmp_82[%d-%d]: %s succeeded!", level, _mark, mark(), "star_expressions");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "star_expressions");
                _res = star_expressions_var;
                cache.putResult(_mark, _TMP_82_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_82[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_expressions");
        }
        debugMessageln("Fail at %d: _tmp_82", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_82_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_83: 'from' expression
    public Object _tmp_83_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_83_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_83_ID);
            level--;
            return (Object)_res;
        }
        { // 'from' expression
            debugMessageln("%d> _tmp_83[%d-%d]: %s", level, _mark, mark(), "'from' expression");
            Token _keyword;
            SSTNode z;
            if (
                (_keyword = expect(514)) != null  // token='from'
                &&
                (z = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d _tmp_83[%d-%d]: %s succeeded!", level, _mark, mark(), "'from' expression");
                _res = z;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'from' expression");
                cache.putResult(_mark, _TMP_83_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_83[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'from' expression");
        }
        debugMessageln("Fail at %d: _tmp_83", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_83_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_84: params
    public Object _tmp_84_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_84_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_84_ID);
            level--;
            return (Object)_res;
        }
        { // params
            debugMessageln("%d> _tmp_84[%d-%d]: %s", level, _mark, mark(), "params");
            SSTNode params_var;
            if (
                (params_var = params_rule()) != null  // params
            )
            {
                debugMessageln("%d _tmp_84[%d-%d]: %s succeeded!", level, _mark, mark(), "params");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "params");
                _res = params_var;
                cache.putResult(_mark, _TMP_84_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_84[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "params");
        }
        debugMessageln("Fail at %d: _tmp_84", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_84_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_85: '->' expression
    public Object _tmp_85_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_85_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_85_ID);
            level--;
            return (Object)_res;
        }
        { // '->' expression
            debugMessageln("%d> _tmp_85[%d-%d]: %s", level, _mark, mark(), "'->' expression");
            Token _literal;
            SSTNode z;
            if (
                (_literal = expect(51)) != null  // token='->'
                &&
                (z = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d _tmp_85[%d-%d]: %s succeeded!", level, _mark, mark(), "'->' expression");
                _res = z;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'->' expression");
                cache.putResult(_mark, _TMP_85_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_85[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'->' expression");
        }
        debugMessageln("Fail at %d: _tmp_85", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_85_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_86: func_type_comment
    public Object _tmp_86_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_86_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_86_ID);
            level--;
            return (Object)_res;
        }
        { // func_type_comment
            debugMessageln("%d> _tmp_86[%d-%d]: %s", level, _mark, mark(), "func_type_comment");
            SSTNode[] func_type_comment_var;
            if (
                (func_type_comment_var = func_type_comment_rule()) != null  // func_type_comment
            )
            {
                debugMessageln("%d _tmp_86[%d-%d]: %s succeeded!", level, _mark, mark(), "func_type_comment");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "func_type_comment");
                _res = func_type_comment_var;
                cache.putResult(_mark, _TMP_86_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_86[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "func_type_comment");
        }
        debugMessageln("Fail at %d: _tmp_86", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_86_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_87: params
    public Object _tmp_87_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_87_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_87_ID);
            level--;
            return (Object)_res;
        }
        { // params
            debugMessageln("%d> _tmp_87[%d-%d]: %s", level, _mark, mark(), "params");
            SSTNode params_var;
            if (
                (params_var = params_rule()) != null  // params
            )
            {
                debugMessageln("%d _tmp_87[%d-%d]: %s succeeded!", level, _mark, mark(), "params");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "params");
                _res = params_var;
                cache.putResult(_mark, _TMP_87_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_87[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "params");
        }
        debugMessageln("Fail at %d: _tmp_87", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_87_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_88: '->' expression
    public Object _tmp_88_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_88_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_88_ID);
            level--;
            return (Object)_res;
        }
        { // '->' expression
            debugMessageln("%d> _tmp_88[%d-%d]: %s", level, _mark, mark(), "'->' expression");
            Token _literal;
            SSTNode z;
            if (
                (_literal = expect(51)) != null  // token='->'
                &&
                (z = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d _tmp_88[%d-%d]: %s succeeded!", level, _mark, mark(), "'->' expression");
                _res = z;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'->' expression");
                cache.putResult(_mark, _TMP_88_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_88[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'->' expression");
        }
        debugMessageln("Fail at %d: _tmp_88", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_88_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_89: func_type_comment
    public Object _tmp_89_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_89_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_89_ID);
            level--;
            return (Object)_res;
        }
        { // func_type_comment
            debugMessageln("%d> _tmp_89[%d-%d]: %s", level, _mark, mark(), "func_type_comment");
            SSTNode[] func_type_comment_var;
            if (
                (func_type_comment_var = func_type_comment_rule()) != null  // func_type_comment
            )
            {
                debugMessageln("%d _tmp_89[%d-%d]: %s succeeded!", level, _mark, mark(), "func_type_comment");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "func_type_comment");
                _res = func_type_comment_var;
                cache.putResult(_mark, _TMP_89_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_89[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "func_type_comment");
        }
        debugMessageln("Fail at %d: _tmp_89", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_89_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_90: NEWLINE INDENT
    public Object _tmp_90_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_90_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_90_ID);
            level--;
            return (Object)_res;
        }
        { // NEWLINE INDENT
            debugMessageln("%d> _tmp_90[%d-%d]: %s", level, _mark, mark(), "NEWLINE INDENT");
            Token indent_var;
            Token newline_var;
            if (
                (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
                &&
                (indent_var = expect(Token.Kind.INDENT)) != null  // token='INDENT'
            )
            {
                debugMessageln("%d _tmp_90[%d-%d]: %s succeeded!", level, _mark, mark(), "NEWLINE INDENT");
                debugMessageln("Hit without action [%d:%d]: %s", _mark, mark(), "NEWLINE INDENT");
                _res = dummyName(newline_var, indent_var);
                cache.putResult(_mark, _TMP_90_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_90[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "NEWLINE INDENT");
        }
        debugMessageln("Fail at %d: _tmp_90", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_90_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop0_91: param_no_default
    public SSTNode[] _loop0_91_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_91_ID)) {
            _res = cache.getResult(_mark, _LOOP0_91_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // param_no_default
            debugMessageln("%d> _loop0_91[%d-%d]: %s", level, _mark, mark(), "param_no_default");
            SSTNode param_no_default_var;
            while (
                (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "param_no_default");
                _res = param_no_default_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_91[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "param_no_default");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_91_ID, _seq);
        level--;
        return _seq;
    }

    // _loop0_92: param_with_default
    public SSTNode[] _loop0_92_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_92_ID)) {
            _res = cache.getResult(_mark, _LOOP0_92_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // param_with_default
            debugMessageln("%d> _loop0_92[%d-%d]: %s", level, _mark, mark(), "param_with_default");
            SSTNode[] param_with_default_var;
            while (
                (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "param_with_default");
                _res = param_with_default_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_92[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "param_with_default");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_92_ID, _seq);
        level--;
        return _seq;
    }

    // _tmp_93: star_etc
    public Object _tmp_93_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_93_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_93_ID);
            level--;
            return (Object)_res;
        }
        { // star_etc
            debugMessageln("%d> _tmp_93[%d-%d]: %s", level, _mark, mark(), "star_etc");
            SSTNode[] star_etc_var;
            if (
                (star_etc_var = star_etc_rule()) != null  // star_etc
            )
            {
                debugMessageln("%d _tmp_93[%d-%d]: %s succeeded!", level, _mark, mark(), "star_etc");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "star_etc");
                _res = star_etc_var;
                cache.putResult(_mark, _TMP_93_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_93[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_etc");
        }
        debugMessageln("Fail at %d: _tmp_93", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_93_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop0_94: param_with_default
    public SSTNode[] _loop0_94_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_94_ID)) {
            _res = cache.getResult(_mark, _LOOP0_94_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // param_with_default
            debugMessageln("%d> _loop0_94[%d-%d]: %s", level, _mark, mark(), "param_with_default");
            SSTNode[] param_with_default_var;
            while (
                (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "param_with_default");
                _res = param_with_default_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_94[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "param_with_default");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_94_ID, _seq);
        level--;
        return _seq;
    }

    // _tmp_95: star_etc
    public Object _tmp_95_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_95_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_95_ID);
            level--;
            return (Object)_res;
        }
        { // star_etc
            debugMessageln("%d> _tmp_95[%d-%d]: %s", level, _mark, mark(), "star_etc");
            SSTNode[] star_etc_var;
            if (
                (star_etc_var = star_etc_rule()) != null  // star_etc
            )
            {
                debugMessageln("%d _tmp_95[%d-%d]: %s succeeded!", level, _mark, mark(), "star_etc");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "star_etc");
                _res = star_etc_var;
                cache.putResult(_mark, _TMP_95_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_95[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_etc");
        }
        debugMessageln("Fail at %d: _tmp_95", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_95_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop1_96: param_no_default
    public SSTNode[] _loop1_96_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP1_96_ID)) {
            _res = cache.getResult(_mark, _LOOP1_96_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // param_no_default
            debugMessageln("%d> _loop1_96[%d-%d]: %s", level, _mark, mark(), "param_no_default");
            SSTNode param_no_default_var;
            while (
                (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "param_no_default");
                _res = param_no_default_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop1_96[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "param_no_default");
        }
        if (_children.size() == 0) {
            level--;
            return null;
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP1_96_ID, _seq);
        level--;
        return _seq;
    }

    // _loop0_97: param_with_default
    public SSTNode[] _loop0_97_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_97_ID)) {
            _res = cache.getResult(_mark, _LOOP0_97_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // param_with_default
            debugMessageln("%d> _loop0_97[%d-%d]: %s", level, _mark, mark(), "param_with_default");
            SSTNode[] param_with_default_var;
            while (
                (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "param_with_default");
                _res = param_with_default_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_97[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "param_with_default");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_97_ID, _seq);
        level--;
        return _seq;
    }

    // _tmp_98: star_etc
    public Object _tmp_98_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_98_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_98_ID);
            level--;
            return (Object)_res;
        }
        { // star_etc
            debugMessageln("%d> _tmp_98[%d-%d]: %s", level, _mark, mark(), "star_etc");
            SSTNode[] star_etc_var;
            if (
                (star_etc_var = star_etc_rule()) != null  // star_etc
            )
            {
                debugMessageln("%d _tmp_98[%d-%d]: %s succeeded!", level, _mark, mark(), "star_etc");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "star_etc");
                _res = star_etc_var;
                cache.putResult(_mark, _TMP_98_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_98[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_etc");
        }
        debugMessageln("Fail at %d: _tmp_98", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_98_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop1_99: param_with_default
    public SSTNode[] _loop1_99_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP1_99_ID)) {
            _res = cache.getResult(_mark, _LOOP1_99_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // param_with_default
            debugMessageln("%d> _loop1_99[%d-%d]: %s", level, _mark, mark(), "param_with_default");
            SSTNode[] param_with_default_var;
            while (
                (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "param_with_default");
                _res = param_with_default_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop1_99[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "param_with_default");
        }
        if (_children.size() == 0) {
            level--;
            return null;
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP1_99_ID, _seq);
        level--;
        return _seq;
    }

    // _tmp_100: star_etc
    public Object _tmp_100_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_100_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_100_ID);
            level--;
            return (Object)_res;
        }
        { // star_etc
            debugMessageln("%d> _tmp_100[%d-%d]: %s", level, _mark, mark(), "star_etc");
            SSTNode[] star_etc_var;
            if (
                (star_etc_var = star_etc_rule()) != null  // star_etc
            )
            {
                debugMessageln("%d _tmp_100[%d-%d]: %s succeeded!", level, _mark, mark(), "star_etc");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "star_etc");
                _res = star_etc_var;
                cache.putResult(_mark, _TMP_100_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_100[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_etc");
        }
        debugMessageln("Fail at %d: _tmp_100", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_100_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop1_101: param_no_default
    public SSTNode[] _loop1_101_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP1_101_ID)) {
            _res = cache.getResult(_mark, _LOOP1_101_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // param_no_default
            debugMessageln("%d> _loop1_101[%d-%d]: %s", level, _mark, mark(), "param_no_default");
            SSTNode param_no_default_var;
            while (
                (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "param_no_default");
                _res = param_no_default_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop1_101[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "param_no_default");
        }
        if (_children.size() == 0) {
            level--;
            return null;
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP1_101_ID, _seq);
        level--;
        return _seq;
    }

    // _loop1_102: param_no_default
    public SSTNode[] _loop1_102_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP1_102_ID)) {
            _res = cache.getResult(_mark, _LOOP1_102_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // param_no_default
            debugMessageln("%d> _loop1_102[%d-%d]: %s", level, _mark, mark(), "param_no_default");
            SSTNode param_no_default_var;
            while (
                (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "param_no_default");
                _res = param_no_default_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop1_102[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "param_no_default");
        }
        if (_children.size() == 0) {
            level--;
            return null;
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP1_102_ID, _seq);
        level--;
        return _seq;
    }

    // _loop0_103: param_no_default
    public SSTNode[] _loop0_103_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_103_ID)) {
            _res = cache.getResult(_mark, _LOOP0_103_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // param_no_default
            debugMessageln("%d> _loop0_103[%d-%d]: %s", level, _mark, mark(), "param_no_default");
            SSTNode param_no_default_var;
            while (
                (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "param_no_default");
                _res = param_no_default_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_103[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "param_no_default");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_103_ID, _seq);
        level--;
        return _seq;
    }

    // _loop1_104: param_with_default
    public SSTNode[] _loop1_104_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP1_104_ID)) {
            _res = cache.getResult(_mark, _LOOP1_104_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // param_with_default
            debugMessageln("%d> _loop1_104[%d-%d]: %s", level, _mark, mark(), "param_with_default");
            SSTNode[] param_with_default_var;
            while (
                (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "param_with_default");
                _res = param_with_default_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop1_104[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "param_with_default");
        }
        if (_children.size() == 0) {
            level--;
            return null;
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP1_104_ID, _seq);
        level--;
        return _seq;
    }

    // _loop0_105: param_no_default
    public SSTNode[] _loop0_105_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_105_ID)) {
            _res = cache.getResult(_mark, _LOOP0_105_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // param_no_default
            debugMessageln("%d> _loop0_105[%d-%d]: %s", level, _mark, mark(), "param_no_default");
            SSTNode param_no_default_var;
            while (
                (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "param_no_default");
                _res = param_no_default_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_105[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "param_no_default");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_105_ID, _seq);
        level--;
        return _seq;
    }

    // _loop1_106: param_with_default
    public SSTNode[] _loop1_106_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP1_106_ID)) {
            _res = cache.getResult(_mark, _LOOP1_106_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // param_with_default
            debugMessageln("%d> _loop1_106[%d-%d]: %s", level, _mark, mark(), "param_with_default");
            SSTNode[] param_with_default_var;
            while (
                (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "param_with_default");
                _res = param_with_default_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop1_106[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "param_with_default");
        }
        if (_children.size() == 0) {
            level--;
            return null;
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP1_106_ID, _seq);
        level--;
        return _seq;
    }

    // _loop0_107: param_maybe_default
    public SSTNode[] _loop0_107_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_107_ID)) {
            _res = cache.getResult(_mark, _LOOP0_107_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // param_maybe_default
            debugMessageln("%d> _loop0_107[%d-%d]: %s", level, _mark, mark(), "param_maybe_default");
            SSTNode[] param_maybe_default_var;
            while (
                (param_maybe_default_var = param_maybe_default_rule()) != null  // param_maybe_default
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "param_maybe_default");
                _res = param_maybe_default_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_107[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "param_maybe_default");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_107_ID, _seq);
        level--;
        return _seq;
    }

    // _tmp_108: kwds
    public Object _tmp_108_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_108_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_108_ID);
            level--;
            return (Object)_res;
        }
        { // kwds
            debugMessageln("%d> _tmp_108[%d-%d]: %s", level, _mark, mark(), "kwds");
            SSTNode kwds_var;
            if (
                (kwds_var = kwds_rule()) != null  // kwds
            )
            {
                debugMessageln("%d _tmp_108[%d-%d]: %s succeeded!", level, _mark, mark(), "kwds");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "kwds");
                _res = kwds_var;
                cache.putResult(_mark, _TMP_108_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_108[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "kwds");
        }
        debugMessageln("Fail at %d: _tmp_108", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_108_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop1_109: param_maybe_default
    public SSTNode[] _loop1_109_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP1_109_ID)) {
            _res = cache.getResult(_mark, _LOOP1_109_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // param_maybe_default
            debugMessageln("%d> _loop1_109[%d-%d]: %s", level, _mark, mark(), "param_maybe_default");
            SSTNode[] param_maybe_default_var;
            while (
                (param_maybe_default_var = param_maybe_default_rule()) != null  // param_maybe_default
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "param_maybe_default");
                _res = param_maybe_default_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop1_109[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "param_maybe_default");
        }
        if (_children.size() == 0) {
            level--;
            return null;
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP1_109_ID, _seq);
        level--;
        return _seq;
    }

    // _tmp_110: kwds
    public Object _tmp_110_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_110_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_110_ID);
            level--;
            return (Object)_res;
        }
        { // kwds
            debugMessageln("%d> _tmp_110[%d-%d]: %s", level, _mark, mark(), "kwds");
            SSTNode kwds_var;
            if (
                (kwds_var = kwds_rule()) != null  // kwds
            )
            {
                debugMessageln("%d _tmp_110[%d-%d]: %s succeeded!", level, _mark, mark(), "kwds");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "kwds");
                _res = kwds_var;
                cache.putResult(_mark, _TMP_110_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_110[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "kwds");
        }
        debugMessageln("Fail at %d: _tmp_110", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_110_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop1_111: ('@' named_expression NEWLINE)
    public SSTNode[] _loop1_111_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP1_111_ID)) {
            _res = cache.getResult(_mark, _LOOP1_111_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ('@' named_expression NEWLINE)
            debugMessageln("%d> _loop1_111[%d-%d]: %s", level, _mark, mark(), "('@' named_expression NEWLINE)");
            Object _tmp_234_var;
            while (
                (_tmp_234_var = _tmp_234_rule()) != null  // '@' named_expression NEWLINE
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "('@' named_expression NEWLINE)");
                _res = _tmp_234_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop1_111[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "('@' named_expression NEWLINE)");
        }
        if (_children.size() == 0) {
            level--;
            return null;
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP1_111_ID, _seq);
        level--;
        return _seq;
    }

    // _tmp_112: '(' arguments? ')'
    public Object _tmp_112_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_112_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_112_ID);
            level--;
            return (Object)_res;
        }
        { // '(' arguments? ')'
            debugMessageln("%d> _tmp_112[%d-%d]: %s", level, _mark, mark(), "'(' arguments? ')'");
            Token _literal;
            Token _literal_1;
            Object z;
            if (
                (_literal = expect(7)) != null  // token='('
                &&
                ((z = _tmp_235_rule()) != null || true)  // arguments?
                &&
                (_literal_1 = expect(8)) != null  // token=')'
            )
            {
                debugMessageln("%d _tmp_112[%d-%d]: %s succeeded!", level, _mark, mark(), "'(' arguments? ')'");
                _res = z;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'(' arguments? ')'");
                cache.putResult(_mark, _TMP_112_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_112[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'(' arguments? ')'");
        }
        debugMessageln("Fail at %d: _tmp_112", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_112_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop1_113: (',' star_expression)
    public SSTNode[] _loop1_113_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP1_113_ID)) {
            _res = cache.getResult(_mark, _LOOP1_113_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // (',' star_expression)
            debugMessageln("%d> _loop1_113[%d-%d]: %s", level, _mark, mark(), "(',' star_expression)");
            Object _tmp_236_var;
            while (
                (_tmp_236_var = _tmp_236_rule()) != null  // ',' star_expression
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "(',' star_expression)");
                _res = _tmp_236_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop1_113[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "(',' star_expression)");
        }
        if (_children.size() == 0) {
            level--;
            return null;
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP1_113_ID, _seq);
        level--;
        return _seq;
    }

    // _tmp_114: ','
    public Object _tmp_114_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_114_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_114_ID);
            level--;
            return (Object)_res;
        }
        { // ','
            debugMessageln("%d> _tmp_114[%d-%d]: %s", level, _mark, mark(), "','");
            Token _literal;
            if (
                (_literal = expect(12)) != null  // token=','
            )
            {
                debugMessageln("%d _tmp_114[%d-%d]: %s succeeded!", level, _mark, mark(), "','");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "','");
                _res = _literal;
                cache.putResult(_mark, _TMP_114_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_114[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','");
        }
        debugMessageln("Fail at %d: _tmp_114", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_114_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop0_116: ',' star_named_expression
    public SSTNode[] _loop0_116_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_116_ID)) {
            _res = cache.getResult(_mark, _LOOP0_116_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ',' star_named_expression
            debugMessageln("%d> _loop0_116[%d-%d]: %s", level, _mark, mark(), "',' star_named_expression");
            Token _literal;
            SSTNode elem;
            while (
                (_literal = expect(12)) != null  // token=','
                &&
                (elem = star_named_expression_rule()) != null  // star_named_expression
            )
            {
                _res = elem;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' star_named_expression");
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_116[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' star_named_expression");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_116_ID, _seq);
        level--;
        return _seq;
    }

    // _gather_115: star_named_expression _loop0_116
    public SSTNode[] _gather_115_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _GATHER_115_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, _GATHER_115_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // star_named_expression _loop0_116
            debugMessageln("%d> _gather_115[%d-%d]: %s", level, _mark, mark(), "star_named_expression _loop0_116");
            SSTNode elem;
            SSTNode[] seq;
            if (
                (elem = star_named_expression_rule()) != null  // star_named_expression
                &&
                (seq = _loop0_116_rule()) != null  // _loop0_116
            )
            {
                debugMessageln("%d _gather_115[%d-%d]: %s succeeded!", level, _mark, mark(), "star_named_expression _loop0_116");
                _res = insertInFront(elem, seq);
                cache.putResult(_mark, _GATHER_115_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s _gather_115[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_named_expression _loop0_116");
        }
        debugMessageln("Fail at %d: _gather_115", _mark);
        _res = null;
        cache.putResult(_mark, _GATHER_115_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // _tmp_117: ','
    public Object _tmp_117_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_117_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_117_ID);
            level--;
            return (Object)_res;
        }
        { // ','
            debugMessageln("%d> _tmp_117[%d-%d]: %s", level, _mark, mark(), "','");
            Token _literal;
            if (
                (_literal = expect(12)) != null  // token=','
            )
            {
                debugMessageln("%d _tmp_117[%d-%d]: %s succeeded!", level, _mark, mark(), "','");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "','");
                _res = _literal;
                cache.putResult(_mark, _TMP_117_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_117[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','");
        }
        debugMessageln("Fail at %d: _tmp_117", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_117_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop1_118: (',' expression)
    public SSTNode[] _loop1_118_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP1_118_ID)) {
            _res = cache.getResult(_mark, _LOOP1_118_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // (',' expression)
            debugMessageln("%d> _loop1_118[%d-%d]: %s", level, _mark, mark(), "(',' expression)");
            Object _tmp_237_var;
            while (
                (_tmp_237_var = _tmp_237_rule()) != null  // ',' expression
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "(',' expression)");
                _res = _tmp_237_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop1_118[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "(',' expression)");
        }
        if (_children.size() == 0) {
            level--;
            return null;
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP1_118_ID, _seq);
        level--;
        return _seq;
    }

    // _tmp_119: ','
    public Object _tmp_119_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_119_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_119_ID);
            level--;
            return (Object)_res;
        }
        { // ','
            debugMessageln("%d> _tmp_119[%d-%d]: %s", level, _mark, mark(), "','");
            Token _literal;
            if (
                (_literal = expect(12)) != null  // token=','
            )
            {
                debugMessageln("%d _tmp_119[%d-%d]: %s succeeded!", level, _mark, mark(), "','");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "','");
                _res = _literal;
                cache.putResult(_mark, _TMP_119_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_119[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','");
        }
        debugMessageln("Fail at %d: _tmp_119", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_119_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_120: lambda_params
    public Object _tmp_120_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_120_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_120_ID);
            level--;
            return (Object)_res;
        }
        { // lambda_params
            debugMessageln("%d> _tmp_120[%d-%d]: %s", level, _mark, mark(), "lambda_params");
            SSTNode lambda_params_var;
            if (
                (lambda_params_var = lambda_params_rule()) != null  // lambda_params
            )
            {
                debugMessageln("%d _tmp_120[%d-%d]: %s succeeded!", level, _mark, mark(), "lambda_params");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "lambda_params");
                _res = lambda_params_var;
                cache.putResult(_mark, _TMP_120_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_120[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_params");
        }
        debugMessageln("Fail at %d: _tmp_120", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_120_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop0_121: lambda_param_no_default
    public SSTNode[] _loop0_121_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_121_ID)) {
            _res = cache.getResult(_mark, _LOOP0_121_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // lambda_param_no_default
            debugMessageln("%d> _loop0_121[%d-%d]: %s", level, _mark, mark(), "lambda_param_no_default");
            SSTNode lambda_param_no_default_var;
            while (
                (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "lambda_param_no_default");
                _res = lambda_param_no_default_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_121[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_param_no_default");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_121_ID, _seq);
        level--;
        return _seq;
    }

    // _loop0_122: lambda_param_with_default
    public SSTNode[] _loop0_122_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_122_ID)) {
            _res = cache.getResult(_mark, _LOOP0_122_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // lambda_param_with_default
            debugMessageln("%d> _loop0_122[%d-%d]: %s", level, _mark, mark(), "lambda_param_with_default");
            SSTNode[] lambda_param_with_default_var;
            while (
                (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "lambda_param_with_default");
                _res = lambda_param_with_default_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_122[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_param_with_default");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_122_ID, _seq);
        level--;
        return _seq;
    }

    // _tmp_123: lambda_star_etc
    public Object _tmp_123_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_123_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_123_ID);
            level--;
            return (Object)_res;
        }
        { // lambda_star_etc
            debugMessageln("%d> _tmp_123[%d-%d]: %s", level, _mark, mark(), "lambda_star_etc");
            SSTNode[] lambda_star_etc_var;
            if (
                (lambda_star_etc_var = lambda_star_etc_rule()) != null  // lambda_star_etc
            )
            {
                debugMessageln("%d _tmp_123[%d-%d]: %s succeeded!", level, _mark, mark(), "lambda_star_etc");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "lambda_star_etc");
                _res = lambda_star_etc_var;
                cache.putResult(_mark, _TMP_123_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_123[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_star_etc");
        }
        debugMessageln("Fail at %d: _tmp_123", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_123_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop0_124: lambda_param_with_default
    public SSTNode[] _loop0_124_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_124_ID)) {
            _res = cache.getResult(_mark, _LOOP0_124_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // lambda_param_with_default
            debugMessageln("%d> _loop0_124[%d-%d]: %s", level, _mark, mark(), "lambda_param_with_default");
            SSTNode[] lambda_param_with_default_var;
            while (
                (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "lambda_param_with_default");
                _res = lambda_param_with_default_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_124[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_param_with_default");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_124_ID, _seq);
        level--;
        return _seq;
    }

    // _tmp_125: lambda_star_etc
    public Object _tmp_125_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_125_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_125_ID);
            level--;
            return (Object)_res;
        }
        { // lambda_star_etc
            debugMessageln("%d> _tmp_125[%d-%d]: %s", level, _mark, mark(), "lambda_star_etc");
            SSTNode[] lambda_star_etc_var;
            if (
                (lambda_star_etc_var = lambda_star_etc_rule()) != null  // lambda_star_etc
            )
            {
                debugMessageln("%d _tmp_125[%d-%d]: %s succeeded!", level, _mark, mark(), "lambda_star_etc");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "lambda_star_etc");
                _res = lambda_star_etc_var;
                cache.putResult(_mark, _TMP_125_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_125[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_star_etc");
        }
        debugMessageln("Fail at %d: _tmp_125", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_125_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop1_126: lambda_param_no_default
    public SSTNode[] _loop1_126_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP1_126_ID)) {
            _res = cache.getResult(_mark, _LOOP1_126_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // lambda_param_no_default
            debugMessageln("%d> _loop1_126[%d-%d]: %s", level, _mark, mark(), "lambda_param_no_default");
            SSTNode lambda_param_no_default_var;
            while (
                (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "lambda_param_no_default");
                _res = lambda_param_no_default_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop1_126[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_param_no_default");
        }
        if (_children.size() == 0) {
            level--;
            return null;
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP1_126_ID, _seq);
        level--;
        return _seq;
    }

    // _loop0_127: lambda_param_with_default
    public SSTNode[] _loop0_127_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_127_ID)) {
            _res = cache.getResult(_mark, _LOOP0_127_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // lambda_param_with_default
            debugMessageln("%d> _loop0_127[%d-%d]: %s", level, _mark, mark(), "lambda_param_with_default");
            SSTNode[] lambda_param_with_default_var;
            while (
                (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "lambda_param_with_default");
                _res = lambda_param_with_default_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_127[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_param_with_default");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_127_ID, _seq);
        level--;
        return _seq;
    }

    // _tmp_128: lambda_star_etc
    public Object _tmp_128_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_128_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_128_ID);
            level--;
            return (Object)_res;
        }
        { // lambda_star_etc
            debugMessageln("%d> _tmp_128[%d-%d]: %s", level, _mark, mark(), "lambda_star_etc");
            SSTNode[] lambda_star_etc_var;
            if (
                (lambda_star_etc_var = lambda_star_etc_rule()) != null  // lambda_star_etc
            )
            {
                debugMessageln("%d _tmp_128[%d-%d]: %s succeeded!", level, _mark, mark(), "lambda_star_etc");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "lambda_star_etc");
                _res = lambda_star_etc_var;
                cache.putResult(_mark, _TMP_128_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_128[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_star_etc");
        }
        debugMessageln("Fail at %d: _tmp_128", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_128_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop1_129: lambda_param_with_default
    public SSTNode[] _loop1_129_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP1_129_ID)) {
            _res = cache.getResult(_mark, _LOOP1_129_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // lambda_param_with_default
            debugMessageln("%d> _loop1_129[%d-%d]: %s", level, _mark, mark(), "lambda_param_with_default");
            SSTNode[] lambda_param_with_default_var;
            while (
                (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "lambda_param_with_default");
                _res = lambda_param_with_default_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop1_129[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_param_with_default");
        }
        if (_children.size() == 0) {
            level--;
            return null;
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP1_129_ID, _seq);
        level--;
        return _seq;
    }

    // _tmp_130: lambda_star_etc
    public Object _tmp_130_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_130_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_130_ID);
            level--;
            return (Object)_res;
        }
        { // lambda_star_etc
            debugMessageln("%d> _tmp_130[%d-%d]: %s", level, _mark, mark(), "lambda_star_etc");
            SSTNode[] lambda_star_etc_var;
            if (
                (lambda_star_etc_var = lambda_star_etc_rule()) != null  // lambda_star_etc
            )
            {
                debugMessageln("%d _tmp_130[%d-%d]: %s succeeded!", level, _mark, mark(), "lambda_star_etc");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "lambda_star_etc");
                _res = lambda_star_etc_var;
                cache.putResult(_mark, _TMP_130_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_130[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_star_etc");
        }
        debugMessageln("Fail at %d: _tmp_130", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_130_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop1_131: lambda_param_no_default
    public SSTNode[] _loop1_131_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP1_131_ID)) {
            _res = cache.getResult(_mark, _LOOP1_131_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // lambda_param_no_default
            debugMessageln("%d> _loop1_131[%d-%d]: %s", level, _mark, mark(), "lambda_param_no_default");
            SSTNode lambda_param_no_default_var;
            while (
                (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "lambda_param_no_default");
                _res = lambda_param_no_default_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop1_131[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_param_no_default");
        }
        if (_children.size() == 0) {
            level--;
            return null;
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP1_131_ID, _seq);
        level--;
        return _seq;
    }

    // _loop1_132: lambda_param_no_default
    public SSTNode[] _loop1_132_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP1_132_ID)) {
            _res = cache.getResult(_mark, _LOOP1_132_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // lambda_param_no_default
            debugMessageln("%d> _loop1_132[%d-%d]: %s", level, _mark, mark(), "lambda_param_no_default");
            SSTNode lambda_param_no_default_var;
            while (
                (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "lambda_param_no_default");
                _res = lambda_param_no_default_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop1_132[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_param_no_default");
        }
        if (_children.size() == 0) {
            level--;
            return null;
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP1_132_ID, _seq);
        level--;
        return _seq;
    }

    // _loop0_133: lambda_param_no_default
    public SSTNode[] _loop0_133_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_133_ID)) {
            _res = cache.getResult(_mark, _LOOP0_133_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // lambda_param_no_default
            debugMessageln("%d> _loop0_133[%d-%d]: %s", level, _mark, mark(), "lambda_param_no_default");
            SSTNode lambda_param_no_default_var;
            while (
                (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "lambda_param_no_default");
                _res = lambda_param_no_default_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_133[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_param_no_default");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_133_ID, _seq);
        level--;
        return _seq;
    }

    // _loop1_134: lambda_param_with_default
    public SSTNode[] _loop1_134_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP1_134_ID)) {
            _res = cache.getResult(_mark, _LOOP1_134_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // lambda_param_with_default
            debugMessageln("%d> _loop1_134[%d-%d]: %s", level, _mark, mark(), "lambda_param_with_default");
            SSTNode[] lambda_param_with_default_var;
            while (
                (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "lambda_param_with_default");
                _res = lambda_param_with_default_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop1_134[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_param_with_default");
        }
        if (_children.size() == 0) {
            level--;
            return null;
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP1_134_ID, _seq);
        level--;
        return _seq;
    }

    // _loop0_135: lambda_param_no_default
    public SSTNode[] _loop0_135_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_135_ID)) {
            _res = cache.getResult(_mark, _LOOP0_135_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // lambda_param_no_default
            debugMessageln("%d> _loop0_135[%d-%d]: %s", level, _mark, mark(), "lambda_param_no_default");
            SSTNode lambda_param_no_default_var;
            while (
                (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "lambda_param_no_default");
                _res = lambda_param_no_default_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_135[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_param_no_default");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_135_ID, _seq);
        level--;
        return _seq;
    }

    // _loop1_136: lambda_param_with_default
    public SSTNode[] _loop1_136_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP1_136_ID)) {
            _res = cache.getResult(_mark, _LOOP1_136_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // lambda_param_with_default
            debugMessageln("%d> _loop1_136[%d-%d]: %s", level, _mark, mark(), "lambda_param_with_default");
            SSTNode[] lambda_param_with_default_var;
            while (
                (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "lambda_param_with_default");
                _res = lambda_param_with_default_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop1_136[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_param_with_default");
        }
        if (_children.size() == 0) {
            level--;
            return null;
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP1_136_ID, _seq);
        level--;
        return _seq;
    }

    // _loop0_137: lambda_param_maybe_default
    public SSTNode[] _loop0_137_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_137_ID)) {
            _res = cache.getResult(_mark, _LOOP0_137_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // lambda_param_maybe_default
            debugMessageln("%d> _loop0_137[%d-%d]: %s", level, _mark, mark(), "lambda_param_maybe_default");
            SSTNode[] lambda_param_maybe_default_var;
            while (
                (lambda_param_maybe_default_var = lambda_param_maybe_default_rule()) != null  // lambda_param_maybe_default
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "lambda_param_maybe_default");
                _res = lambda_param_maybe_default_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_137[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_param_maybe_default");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_137_ID, _seq);
        level--;
        return _seq;
    }

    // _tmp_138: lambda_kwds
    public Object _tmp_138_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_138_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_138_ID);
            level--;
            return (Object)_res;
        }
        { // lambda_kwds
            debugMessageln("%d> _tmp_138[%d-%d]: %s", level, _mark, mark(), "lambda_kwds");
            SSTNode lambda_kwds_var;
            if (
                (lambda_kwds_var = lambda_kwds_rule()) != null  // lambda_kwds
            )
            {
                debugMessageln("%d _tmp_138[%d-%d]: %s succeeded!", level, _mark, mark(), "lambda_kwds");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "lambda_kwds");
                _res = lambda_kwds_var;
                cache.putResult(_mark, _TMP_138_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_138[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_kwds");
        }
        debugMessageln("Fail at %d: _tmp_138", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_138_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop1_139: lambda_param_maybe_default
    public SSTNode[] _loop1_139_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP1_139_ID)) {
            _res = cache.getResult(_mark, _LOOP1_139_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // lambda_param_maybe_default
            debugMessageln("%d> _loop1_139[%d-%d]: %s", level, _mark, mark(), "lambda_param_maybe_default");
            SSTNode[] lambda_param_maybe_default_var;
            while (
                (lambda_param_maybe_default_var = lambda_param_maybe_default_rule()) != null  // lambda_param_maybe_default
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "lambda_param_maybe_default");
                _res = lambda_param_maybe_default_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop1_139[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_param_maybe_default");
        }
        if (_children.size() == 0) {
            level--;
            return null;
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP1_139_ID, _seq);
        level--;
        return _seq;
    }

    // _tmp_140: lambda_kwds
    public Object _tmp_140_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_140_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_140_ID);
            level--;
            return (Object)_res;
        }
        { // lambda_kwds
            debugMessageln("%d> _tmp_140[%d-%d]: %s", level, _mark, mark(), "lambda_kwds");
            SSTNode lambda_kwds_var;
            if (
                (lambda_kwds_var = lambda_kwds_rule()) != null  // lambda_kwds
            )
            {
                debugMessageln("%d _tmp_140[%d-%d]: %s succeeded!", level, _mark, mark(), "lambda_kwds");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "lambda_kwds");
                _res = lambda_kwds_var;
                cache.putResult(_mark, _TMP_140_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_140[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_kwds");
        }
        debugMessageln("Fail at %d: _tmp_140", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_140_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop1_141: ('or' conjunction)
    public SSTNode[] _loop1_141_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP1_141_ID)) {
            _res = cache.getResult(_mark, _LOOP1_141_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ('or' conjunction)
            debugMessageln("%d> _loop1_141[%d-%d]: %s", level, _mark, mark(), "('or' conjunction)");
            Object _tmp_238_var;
            while (
                (_tmp_238_var = _tmp_238_rule()) != null  // 'or' conjunction
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "('or' conjunction)");
                _res = _tmp_238_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop1_141[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "('or' conjunction)");
        }
        if (_children.size() == 0) {
            level--;
            return null;
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP1_141_ID, _seq);
        level--;
        return _seq;
    }

    // _loop1_142: ('and' inversion)
    public SSTNode[] _loop1_142_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP1_142_ID)) {
            _res = cache.getResult(_mark, _LOOP1_142_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ('and' inversion)
            debugMessageln("%d> _loop1_142[%d-%d]: %s", level, _mark, mark(), "('and' inversion)");
            Object _tmp_239_var;
            while (
                (_tmp_239_var = _tmp_239_rule()) != null  // 'and' inversion
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "('and' inversion)");
                _res = _tmp_239_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop1_142[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "('and' inversion)");
        }
        if (_children.size() == 0) {
            level--;
            return null;
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP1_142_ID, _seq);
        level--;
        return _seq;
    }

    // _loop1_143: compare_op_bitwise_or_pair
    public BinaryArithmeticSSTNode[] _loop1_143_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP1_143_ID)) {
            _res = cache.getResult(_mark, _LOOP1_143_ID);
            level--;
            return (BinaryArithmeticSSTNode[])_res;
        }
        int _start_mark = mark();
        List<BinaryArithmeticSSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // compare_op_bitwise_or_pair
            debugMessageln("%d> _loop1_143[%d-%d]: %s", level, _mark, mark(), "compare_op_bitwise_or_pair");
            BinaryArithmeticSSTNode compare_op_bitwise_or_pair_var;
            while (
                (compare_op_bitwise_or_pair_var = compare_op_bitwise_or_pair_rule()) != null  // compare_op_bitwise_or_pair
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "compare_op_bitwise_or_pair");
                _res = compare_op_bitwise_or_pair_var;
                if (_res instanceof BinaryArithmeticSSTNode) {
                    _children.add((BinaryArithmeticSSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((BinaryArithmeticSSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop1_143[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "compare_op_bitwise_or_pair");
        }
        if (_children.size() == 0) {
            level--;
            return null;
        }
        BinaryArithmeticSSTNode[] _seq = _children.toArray(new BinaryArithmeticSSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP1_143_ID, _seq);
        level--;
        return _seq;
    }

    // _tmp_144: '!='
    public Object _tmp_144_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_144_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_144_ID);
            level--;
            return (Object)_res;
        }
        { // '!='
            debugMessageln("%d> _tmp_144[%d-%d]: %s", level, _mark, mark(), "'!='");
            Token tok;
            if (
                (tok = expect(28)) != null  // token='!='
            )
            {
                debugMessageln("%d _tmp_144[%d-%d]: %s succeeded!", level, _mark, mark(), "'!='");
                // TODO: node.action: _PyPegen_check_barry_as_flufl ( p , tok ) ? NULL : tok
                debugMessageln("[33;5;7m!!! TODO: Convert _PyPegen_check_barry_as_flufl ( p , tok ) ? NULL : tok to Java !!![0m");
                _res = null;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'!='");
                cache.putResult(_mark, _TMP_144_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_144[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'!='");
        }
        debugMessageln("Fail at %d: _tmp_144", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_144_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_145: arguments
    public Object _tmp_145_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_145_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_145_ID);
            level--;
            return (Object)_res;
        }
        { // arguments
            debugMessageln("%d> _tmp_145[%d-%d]: %s", level, _mark, mark(), "arguments");
            SSTNode arguments_var;
            if (
                (arguments_var = arguments_rule()) != null  // arguments
            )
            {
                debugMessageln("%d _tmp_145[%d-%d]: %s succeeded!", level, _mark, mark(), "arguments");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "arguments");
                _res = arguments_var;
                cache.putResult(_mark, _TMP_145_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_145[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "arguments");
        }
        debugMessageln("Fail at %d: _tmp_145", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_145_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop0_147: ',' slice
    public SSTNode[] _loop0_147_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_147_ID)) {
            _res = cache.getResult(_mark, _LOOP0_147_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ',' slice
            debugMessageln("%d> _loop0_147[%d-%d]: %s", level, _mark, mark(), "',' slice");
            Token _literal;
            SSTNode elem;
            while (
                (_literal = expect(12)) != null  // token=','
                &&
                (elem = slice_rule()) != null  // slice
            )
            {
                _res = elem;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' slice");
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_147[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' slice");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_147_ID, _seq);
        level--;
        return _seq;
    }

    // _gather_146: slice _loop0_147
    public SSTNode[] _gather_146_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _GATHER_146_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, _GATHER_146_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // slice _loop0_147
            debugMessageln("%d> _gather_146[%d-%d]: %s", level, _mark, mark(), "slice _loop0_147");
            SSTNode elem;
            SSTNode[] seq;
            if (
                (elem = slice_rule()) != null  // slice
                &&
                (seq = _loop0_147_rule()) != null  // _loop0_147
            )
            {
                debugMessageln("%d _gather_146[%d-%d]: %s succeeded!", level, _mark, mark(), "slice _loop0_147");
                _res = insertInFront(elem, seq);
                cache.putResult(_mark, _GATHER_146_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s _gather_146[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "slice _loop0_147");
        }
        debugMessageln("Fail at %d: _gather_146", _mark);
        _res = null;
        cache.putResult(_mark, _GATHER_146_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // _tmp_148: ','
    public Object _tmp_148_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_148_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_148_ID);
            level--;
            return (Object)_res;
        }
        { // ','
            debugMessageln("%d> _tmp_148[%d-%d]: %s", level, _mark, mark(), "','");
            Token _literal;
            if (
                (_literal = expect(12)) != null  // token=','
            )
            {
                debugMessageln("%d _tmp_148[%d-%d]: %s succeeded!", level, _mark, mark(), "','");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "','");
                _res = _literal;
                cache.putResult(_mark, _TMP_148_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_148[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','");
        }
        debugMessageln("Fail at %d: _tmp_148", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_148_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_149: expression
    public Object _tmp_149_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_149_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_149_ID);
            level--;
            return (Object)_res;
        }
        { // expression
            debugMessageln("%d> _tmp_149[%d-%d]: %s", level, _mark, mark(), "expression");
            SSTNode expression_var;
            if (
                (expression_var = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d _tmp_149[%d-%d]: %s succeeded!", level, _mark, mark(), "expression");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "expression");
                _res = expression_var;
                cache.putResult(_mark, _TMP_149_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_149[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "expression");
        }
        debugMessageln("Fail at %d: _tmp_149", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_149_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_150: expression
    public Object _tmp_150_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_150_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_150_ID);
            level--;
            return (Object)_res;
        }
        { // expression
            debugMessageln("%d> _tmp_150[%d-%d]: %s", level, _mark, mark(), "expression");
            SSTNode expression_var;
            if (
                (expression_var = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d _tmp_150[%d-%d]: %s succeeded!", level, _mark, mark(), "expression");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "expression");
                _res = expression_var;
                cache.putResult(_mark, _TMP_150_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_150[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "expression");
        }
        debugMessageln("Fail at %d: _tmp_150", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_150_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_151: ':' expression?
    public Object _tmp_151_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_151_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_151_ID);
            level--;
            return (Object)_res;
        }
        { // ':' expression?
            debugMessageln("%d> _tmp_151[%d-%d]: %s", level, _mark, mark(), "':' expression?");
            Token _literal;
            Object d;
            if (
                (_literal = expect(11)) != null  // token=':'
                &&
                ((d = _tmp_240_rule()) != null || true)  // expression?
            )
            {
                debugMessageln("%d _tmp_151[%d-%d]: %s succeeded!", level, _mark, mark(), "':' expression?");
                _res = d;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "':' expression?");
                cache.putResult(_mark, _TMP_151_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_151[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "':' expression?");
        }
        debugMessageln("Fail at %d: _tmp_151", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_151_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_152: tuple | group | genexp
    public Object _tmp_152_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_152_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_152_ID);
            level--;
            return (Object)_res;
        }
        { // tuple
            debugMessageln("%d> _tmp_152[%d-%d]: %s", level, _mark, mark(), "tuple");
            SSTNode tuple_var;
            if (
                (tuple_var = tuple_rule()) != null  // tuple
            )
            {
                debugMessageln("%d _tmp_152[%d-%d]: %s succeeded!", level, _mark, mark(), "tuple");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "tuple");
                _res = tuple_var;
                cache.putResult(_mark, _TMP_152_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_152[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "tuple");
        }
        { // group
            debugMessageln("%d> _tmp_152[%d-%d]: %s", level, _mark, mark(), "group");
            SSTNode group_var;
            if (
                (group_var = group_rule()) != null  // group
            )
            {
                debugMessageln("%d _tmp_152[%d-%d]: %s succeeded!", level, _mark, mark(), "group");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "group");
                _res = group_var;
                cache.putResult(_mark, _TMP_152_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_152[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "group");
        }
        { // genexp
            debugMessageln("%d> _tmp_152[%d-%d]: %s", level, _mark, mark(), "genexp");
            SSTNode genexp_var;
            if (
                (genexp_var = genexp_rule()) != null  // genexp
            )
            {
                debugMessageln("%d _tmp_152[%d-%d]: %s succeeded!", level, _mark, mark(), "genexp");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "genexp");
                _res = genexp_var;
                cache.putResult(_mark, _TMP_152_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_152[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "genexp");
        }
        debugMessageln("Fail at %d: _tmp_152", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_152_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_153: list | listcomp
    public Object _tmp_153_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_153_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_153_ID);
            level--;
            return (Object)_res;
        }
        { // list
            debugMessageln("%d> _tmp_153[%d-%d]: %s", level, _mark, mark(), "list");
            SSTNode list_var;
            if (
                (list_var = list_rule()) != null  // list
            )
            {
                debugMessageln("%d _tmp_153[%d-%d]: %s succeeded!", level, _mark, mark(), "list");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "list");
                _res = list_var;
                cache.putResult(_mark, _TMP_153_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_153[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "list");
        }
        { // listcomp
            debugMessageln("%d> _tmp_153[%d-%d]: %s", level, _mark, mark(), "listcomp");
            SSTNode listcomp_var;
            if (
                (listcomp_var = listcomp_rule()) != null  // listcomp
            )
            {
                debugMessageln("%d _tmp_153[%d-%d]: %s succeeded!", level, _mark, mark(), "listcomp");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "listcomp");
                _res = listcomp_var;
                cache.putResult(_mark, _TMP_153_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_153[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "listcomp");
        }
        debugMessageln("Fail at %d: _tmp_153", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_153_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_154: dict | set | dictcomp | setcomp
    public Object _tmp_154_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_154_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_154_ID);
            level--;
            return (Object)_res;
        }
        { // dict
            debugMessageln("%d> _tmp_154[%d-%d]: %s", level, _mark, mark(), "dict");
            SSTNode dict_var;
            if (
                (dict_var = dict_rule()) != null  // dict
            )
            {
                debugMessageln("%d _tmp_154[%d-%d]: %s succeeded!", level, _mark, mark(), "dict");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "dict");
                _res = dict_var;
                cache.putResult(_mark, _TMP_154_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_154[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "dict");
        }
        { // set
            debugMessageln("%d> _tmp_154[%d-%d]: %s", level, _mark, mark(), "set");
            SSTNode set_var;
            if (
                (set_var = set_rule()) != null  // set
            )
            {
                debugMessageln("%d _tmp_154[%d-%d]: %s succeeded!", level, _mark, mark(), "set");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "set");
                _res = set_var;
                cache.putResult(_mark, _TMP_154_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_154[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "set");
        }
        { // dictcomp
            debugMessageln("%d> _tmp_154[%d-%d]: %s", level, _mark, mark(), "dictcomp");
            SSTNode dictcomp_var;
            if (
                (dictcomp_var = dictcomp_rule()) != null  // dictcomp
            )
            {
                debugMessageln("%d _tmp_154[%d-%d]: %s succeeded!", level, _mark, mark(), "dictcomp");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "dictcomp");
                _res = dictcomp_var;
                cache.putResult(_mark, _TMP_154_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_154[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "dictcomp");
        }
        { // setcomp
            debugMessageln("%d> _tmp_154[%d-%d]: %s", level, _mark, mark(), "setcomp");
            SSTNode setcomp_var;
            if (
                (setcomp_var = setcomp_rule()) != null  // setcomp
            )
            {
                debugMessageln("%d _tmp_154[%d-%d]: %s succeeded!", level, _mark, mark(), "setcomp");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "setcomp");
                _res = setcomp_var;
                cache.putResult(_mark, _TMP_154_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_154[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "setcomp");
        }
        debugMessageln("Fail at %d: _tmp_154", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_154_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop1_155: STRING
    public SSTNode[] _loop1_155_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP1_155_ID)) {
            _res = cache.getResult(_mark, _LOOP1_155_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // STRING
            debugMessageln("%d> _loop1_155[%d-%d]: %s", level, _mark, mark(), "STRING");
            SSTNode string_var;
            while (
                (string_var = string_token()) != null  // STRING
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "STRING");
                _res = string_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop1_155[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "STRING");
        }
        if (_children.size() == 0) {
            level--;
            return null;
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP1_155_ID, _seq);
        level--;
        return _seq;
    }

    // _tmp_156: star_named_expressions
    public Object _tmp_156_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_156_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_156_ID);
            level--;
            return (Object)_res;
        }
        { // star_named_expressions
            debugMessageln("%d> _tmp_156[%d-%d]: %s", level, _mark, mark(), "star_named_expressions");
            SSTNode[] star_named_expressions_var;
            if (
                (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
            )
            {
                debugMessageln("%d _tmp_156[%d-%d]: %s succeeded!", level, _mark, mark(), "star_named_expressions");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "star_named_expressions");
                _res = star_named_expressions_var;
                cache.putResult(_mark, _TMP_156_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_156[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_named_expressions");
        }
        debugMessageln("Fail at %d: _tmp_156", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_156_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_157: star_named_expression ',' star_named_expressions?
    public Object _tmp_157_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_157_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_157_ID);
            level--;
            return (Object)_res;
        }
        { // star_named_expression ',' star_named_expressions?
            debugMessageln("%d> _tmp_157[%d-%d]: %s", level, _mark, mark(), "star_named_expression ',' star_named_expressions?");
            Token _literal;
            SSTNode y;
            Object z;
            if (
                (y = star_named_expression_rule()) != null  // star_named_expression
                &&
                (_literal = expect(12)) != null  // token=','
                &&
                ((z = _tmp_241_rule()) != null || true)  // star_named_expressions?
            )
            {
                debugMessageln("%d _tmp_157[%d-%d]: %s succeeded!", level, _mark, mark(), "star_named_expression ',' star_named_expressions?");
                _res = this.insertInFront(y,(SSTNode[])z);
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "star_named_expression ',' star_named_expressions?");
                cache.putResult(_mark, _TMP_157_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_157[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_named_expression ',' star_named_expressions?");
        }
        debugMessageln("Fail at %d: _tmp_157", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_157_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_158: yield_expr | named_expression
    public Object _tmp_158_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_158_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_158_ID);
            level--;
            return (Object)_res;
        }
        { // yield_expr
            debugMessageln("%d> _tmp_158[%d-%d]: %s", level, _mark, mark(), "yield_expr");
            SSTNode yield_expr_var;
            if (
                (yield_expr_var = yield_expr_rule()) != null  // yield_expr
            )
            {
                debugMessageln("%d _tmp_158[%d-%d]: %s succeeded!", level, _mark, mark(), "yield_expr");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "yield_expr");
                _res = yield_expr_var;
                cache.putResult(_mark, _TMP_158_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_158[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "yield_expr");
        }
        { // named_expression
            debugMessageln("%d> _tmp_158[%d-%d]: %s", level, _mark, mark(), "named_expression");
            SSTNode named_expression_var;
            if (
                (named_expression_var = named_expression_rule()) != null  // named_expression
            )
            {
                debugMessageln("%d _tmp_158[%d-%d]: %s succeeded!", level, _mark, mark(), "named_expression");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "named_expression");
                _res = named_expression_var;
                cache.putResult(_mark, _TMP_158_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_158[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "named_expression");
        }
        debugMessageln("Fail at %d: _tmp_158", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_158_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_159: double_starred_kvpairs
    public Object _tmp_159_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_159_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_159_ID);
            level--;
            return (Object)_res;
        }
        { // double_starred_kvpairs
            debugMessageln("%d> _tmp_159[%d-%d]: %s", level, _mark, mark(), "double_starred_kvpairs");
            KeyValueSSTNode[] double_starred_kvpairs_var;
            if (
                (double_starred_kvpairs_var = double_starred_kvpairs_rule()) != null  // double_starred_kvpairs
            )
            {
                debugMessageln("%d _tmp_159[%d-%d]: %s succeeded!", level, _mark, mark(), "double_starred_kvpairs");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "double_starred_kvpairs");
                _res = double_starred_kvpairs_var;
                cache.putResult(_mark, _TMP_159_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_159[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "double_starred_kvpairs");
        }
        debugMessageln("Fail at %d: _tmp_159", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_159_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop0_161: ',' double_starred_kvpair
    public KeyValueSSTNode[] _loop0_161_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_161_ID)) {
            _res = cache.getResult(_mark, _LOOP0_161_ID);
            level--;
            return (KeyValueSSTNode[])_res;
        }
        int _start_mark = mark();
        List<KeyValueSSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ',' double_starred_kvpair
            debugMessageln("%d> _loop0_161[%d-%d]: %s", level, _mark, mark(), "',' double_starred_kvpair");
            Token _literal;
            KeyValueSSTNode elem;
            while (
                (_literal = expect(12)) != null  // token=','
                &&
                (elem = double_starred_kvpair_rule()) != null  // double_starred_kvpair
            )
            {
                _res = elem;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' double_starred_kvpair");
                if (_res instanceof KeyValueSSTNode) {
                    _children.add((KeyValueSSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((KeyValueSSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_161[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' double_starred_kvpair");
        }
        KeyValueSSTNode[] _seq = _children.toArray(new KeyValueSSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_161_ID, _seq);
        level--;
        return _seq;
    }

    // _gather_160: double_starred_kvpair _loop0_161
    public SSTNode[] _gather_160_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _GATHER_160_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, _GATHER_160_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // double_starred_kvpair _loop0_161
            debugMessageln("%d> _gather_160[%d-%d]: %s", level, _mark, mark(), "double_starred_kvpair _loop0_161");
            KeyValueSSTNode elem;
            SSTNode[] seq;
            if (
                (elem = double_starred_kvpair_rule()) != null  // double_starred_kvpair
                &&
                (seq = _loop0_161_rule()) != null  // _loop0_161
            )
            {
                debugMessageln("%d _gather_160[%d-%d]: %s succeeded!", level, _mark, mark(), "double_starred_kvpair _loop0_161");
                _res = insertInFront(elem, seq);
                cache.putResult(_mark, _GATHER_160_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s _gather_160[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "double_starred_kvpair _loop0_161");
        }
        debugMessageln("Fail at %d: _gather_160", _mark);
        _res = null;
        cache.putResult(_mark, _GATHER_160_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // _tmp_162: ','
    public Object _tmp_162_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_162_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_162_ID);
            level--;
            return (Object)_res;
        }
        { // ','
            debugMessageln("%d> _tmp_162[%d-%d]: %s", level, _mark, mark(), "','");
            Token _literal;
            if (
                (_literal = expect(12)) != null  // token=','
            )
            {
                debugMessageln("%d _tmp_162[%d-%d]: %s succeeded!", level, _mark, mark(), "','");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "','");
                _res = _literal;
                cache.putResult(_mark, _TMP_162_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_162[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','");
        }
        debugMessageln("Fail at %d: _tmp_162", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_162_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop1_163: for_if_clause
    public ForComprehensionSSTNode[] _loop1_163_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP1_163_ID)) {
            _res = cache.getResult(_mark, _LOOP1_163_ID);
            level--;
            return (ForComprehensionSSTNode[])_res;
        }
        int _start_mark = mark();
        List<ForComprehensionSSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // for_if_clause
            debugMessageln("%d> _loop1_163[%d-%d]: %s", level, _mark, mark(), "for_if_clause");
            ForComprehensionSSTNode for_if_clause_var;
            while (
                (for_if_clause_var = for_if_clause_rule()) != null  // for_if_clause
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "for_if_clause");
                _res = for_if_clause_var;
                if (_res instanceof ForComprehensionSSTNode) {
                    _children.add((ForComprehensionSSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((ForComprehensionSSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop1_163[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "for_if_clause");
        }
        if (_children.size() == 0) {
            level--;
            return null;
        }
        ForComprehensionSSTNode[] _seq = _children.toArray(new ForComprehensionSSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP1_163_ID, _seq);
        level--;
        return _seq;
    }

    // _loop0_164: ('if' disjunction)
    public SSTNode[] _loop0_164_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_164_ID)) {
            _res = cache.getResult(_mark, _LOOP0_164_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ('if' disjunction)
            debugMessageln("%d> _loop0_164[%d-%d]: %s", level, _mark, mark(), "('if' disjunction)");
            Object _tmp_242_var;
            while (
                (_tmp_242_var = _tmp_242_rule()) != null  // 'if' disjunction
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "('if' disjunction)");
                _res = _tmp_242_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_164[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "('if' disjunction)");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_164_ID, _seq);
        level--;
        return _seq;
    }

    // _loop0_165: ('if' disjunction)
    public SSTNode[] _loop0_165_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_165_ID)) {
            _res = cache.getResult(_mark, _LOOP0_165_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ('if' disjunction)
            debugMessageln("%d> _loop0_165[%d-%d]: %s", level, _mark, mark(), "('if' disjunction)");
            Object _tmp_243_var;
            while (
                (_tmp_243_var = _tmp_243_rule()) != null  // 'if' disjunction
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "('if' disjunction)");
                _res = _tmp_243_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_165[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "('if' disjunction)");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_165_ID, _seq);
        level--;
        return _seq;
    }

    // _tmp_166: star_expressions
    public Object _tmp_166_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_166_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_166_ID);
            level--;
            return (Object)_res;
        }
        { // star_expressions
            debugMessageln("%d> _tmp_166[%d-%d]: %s", level, _mark, mark(), "star_expressions");
            SSTNode star_expressions_var;
            if (
                (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            )
            {
                debugMessageln("%d _tmp_166[%d-%d]: %s succeeded!", level, _mark, mark(), "star_expressions");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "star_expressions");
                _res = star_expressions_var;
                cache.putResult(_mark, _TMP_166_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_166[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_expressions");
        }
        debugMessageln("Fail at %d: _tmp_166", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_166_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_167: ','
    public Object _tmp_167_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_167_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_167_ID);
            level--;
            return (Object)_res;
        }
        { // ','
            debugMessageln("%d> _tmp_167[%d-%d]: %s", level, _mark, mark(), "','");
            Token _literal;
            if (
                (_literal = expect(12)) != null  // token=','
            )
            {
                debugMessageln("%d _tmp_167[%d-%d]: %s succeeded!", level, _mark, mark(), "','");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "','");
                _res = _literal;
                cache.putResult(_mark, _TMP_167_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_167[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','");
        }
        debugMessageln("Fail at %d: _tmp_167", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_167_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop0_169: ',' (starred_expression | direct_named_expression !'=')
    public SSTNode[] _loop0_169_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_169_ID)) {
            _res = cache.getResult(_mark, _LOOP0_169_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ',' (starred_expression | direct_named_expression !'=')
            debugMessageln("%d> _loop0_169[%d-%d]: %s", level, _mark, mark(), "',' (starred_expression | direct_named_expression !'=')");
            Token _literal;
            Object elem;
            while (
                (_literal = expect(12)) != null  // token=','
                &&
                (elem = _tmp_244_rule()) != null  // starred_expression | direct_named_expression !'='
            )
            {
                _res = elem;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' (starred_expression | direct_named_expression !'=')");
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_169[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' (starred_expression | direct_named_expression !'=')");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_169_ID, _seq);
        level--;
        return _seq;
    }

    // _gather_168: (starred_expression | direct_named_expression !'=') _loop0_169
    public SSTNode[] _gather_168_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _GATHER_168_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, _GATHER_168_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // (starred_expression | direct_named_expression !'=') _loop0_169
            debugMessageln("%d> _gather_168[%d-%d]: %s", level, _mark, mark(), "(starred_expression | direct_named_expression !'=') _loop0_169");
            Object elem;
            SSTNode[] seq;
            if (
                (elem = _tmp_244_rule()) != null  // starred_expression | direct_named_expression !'='
                &&
                (seq = _loop0_169_rule()) != null  // _loop0_169
            )
            {
                debugMessageln("%d _gather_168[%d-%d]: %s succeeded!", level, _mark, mark(), "(starred_expression | direct_named_expression !'=') _loop0_169");
                _res = insertInFront(elem, seq);
                cache.putResult(_mark, _GATHER_168_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s _gather_168[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "(starred_expression | direct_named_expression !'=') _loop0_169");
        }
        debugMessageln("Fail at %d: _gather_168", _mark);
        _res = null;
        cache.putResult(_mark, _GATHER_168_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // _tmp_170: ',' kwargs
    public Object _tmp_170_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_170_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_170_ID);
            level--;
            return (Object)_res;
        }
        { // ',' kwargs
            debugMessageln("%d> _tmp_170[%d-%d]: %s", level, _mark, mark(), "',' kwargs");
            Token _literal;
            SSTNode[] k;
            if (
                (_literal = expect(12)) != null  // token=','
                &&
                (k = kwargs_rule()) != null  // kwargs
            )
            {
                debugMessageln("%d _tmp_170[%d-%d]: %s succeeded!", level, _mark, mark(), "',' kwargs");
                _res = k;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' kwargs");
                cache.putResult(_mark, _TMP_170_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_170[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' kwargs");
        }
        debugMessageln("Fail at %d: _tmp_170", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_170_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop0_172: ',' kwarg_or_starred
    public SSTNode[] _loop0_172_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_172_ID)) {
            _res = cache.getResult(_mark, _LOOP0_172_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ',' kwarg_or_starred
            debugMessageln("%d> _loop0_172[%d-%d]: %s", level, _mark, mark(), "',' kwarg_or_starred");
            Token _literal;
            SSTNode[] elem;
            while (
                (_literal = expect(12)) != null  // token=','
                &&
                (elem = kwarg_or_starred_rule()) != null  // kwarg_or_starred
            )
            {
                _res = elem;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' kwarg_or_starred");
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_172[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' kwarg_or_starred");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_172_ID, _seq);
        level--;
        return _seq;
    }

    // _gather_171: kwarg_or_starred _loop0_172
    public SSTNode[] _gather_171_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _GATHER_171_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, _GATHER_171_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // kwarg_or_starred _loop0_172
            debugMessageln("%d> _gather_171[%d-%d]: %s", level, _mark, mark(), "kwarg_or_starred _loop0_172");
            SSTNode[] elem;
            SSTNode[] seq;
            if (
                (elem = kwarg_or_starred_rule()) != null  // kwarg_or_starred
                &&
                (seq = _loop0_172_rule()) != null  // _loop0_172
            )
            {
                debugMessageln("%d _gather_171[%d-%d]: %s succeeded!", level, _mark, mark(), "kwarg_or_starred _loop0_172");
                _res = insertInFront(elem, seq);
                cache.putResult(_mark, _GATHER_171_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s _gather_171[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "kwarg_or_starred _loop0_172");
        }
        debugMessageln("Fail at %d: _gather_171", _mark);
        _res = null;
        cache.putResult(_mark, _GATHER_171_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // _loop0_174: ',' kwarg_or_double_starred
    public SSTNode[] _loop0_174_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_174_ID)) {
            _res = cache.getResult(_mark, _LOOP0_174_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ',' kwarg_or_double_starred
            debugMessageln("%d> _loop0_174[%d-%d]: %s", level, _mark, mark(), "',' kwarg_or_double_starred");
            Token _literal;
            SSTNode[] elem;
            while (
                (_literal = expect(12)) != null  // token=','
                &&
                (elem = kwarg_or_double_starred_rule()) != null  // kwarg_or_double_starred
            )
            {
                _res = elem;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' kwarg_or_double_starred");
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_174[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' kwarg_or_double_starred");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_174_ID, _seq);
        level--;
        return _seq;
    }

    // _gather_173: kwarg_or_double_starred _loop0_174
    public SSTNode[] _gather_173_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _GATHER_173_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, _GATHER_173_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // kwarg_or_double_starred _loop0_174
            debugMessageln("%d> _gather_173[%d-%d]: %s", level, _mark, mark(), "kwarg_or_double_starred _loop0_174");
            SSTNode[] elem;
            SSTNode[] seq;
            if (
                (elem = kwarg_or_double_starred_rule()) != null  // kwarg_or_double_starred
                &&
                (seq = _loop0_174_rule()) != null  // _loop0_174
            )
            {
                debugMessageln("%d _gather_173[%d-%d]: %s succeeded!", level, _mark, mark(), "kwarg_or_double_starred _loop0_174");
                _res = insertInFront(elem, seq);
                cache.putResult(_mark, _GATHER_173_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s _gather_173[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "kwarg_or_double_starred _loop0_174");
        }
        debugMessageln("Fail at %d: _gather_173", _mark);
        _res = null;
        cache.putResult(_mark, _GATHER_173_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // _loop0_176: ',' kwarg_or_starred
    public SSTNode[] _loop0_176_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_176_ID)) {
            _res = cache.getResult(_mark, _LOOP0_176_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ',' kwarg_or_starred
            debugMessageln("%d> _loop0_176[%d-%d]: %s", level, _mark, mark(), "',' kwarg_or_starred");
            Token _literal;
            SSTNode[] elem;
            while (
                (_literal = expect(12)) != null  // token=','
                &&
                (elem = kwarg_or_starred_rule()) != null  // kwarg_or_starred
            )
            {
                _res = elem;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' kwarg_or_starred");
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_176[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' kwarg_or_starred");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_176_ID, _seq);
        level--;
        return _seq;
    }

    // _gather_175: kwarg_or_starred _loop0_176
    public SSTNode[] _gather_175_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _GATHER_175_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, _GATHER_175_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // kwarg_or_starred _loop0_176
            debugMessageln("%d> _gather_175[%d-%d]: %s", level, _mark, mark(), "kwarg_or_starred _loop0_176");
            SSTNode[] elem;
            SSTNode[] seq;
            if (
                (elem = kwarg_or_starred_rule()) != null  // kwarg_or_starred
                &&
                (seq = _loop0_176_rule()) != null  // _loop0_176
            )
            {
                debugMessageln("%d _gather_175[%d-%d]: %s succeeded!", level, _mark, mark(), "kwarg_or_starred _loop0_176");
                _res = insertInFront(elem, seq);
                cache.putResult(_mark, _GATHER_175_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s _gather_175[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "kwarg_or_starred _loop0_176");
        }
        debugMessageln("Fail at %d: _gather_175", _mark);
        _res = null;
        cache.putResult(_mark, _GATHER_175_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // _loop0_178: ',' kwarg_or_double_starred
    public SSTNode[] _loop0_178_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_178_ID)) {
            _res = cache.getResult(_mark, _LOOP0_178_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ',' kwarg_or_double_starred
            debugMessageln("%d> _loop0_178[%d-%d]: %s", level, _mark, mark(), "',' kwarg_or_double_starred");
            Token _literal;
            SSTNode[] elem;
            while (
                (_literal = expect(12)) != null  // token=','
                &&
                (elem = kwarg_or_double_starred_rule()) != null  // kwarg_or_double_starred
            )
            {
                _res = elem;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' kwarg_or_double_starred");
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_178[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' kwarg_or_double_starred");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_178_ID, _seq);
        level--;
        return _seq;
    }

    // _gather_177: kwarg_or_double_starred _loop0_178
    public SSTNode[] _gather_177_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _GATHER_177_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, _GATHER_177_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // kwarg_or_double_starred _loop0_178
            debugMessageln("%d> _gather_177[%d-%d]: %s", level, _mark, mark(), "kwarg_or_double_starred _loop0_178");
            SSTNode[] elem;
            SSTNode[] seq;
            if (
                (elem = kwarg_or_double_starred_rule()) != null  // kwarg_or_double_starred
                &&
                (seq = _loop0_178_rule()) != null  // _loop0_178
            )
            {
                debugMessageln("%d _gather_177[%d-%d]: %s succeeded!", level, _mark, mark(), "kwarg_or_double_starred _loop0_178");
                _res = insertInFront(elem, seq);
                cache.putResult(_mark, _GATHER_177_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s _gather_177[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "kwarg_or_double_starred _loop0_178");
        }
        debugMessageln("Fail at %d: _gather_177", _mark);
        _res = null;
        cache.putResult(_mark, _GATHER_177_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // _loop0_179: (',' star_target)
    public SSTNode[] _loop0_179_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_179_ID)) {
            _res = cache.getResult(_mark, _LOOP0_179_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // (',' star_target)
            debugMessageln("%d> _loop0_179[%d-%d]: %s", level, _mark, mark(), "(',' star_target)");
            Object _tmp_245_var;
            while (
                (_tmp_245_var = _tmp_245_rule()) != null  // ',' star_target
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "(',' star_target)");
                _res = _tmp_245_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_179[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "(',' star_target)");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_179_ID, _seq);
        level--;
        return _seq;
    }

    // _tmp_180: ','
    public Object _tmp_180_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_180_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_180_ID);
            level--;
            return (Object)_res;
        }
        { // ','
            debugMessageln("%d> _tmp_180[%d-%d]: %s", level, _mark, mark(), "','");
            Token _literal;
            if (
                (_literal = expect(12)) != null  // token=','
            )
            {
                debugMessageln("%d _tmp_180[%d-%d]: %s succeeded!", level, _mark, mark(), "','");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "','");
                _res = _literal;
                cache.putResult(_mark, _TMP_180_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_180[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','");
        }
        debugMessageln("Fail at %d: _tmp_180", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_180_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop0_182: ',' star_target
    public SSTNode[] _loop0_182_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_182_ID)) {
            _res = cache.getResult(_mark, _LOOP0_182_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ',' star_target
            debugMessageln("%d> _loop0_182[%d-%d]: %s", level, _mark, mark(), "',' star_target");
            Token _literal;
            SSTNode elem;
            while (
                (_literal = expect(12)) != null  // token=','
                &&
                (elem = star_target_rule()) != null  // star_target
            )
            {
                _res = elem;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' star_target");
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_182[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' star_target");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_182_ID, _seq);
        level--;
        return _seq;
    }

    // _gather_181: star_target _loop0_182
    public SSTNode[] _gather_181_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _GATHER_181_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, _GATHER_181_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // star_target _loop0_182
            debugMessageln("%d> _gather_181[%d-%d]: %s", level, _mark, mark(), "star_target _loop0_182");
            SSTNode elem;
            SSTNode[] seq;
            if (
                (elem = star_target_rule()) != null  // star_target
                &&
                (seq = _loop0_182_rule()) != null  // _loop0_182
            )
            {
                debugMessageln("%d _gather_181[%d-%d]: %s succeeded!", level, _mark, mark(), "star_target _loop0_182");
                _res = insertInFront(elem, seq);
                cache.putResult(_mark, _GATHER_181_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s _gather_181[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_target _loop0_182");
        }
        debugMessageln("Fail at %d: _gather_181", _mark);
        _res = null;
        cache.putResult(_mark, _GATHER_181_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // _tmp_183: ','
    public Object _tmp_183_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_183_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_183_ID);
            level--;
            return (Object)_res;
        }
        { // ','
            debugMessageln("%d> _tmp_183[%d-%d]: %s", level, _mark, mark(), "','");
            Token _literal;
            if (
                (_literal = expect(12)) != null  // token=','
            )
            {
                debugMessageln("%d _tmp_183[%d-%d]: %s succeeded!", level, _mark, mark(), "','");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "','");
                _res = _literal;
                cache.putResult(_mark, _TMP_183_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_183[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','");
        }
        debugMessageln("Fail at %d: _tmp_183", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_183_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop1_184: (',' star_target)
    public SSTNode[] _loop1_184_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP1_184_ID)) {
            _res = cache.getResult(_mark, _LOOP1_184_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // (',' star_target)
            debugMessageln("%d> _loop1_184[%d-%d]: %s", level, _mark, mark(), "(',' star_target)");
            Object _tmp_246_var;
            while (
                (_tmp_246_var = _tmp_246_rule()) != null  // ',' star_target
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "(',' star_target)");
                _res = _tmp_246_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop1_184[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "(',' star_target)");
        }
        if (_children.size() == 0) {
            level--;
            return null;
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP1_184_ID, _seq);
        level--;
        return _seq;
    }

    // _tmp_185: ','
    public Object _tmp_185_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_185_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_185_ID);
            level--;
            return (Object)_res;
        }
        { // ','
            debugMessageln("%d> _tmp_185[%d-%d]: %s", level, _mark, mark(), "','");
            Token _literal;
            if (
                (_literal = expect(12)) != null  // token=','
            )
            {
                debugMessageln("%d _tmp_185[%d-%d]: %s succeeded!", level, _mark, mark(), "','");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "','");
                _res = _literal;
                cache.putResult(_mark, _TMP_185_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_185[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','");
        }
        debugMessageln("Fail at %d: _tmp_185", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_185_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_186: !'*' star_target
    public Object _tmp_186_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_186_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_186_ID);
            level--;
            return (Object)_res;
        }
        { // !'*' star_target
            debugMessageln("%d> _tmp_186[%d-%d]: %s", level, _mark, mark(), "!'*' star_target");
            SSTNode star_target_var;
            if (
                genLookahead_expect(false, 16)  // token='*'
                &&
                (star_target_var = star_target_rule()) != null  // star_target
            )
            {
                debugMessageln("%d _tmp_186[%d-%d]: %s succeeded!", level, _mark, mark(), "!'*' star_target");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "!'*' star_target");
                _res = star_target_var;
                cache.putResult(_mark, _TMP_186_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_186[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "!'*' star_target");
        }
        debugMessageln("Fail at %d: _tmp_186", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_186_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_187: star_targets_tuple_seq
    public Object _tmp_187_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_187_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_187_ID);
            level--;
            return (Object)_res;
        }
        { // star_targets_tuple_seq
            debugMessageln("%d> _tmp_187[%d-%d]: %s", level, _mark, mark(), "star_targets_tuple_seq");
            SSTNode[] star_targets_tuple_seq_var;
            if (
                (star_targets_tuple_seq_var = star_targets_tuple_seq_rule()) != null  // star_targets_tuple_seq
            )
            {
                debugMessageln("%d _tmp_187[%d-%d]: %s succeeded!", level, _mark, mark(), "star_targets_tuple_seq");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "star_targets_tuple_seq");
                _res = star_targets_tuple_seq_var;
                cache.putResult(_mark, _TMP_187_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_187[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_targets_tuple_seq");
        }
        debugMessageln("Fail at %d: _tmp_187", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_187_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_188: star_targets_list_seq
    public Object _tmp_188_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_188_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_188_ID);
            level--;
            return (Object)_res;
        }
        { // star_targets_list_seq
            debugMessageln("%d> _tmp_188[%d-%d]: %s", level, _mark, mark(), "star_targets_list_seq");
            SSTNode[] star_targets_list_seq_var;
            if (
                (star_targets_list_seq_var = star_targets_list_seq_rule()) != null  // star_targets_list_seq
            )
            {
                debugMessageln("%d _tmp_188[%d-%d]: %s succeeded!", level, _mark, mark(), "star_targets_list_seq");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "star_targets_list_seq");
                _res = star_targets_list_seq_var;
                cache.putResult(_mark, _TMP_188_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_188[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_targets_list_seq");
        }
        debugMessageln("Fail at %d: _tmp_188", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_188_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop0_190: ',' del_target
    public SSTNode[] _loop0_190_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_190_ID)) {
            _res = cache.getResult(_mark, _LOOP0_190_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ',' del_target
            debugMessageln("%d> _loop0_190[%d-%d]: %s", level, _mark, mark(), "',' del_target");
            Token _literal;
            SSTNode elem;
            while (
                (_literal = expect(12)) != null  // token=','
                &&
                (elem = del_target_rule()) != null  // del_target
            )
            {
                _res = elem;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' del_target");
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_190[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' del_target");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_190_ID, _seq);
        level--;
        return _seq;
    }

    // _gather_189: del_target _loop0_190
    public SSTNode[] _gather_189_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _GATHER_189_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, _GATHER_189_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // del_target _loop0_190
            debugMessageln("%d> _gather_189[%d-%d]: %s", level, _mark, mark(), "del_target _loop0_190");
            SSTNode elem;
            SSTNode[] seq;
            if (
                (elem = del_target_rule()) != null  // del_target
                &&
                (seq = _loop0_190_rule()) != null  // _loop0_190
            )
            {
                debugMessageln("%d _gather_189[%d-%d]: %s succeeded!", level, _mark, mark(), "del_target _loop0_190");
                _res = insertInFront(elem, seq);
                cache.putResult(_mark, _GATHER_189_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s _gather_189[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "del_target _loop0_190");
        }
        debugMessageln("Fail at %d: _gather_189", _mark);
        _res = null;
        cache.putResult(_mark, _GATHER_189_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // _tmp_191: ','
    public Object _tmp_191_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_191_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_191_ID);
            level--;
            return (Object)_res;
        }
        { // ','
            debugMessageln("%d> _tmp_191[%d-%d]: %s", level, _mark, mark(), "','");
            Token _literal;
            if (
                (_literal = expect(12)) != null  // token=','
            )
            {
                debugMessageln("%d _tmp_191[%d-%d]: %s succeeded!", level, _mark, mark(), "','");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "','");
                _res = _literal;
                cache.putResult(_mark, _TMP_191_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_191[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','");
        }
        debugMessageln("Fail at %d: _tmp_191", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_191_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_192: del_targets
    public Object _tmp_192_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_192_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_192_ID);
            level--;
            return (Object)_res;
        }
        { // del_targets
            debugMessageln("%d> _tmp_192[%d-%d]: %s", level, _mark, mark(), "del_targets");
            SSTNode[] del_targets_var;
            if (
                (del_targets_var = del_targets_rule()) != null  // del_targets
            )
            {
                debugMessageln("%d _tmp_192[%d-%d]: %s succeeded!", level, _mark, mark(), "del_targets");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "del_targets");
                _res = del_targets_var;
                cache.putResult(_mark, _TMP_192_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_192[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "del_targets");
        }
        debugMessageln("Fail at %d: _tmp_192", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_192_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_193: del_targets
    public Object _tmp_193_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_193_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_193_ID);
            level--;
            return (Object)_res;
        }
        { // del_targets
            debugMessageln("%d> _tmp_193[%d-%d]: %s", level, _mark, mark(), "del_targets");
            SSTNode[] del_targets_var;
            if (
                (del_targets_var = del_targets_rule()) != null  // del_targets
            )
            {
                debugMessageln("%d _tmp_193[%d-%d]: %s succeeded!", level, _mark, mark(), "del_targets");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "del_targets");
                _res = del_targets_var;
                cache.putResult(_mark, _TMP_193_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_193[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "del_targets");
        }
        debugMessageln("Fail at %d: _tmp_193", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_193_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop0_195: ',' target
    public SSTNode[] _loop0_195_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_195_ID)) {
            _res = cache.getResult(_mark, _LOOP0_195_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ',' target
            debugMessageln("%d> _loop0_195[%d-%d]: %s", level, _mark, mark(), "',' target");
            Token _literal;
            SSTNode elem;
            while (
                (_literal = expect(12)) != null  // token=','
                &&
                (elem = target_rule()) != null  // target
            )
            {
                _res = elem;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' target");
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_195[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' target");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_195_ID, _seq);
        level--;
        return _seq;
    }

    // _gather_194: target _loop0_195
    public SSTNode[] _gather_194_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _GATHER_194_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, _GATHER_194_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // target _loop0_195
            debugMessageln("%d> _gather_194[%d-%d]: %s", level, _mark, mark(), "target _loop0_195");
            SSTNode elem;
            SSTNode[] seq;
            if (
                (elem = target_rule()) != null  // target
                &&
                (seq = _loop0_195_rule()) != null  // _loop0_195
            )
            {
                debugMessageln("%d _gather_194[%d-%d]: %s succeeded!", level, _mark, mark(), "target _loop0_195");
                _res = insertInFront(elem, seq);
                cache.putResult(_mark, _GATHER_194_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s _gather_194[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "target _loop0_195");
        }
        debugMessageln("Fail at %d: _gather_194", _mark);
        _res = null;
        cache.putResult(_mark, _GATHER_194_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // _tmp_196: ','
    public Object _tmp_196_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_196_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_196_ID);
            level--;
            return (Object)_res;
        }
        { // ','
            debugMessageln("%d> _tmp_196[%d-%d]: %s", level, _mark, mark(), "','");
            Token _literal;
            if (
                (_literal = expect(12)) != null  // token=','
            )
            {
                debugMessageln("%d _tmp_196[%d-%d]: %s succeeded!", level, _mark, mark(), "','");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "','");
                _res = _literal;
                cache.putResult(_mark, _TMP_196_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_196[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','");
        }
        debugMessageln("Fail at %d: _tmp_196", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_196_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_197: arguments
    public Object _tmp_197_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_197_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_197_ID);
            level--;
            return (Object)_res;
        }
        { // arguments
            debugMessageln("%d> _tmp_197[%d-%d]: %s", level, _mark, mark(), "arguments");
            SSTNode arguments_var;
            if (
                (arguments_var = arguments_rule()) != null  // arguments
            )
            {
                debugMessageln("%d _tmp_197[%d-%d]: %s succeeded!", level, _mark, mark(), "arguments");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "arguments");
                _res = arguments_var;
                cache.putResult(_mark, _TMP_197_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_197[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "arguments");
        }
        debugMessageln("Fail at %d: _tmp_197", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_197_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_198: targets
    public Object _tmp_198_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_198_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_198_ID);
            level--;
            return (Object)_res;
        }
        { // targets
            debugMessageln("%d> _tmp_198[%d-%d]: %s", level, _mark, mark(), "targets");
            SSTNode[] targets_var;
            if (
                (targets_var = targets_rule()) != null  // targets
            )
            {
                debugMessageln("%d _tmp_198[%d-%d]: %s succeeded!", level, _mark, mark(), "targets");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "targets");
                _res = targets_var;
                cache.putResult(_mark, _TMP_198_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_198[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "targets");
        }
        debugMessageln("Fail at %d: _tmp_198", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_198_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_199: targets
    public Object _tmp_199_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_199_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_199_ID);
            level--;
            return (Object)_res;
        }
        { // targets
            debugMessageln("%d> _tmp_199[%d-%d]: %s", level, _mark, mark(), "targets");
            SSTNode[] targets_var;
            if (
                (targets_var = targets_rule()) != null  // targets
            )
            {
                debugMessageln("%d _tmp_199[%d-%d]: %s succeeded!", level, _mark, mark(), "targets");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "targets");
                _res = targets_var;
                cache.putResult(_mark, _TMP_199_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_199[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "targets");
        }
        debugMessageln("Fail at %d: _tmp_199", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_199_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_200: args | expression for_if_clauses
    public Object _tmp_200_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_200_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_200_ID);
            level--;
            return (Object)_res;
        }
        { // args
            debugMessageln("%d> _tmp_200[%d-%d]: %s", level, _mark, mark(), "args");
            SSTNode args_var;
            if (
                (args_var = args_rule()) != null  // args
            )
            {
                debugMessageln("%d _tmp_200[%d-%d]: %s succeeded!", level, _mark, mark(), "args");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "args");
                _res = args_var;
                cache.putResult(_mark, _TMP_200_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_200[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "args");
        }
        { // expression for_if_clauses
            debugMessageln("%d> _tmp_200[%d-%d]: %s", level, _mark, mark(), "expression for_if_clauses");
            SSTNode expression_var;
            ForComprehensionSSTNode[] for_if_clauses_var;
            if (
                (expression_var = expression_rule()) != null  // expression
                &&
                (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            )
            {
                debugMessageln("%d _tmp_200[%d-%d]: %s succeeded!", level, _mark, mark(), "expression for_if_clauses");
                debugMessageln("Hit without action [%d:%d]: %s", _mark, mark(), "expression for_if_clauses");
                _res = dummyName(expression_var, for_if_clauses_var);
                cache.putResult(_mark, _TMP_200_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_200[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "expression for_if_clauses");
        }
        debugMessageln("Fail at %d: _tmp_200", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_200_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_201: NAME STRING | SOFT_KEYWORD
    public Object _tmp_201_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_201_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_201_ID);
            level--;
            return (Object)_res;
        }
        { // NAME STRING
            debugMessageln("%d> _tmp_201[%d-%d]: %s", level, _mark, mark(), "NAME STRING");
            SSTNode name_var;
            SSTNode string_var;
            if (
                (name_var = name_token()) != null  // NAME
                &&
                (string_var = string_token()) != null  // STRING
            )
            {
                debugMessageln("%d _tmp_201[%d-%d]: %s succeeded!", level, _mark, mark(), "NAME STRING");
                debugMessageln("Hit without action [%d:%d]: %s", _mark, mark(), "NAME STRING");
                _res = dummyName(name_var, string_var);
                cache.putResult(_mark, _TMP_201_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_201[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "NAME STRING");
        }
        { // SOFT_KEYWORD
            debugMessageln("%d> _tmp_201[%d-%d]: %s", level, _mark, mark(), "SOFT_KEYWORD");
            SSTNode soft_keyword_var;
            if (
                (soft_keyword_var = soft_keyword_token()) != null  // SOFT_KEYWORD
            )
            {
                debugMessageln("%d _tmp_201[%d-%d]: %s succeeded!", level, _mark, mark(), "SOFT_KEYWORD");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "SOFT_KEYWORD");
                _res = soft_keyword_var;
                cache.putResult(_mark, _TMP_201_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_201[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "SOFT_KEYWORD");
        }
        debugMessageln("Fail at %d: _tmp_201", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_201_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_202: '=' | ':=' | ','
    public Object _tmp_202_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_202_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_202_ID);
            level--;
            return (Object)_res;
        }
        { // '='
            debugMessageln("%d> _tmp_202[%d-%d]: %s", level, _mark, mark(), "'='");
            Token _literal;
            if (
                (_literal = expect(22)) != null  // token='='
            )
            {
                debugMessageln("%d _tmp_202[%d-%d]: %s succeeded!", level, _mark, mark(), "'='");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'='");
                _res = _literal;
                cache.putResult(_mark, _TMP_202_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_202[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'='");
        }
        { // ':='
            debugMessageln("%d> _tmp_202[%d-%d]: %s", level, _mark, mark(), "':='");
            Token _literal;
            if (
                (_literal = expect(53)) != null  // token=':='
            )
            {
                debugMessageln("%d _tmp_202[%d-%d]: %s succeeded!", level, _mark, mark(), "':='");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "':='");
                _res = _literal;
                cache.putResult(_mark, _TMP_202_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_202[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "':='");
        }
        { // ','
            debugMessageln("%d> _tmp_202[%d-%d]: %s", level, _mark, mark(), "','");
            Token _literal;
            if (
                (_literal = expect(12)) != null  // token=','
            )
            {
                debugMessageln("%d _tmp_202[%d-%d]: %s succeeded!", level, _mark, mark(), "','");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "','");
                _res = _literal;
                cache.putResult(_mark, _TMP_202_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_202[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','");
        }
        debugMessageln("Fail at %d: _tmp_202", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_202_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_203: list | tuple | genexp | 'True' | 'None' | 'False'
    public Object _tmp_203_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_203_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_203_ID);
            level--;
            return (Object)_res;
        }
        { // list
            debugMessageln("%d> _tmp_203[%d-%d]: %s", level, _mark, mark(), "list");
            SSTNode list_var;
            if (
                (list_var = list_rule()) != null  // list
            )
            {
                debugMessageln("%d _tmp_203[%d-%d]: %s succeeded!", level, _mark, mark(), "list");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "list");
                _res = list_var;
                cache.putResult(_mark, _TMP_203_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_203[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "list");
        }
        { // tuple
            debugMessageln("%d> _tmp_203[%d-%d]: %s", level, _mark, mark(), "tuple");
            SSTNode tuple_var;
            if (
                (tuple_var = tuple_rule()) != null  // tuple
            )
            {
                debugMessageln("%d _tmp_203[%d-%d]: %s succeeded!", level, _mark, mark(), "tuple");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "tuple");
                _res = tuple_var;
                cache.putResult(_mark, _TMP_203_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_203[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "tuple");
        }
        { // genexp
            debugMessageln("%d> _tmp_203[%d-%d]: %s", level, _mark, mark(), "genexp");
            SSTNode genexp_var;
            if (
                (genexp_var = genexp_rule()) != null  // genexp
            )
            {
                debugMessageln("%d _tmp_203[%d-%d]: %s succeeded!", level, _mark, mark(), "genexp");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "genexp");
                _res = genexp_var;
                cache.putResult(_mark, _TMP_203_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_203[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "genexp");
        }
        { // 'True'
            debugMessageln("%d> _tmp_203[%d-%d]: %s", level, _mark, mark(), "'True'");
            Token _keyword;
            if (
                (_keyword = expect(524)) != null  // token='True'
            )
            {
                debugMessageln("%d _tmp_203[%d-%d]: %s succeeded!", level, _mark, mark(), "'True'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'True'");
                _res = _keyword;
                cache.putResult(_mark, _TMP_203_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_203[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'True'");
        }
        { // 'None'
            debugMessageln("%d> _tmp_203[%d-%d]: %s", level, _mark, mark(), "'None'");
            Token _keyword;
            if (
                (_keyword = expect(523)) != null  // token='None'
            )
            {
                debugMessageln("%d _tmp_203[%d-%d]: %s succeeded!", level, _mark, mark(), "'None'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'None'");
                _res = _keyword;
                cache.putResult(_mark, _TMP_203_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_203[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'None'");
        }
        { // 'False'
            debugMessageln("%d> _tmp_203[%d-%d]: %s", level, _mark, mark(), "'False'");
            Token _keyword;
            if (
                (_keyword = expect(525)) != null  // token='False'
            )
            {
                debugMessageln("%d _tmp_203[%d-%d]: %s succeeded!", level, _mark, mark(), "'False'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'False'");
                _res = _keyword;
                cache.putResult(_mark, _TMP_203_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_203[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'False'");
        }
        debugMessageln("Fail at %d: _tmp_203", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_203_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_204: '=' | ':=' | ','
    public Object _tmp_204_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_204_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_204_ID);
            level--;
            return (Object)_res;
        }
        { // '='
            debugMessageln("%d> _tmp_204[%d-%d]: %s", level, _mark, mark(), "'='");
            Token _literal;
            if (
                (_literal = expect(22)) != null  // token='='
            )
            {
                debugMessageln("%d _tmp_204[%d-%d]: %s succeeded!", level, _mark, mark(), "'='");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'='");
                _res = _literal;
                cache.putResult(_mark, _TMP_204_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_204[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'='");
        }
        { // ':='
            debugMessageln("%d> _tmp_204[%d-%d]: %s", level, _mark, mark(), "':='");
            Token _literal;
            if (
                (_literal = expect(53)) != null  // token=':='
            )
            {
                debugMessageln("%d _tmp_204[%d-%d]: %s succeeded!", level, _mark, mark(), "':='");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "':='");
                _res = _literal;
                cache.putResult(_mark, _TMP_204_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_204[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "':='");
        }
        { // ','
            debugMessageln("%d> _tmp_204[%d-%d]: %s", level, _mark, mark(), "','");
            Token _literal;
            if (
                (_literal = expect(12)) != null  // token=','
            )
            {
                debugMessageln("%d _tmp_204[%d-%d]: %s succeeded!", level, _mark, mark(), "','");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "','");
                _res = _literal;
                cache.putResult(_mark, _TMP_204_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_204[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','");
        }
        debugMessageln("Fail at %d: _tmp_204", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_204_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop0_205: star_named_expressions
    public SSTNode[] _loop0_205_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_205_ID)) {
            _res = cache.getResult(_mark, _LOOP0_205_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // star_named_expressions
            debugMessageln("%d> _loop0_205[%d-%d]: %s", level, _mark, mark(), "star_named_expressions");
            SSTNode[] star_named_expressions_var;
            while (
                (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "star_named_expressions");
                _res = star_named_expressions_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_205[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_named_expressions");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_205_ID, _seq);
        level--;
        return _seq;
    }

    // _loop0_206: (star_targets '=')
    public SSTNode[] _loop0_206_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_206_ID)) {
            _res = cache.getResult(_mark, _LOOP0_206_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // (star_targets '=')
            debugMessageln("%d> _loop0_206[%d-%d]: %s", level, _mark, mark(), "(star_targets '=')");
            Object _tmp_247_var;
            while (
                (_tmp_247_var = _tmp_247_rule()) != null  // star_targets '='
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "(star_targets '=')");
                _res = _tmp_247_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_206[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "(star_targets '=')");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_206_ID, _seq);
        level--;
        return _seq;
    }

    // _loop0_207: (star_targets '=')
    public SSTNode[] _loop0_207_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_207_ID)) {
            _res = cache.getResult(_mark, _LOOP0_207_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // (star_targets '=')
            debugMessageln("%d> _loop0_207[%d-%d]: %s", level, _mark, mark(), "(star_targets '=')");
            Object _tmp_248_var;
            while (
                (_tmp_248_var = _tmp_248_rule()) != null  // star_targets '='
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "(star_targets '=')");
                _res = _tmp_248_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_207[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "(star_targets '=')");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_207_ID, _seq);
        level--;
        return _seq;
    }

    // _tmp_208: yield_expr | star_expressions
    public Object _tmp_208_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_208_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_208_ID);
            level--;
            return (Object)_res;
        }
        { // yield_expr
            debugMessageln("%d> _tmp_208[%d-%d]: %s", level, _mark, mark(), "yield_expr");
            SSTNode yield_expr_var;
            if (
                (yield_expr_var = yield_expr_rule()) != null  // yield_expr
            )
            {
                debugMessageln("%d _tmp_208[%d-%d]: %s succeeded!", level, _mark, mark(), "yield_expr");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "yield_expr");
                _res = yield_expr_var;
                cache.putResult(_mark, _TMP_208_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_208[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "yield_expr");
        }
        { // star_expressions
            debugMessageln("%d> _tmp_208[%d-%d]: %s", level, _mark, mark(), "star_expressions");
            SSTNode star_expressions_var;
            if (
                (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            )
            {
                debugMessageln("%d _tmp_208[%d-%d]: %s succeeded!", level, _mark, mark(), "star_expressions");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "star_expressions");
                _res = star_expressions_var;
                cache.putResult(_mark, _TMP_208_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_208[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_expressions");
        }
        debugMessageln("Fail at %d: _tmp_208", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_208_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_209: '[' | '(' | '{'
    public Object _tmp_209_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_209_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_209_ID);
            level--;
            return (Object)_res;
        }
        { // '['
            debugMessageln("%d> _tmp_209[%d-%d]: %s", level, _mark, mark(), "'['");
            Token _literal;
            if (
                (_literal = expect(9)) != null  // token='['
            )
            {
                debugMessageln("%d _tmp_209[%d-%d]: %s succeeded!", level, _mark, mark(), "'['");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'['");
                _res = _literal;
                cache.putResult(_mark, _TMP_209_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_209[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'['");
        }
        { // '('
            debugMessageln("%d> _tmp_209[%d-%d]: %s", level, _mark, mark(), "'('");
            Token _literal;
            if (
                (_literal = expect(7)) != null  // token='('
            )
            {
                debugMessageln("%d _tmp_209[%d-%d]: %s succeeded!", level, _mark, mark(), "'('");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'('");
                _res = _literal;
                cache.putResult(_mark, _TMP_209_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_209[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'('");
        }
        { // '{'
            debugMessageln("%d> _tmp_209[%d-%d]: %s", level, _mark, mark(), "'{'");
            Token _literal;
            if (
                (_literal = expect(25)) != null  // token='{'
            )
            {
                debugMessageln("%d _tmp_209[%d-%d]: %s succeeded!", level, _mark, mark(), "'{'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'{'");
                _res = _literal;
                cache.putResult(_mark, _TMP_209_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_209[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'{'");
        }
        debugMessageln("Fail at %d: _tmp_209", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_209_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_210: '[' | '{'
    public Object _tmp_210_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_210_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_210_ID);
            level--;
            return (Object)_res;
        }
        { // '['
            debugMessageln("%d> _tmp_210[%d-%d]: %s", level, _mark, mark(), "'['");
            Token _literal;
            if (
                (_literal = expect(9)) != null  // token='['
            )
            {
                debugMessageln("%d _tmp_210[%d-%d]: %s succeeded!", level, _mark, mark(), "'['");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'['");
                _res = _literal;
                cache.putResult(_mark, _TMP_210_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_210[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'['");
        }
        { // '{'
            debugMessageln("%d> _tmp_210[%d-%d]: %s", level, _mark, mark(), "'{'");
            Token _literal;
            if (
                (_literal = expect(25)) != null  // token='{'
            )
            {
                debugMessageln("%d _tmp_210[%d-%d]: %s succeeded!", level, _mark, mark(), "'{'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'{'");
                _res = _literal;
                cache.putResult(_mark, _TMP_210_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_210[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'{'");
        }
        debugMessageln("Fail at %d: _tmp_210", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_210_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_211: star_named_expressions
    public Object _tmp_211_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_211_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_211_ID);
            level--;
            return (Object)_res;
        }
        { // star_named_expressions
            debugMessageln("%d> _tmp_211[%d-%d]: %s", level, _mark, mark(), "star_named_expressions");
            SSTNode[] star_named_expressions_var;
            if (
                (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
            )
            {
                debugMessageln("%d _tmp_211[%d-%d]: %s succeeded!", level, _mark, mark(), "star_named_expressions");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "star_named_expressions");
                _res = star_named_expressions_var;
                cache.putResult(_mark, _TMP_211_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_211[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_named_expressions");
        }
        debugMessageln("Fail at %d: _tmp_211", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_211_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop0_212: param_no_default
    public SSTNode[] _loop0_212_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_212_ID)) {
            _res = cache.getResult(_mark, _LOOP0_212_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // param_no_default
            debugMessageln("%d> _loop0_212[%d-%d]: %s", level, _mark, mark(), "param_no_default");
            SSTNode param_no_default_var;
            while (
                (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "param_no_default");
                _res = param_no_default_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_212[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "param_no_default");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_212_ID, _seq);
        level--;
        return _seq;
    }

    // _loop1_213: param_with_default
    public SSTNode[] _loop1_213_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP1_213_ID)) {
            _res = cache.getResult(_mark, _LOOP1_213_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // param_with_default
            debugMessageln("%d> _loop1_213[%d-%d]: %s", level, _mark, mark(), "param_with_default");
            SSTNode[] param_with_default_var;
            while (
                (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "param_with_default");
                _res = param_with_default_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop1_213[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "param_with_default");
        }
        if (_children.size() == 0) {
            level--;
            return null;
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP1_213_ID, _seq);
        level--;
        return _seq;
    }

    // _loop0_214: lambda_param_no_default
    public SSTNode[] _loop0_214_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_214_ID)) {
            _res = cache.getResult(_mark, _LOOP0_214_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // lambda_param_no_default
            debugMessageln("%d> _loop0_214[%d-%d]: %s", level, _mark, mark(), "lambda_param_no_default");
            SSTNode lambda_param_no_default_var;
            while (
                (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "lambda_param_no_default");
                _res = lambda_param_no_default_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_214[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_param_no_default");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_214_ID, _seq);
        level--;
        return _seq;
    }

    // _loop1_215: lambda_param_with_default
    public SSTNode[] _loop1_215_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP1_215_ID)) {
            _res = cache.getResult(_mark, _LOOP1_215_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // lambda_param_with_default
            debugMessageln("%d> _loop1_215[%d-%d]: %s", level, _mark, mark(), "lambda_param_with_default");
            SSTNode[] lambda_param_with_default_var;
            while (
                (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            )
            {
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "lambda_param_with_default");
                _res = lambda_param_with_default_var;
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop1_215[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "lambda_param_with_default");
        }
        if (_children.size() == 0) {
            level--;
            return null;
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP1_215_ID, _seq);
        level--;
        return _seq;
    }

    // _tmp_216: ')' | ',' (')' | '**')
    public Object _tmp_216_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_216_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_216_ID);
            level--;
            return (Object)_res;
        }
        { // ')'
            debugMessageln("%d> _tmp_216[%d-%d]: %s", level, _mark, mark(), "')'");
            Token _literal;
            if (
                (_literal = expect(8)) != null  // token=')'
            )
            {
                debugMessageln("%d _tmp_216[%d-%d]: %s succeeded!", level, _mark, mark(), "')'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "')'");
                _res = _literal;
                cache.putResult(_mark, _TMP_216_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_216[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "')'");
        }
        { // ',' (')' | '**')
            debugMessageln("%d> _tmp_216[%d-%d]: %s", level, _mark, mark(), "',' (')' | '**')");
            Token _literal;
            Object _tmp_249_var;
            if (
                (_literal = expect(12)) != null  // token=','
                &&
                (_tmp_249_var = _tmp_249_rule()) != null  // ')' | '**'
            )
            {
                debugMessageln("%d _tmp_216[%d-%d]: %s succeeded!", level, _mark, mark(), "',' (')' | '**')");
                debugMessageln("Hit without action [%d:%d]: %s", _mark, mark(), "',' (')' | '**')");
                _res = dummyName(_literal, _tmp_249_var);
                cache.putResult(_mark, _TMP_216_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_216[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' (')' | '**')");
        }
        debugMessageln("Fail at %d: _tmp_216", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_216_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_217: ':' | ',' (':' | '**')
    public Object _tmp_217_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_217_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_217_ID);
            level--;
            return (Object)_res;
        }
        { // ':'
            debugMessageln("%d> _tmp_217[%d-%d]: %s", level, _mark, mark(), "':'");
            Token _literal;
            if (
                (_literal = expect(11)) != null  // token=':'
            )
            {
                debugMessageln("%d _tmp_217[%d-%d]: %s succeeded!", level, _mark, mark(), "':'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "':'");
                _res = _literal;
                cache.putResult(_mark, _TMP_217_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_217[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "':'");
        }
        { // ',' (':' | '**')
            debugMessageln("%d> _tmp_217[%d-%d]: %s", level, _mark, mark(), "',' (':' | '**')");
            Token _literal;
            Object _tmp_250_var;
            if (
                (_literal = expect(12)) != null  // token=','
                &&
                (_tmp_250_var = _tmp_250_rule()) != null  // ':' | '**'
            )
            {
                debugMessageln("%d _tmp_217[%d-%d]: %s succeeded!", level, _mark, mark(), "',' (':' | '**')");
                debugMessageln("Hit without action [%d:%d]: %s", _mark, mark(), "',' (':' | '**')");
                _res = dummyName(_literal, _tmp_250_var);
                cache.putResult(_mark, _TMP_217_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_217[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' (':' | '**')");
        }
        debugMessageln("Fail at %d: _tmp_217", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_217_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_218: ',' | ')' | ':'
    public Object _tmp_218_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_218_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_218_ID);
            level--;
            return (Object)_res;
        }
        { // ','
            debugMessageln("%d> _tmp_218[%d-%d]: %s", level, _mark, mark(), "','");
            Token _literal;
            if (
                (_literal = expect(12)) != null  // token=','
            )
            {
                debugMessageln("%d _tmp_218[%d-%d]: %s succeeded!", level, _mark, mark(), "','");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "','");
                _res = _literal;
                cache.putResult(_mark, _TMP_218_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_218[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','");
        }
        { // ')'
            debugMessageln("%d> _tmp_218[%d-%d]: %s", level, _mark, mark(), "')'");
            Token _literal;
            if (
                (_literal = expect(8)) != null  // token=')'
            )
            {
                debugMessageln("%d _tmp_218[%d-%d]: %s succeeded!", level, _mark, mark(), "')'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "')'");
                _res = _literal;
                cache.putResult(_mark, _TMP_218_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_218[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "')'");
        }
        { // ':'
            debugMessageln("%d> _tmp_218[%d-%d]: %s", level, _mark, mark(), "':'");
            Token _literal;
            if (
                (_literal = expect(11)) != null  // token=':'
            )
            {
                debugMessageln("%d _tmp_218[%d-%d]: %s succeeded!", level, _mark, mark(), "':'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "':'");
                _res = _literal;
                cache.putResult(_mark, _TMP_218_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_218[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "':'");
        }
        debugMessageln("Fail at %d: _tmp_218", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_218_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_219: ASYNC
    public Object _tmp_219_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_219_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_219_ID);
            level--;
            return (Object)_res;
        }
        { // ASYNC
            debugMessageln("%d> _tmp_219[%d-%d]: %s", level, _mark, mark(), "ASYNC");
            Token async_var;
            if (
                (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            )
            {
                debugMessageln("%d _tmp_219[%d-%d]: %s succeeded!", level, _mark, mark(), "ASYNC");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "ASYNC");
                _res = async_var;
                cache.putResult(_mark, _TMP_219_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_219[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "ASYNC");
        }
        debugMessageln("Fail at %d: _tmp_219", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_219_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop0_221: ',' (expression ['as' star_target])
    public SSTNode[] _loop0_221_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_221_ID)) {
            _res = cache.getResult(_mark, _LOOP0_221_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ',' (expression ['as' star_target])
            debugMessageln("%d> _loop0_221[%d-%d]: %s", level, _mark, mark(), "',' (expression ['as' star_target])");
            Token _literal;
            Object elem;
            while (
                (_literal = expect(12)) != null  // token=','
                &&
                (elem = _tmp_251_rule()) != null  // expression ['as' star_target]
            )
            {
                _res = elem;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' (expression ['as' star_target])");
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_221[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' (expression ['as' star_target])");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_221_ID, _seq);
        level--;
        return _seq;
    }

    // _gather_220: (expression ['as' star_target]) _loop0_221
    public SSTNode[] _gather_220_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _GATHER_220_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, _GATHER_220_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // (expression ['as' star_target]) _loop0_221
            debugMessageln("%d> _gather_220[%d-%d]: %s", level, _mark, mark(), "(expression ['as' star_target]) _loop0_221");
            Object elem;
            SSTNode[] seq;
            if (
                (elem = _tmp_251_rule()) != null  // expression ['as' star_target]
                &&
                (seq = _loop0_221_rule()) != null  // _loop0_221
            )
            {
                debugMessageln("%d _gather_220[%d-%d]: %s succeeded!", level, _mark, mark(), "(expression ['as' star_target]) _loop0_221");
                _res = insertInFront(elem, seq);
                cache.putResult(_mark, _GATHER_220_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s _gather_220[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "(expression ['as' star_target]) _loop0_221");
        }
        debugMessageln("Fail at %d: _gather_220", _mark);
        _res = null;
        cache.putResult(_mark, _GATHER_220_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // _tmp_222: ASYNC
    public Object _tmp_222_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_222_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_222_ID);
            level--;
            return (Object)_res;
        }
        { // ASYNC
            debugMessageln("%d> _tmp_222[%d-%d]: %s", level, _mark, mark(), "ASYNC");
            Token async_var;
            if (
                (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            )
            {
                debugMessageln("%d _tmp_222[%d-%d]: %s succeeded!", level, _mark, mark(), "ASYNC");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "ASYNC");
                _res = async_var;
                cache.putResult(_mark, _TMP_222_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_222[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "ASYNC");
        }
        debugMessageln("Fail at %d: _tmp_222", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_222_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop0_224: ',' (expressions ['as' star_target])
    public SSTNode[] _loop0_224_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_224_ID)) {
            _res = cache.getResult(_mark, _LOOP0_224_ID);
            level--;
            return (SSTNode[])_res;
        }
        int _start_mark = mark();
        List<SSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ',' (expressions ['as' star_target])
            debugMessageln("%d> _loop0_224[%d-%d]: %s", level, _mark, mark(), "',' (expressions ['as' star_target])");
            Token _literal;
            Object elem;
            while (
                (_literal = expect(12)) != null  // token=','
                &&
                (elem = _tmp_252_rule()) != null  // expressions ['as' star_target]
            )
            {
                _res = elem;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' (expressions ['as' star_target])");
                if (_res instanceof SSTNode) {
                    _children.add((SSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((SSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_224[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' (expressions ['as' star_target])");
        }
        SSTNode[] _seq = _children.toArray(new SSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_224_ID, _seq);
        level--;
        return _seq;
    }

    // _gather_223: (expressions ['as' star_target]) _loop0_224
    public SSTNode[] _gather_223_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _GATHER_223_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, _GATHER_223_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // (expressions ['as' star_target]) _loop0_224
            debugMessageln("%d> _gather_223[%d-%d]: %s", level, _mark, mark(), "(expressions ['as' star_target]) _loop0_224");
            Object elem;
            SSTNode[] seq;
            if (
                (elem = _tmp_252_rule()) != null  // expressions ['as' star_target]
                &&
                (seq = _loop0_224_rule()) != null  // _loop0_224
            )
            {
                debugMessageln("%d _gather_223[%d-%d]: %s succeeded!", level, _mark, mark(), "(expressions ['as' star_target]) _loop0_224");
                _res = insertInFront(elem, seq);
                cache.putResult(_mark, _GATHER_223_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s _gather_223[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "(expressions ['as' star_target]) _loop0_224");
        }
        debugMessageln("Fail at %d: _gather_223", _mark);
        _res = null;
        cache.putResult(_mark, _GATHER_223_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // _tmp_225: 'as' NAME
    public Object _tmp_225_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_225_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_225_ID);
            level--;
            return (Object)_res;
        }
        { // 'as' NAME
            debugMessageln("%d> _tmp_225[%d-%d]: %s", level, _mark, mark(), "'as' NAME");
            Token _keyword;
            SSTNode name_var;
            if (
                (_keyword = expect(520)) != null  // token='as'
                &&
                (name_var = name_token()) != null  // NAME
            )
            {
                debugMessageln("%d _tmp_225[%d-%d]: %s succeeded!", level, _mark, mark(), "'as' NAME");
                debugMessageln("Hit without action [%d:%d]: %s", _mark, mark(), "'as' NAME");
                _res = dummyName(_keyword, name_var);
                cache.putResult(_mark, _TMP_225_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_225[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'as' NAME");
        }
        debugMessageln("Fail at %d: _tmp_225", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_225_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_226: 'as' NAME
    public Object _tmp_226_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_226_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_226_ID);
            level--;
            return (Object)_res;
        }
        { // 'as' NAME
            debugMessageln("%d> _tmp_226[%d-%d]: %s", level, _mark, mark(), "'as' NAME");
            Token _keyword;
            SSTNode name_var;
            if (
                (_keyword = expect(520)) != null  // token='as'
                &&
                (name_var = name_token()) != null  // NAME
            )
            {
                debugMessageln("%d _tmp_226[%d-%d]: %s succeeded!", level, _mark, mark(), "'as' NAME");
                debugMessageln("Hit without action [%d:%d]: %s", _mark, mark(), "'as' NAME");
                _res = dummyName(_keyword, name_var);
                cache.putResult(_mark, _TMP_226_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_226[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'as' NAME");
        }
        debugMessageln("Fail at %d: _tmp_226", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_226_ID, _res);
        level--;
        return (Object)_res;
    }

    // _loop0_228: ',' double_starred_kvpair
    public KeyValueSSTNode[] _loop0_228_rule()
    {
        level++;
        Object _res = null;
        int _mark = mark();
        if (cache.hasResult(_mark, _LOOP0_228_ID)) {
            _res = cache.getResult(_mark, _LOOP0_228_ID);
            level--;
            return (KeyValueSSTNode[])_res;
        }
        int _start_mark = mark();
        List<KeyValueSSTNode> _children = new ArrayList<>();
        int _children_capacity = 1;
        int _n = 0;
        { // ',' double_starred_kvpair
            debugMessageln("%d> _loop0_228[%d-%d]: %s", level, _mark, mark(), "',' double_starred_kvpair");
            Token _literal;
            KeyValueSSTNode elem;
            while (
                (_literal = expect(12)) != null  // token=','
                &&
                (elem = double_starred_kvpair_rule()) != null  // double_starred_kvpair
            )
            {
                _res = elem;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' double_starred_kvpair");
                if (_res instanceof KeyValueSSTNode) {
                    _children.add((KeyValueSSTNode)_res);
                } else {
                    _children.addAll(Arrays.asList((KeyValueSSTNode[])_res));
                }
                _mark = mark();
            }
            reset(_mark);
            debugMessageln("%d%s _loop0_228[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' double_starred_kvpair");
        }
        KeyValueSSTNode[] _seq = _children.toArray(new KeyValueSSTNode[_children.size()]);
        cache.putResult(_start_mark, _LOOP0_228_ID, _seq);
        level--;
        return _seq;
    }

    // _gather_227: double_starred_kvpair _loop0_228
    public SSTNode[] _gather_227_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _GATHER_227_ID)) {
            _res = (SSTNode[])cache.getResult(_mark, _GATHER_227_ID);
            level--;
            return (SSTNode[])_res;
        }
        { // double_starred_kvpair _loop0_228
            debugMessageln("%d> _gather_227[%d-%d]: %s", level, _mark, mark(), "double_starred_kvpair _loop0_228");
            KeyValueSSTNode elem;
            SSTNode[] seq;
            if (
                (elem = double_starred_kvpair_rule()) != null  // double_starred_kvpair
                &&
                (seq = _loop0_228_rule()) != null  // _loop0_228
            )
            {
                debugMessageln("%d _gather_227[%d-%d]: %s succeeded!", level, _mark, mark(), "double_starred_kvpair _loop0_228");
                _res = insertInFront(elem, seq);
                cache.putResult(_mark, _GATHER_227_ID, _res);
                level--;
                return (SSTNode[])_res;
            }
            reset(_mark);
            debugMessageln("%d%s _gather_227[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "double_starred_kvpair _loop0_228");
        }
        debugMessageln("Fail at %d: _gather_227", _mark);
        _res = null;
        cache.putResult(_mark, _GATHER_227_ID, _res);
        level--;
        return (SSTNode[])_res;
    }

    // _tmp_229: '}' | ','
    public Object _tmp_229_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_229_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_229_ID);
            level--;
            return (Object)_res;
        }
        { // '}'
            debugMessageln("%d> _tmp_229[%d-%d]: %s", level, _mark, mark(), "'}'");
            Token _literal;
            if (
                (_literal = expect(26)) != null  // token='}'
            )
            {
                debugMessageln("%d _tmp_229[%d-%d]: %s succeeded!", level, _mark, mark(), "'}'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'}'");
                _res = _literal;
                cache.putResult(_mark, _TMP_229_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_229[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'}'");
        }
        { // ','
            debugMessageln("%d> _tmp_229[%d-%d]: %s", level, _mark, mark(), "','");
            Token _literal;
            if (
                (_literal = expect(12)) != null  // token=','
            )
            {
                debugMessageln("%d _tmp_229[%d-%d]: %s succeeded!", level, _mark, mark(), "','");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "','");
                _res = _literal;
                cache.putResult(_mark, _TMP_229_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_229[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "','");
        }
        debugMessageln("Fail at %d: _tmp_229", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_229_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_230: ':'
    public Object _tmp_230_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_230_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_230_ID);
            level--;
            return (Object)_res;
        }
        { // ':'
            debugMessageln("%d> _tmp_230[%d-%d]: %s", level, _mark, mark(), "':'");
            Token _literal;
            if (
                (_literal = expect(11)) != null  // token=':'
            )
            {
                debugMessageln("%d _tmp_230[%d-%d]: %s succeeded!", level, _mark, mark(), "':'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "':'");
                _res = _literal;
                cache.putResult(_mark, _TMP_230_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_230[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "':'");
        }
        debugMessageln("Fail at %d: _tmp_230", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_230_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_231: star_targets '='
    public Object _tmp_231_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_231_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_231_ID);
            level--;
            return (Object)_res;
        }
        { // star_targets '='
            debugMessageln("%d> _tmp_231[%d-%d]: %s", level, _mark, mark(), "star_targets '='");
            Token _literal;
            SSTNode z;
            if (
                (z = star_targets_rule()) != null  // star_targets
                &&
                (_literal = expect(22)) != null  // token='='
            )
            {
                debugMessageln("%d _tmp_231[%d-%d]: %s succeeded!", level, _mark, mark(), "star_targets '='");
                _res = z;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "star_targets '='");
                cache.putResult(_mark, _TMP_231_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_231[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_targets '='");
        }
        debugMessageln("Fail at %d: _tmp_231", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_231_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_232: '.' | '...'
    public Object _tmp_232_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_232_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_232_ID);
            level--;
            return (Object)_res;
        }
        { // '.'
            debugMessageln("%d> _tmp_232[%d-%d]: %s", level, _mark, mark(), "'.'");
            Token _literal;
            if (
                (_literal = expect(23)) != null  // token='.'
            )
            {
                debugMessageln("%d _tmp_232[%d-%d]: %s succeeded!", level, _mark, mark(), "'.'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'.'");
                _res = _literal;
                cache.putResult(_mark, _TMP_232_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_232[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'.'");
        }
        { // '...'
            debugMessageln("%d> _tmp_232[%d-%d]: %s", level, _mark, mark(), "'...'");
            Token _literal;
            if (
                (_literal = expect(52)) != null  // token='...'
            )
            {
                debugMessageln("%d _tmp_232[%d-%d]: %s succeeded!", level, _mark, mark(), "'...'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'...'");
                _res = _literal;
                cache.putResult(_mark, _TMP_232_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_232[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'...'");
        }
        debugMessageln("Fail at %d: _tmp_232", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_232_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_233: '.' | '...'
    public Object _tmp_233_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_233_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_233_ID);
            level--;
            return (Object)_res;
        }
        { // '.'
            debugMessageln("%d> _tmp_233[%d-%d]: %s", level, _mark, mark(), "'.'");
            Token _literal;
            if (
                (_literal = expect(23)) != null  // token='.'
            )
            {
                debugMessageln("%d _tmp_233[%d-%d]: %s succeeded!", level, _mark, mark(), "'.'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'.'");
                _res = _literal;
                cache.putResult(_mark, _TMP_233_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_233[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'.'");
        }
        { // '...'
            debugMessageln("%d> _tmp_233[%d-%d]: %s", level, _mark, mark(), "'...'");
            Token _literal;
            if (
                (_literal = expect(52)) != null  // token='...'
            )
            {
                debugMessageln("%d _tmp_233[%d-%d]: %s succeeded!", level, _mark, mark(), "'...'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'...'");
                _res = _literal;
                cache.putResult(_mark, _TMP_233_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_233[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'...'");
        }
        debugMessageln("Fail at %d: _tmp_233", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_233_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_234: '@' named_expression NEWLINE
    public Object _tmp_234_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_234_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_234_ID);
            level--;
            return (Object)_res;
        }
        { // '@' named_expression NEWLINE
            debugMessageln("%d> _tmp_234[%d-%d]: %s", level, _mark, mark(), "'@' named_expression NEWLINE");
            Token _literal;
            SSTNode f;
            Token newline_var;
            if (
                (_literal = expect(49)) != null  // token='@'
                &&
                (f = named_expression_rule()) != null  // named_expression
                &&
                (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            )
            {
                debugMessageln("%d _tmp_234[%d-%d]: %s succeeded!", level, _mark, mark(), "'@' named_expression NEWLINE");
                _res = f;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'@' named_expression NEWLINE");
                cache.putResult(_mark, _TMP_234_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_234[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'@' named_expression NEWLINE");
        }
        debugMessageln("Fail at %d: _tmp_234", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_234_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_235: arguments
    public Object _tmp_235_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_235_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_235_ID);
            level--;
            return (Object)_res;
        }
        { // arguments
            debugMessageln("%d> _tmp_235[%d-%d]: %s", level, _mark, mark(), "arguments");
            SSTNode arguments_var;
            if (
                (arguments_var = arguments_rule()) != null  // arguments
            )
            {
                debugMessageln("%d _tmp_235[%d-%d]: %s succeeded!", level, _mark, mark(), "arguments");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "arguments");
                _res = arguments_var;
                cache.putResult(_mark, _TMP_235_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_235[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "arguments");
        }
        debugMessageln("Fail at %d: _tmp_235", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_235_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_236: ',' star_expression
    public Object _tmp_236_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_236_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_236_ID);
            level--;
            return (Object)_res;
        }
        { // ',' star_expression
            debugMessageln("%d> _tmp_236[%d-%d]: %s", level, _mark, mark(), "',' star_expression");
            Token _literal;
            SSTNode c;
            if (
                (_literal = expect(12)) != null  // token=','
                &&
                (c = star_expression_rule()) != null  // star_expression
            )
            {
                debugMessageln("%d _tmp_236[%d-%d]: %s succeeded!", level, _mark, mark(), "',' star_expression");
                _res = c;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' star_expression");
                cache.putResult(_mark, _TMP_236_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_236[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' star_expression");
        }
        debugMessageln("Fail at %d: _tmp_236", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_236_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_237: ',' expression
    public Object _tmp_237_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_237_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_237_ID);
            level--;
            return (Object)_res;
        }
        { // ',' expression
            debugMessageln("%d> _tmp_237[%d-%d]: %s", level, _mark, mark(), "',' expression");
            Token _literal;
            SSTNode c;
            if (
                (_literal = expect(12)) != null  // token=','
                &&
                (c = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d _tmp_237[%d-%d]: %s succeeded!", level, _mark, mark(), "',' expression");
                _res = c;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' expression");
                cache.putResult(_mark, _TMP_237_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_237[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' expression");
        }
        debugMessageln("Fail at %d: _tmp_237", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_237_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_238: 'or' conjunction
    public Object _tmp_238_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_238_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_238_ID);
            level--;
            return (Object)_res;
        }
        { // 'or' conjunction
            debugMessageln("%d> _tmp_238[%d-%d]: %s", level, _mark, mark(), "'or' conjunction");
            Token _keyword;
            SSTNode c;
            if (
                (_keyword = expect(531)) != null  // token='or'
                &&
                (c = conjunction_rule()) != null  // conjunction
            )
            {
                debugMessageln("%d _tmp_238[%d-%d]: %s succeeded!", level, _mark, mark(), "'or' conjunction");
                _res = c;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'or' conjunction");
                cache.putResult(_mark, _TMP_238_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_238[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'or' conjunction");
        }
        debugMessageln("Fail at %d: _tmp_238", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_238_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_239: 'and' inversion
    public Object _tmp_239_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_239_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_239_ID);
            level--;
            return (Object)_res;
        }
        { // 'and' inversion
            debugMessageln("%d> _tmp_239[%d-%d]: %s", level, _mark, mark(), "'and' inversion");
            Token _keyword;
            SSTNode c;
            if (
                (_keyword = expect(532)) != null  // token='and'
                &&
                (c = inversion_rule()) != null  // inversion
            )
            {
                debugMessageln("%d _tmp_239[%d-%d]: %s succeeded!", level, _mark, mark(), "'and' inversion");
                _res = c;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'and' inversion");
                cache.putResult(_mark, _TMP_239_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_239[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'and' inversion");
        }
        debugMessageln("Fail at %d: _tmp_239", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_239_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_240: expression
    public Object _tmp_240_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_240_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_240_ID);
            level--;
            return (Object)_res;
        }
        { // expression
            debugMessageln("%d> _tmp_240[%d-%d]: %s", level, _mark, mark(), "expression");
            SSTNode expression_var;
            if (
                (expression_var = expression_rule()) != null  // expression
            )
            {
                debugMessageln("%d _tmp_240[%d-%d]: %s succeeded!", level, _mark, mark(), "expression");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "expression");
                _res = expression_var;
                cache.putResult(_mark, _TMP_240_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_240[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "expression");
        }
        debugMessageln("Fail at %d: _tmp_240", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_240_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_241: star_named_expressions
    public Object _tmp_241_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_241_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_241_ID);
            level--;
            return (Object)_res;
        }
        { // star_named_expressions
            debugMessageln("%d> _tmp_241[%d-%d]: %s", level, _mark, mark(), "star_named_expressions");
            SSTNode[] star_named_expressions_var;
            if (
                (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
            )
            {
                debugMessageln("%d _tmp_241[%d-%d]: %s succeeded!", level, _mark, mark(), "star_named_expressions");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "star_named_expressions");
                _res = star_named_expressions_var;
                cache.putResult(_mark, _TMP_241_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_241[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_named_expressions");
        }
        debugMessageln("Fail at %d: _tmp_241", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_241_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_242: 'if' disjunction
    public Object _tmp_242_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_242_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_242_ID);
            level--;
            return (Object)_res;
        }
        { // 'if' disjunction
            debugMessageln("%d> _tmp_242[%d-%d]: %s", level, _mark, mark(), "'if' disjunction");
            Token _keyword;
            SSTNode z;
            if (
                (_keyword = expect(510)) != null  // token='if'
                &&
                (z = disjunction_rule()) != null  // disjunction
            )
            {
                debugMessageln("%d _tmp_242[%d-%d]: %s succeeded!", level, _mark, mark(), "'if' disjunction");
                _res = z;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'if' disjunction");
                cache.putResult(_mark, _TMP_242_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_242[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'if' disjunction");
        }
        debugMessageln("Fail at %d: _tmp_242", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_242_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_243: 'if' disjunction
    public Object _tmp_243_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_243_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_243_ID);
            level--;
            return (Object)_res;
        }
        { // 'if' disjunction
            debugMessageln("%d> _tmp_243[%d-%d]: %s", level, _mark, mark(), "'if' disjunction");
            Token _keyword;
            SSTNode z;
            if (
                (_keyword = expect(510)) != null  // token='if'
                &&
                (z = disjunction_rule()) != null  // disjunction
            )
            {
                debugMessageln("%d _tmp_243[%d-%d]: %s succeeded!", level, _mark, mark(), "'if' disjunction");
                _res = z;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "'if' disjunction");
                cache.putResult(_mark, _TMP_243_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_243[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'if' disjunction");
        }
        debugMessageln("Fail at %d: _tmp_243", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_243_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_244: starred_expression | direct_named_expression !'='
    public Object _tmp_244_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_244_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_244_ID);
            level--;
            return (Object)_res;
        }
        { // starred_expression
            debugMessageln("%d> _tmp_244[%d-%d]: %s", level, _mark, mark(), "starred_expression");
            SSTNode starred_expression_var;
            if (
                (starred_expression_var = starred_expression_rule()) != null  // starred_expression
            )
            {
                debugMessageln("%d _tmp_244[%d-%d]: %s succeeded!", level, _mark, mark(), "starred_expression");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "starred_expression");
                _res = starred_expression_var;
                cache.putResult(_mark, _TMP_244_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_244[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "starred_expression");
        }
        { // direct_named_expression !'='
            debugMessageln("%d> _tmp_244[%d-%d]: %s", level, _mark, mark(), "direct_named_expression !'='");
            SSTNode direct_named_expression_var;
            if (
                (direct_named_expression_var = direct_named_expression_rule()) != null  // direct_named_expression
                &&
                genLookahead_expect(false, 22)  // token='='
            )
            {
                debugMessageln("%d _tmp_244[%d-%d]: %s succeeded!", level, _mark, mark(), "direct_named_expression !'='");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "direct_named_expression !'='");
                _res = direct_named_expression_var;
                cache.putResult(_mark, _TMP_244_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_244[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "direct_named_expression !'='");
        }
        debugMessageln("Fail at %d: _tmp_244", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_244_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_245: ',' star_target
    public Object _tmp_245_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_245_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_245_ID);
            level--;
            return (Object)_res;
        }
        { // ',' star_target
            debugMessageln("%d> _tmp_245[%d-%d]: %s", level, _mark, mark(), "',' star_target");
            Token _literal;
            SSTNode c;
            if (
                (_literal = expect(12)) != null  // token=','
                &&
                (c = star_target_rule()) != null  // star_target
            )
            {
                debugMessageln("%d _tmp_245[%d-%d]: %s succeeded!", level, _mark, mark(), "',' star_target");
                _res = c;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' star_target");
                cache.putResult(_mark, _TMP_245_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_245[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' star_target");
        }
        debugMessageln("Fail at %d: _tmp_245", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_245_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_246: ',' star_target
    public Object _tmp_246_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_246_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_246_ID);
            level--;
            return (Object)_res;
        }
        { // ',' star_target
            debugMessageln("%d> _tmp_246[%d-%d]: %s", level, _mark, mark(), "',' star_target");
            Token _literal;
            SSTNode c;
            if (
                (_literal = expect(12)) != null  // token=','
                &&
                (c = star_target_rule()) != null  // star_target
            )
            {
                debugMessageln("%d _tmp_246[%d-%d]: %s succeeded!", level, _mark, mark(), "',' star_target");
                _res = c;
                debugMessageln("Hit with action [%d-%d]: %s", _mark, mark(), "',' star_target");
                cache.putResult(_mark, _TMP_246_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_246[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "',' star_target");
        }
        debugMessageln("Fail at %d: _tmp_246", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_246_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_247: star_targets '='
    public Object _tmp_247_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_247_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_247_ID);
            level--;
            return (Object)_res;
        }
        { // star_targets '='
            debugMessageln("%d> _tmp_247[%d-%d]: %s", level, _mark, mark(), "star_targets '='");
            Token _literal;
            SSTNode star_targets_var;
            if (
                (star_targets_var = star_targets_rule()) != null  // star_targets
                &&
                (_literal = expect(22)) != null  // token='='
            )
            {
                debugMessageln("%d _tmp_247[%d-%d]: %s succeeded!", level, _mark, mark(), "star_targets '='");
                debugMessageln("Hit without action [%d:%d]: %s", _mark, mark(), "star_targets '='");
                _res = dummyName(star_targets_var, _literal);
                cache.putResult(_mark, _TMP_247_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_247[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_targets '='");
        }
        debugMessageln("Fail at %d: _tmp_247", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_247_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_248: star_targets '='
    public Object _tmp_248_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_248_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_248_ID);
            level--;
            return (Object)_res;
        }
        { // star_targets '='
            debugMessageln("%d> _tmp_248[%d-%d]: %s", level, _mark, mark(), "star_targets '='");
            Token _literal;
            SSTNode star_targets_var;
            if (
                (star_targets_var = star_targets_rule()) != null  // star_targets
                &&
                (_literal = expect(22)) != null  // token='='
            )
            {
                debugMessageln("%d _tmp_248[%d-%d]: %s succeeded!", level, _mark, mark(), "star_targets '='");
                debugMessageln("Hit without action [%d:%d]: %s", _mark, mark(), "star_targets '='");
                _res = dummyName(star_targets_var, _literal);
                cache.putResult(_mark, _TMP_248_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_248[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "star_targets '='");
        }
        debugMessageln("Fail at %d: _tmp_248", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_248_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_249: ')' | '**'
    public Object _tmp_249_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_249_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_249_ID);
            level--;
            return (Object)_res;
        }
        { // ')'
            debugMessageln("%d> _tmp_249[%d-%d]: %s", level, _mark, mark(), "')'");
            Token _literal;
            if (
                (_literal = expect(8)) != null  // token=')'
            )
            {
                debugMessageln("%d _tmp_249[%d-%d]: %s succeeded!", level, _mark, mark(), "')'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "')'");
                _res = _literal;
                cache.putResult(_mark, _TMP_249_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_249[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "')'");
        }
        { // '**'
            debugMessageln("%d> _tmp_249[%d-%d]: %s", level, _mark, mark(), "'**'");
            Token _literal;
            if (
                (_literal = expect(35)) != null  // token='**'
            )
            {
                debugMessageln("%d _tmp_249[%d-%d]: %s succeeded!", level, _mark, mark(), "'**'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'**'");
                _res = _literal;
                cache.putResult(_mark, _TMP_249_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_249[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'**'");
        }
        debugMessageln("Fail at %d: _tmp_249", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_249_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_250: ':' | '**'
    public Object _tmp_250_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_250_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_250_ID);
            level--;
            return (Object)_res;
        }
        { // ':'
            debugMessageln("%d> _tmp_250[%d-%d]: %s", level, _mark, mark(), "':'");
            Token _literal;
            if (
                (_literal = expect(11)) != null  // token=':'
            )
            {
                debugMessageln("%d _tmp_250[%d-%d]: %s succeeded!", level, _mark, mark(), "':'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "':'");
                _res = _literal;
                cache.putResult(_mark, _TMP_250_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_250[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "':'");
        }
        { // '**'
            debugMessageln("%d> _tmp_250[%d-%d]: %s", level, _mark, mark(), "'**'");
            Token _literal;
            if (
                (_literal = expect(35)) != null  // token='**'
            )
            {
                debugMessageln("%d _tmp_250[%d-%d]: %s succeeded!", level, _mark, mark(), "'**'");
                debugMessageln("Hit with default action [%d:%d]: %s", _mark, mark(), "'**'");
                _res = _literal;
                cache.putResult(_mark, _TMP_250_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_250[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'**'");
        }
        debugMessageln("Fail at %d: _tmp_250", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_250_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_251: expression ['as' star_target]
    public Object _tmp_251_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_251_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_251_ID);
            level--;
            return (Object)_res;
        }
        { // expression ['as' star_target]
            debugMessageln("%d> _tmp_251[%d-%d]: %s", level, _mark, mark(), "expression ['as' star_target]");
            Object _opt_var;
            SSTNode expression_var;
            if (
                (expression_var = expression_rule()) != null  // expression
                &&
                ((_opt_var = _tmp_253_rule()) != null || true)  // ['as' star_target]
            )
            {
                debugMessageln("%d _tmp_251[%d-%d]: %s succeeded!", level, _mark, mark(), "expression ['as' star_target]");
                debugMessageln("Hit without action [%d:%d]: %s", _mark, mark(), "expression ['as' star_target]");
                _res = dummyName(expression_var, _opt_var);
                cache.putResult(_mark, _TMP_251_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_251[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "expression ['as' star_target]");
        }
        debugMessageln("Fail at %d: _tmp_251", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_251_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_252: expressions ['as' star_target]
    public Object _tmp_252_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_252_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_252_ID);
            level--;
            return (Object)_res;
        }
        { // expressions ['as' star_target]
            debugMessageln("%d> _tmp_252[%d-%d]: %s", level, _mark, mark(), "expressions ['as' star_target]");
            Object _opt_var;
            SSTNode expressions_var;
            if (
                (expressions_var = expressions_rule()) != null  // expressions
                &&
                ((_opt_var = _tmp_254_rule()) != null || true)  // ['as' star_target]
            )
            {
                debugMessageln("%d _tmp_252[%d-%d]: %s succeeded!", level, _mark, mark(), "expressions ['as' star_target]");
                debugMessageln("Hit without action [%d:%d]: %s", _mark, mark(), "expressions ['as' star_target]");
                _res = dummyName(expressions_var, _opt_var);
                cache.putResult(_mark, _TMP_252_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_252[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "expressions ['as' star_target]");
        }
        debugMessageln("Fail at %d: _tmp_252", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_252_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_253: 'as' star_target
    public Object _tmp_253_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_253_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_253_ID);
            level--;
            return (Object)_res;
        }
        { // 'as' star_target
            debugMessageln("%d> _tmp_253[%d-%d]: %s", level, _mark, mark(), "'as' star_target");
            Token _keyword;
            SSTNode star_target_var;
            if (
                (_keyword = expect(520)) != null  // token='as'
                &&
                (star_target_var = star_target_rule()) != null  // star_target
            )
            {
                debugMessageln("%d _tmp_253[%d-%d]: %s succeeded!", level, _mark, mark(), "'as' star_target");
                debugMessageln("Hit without action [%d:%d]: %s", _mark, mark(), "'as' star_target");
                _res = dummyName(_keyword, star_target_var);
                cache.putResult(_mark, _TMP_253_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_253[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'as' star_target");
        }
        debugMessageln("Fail at %d: _tmp_253", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_253_ID, _res);
        level--;
        return (Object)_res;
    }

    // _tmp_254: 'as' star_target
    public Object _tmp_254_rule()
    {
        level++;
        int _mark = mark();
        Object _res = null;
        if (cache.hasResult(_mark, _TMP_254_ID)) {
            _res = (Object)cache.getResult(_mark, _TMP_254_ID);
            level--;
            return (Object)_res;
        }
        { // 'as' star_target
            debugMessageln("%d> _tmp_254[%d-%d]: %s", level, _mark, mark(), "'as' star_target");
            Token _keyword;
            SSTNode star_target_var;
            if (
                (_keyword = expect(520)) != null  // token='as'
                &&
                (star_target_var = star_target_rule()) != null  // star_target
            )
            {
                debugMessageln("%d _tmp_254[%d-%d]: %s succeeded!", level, _mark, mark(), "'as' star_target");
                debugMessageln("Hit without action [%d:%d]: %s", _mark, mark(), "'as' star_target");
                _res = dummyName(_keyword, star_target_var);
                cache.putResult(_mark, _TMP_254_ID, _res);
                level--;
                return (Object)_res;
            }
            reset(_mark);
            debugMessageln("%d%s _tmp_254[%d-%d]: %s failed!", level,
                  "-", _mark, mark(), "'as' star_target");
        }
        debugMessageln("Fail at %d: _tmp_254", _mark);
        _res = null;
        cache.putResult(_mark, _TMP_254_ID, _res);
        level--;
        return (Object)_res;
    }

    // lookahead methods generated
    private boolean genLookahead_expect(boolean match, int arg0) {
        int tmpPos = mark();
        Token result = expect(arg0);
        reset(tmpPos);
        return (result != null) == match;
    }

    private boolean genLookahead__tmp_17_rule(boolean match) {
        int tmpPos = mark();
        Object result = _tmp_17_rule();
        reset(tmpPos);
        return (result != null) == match;
    }

    private boolean genLookahead__tmp_18_rule(boolean match) {
        int tmpPos = mark();
        Object result = _tmp_18_rule();
        reset(tmpPos);
        return (result != null) == match;
    }

    private boolean genLookahead__tmp_19_rule(boolean match) {
        int tmpPos = mark();
        Object result = _tmp_19_rule();
        reset(tmpPos);
        return (result != null) == match;
    }

    private boolean genLookahead__tmp_20_rule(boolean match) {
        int tmpPos = mark();
        Object result = _tmp_20_rule();
        reset(tmpPos);
        return (result != null) == match;
    }

    private boolean genLookahead__tmp_21_rule(boolean match) {
        int tmpPos = mark();
        Object result = _tmp_21_rule();
        reset(tmpPos);
        return (result != null) == match;
    }

    private boolean genLookahead__tmp_34_rule(boolean match) {
        int tmpPos = mark();
        Object result = _tmp_34_rule();
        reset(tmpPos);
        return (result != null) == match;
    }

    private boolean genLookahead__tmp_61_rule(boolean match) {
        int tmpPos = mark();
        Object result = _tmp_61_rule();
        reset(tmpPos);
        return (result != null) == match;
    }

    private boolean genLookahead__tmp_69_rule(boolean match) {
        int tmpPos = mark();
        Object result = _tmp_69_rule();
        reset(tmpPos);
        return (result != null) == match;
    }

    private boolean genLookahead_expect_SOFT_KEYWORD(boolean match, String arg0) {
        int tmpPos = mark();
        SSTNode result = expect_SOFT_KEYWORD(arg0);
        reset(tmpPos);
        return (result != null) == match;
    }

    private boolean genLookahead__tmp_70_rule(boolean match) {
        int tmpPos = mark();
        Object result = _tmp_70_rule();
        reset(tmpPos);
        return (result != null) == match;
    }

    private boolean genLookahead__tmp_71_rule(boolean match) {
        int tmpPos = mark();
        Object result = _tmp_71_rule();
        reset(tmpPos);
        return (result != null) == match;
    }

    private boolean genLookahead__tmp_90_rule(boolean match) {
        int tmpPos = mark();
        Object result = _tmp_90_rule();
        reset(tmpPos);
        return (result != null) == match;
    }

    private boolean genLookahead_string_token(boolean match) {
        int tmpPos = mark();
        SSTNode result = string_token();
        reset(tmpPos);
        return (result != null) == match;
    }

    private boolean genLookahead_t_lookahead_rule(boolean match) {
        int tmpPos = mark();
        Object result = t_lookahead_rule();
        reset(tmpPos);
        return (result != null) == match;
    }

    private boolean genLookahead__tmp_201_rule(boolean match) {
        int tmpPos = mark();
        Object result = _tmp_201_rule();
        reset(tmpPos);
        return (result != null) == match;
    }

    private boolean genLookahead__tmp_202_rule(boolean match) {
        int tmpPos = mark();
        Object result = _tmp_202_rule();
        reset(tmpPos);
        return (result != null) == match;
    }

    private boolean genLookahead__tmp_203_rule(boolean match) {
        int tmpPos = mark();
        Object result = _tmp_203_rule();
        reset(tmpPos);
        return (result != null) == match;
    }

    private boolean genLookahead__tmp_204_rule(boolean match) {
        int tmpPos = mark();
        Object result = _tmp_204_rule();
        reset(tmpPos);
        return (result != null) == match;
    }

    private boolean genLookahead__tmp_218_rule(boolean match) {
        int tmpPos = mark();
        Object result = _tmp_218_rule();
        reset(tmpPos);
        return (result != null) == match;
    }

    private boolean genLookahead__tmp_229_rule(boolean match) {
        int tmpPos = mark();
        Object result = _tmp_229_rule();
        reset(tmpPos);
        return (result != null) == match;
    }

    private boolean genLookahead__tmp_230_rule(boolean match) {
        int tmpPos = mark();
        Object result = _tmp_230_rule();
        reset(tmpPos);
        return (result != null) == match;
    }

    // TODO replacing asdl_expr_seq* --> SSTNode[]
    // TODO replacing stmt_ty --> SSTNode[]
    // TODO replacing AugOperator* --> SSTNode[]
    // TODO replacing asdl_alias_seq* --> SSTNode[]
    // TODO replacing alias_ty --> SSTNode[]
    // TODO replacing asdl_withitem_seq* --> SSTNode[]
    // TODO replacing withitem_ty --> SSTNode[]
    // TODO replacing asdl_excepthandler_seq* --> SSTNode[]
    // TODO replacing excepthandler_ty --> SSTNode[]
    // TODO replacing asdl_match_case_seq* --> SSTNode[]
    // TODO replacing match_case_ty --> SSTNode[]
    // TODO replacing asdl_seq* --> SSTNode[]
    // TODO replacing KeyValuePair* --> SSTNode[]
    // TODO replacing asdl_keyword_seq* --> SSTNode[]
    // TODO replacing keyword_ty --> SSTNode[]
    // TODO replacing Token* --> SSTNode[]
    // TODO replacing arguments_ty --> SSTNode[]
    // TODO replacing asdl_arg_seq* --> SSTNode[]
    // TODO replacing SlashWithDefault* --> SSTNode[]
    // TODO replacing StarEtc* --> SSTNode[]
    // TODO replacing arg_ty --> SSTNode[]
    // TODO replacing NameDefaultPair* --> SSTNode[]
    // TODO replacing CmpopExprPair* --> SSTNode[]
    // TODO replacing KeywordOrStarred* --> SSTNode[]
}
