// @generated by java_generator.py from pegjava/python.gram

/*
 * This is not ready to use.
 * Here should be the license.
 */

package com.oracle.graal.python.parser;

import com.oracle.graal.python.parser.sst.SSTNode;
import com.oracle.graal.python.parser.tokenizer.Token;


public class GenParser extends Parser {
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(statements?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(statements)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_1_var = _tmp_1_rule()) != null  // statements
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf($) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(statement_newline) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expressions) - should work
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(NEWLINE*)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf($) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(type_expressions?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(type_expressions)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_3_var = _tmp_3_rule()) != null  // type_expressions
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('->')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(NEWLINE*)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf($) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.expression+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.expression+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.expression+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.expression+)
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(statement+)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(compound_stmt) - should work
// TODO replacing stmt_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmts) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(compound_stmt) - should work
// TODO replacing stmt_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmts) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf($) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmt) - should work
// TODO replacing stmt_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!';')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(';'.simple_stmt+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(';'?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(';')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_16_var = _tmp_16_rule()) != null  // ';'
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(assignment) - should work
// TODO replacing stmt_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'return')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(return_stmt) - should work
// TODO replacing stmt_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('import' | 'from'))
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_stmt) - should work
// TODO replacing stmt_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'raise')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(raise_stmt) - should work
// TODO replacing stmt_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('pass')
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'del')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_stmt) - should work
// TODO replacing stmt_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'yield')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_stmt) - should work
// TODO replacing stmt_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'assert')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(assert_stmt) - should work
// TODO replacing stmt_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('break')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('continue')
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'global')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(global_stmt) - should work
// TODO replacing stmt_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'nonlocal')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(nonlocal_stmt) - should work
// TODO replacing stmt_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('def' | '@' | ASYNC))
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(function_def) - should work
// TODO replacing stmt_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'if')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(if_stmt) - should work
// TODO replacing stmt_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('class' | '@'))
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(class_def) - should work
// TODO replacing stmt_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('with' | ASYNC))
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_stmt) - should work
// TODO replacing stmt_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('for' | ASYNC))
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_stmt) - should work
// TODO replacing stmt_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'try')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(try_stmt) - should work
// TODO replacing stmt_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'while')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(while_stmt) - should work
// TODO replacing stmt_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(match_stmt) - should work
// TODO replacing stmt_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(['=' annotated_rhs])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('=' annotated_rhs)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_17_var = _tmp_17_rule()) != null  // '=' annotated_rhs
// TODO visiting JavaCallMakerVisitor.visit_Group(('(' single_target ')' | single_subscript_attribute_target))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('(' single_target ')' | single_subscript_attribute_target)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(['=' annotated_rhs])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('=' annotated_rhs)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_19_var = _tmp_19_rule()) != null  // '=' annotated_rhs
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(((star_targets '='))+)
// TODO visiting JavaCallMakerVisitor.visit_Group((yield_expr | star_expressions))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(yield_expr | star_expressions)
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!'=')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(TYPE_COMMENT)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_22_var = _tmp_22_rule()) != null  // TYPE_COMMENT
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(single_target) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(augassign) - should work
// TODO replacing AugOperator[] --> SSTNode[]
// TODO visiting JavaCallMakerVisitor.visit_Cut(~)
// TODO visiting JavaCallMakerVisitor.visit_Group((yield_expr | star_expressions))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(yield_expr | star_expressions)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_assignment) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('+=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('-=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('@=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('%=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('&=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('|=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('^=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('<<=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('>>=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('//=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('global')
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.NAME+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('nonlocal')
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.NAME+)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('assert')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_Opt([',' expression])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' expression)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_28_var = _tmp_28_rule()) != null  // ',' expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('del')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_targets) - should work
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&(';' | NEWLINE))
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_del_stmt) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_name) - should work
// TODO replacing stmt_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from) - should work
// TODO replacing stmt_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('import')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_as_names) - should work
// TODO replacing asdl_alias_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('from')
// TODO visiting JavaCallMakerVisitor.visit_Repeat0((('.' | '...'))*)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_name) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('import')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_targets) - should work
// TODO replacing asdl_alias_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('from')
// TODO visiting JavaCallMakerVisitor.visit_Repeat1((('.' | '...'))+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('import')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_targets) - should work
// TODO replacing asdl_alias_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_as_names) - should work
// TODO replacing asdl_alias_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_31_var = _tmp_31_rule()) != null  // ','
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_as_names) - should work
// TODO replacing asdl_alias_seq[] --> SSTNode[]
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!',')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_import_from_targets) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.import_from_as_name+)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' NAME])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' NAME)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_34_var = _tmp_34_rule()) != null  // 'as' NAME
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.dotted_as_name+)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_name) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' NAME])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' NAME)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_37_var = _tmp_37_rule()) != null  // 'as' NAME
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_name) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(elif_stmt) - should work
// TODO replacing stmt_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_38_var = _tmp_38_rule()) != null  // else_block
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_if_stmt) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('elif')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(elif_stmt) - should work
// TODO replacing stmt_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('elif')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_39_var = _tmp_39_rule()) != null  // else_block
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_elif_stmt) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('else')
// TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('while')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_40_var = _tmp_40_rule()) != null  // else_block
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_while_stmt) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('for')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
// TODO visiting JavaCallMakerVisitor.visit_Cut(~)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
// TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(TYPE_COMMENT)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_41_var = _tmp_41_rule()) != null  // TYPE_COMMENT
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_42_var = _tmp_42_rule()) != null  // else_block
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('for')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
// TODO visiting JavaCallMakerVisitor.visit_Cut(~)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
// TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(TYPE_COMMENT)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_43_var = _tmp_43_rule()) != null  // TYPE_COMMENT
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_44_var = _tmp_44_rule()) != null  // else_block
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_for_target) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.with_item+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.with_item+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(TYPE_COMMENT)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_49_var = _tmp_49_rule()) != null  // TYPE_COMMENT
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.with_item+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.with_item+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(TYPE_COMMENT)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_54_var = _tmp_54_rule()) != null  // TYPE_COMMENT
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_with_stmt) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&(',' | ')' | ':'))
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_with_item) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('try')
// TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(finally_block) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('try')
// TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(except_block+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_56_var = _tmp_56_rule()) != null  // else_block
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(finally_block?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(finally_block)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_57_var = _tmp_57_rule()) != null  // finally_block
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('except')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' NAME])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' NAME)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_58_var = _tmp_58_rule()) != null  // 'as' NAME
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('except')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_except_block) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('finally')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf("match")
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(subject_expr) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(INDENT) - should work
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(case_block+)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(DEDENT) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_match_stmt) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_named_expressions?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
// TODO replacing asdl_expr_seq[] --> SSTNode[]
    // JavaCallMakerVisitor.visit_Opt.generated call: (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf("case")
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(patterns) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(guard?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(guard) - should work
    // JavaCallMakerVisitor.visit_Opt.generated call: (guard_var = guard_rule()) != null  // guard
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_case_block) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(open_sequence_pattern) - should work
// TODO replacing asdl_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(as_pattern) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(or_pattern) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(or_pattern) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(capture_pattern) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_Gather('|'.closed_pattern+)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(literal_pattern) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(capture_pattern) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(wildcard_pattern) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(value_pattern) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(group_pattern) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sequence_pattern) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(mapping_pattern) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(class_pattern) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(signed_number) - should work
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!('+' | '-'))
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(signed_number) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('+')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NUMBER) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(signed_number) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('-')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NUMBER) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(strings) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('None')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('True')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('False')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NUMBER) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('-')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NUMBER) - should work
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!"_")
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!('.' | '(' | '='))
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf("_")
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(attr) - should work
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!('.' | '(' | '='))
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(name_or_attr) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(attr) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(maybe_sequence_pattern?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(maybe_sequence_pattern) - should work
// TODO replacing asdl_seq[] --> SSTNode[]
    // JavaCallMakerVisitor.visit_Opt.generated call: (maybe_sequence_pattern_var = maybe_sequence_pattern_rule()) != null  // maybe_sequence_pattern
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(open_sequence_pattern?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(open_sequence_pattern) - should work
// TODO replacing asdl_seq[] --> SSTNode[]
    // JavaCallMakerVisitor.visit_Opt.generated call: (open_sequence_pattern_var = open_sequence_pattern_rule()) != null  // open_sequence_pattern
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(maybe_star_pattern) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(maybe_sequence_pattern?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(maybe_sequence_pattern) - should work
// TODO replacing asdl_seq[] --> SSTNode[]
    // JavaCallMakerVisitor.visit_Opt.generated call: (maybe_sequence_pattern_var = maybe_sequence_pattern_rule()) != null  // maybe_sequence_pattern
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.maybe_star_pattern+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_pattern) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// TODO visiting JavaCallMakerVisitor.visit_Group((capture_pattern | wildcard_pattern))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(capture_pattern | wildcard_pattern)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(items_pattern?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(items_pattern) - should work
// TODO replacing asdl_seq[] --> SSTNode[]
    // JavaCallMakerVisitor.visit_Opt.generated call: (items_pattern_var = items_pattern_rule()) != null  // items_pattern
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.key_value_pattern+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
// TODO visiting JavaCallMakerVisitor.visit_Group((literal_pattern | value_pattern))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(literal_pattern | value_pattern)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_star_pattern) - should work
// TODO replacing KeyValuePair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(capture_pattern) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(name_or_attr) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(name_or_attr) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(positional_patterns) - should work
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(name_or_attr) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(keyword_patterns) - should work
// TODO replacing asdl_keyword_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(name_or_attr) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(positional_patterns) - should work
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(keyword_patterns) - should work
// TODO replacing asdl_keyword_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.pattern+)
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.keyword_pattern+)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('return')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_expressions?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_expressions)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_72_var = _tmp_72_rule()) != null  // star_expressions
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('raise')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(['from' expression])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('from' expression)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_73_var = _tmp_73_rule()) != null  // 'from' expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('raise')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(decorators) - should work
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(function_def_raw) - should work
// TODO replacing stmt_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(function_def_raw) - should work
// TODO replacing stmt_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('def')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(params?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(params)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_74_var = _tmp_74_rule()) != null  // params
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(['->' expression])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('->' expression)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_75_var = _tmp_75_rule()) != null  // '->' expression
// TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(func_type_comment?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(func_type_comment)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_76_var = _tmp_76_rule()) != null  // func_type_comment
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('def')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(params?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(params)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_77_var = _tmp_77_rule()) != null  // params
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(['->' expression])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('->' expression)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_78_var = _tmp_78_rule()) != null  // '->' expression
// TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(func_type_comment?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(func_type_comment)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_79_var = _tmp_79_rule()) != null  // func_type_comment
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&(NEWLINE INDENT))
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_double_type_comments) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_parameters) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(parameters) - should work
// TODO replacing arguments_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slash_no_default) - should work
// TODO replacing asdl_arg_seq[] --> SSTNode[]
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_no_default*)
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_with_default*)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_etc?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_etc)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_82_var = _tmp_82_rule()) != null  // star_etc
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slash_with_default) - should work
// TODO replacing SlashWithDefault[] --> SSTNode[]
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_with_default*)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_etc?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_etc)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_84_var = _tmp_84_rule()) != null  // star_etc
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_no_default+)
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_with_default*)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_etc?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_etc)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_87_var = _tmp_87_rule()) != null  // star_etc
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_with_default+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_etc?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_etc)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_89_var = _tmp_89_rule()) != null  // star_etc
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_etc) - should work
// TODO replacing StarEtc[] --> SSTNode[]
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_no_default+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_no_default+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_no_default*)
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_with_default+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_no_default*)
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_with_default+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
// TODO replacing arg_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_maybe_default*)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(kwds?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(kwds)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_97_var = _tmp_97_rule()) != null  // kwds
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_maybe_default+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(kwds?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(kwds)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_99_var = _tmp_99_rule()) != null  // kwds
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwds) - should work
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_star_etc) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
    // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
    // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
    // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
    // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(default_param?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
    // JavaCallMakerVisitor.visit_Opt.generated call: (default_param_var = default_param_rule()) != null  // default_param
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
    // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(default_param?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
    // JavaCallMakerVisitor.visit_Opt.generated call: (default_param_var = default_param_rule()) != null  // default_param
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
    // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(annotation?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(annotation) - should work
    // JavaCallMakerVisitor.visit_Opt.generated call: (annotation_var = annotation_rule()) != null  // annotation
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// TODO visiting JavaCallMakerVisitor.visit_Repeat1((('@' named_expression NEWLINE))+)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(decorators) - should work
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(class_def_raw) - should work
// TODO replacing stmt_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(class_def_raw) - should work
// TODO replacing stmt_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('class')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(['(' arguments? ')'])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('(' arguments? ')')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_101_var = _tmp_101_rule()) != null  // '(' arguments? ')'
// TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(INDENT) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(statements) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(DEDENT) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmts) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_block) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expression) - should work
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(((',' star_expression))+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_103_var = _tmp_103_rule()) != null  // ','
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.star_named_expression+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_106_var = _tmp_106_rule()) != null  // ','
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':=')
// TODO visiting JavaCallMakerVisitor.visit_Cut(~)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_named_expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!':=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':=')
// TODO visiting JavaCallMakerVisitor.visit_Cut(~)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!':=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(((',' expression))+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_108_var = _tmp_108_rule()) != null  // ','
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('else')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambdef) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('lambda')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_params?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_params)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_109_var = _tmp_109_rule()) != null  // lambda_params
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_lambda_parameters) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_parameters) - should work
// TODO replacing arguments_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_slash_no_default) - should work
// TODO replacing asdl_arg_seq[] --> SSTNode[]
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_no_default*)
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_with_default*)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_star_etc?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_star_etc)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_112_var = _tmp_112_rule()) != null  // lambda_star_etc
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_slash_with_default) - should work
// TODO replacing SlashWithDefault[] --> SSTNode[]
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_with_default*)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_star_etc?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_star_etc)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_114_var = _tmp_114_rule()) != null  // lambda_star_etc
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_no_default+)
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_with_default*)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_star_etc?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_star_etc)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_117_var = _tmp_117_rule()) != null  // lambda_star_etc
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_with_default+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_star_etc?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_star_etc)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_119_var = _tmp_119_rule()) != null  // lambda_star_etc
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_star_etc) - should work
// TODO replacing StarEtc[] --> SSTNode[]
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_no_default+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_no_default+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&':')
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_no_default*)
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_with_default+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_no_default*)
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_with_default+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&':')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
// TODO replacing arg_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_maybe_default*)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_kwds?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_kwds)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_127_var = _tmp_127_rule()) != null  // lambda_kwds
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_maybe_default+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_kwds?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_kwds)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_129_var = _tmp_129_rule()) != null  // lambda_kwds
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_kwds) - should work
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_lambda_star_etc) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
// TODO replacing arg_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(default_param?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
    // JavaCallMakerVisitor.visit_Opt.generated call: (default_param_var = default_param_rule()) != null  // default_param
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(default_param?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
    // JavaCallMakerVisitor.visit_Opt.generated call: (default_param_var = default_param_rule()) != null  // default_param
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(conjunction) - should work
// TODO visiting JavaCallMakerVisitor.visit_Repeat1((('or' conjunction))+)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(conjunction) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(inversion) - should work
// TODO visiting JavaCallMakerVisitor.visit_Repeat1((('and' inversion))+)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(inversion) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('not')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(inversion) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(comparison) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(compare_op_bitwise_or_pair+)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(eq_bitwise_or) - should work
// TODO replacing CmpopExprPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(noteq_bitwise_or) - should work
// TODO replacing CmpopExprPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lte_bitwise_or) - should work
// TODO replacing CmpopExprPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lt_bitwise_or) - should work
// TODO replacing CmpopExprPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(gte_bitwise_or) - should work
// TODO replacing CmpopExprPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(gt_bitwise_or) - should work
// TODO replacing CmpopExprPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(notin_bitwise_or) - should work
// TODO replacing CmpopExprPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(in_bitwise_or) - should work
// TODO replacing CmpopExprPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(isnot_bitwise_or) - should work
// TODO replacing CmpopExprPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(is_bitwise_or) - should work
// TODO replacing CmpopExprPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('==')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// TODO visiting JavaCallMakerVisitor.visit_Group(('!='))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('!=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('<=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('<')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('>=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('>')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('not')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('is')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('not')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('is')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('|')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_xor) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_xor) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_xor) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('^')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_and) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_and) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_and) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('&')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(shift_expr) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(shift_expr) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(shift_expr) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('<<')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sum) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(shift_expr) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('>>')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sum) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sum) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sum) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('+')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sum) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('-')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('//')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('%')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('@')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('+')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('-')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('~')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(power) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(await_primary) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(await_primary) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(AWAIT) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_primary) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(genexp) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(arguments?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(arguments)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_134_var = _tmp_134_rule()) != null  // arguments
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(atom) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slice) - should work
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!',')
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.slice+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_137_var = _tmp_137_rule()) != null  // ','
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(expression?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expression)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_138_var = _tmp_138_rule()) != null  // expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(expression?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expression)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_139_var = _tmp_139_rule()) != null  // expression
// REMOVE visiting JavaCallMakerVisitor.visit_Opt([':' expression?])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(':' expression?)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_140_var = _tmp_140_rule()) != null  // ':' expression?
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('True')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('False')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('None')
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&STRING)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(strings) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NUMBER) - should work
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'(')
// TODO visiting JavaCallMakerVisitor.visit_Group((tuple | group | genexp))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(tuple | group | genexp)
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'[')
// TODO visiting JavaCallMakerVisitor.visit_Group((list | listcomp))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(list | listcomp)
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'{')
// TODO visiting JavaCallMakerVisitor.visit_Group((dict | set | dictcomp | setcomp))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(dict | set | dictcomp | setcomp)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('...')
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(STRING+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_named_expressions?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_named_expressions)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_145_var = _tmp_145_rule()) != null  // star_named_expressions
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
// TODO replacing asdl_comprehension_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_comprehension) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt([star_named_expression ',' star_named_expressions?])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_named_expression ',' star_named_expressions?)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_146_var = _tmp_146_rule()) != null  // star_named_expression ',' star_named_expressions?
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// TODO visiting JavaCallMakerVisitor.visit_Group((yield_expr | named_expression))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(yield_expr | named_expression)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_group) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(direct_named_expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
// TODO replacing asdl_comprehension_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_comprehension) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
// TODO replacing asdl_comprehension_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_comprehension) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(double_starred_kvpairs?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(double_starred_kvpairs)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_148_var = _tmp_148_rule()) != null  // double_starred_kvpairs
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_double_starred_kvpairs) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kvpair) - should work
// TODO replacing KeyValuePair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
// TODO replacing asdl_comprehension_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_dict_comprehension) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.double_starred_kvpair+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_151_var = _tmp_151_rule()) != null  // ','
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kvpair) - should work
// TODO replacing KeyValuePair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(for_if_clause+)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('for')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
// TODO visiting JavaCallMakerVisitor.visit_Cut(~)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
// TODO visiting JavaCallMakerVisitor.visit_Repeat0((('if' disjunction))*)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('for')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
// TODO visiting JavaCallMakerVisitor.visit_Cut(~)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
// TODO visiting JavaCallMakerVisitor.visit_Repeat0((('if' disjunction))*)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_for_target) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('yield')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('from')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('yield')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_expressions?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_expressions)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_155_var = _tmp_155_rule()) != null  // star_expressions
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_156_var = _tmp_156_rule()) != null  // ','
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_arguments) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.(starred_expression | direct_named_expression !'=')+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt([',' kwargs])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' kwargs)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_159_var = _tmp_159_rule()) != null  // ',' kwargs
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwargs) - should work
// TODO replacing asdl_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.kwarg_or_starred+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.kwarg_or_double_starred+)
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.kwarg_or_starred+)
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.kwarg_or_double_starred+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(starred_expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_kwarg) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_kwarg) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(((',' star_target))*)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_169_var = _tmp_169_rule()) != null  // ','
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.star_target+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_172_var = _tmp_172_rule()) != null  // ','
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(((',' star_target))+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_174_var = _tmp_174_rule()) != null  // ','
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// TODO visiting JavaCallMakerVisitor.visit_Group((!'*' star_target))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(!'*' star_target)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(target_with_star_atom) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_atom) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(target_with_star_atom) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_targets_tuple_seq?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_targets_tuple_seq)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_176_var = _tmp_176_rule()) != null  // star_targets_tuple_seq
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_targets_list_seq?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_targets_list_seq)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_177_var = _tmp_177_rule()) != null  // star_targets_list_seq
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(single_subscript_attribute_target) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(single_target) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.del_target+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_180_var = _tmp_180_rule()) != null  // ','
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_t_atom) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_target) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(del_targets?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(del_targets)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_181_var = _tmp_181_rule()) != null  // del_targets
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(del_targets?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(del_targets)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_182_var = _tmp_182_rule()) != null  // del_targets
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.target+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_185_var = _tmp_185_rule()) != null  // ','
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_atom) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&t_lookahead)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&t_lookahead)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(genexp) - should work
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&t_lookahead)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(arguments?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(arguments)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_186_var = _tmp_186_rule()) != null  // arguments
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&t_lookahead)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(atom) - should work
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&t_lookahead)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(target) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(targets?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(targets)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_187_var = _tmp_187_rule()) != null  // targets
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(targets?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(targets)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_188_var = _tmp_188_rule()) != null  // targets
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
// TODO replacing asdl_comprehension_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt([args | expression for_if_clauses])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(args | expression for_if_clauses)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_189_var = _tmp_189_rule()) != null  // args | expression for_if_clauses
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
// TODO replacing asdl_comprehension_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
// TODO replacing asdl_comprehension_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!(NAME STRING | SOFT_KEYWORD))
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!('=' | ':=' | ','))
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!(list | tuple | genexp | 'True' | 'None' | 'False'))
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!('=' | ':=' | ','))
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_ann_assign_target) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(star_named_expressions*)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(((star_targets '='))*)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(((star_targets '='))*)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(augassign) - should work
// TODO replacing AugOperator[] --> SSTNode[]
// TODO visiting JavaCallMakerVisitor.visit_Group((yield_expr | star_expressions))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(yield_expr | star_expressions)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(list) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(tuple) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_ann_assign_target) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('del')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!INDENT)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
// TODO visiting JavaCallMakerVisitor.visit_Group(('[' | '(' | '{'))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('[' | '(' | '{')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(starred_expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
// TODO replacing asdl_comprehension_seq[] --> SSTNode[]
// TODO visiting JavaCallMakerVisitor.visit_Group(('[' | '{'))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('[' | '{')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_named_expressions?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_named_expressions)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_196_var = _tmp_196_rule()) != null  // star_named_expressions
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
// TODO replacing asdl_comprehension_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
// TODO replacing asdl_comprehension_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_no_default*)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_parameters_helper) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slash_with_default) - should work
// TODO replacing SlashWithDefault[] --> SSTNode[]
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_with_default+)
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_no_default*)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_lambda_parameters_helper) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_slash_with_default) - should work
// TODO replacing SlashWithDefault[] --> SSTNode[]
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_with_default+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// TODO visiting JavaCallMakerVisitor.visit_Group((')' | ',' (')' | '**')))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(')' | ',' (')' | '**'))
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// TODO visiting JavaCallMakerVisitor.visit_Group((':' | ',' (':' | '**')))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(':' | ',' (':' | '**'))
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(INDENT) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&(',' | ')' | ':'))
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(ASYNC?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
    // JavaCallMakerVisitor.visit_Opt.generated call: (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('for')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(starred_expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_as_names) - should work
// TODO replacing asdl_alias_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(ASYNC?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(ASYNC)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_203_var = _tmp_203_rule()) != null  // ASYNC
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.(expression ['as' star_target])+)
// TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(ASYNC?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(ASYNC)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_206_var = _tmp_206_rule()) != null  // ASYNC
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.(expressions ['as' star_target])+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('except')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expressions) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' NAME])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' NAME)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_209_var = _tmp_209_rule()) != null  // 'as' NAME
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('except')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' NAME])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' NAME)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_210_var = _tmp_210_rule()) != null  // 'as' NAME
// TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('except')
// TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf("match")
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(subject_expr) - should work
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!':')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf("case")
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(patterns) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(guard?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(guard) - should work
    // JavaCallMakerVisitor.visit_Opt.generated call: (guard_var = guard_rule()) != null  // guard
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!':')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('elif')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('while')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.double_starred_kvpair+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_kvpair) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('}' | ','))
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!(':'))
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(statements) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(type_expressions) - should work
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_6) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_8) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_10) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_12) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(statement) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(';')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmt) - should work
// TODO replacing stmt_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmt) - should work
// TODO replacing stmt_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_15) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(';')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(annotated_rhs) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(single_target) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(single_subscript_attribute_target) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(annotated_rhs) - should work
// TODO visiting JavaCallMakerVisitor.visit_Group((star_targets '='))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_targets '=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_25) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_27) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// TODO visiting JavaCallMakerVisitor.visit_Group(('.' | '...'))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('.' | '...')
// TODO visiting JavaCallMakerVisitor.visit_Group(('.' | '...'))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('.' | '...')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_as_name) - should work
// TODO replacing alias_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_as_name) - should work
// TODO replacing alias_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_33) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_as_name) - should work
// TODO replacing alias_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_as_name) - should work
// TODO replacing alias_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_36) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
// TODO replacing withitem_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
// TODO replacing withitem_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_46) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
// TODO replacing withitem_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
// TODO replacing withitem_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_48) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
// TODO replacing withitem_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
// TODO replacing withitem_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_51) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
// TODO replacing withitem_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
// TODO replacing withitem_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_53) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(except_block) - should work
// TODO replacing excepthandler_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(finally_block) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(case_block) - should work
// TODO replacing match_case_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('|')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(closed_pattern) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(closed_pattern) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_61) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(maybe_star_pattern) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(maybe_star_pattern) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_63) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(capture_pattern) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(wildcard_pattern) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(key_value_pattern) - should work
// TODO replacing KeyValuePair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(key_value_pattern) - should work
// TODO replacing KeyValuePair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_66) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(literal_pattern) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(value_pattern) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_69) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(keyword_pattern) - should work
// TODO replacing keyword_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(keyword_pattern) - should work
// TODO replacing keyword_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_71) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('from')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(params) - should work
// TODO replacing arguments_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('->')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(func_type_comment) - should work
// TODO replacing Token[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(params) - should work
// TODO replacing arguments_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('->')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(func_type_comment) - should work
// TODO replacing Token[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_etc) - should work
// TODO replacing StarEtc[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_etc) - should work
// TODO replacing StarEtc[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_etc) - should work
// TODO replacing StarEtc[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_etc) - should work
// TODO replacing StarEtc[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_maybe_default) - should work
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwds) - should work
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_maybe_default) - should work
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwds) - should work
// TODO replacing arg_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_Group(('@' named_expression NEWLINE))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('@' named_expression NEWLINE)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(arguments?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(arguments)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_217_var = _tmp_217_rule()) != null  // arguments
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// TODO visiting JavaCallMakerVisitor.visit_Group((',' star_expression))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' star_expression)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_105) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// TODO visiting JavaCallMakerVisitor.visit_Group((',' expression))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' expression)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_params) - should work
// TODO replacing arguments_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_star_etc) - should work
// TODO replacing StarEtc[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_star_etc) - should work
// TODO replacing StarEtc[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_star_etc) - should work
// TODO replacing StarEtc[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_star_etc) - should work
// TODO replacing StarEtc[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_maybe_default) - should work
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_kwds) - should work
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_maybe_default) - should work
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_kwds) - should work
// TODO replacing arg_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_Group(('or' conjunction))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('or' conjunction)
// TODO visiting JavaCallMakerVisitor.visit_Group(('and' inversion))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('and' inversion)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(compare_op_bitwise_or_pair) - should work
// TODO replacing CmpopExprPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('!=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(arguments) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slice) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slice) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_136) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(expression?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expression)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_222_var = _tmp_222_rule()) != null  // expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(tuple) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(group) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(genexp) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(list) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(listcomp) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dict) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(set) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dictcomp) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(setcomp) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(STRING) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_named_expressions?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_named_expressions)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_223_var = _tmp_223_rule()) != null  // star_named_expressions
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_starred_kvpairs) - should work
// TODO replacing asdl_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_starred_kvpair) - should work
// TODO replacing KeyValuePair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_starred_kvpair) - should work
// TODO replacing KeyValuePair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_150) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clause) - should work
// TODO replacing comprehension_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_Group(('if' disjunction))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('if' disjunction)
// TODO visiting JavaCallMakerVisitor.visit_Group(('if' disjunction))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('if' disjunction)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// TODO visiting JavaCallMakerVisitor.visit_Group((starred_expression | direct_named_expression !'='))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(starred_expression | direct_named_expression !'=')
// TODO visiting JavaCallMakerVisitor.visit_Group((starred_expression | direct_named_expression !'='))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(starred_expression | direct_named_expression !'=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_158) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwargs) - should work
// TODO replacing asdl_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_starred) - should work
// TODO replacing KeywordOrStarred[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_starred) - should work
// TODO replacing KeywordOrStarred[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_161) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_double_starred) - should work
// TODO replacing KeywordOrStarred[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_double_starred) - should work
// TODO replacing KeywordOrStarred[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_163) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_starred) - should work
// TODO replacing KeywordOrStarred[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_starred) - should work
// TODO replacing KeywordOrStarred[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_165) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_double_starred) - should work
// TODO replacing KeywordOrStarred[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_double_starred) - should work
// TODO replacing KeywordOrStarred[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_167) - should work
// TODO visiting JavaCallMakerVisitor.visit_Group((',' star_target))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' star_target)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_171) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// TODO visiting JavaCallMakerVisitor.visit_Group((',' star_target))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' star_target)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!'*')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets_tuple_seq) - should work
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets_list_seq) - should work
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_target) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_target) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_179) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_targets) - should work
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_targets) - should work
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(target) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(target) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_184) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(arguments) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(targets) - should work
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(targets) - should work
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
// TODO replacing asdl_comprehension_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// TODO visiting JavaCallMakerVisitor.visit_Group((star_targets '='))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_targets '=')
// TODO visiting JavaCallMakerVisitor.visit_Group((star_targets '='))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_targets '=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// TODO visiting JavaCallMakerVisitor.visit_Group((')' | '**'))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(')' | '**')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// TODO visiting JavaCallMakerVisitor.visit_Group((':' | '**'))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(':' | '**')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// TODO visiting JavaCallMakerVisitor.visit_Group((expression ['as' star_target]))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expression ['as' star_target])
// TODO visiting JavaCallMakerVisitor.visit_Group((expression ['as' star_target]))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expression ['as' star_target])
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_205) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// TODO visiting JavaCallMakerVisitor.visit_Group((expressions ['as' star_target]))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expressions ['as' star_target])
// TODO visiting JavaCallMakerVisitor.visit_Group((expressions ['as' star_target]))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expressions ['as' star_target])
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_208) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_starred_kvpair) - should work
// TODO replacing KeyValuePair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_starred_kvpair) - should work
// TODO replacing KeyValuePair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_212) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('...')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('...')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('@')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(arguments) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('or')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(conjunction) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('and')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(inversion) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(starred_expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(direct_named_expression) - should work
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!'=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' star_target])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' star_target)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_235_var = _tmp_235_rule()) != null  // 'as' star_target
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expressions) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' star_target])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' star_target)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_236_var = _tmp_236_rule()) != null  // 'as' star_target
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
    // rule ids 
    private static final int FILE_ID = 0;
    private static final int INTERACTIVE_ID = 1;
    private static final int EVAL_ID = 2;
    private static final int FUNC_TYPE_ID = 3;
    private static final int FSTRING_ID = 4;
    private static final int TYPE_EXPRESSIONS_ID = 5;
    private static final int STATEMENTS_ID = 6;
    private static final int STATEMENT_ID = 7;
    private static final int STATEMENT_NEWLINE_ID = 8;
    private static final int SIMPLE_STMTS_ID = 9;
    private static final int SIMPLE_STMT_ID = 10;
    private static final int COMPOUND_STMT_ID = 11;
    private static final int ASSIGNMENT_ID = 12;
    private static final int AUGASSIGN_ID = 13;
    private static final int GLOBAL_STMT_ID = 14;
    private static final int NONLOCAL_STMT_ID = 15;
    private static final int YIELD_STMT_ID = 16;
    private static final int ASSERT_STMT_ID = 17;
    private static final int DEL_STMT_ID = 18;
    private static final int IMPORT_STMT_ID = 19;
    private static final int IMPORT_NAME_ID = 20;
    private static final int IMPORT_FROM_ID = 21;
    private static final int IMPORT_FROM_TARGETS_ID = 22;
    private static final int IMPORT_FROM_AS_NAMES_ID = 23;
    private static final int IMPORT_FROM_AS_NAME_ID = 24;
    private static final int DOTTED_AS_NAMES_ID = 25;
    private static final int DOTTED_AS_NAME_ID = 26;
    private static final int DOTTED_NAME_ID = 27; // Left-recursive
    private static final int IF_STMT_ID = 28;
    private static final int ELIF_STMT_ID = 29;
    private static final int ELSE_BLOCK_ID = 30;
    private static final int WHILE_STMT_ID = 31;
    private static final int FOR_STMT_ID = 32;
    private static final int WITH_STMT_ID = 33;
    private static final int WITH_ITEM_ID = 34;
    private static final int TRY_STMT_ID = 35;
    private static final int EXCEPT_BLOCK_ID = 36;
    private static final int FINALLY_BLOCK_ID = 37;
    private static final int MATCH_STMT_ID = 38;
    private static final int SUBJECT_EXPR_ID = 39;
    private static final int CASE_BLOCK_ID = 40;
    private static final int GUARD_ID = 41;
    private static final int PATTERNS_ID = 42;
    private static final int PATTERN_ID = 43;
    private static final int AS_PATTERN_ID = 44;
    private static final int OR_PATTERN_ID = 45;
    private static final int CLOSED_PATTERN_ID = 46;
    private static final int LITERAL_PATTERN_ID = 47;
    private static final int SIGNED_NUMBER_ID = 48;
    private static final int CAPTURE_PATTERN_ID = 49;
    private static final int WILDCARD_PATTERN_ID = 50;
    private static final int VALUE_PATTERN_ID = 51;
    private static final int ATTR_ID = 52; // Left-recursive
    private static final int NAME_OR_ATTR_ID = 53; // Left-recursive
    private static final int GROUP_PATTERN_ID = 54;
    private static final int SEQUENCE_PATTERN_ID = 55;
    private static final int OPEN_SEQUENCE_PATTERN_ID = 56;
    private static final int MAYBE_SEQUENCE_PATTERN_ID = 57;
    private static final int MAYBE_STAR_PATTERN_ID = 58;
    private static final int STAR_PATTERN_ID = 59;
    private static final int MAPPING_PATTERN_ID = 60;
    private static final int ITEMS_PATTERN_ID = 61;
    private static final int KEY_VALUE_PATTERN_ID = 62;
    private static final int DOUBLE_STAR_PATTERN_ID = 63;
    private static final int CLASS_PATTERN_ID = 64;
    private static final int POSITIONAL_PATTERNS_ID = 65;
    private static final int KEYWORD_PATTERNS_ID = 66;
    private static final int KEYWORD_PATTERN_ID = 67;
    private static final int RETURN_STMT_ID = 68;
    private static final int RAISE_STMT_ID = 69;
    private static final int FUNCTION_DEF_ID = 70;
    private static final int FUNCTION_DEF_RAW_ID = 71;
    private static final int FUNC_TYPE_COMMENT_ID = 72;
    private static final int PARAMS_ID = 73;
    private static final int PARAMETERS_ID = 74;
    private static final int SLASH_NO_DEFAULT_ID = 75;
    private static final int SLASH_WITH_DEFAULT_ID = 76;
    private static final int STAR_ETC_ID = 77;
    private static final int KWDS_ID = 78;
    private static final int PARAM_NO_DEFAULT_ID = 79;
    private static final int PARAM_WITH_DEFAULT_ID = 80;
    private static final int PARAM_MAYBE_DEFAULT_ID = 81;
    private static final int PARAM_ID = 82;
    private static final int ANNOTATION_ID = 83;
    private static final int DEFAULT_PARAM_ID = 84;
    private static final int DECORATORS_ID = 85;
    private static final int CLASS_DEF_ID = 86;
    private static final int CLASS_DEF_RAW_ID = 87;
    private static final int BLOCK_ID = 88;
    private static final int STAR_EXPRESSIONS_ID = 89;
    private static final int STAR_EXPRESSION_ID = 90;
    private static final int STAR_NAMED_EXPRESSIONS_ID = 91;
    private static final int STAR_NAMED_EXPRESSION_ID = 92;
    private static final int NAMED_EXPRESSION_ID = 93;
    private static final int DIRECT_NAMED_EXPRESSION_ID = 94;
    private static final int ANNOTATED_RHS_ID = 95;
    private static final int EXPRESSIONS_ID = 96;
    private static final int EXPRESSION_ID = 97;
    private static final int LAMBDEF_ID = 98;
    private static final int LAMBDA_PARAMS_ID = 99;
    private static final int LAMBDA_PARAMETERS_ID = 100;
    private static final int LAMBDA_SLASH_NO_DEFAULT_ID = 101;
    private static final int LAMBDA_SLASH_WITH_DEFAULT_ID = 102;
    private static final int LAMBDA_STAR_ETC_ID = 103;
    private static final int LAMBDA_KWDS_ID = 104;
    private static final int LAMBDA_PARAM_NO_DEFAULT_ID = 105;
    private static final int LAMBDA_PARAM_WITH_DEFAULT_ID = 106;
    private static final int LAMBDA_PARAM_MAYBE_DEFAULT_ID = 107;
    private static final int LAMBDA_PARAM_ID = 108;
    private static final int DISJUNCTION_ID = 109;
    private static final int CONJUNCTION_ID = 110;
    private static final int INVERSION_ID = 111;
    private static final int COMPARISON_ID = 112;
    private static final int COMPARE_OP_BITWISE_OR_PAIR_ID = 113;
    private static final int EQ_BITWISE_OR_ID = 114;
    private static final int NOTEQ_BITWISE_OR_ID = 115;
    private static final int LTE_BITWISE_OR_ID = 116;
    private static final int LT_BITWISE_OR_ID = 117;
    private static final int GTE_BITWISE_OR_ID = 118;
    private static final int GT_BITWISE_OR_ID = 119;
    private static final int NOTIN_BITWISE_OR_ID = 120;
    private static final int IN_BITWISE_OR_ID = 121;
    private static final int ISNOT_BITWISE_OR_ID = 122;
    private static final int IS_BITWISE_OR_ID = 123;
    private static final int BITWISE_OR_ID = 124; // Left-recursive
    private static final int BITWISE_XOR_ID = 125; // Left-recursive
    private static final int BITWISE_AND_ID = 126; // Left-recursive
    private static final int SHIFT_EXPR_ID = 127; // Left-recursive
    private static final int SUM_ID = 128; // Left-recursive
    private static final int TERM_ID = 129; // Left-recursive
    private static final int FACTOR_ID = 130;
    private static final int POWER_ID = 131;
    private static final int AWAIT_PRIMARY_ID = 132;
    private static final int PRIMARY_ID = 133; // Left-recursive
    private static final int SLICES_ID = 134;
    private static final int SLICE_ID = 135;
    private static final int ATOM_ID = 136;
    private static final int STRINGS_ID = 137;
    private static final int LIST_ID = 138;
    private static final int LISTCOMP_ID = 139;
    private static final int TUPLE_ID = 140;
    private static final int GROUP_ID = 141;
    private static final int GENEXP_ID = 142;
    private static final int SET_ID = 143;
    private static final int SETCOMP_ID = 144;
    private static final int DICT_ID = 145;
    private static final int DICTCOMP_ID = 146;
    private static final int DOUBLE_STARRED_KVPAIRS_ID = 147;
    private static final int DOUBLE_STARRED_KVPAIR_ID = 148;
    private static final int KVPAIR_ID = 149;
    private static final int FOR_IF_CLAUSES_ID = 150;
    private static final int FOR_IF_CLAUSE_ID = 151;
    private static final int YIELD_EXPR_ID = 152;
    private static final int ARGUMENTS_ID = 153;
    private static final int ARGS_ID = 154;
    private static final int KWARGS_ID = 155;
    private static final int STARRED_EXPRESSION_ID = 156;
    private static final int KWARG_OR_STARRED_ID = 157;
    private static final int KWARG_OR_DOUBLE_STARRED_ID = 158;
    private static final int STAR_TARGETS_ID = 159;
    private static final int STAR_TARGETS_LIST_SEQ_ID = 160;
    private static final int STAR_TARGETS_TUPLE_SEQ_ID = 161;
    private static final int STAR_TARGET_ID = 162;
    private static final int TARGET_WITH_STAR_ATOM_ID = 163;
    private static final int STAR_ATOM_ID = 164;
    private static final int SINGLE_TARGET_ID = 165;
    private static final int SINGLE_SUBSCRIPT_ATTRIBUTE_TARGET_ID = 166;
    private static final int DEL_TARGETS_ID = 167;
    private static final int DEL_TARGET_ID = 168;
    private static final int DEL_T_ATOM_ID = 169;
    private static final int TARGETS_ID = 170;
    private static final int TARGET_ID = 171;
    private static final int T_PRIMARY_ID = 172; // Left-recursive
    private static final int T_LOOKAHEAD_ID = 173;
    private static final int T_ATOM_ID = 174;
    private static final int INVALID_ARGUMENTS_ID = 175;
    private static final int INVALID_KWARG_ID = 176;
    private static final int INVALID_EXPRESSION_ID = 177;
    private static final int INVALID_NAMED_EXPRESSION_ID = 178;
    private static final int INVALID_ASSIGNMENT_ID = 179;
    private static final int INVALID_ANN_ASSIGN_TARGET_ID = 180;
    private static final int INVALID_DEL_STMT_ID = 181;
    private static final int INVALID_BLOCK_ID = 182;
    private static final int INVALID_PRIMARY_ID = 183; // Left-recursive
    private static final int INVALID_COMPREHENSION_ID = 184;
    private static final int INVALID_DICT_COMPREHENSION_ID = 185;
    private static final int INVALID_PARAMETERS_ID = 186;
    private static final int INVALID_PARAMETERS_HELPER_ID = 187;
    private static final int INVALID_LAMBDA_PARAMETERS_ID = 188;
    private static final int INVALID_LAMBDA_PARAMETERS_HELPER_ID = 189;
    private static final int INVALID_STAR_ETC_ID = 190;
    private static final int INVALID_LAMBDA_STAR_ETC_ID = 191;
    private static final int INVALID_DOUBLE_TYPE_COMMENTS_ID = 192;
    private static final int INVALID_WITH_ITEM_ID = 193;
    private static final int INVALID_FOR_TARGET_ID = 194;
    private static final int INVALID_GROUP_ID = 195;
    private static final int INVALID_IMPORT_FROM_TARGETS_ID = 196;
    private static final int INVALID_WITH_STMT_ID = 197;
    private static final int INVALID_EXCEPT_BLOCK_ID = 198;
    private static final int INVALID_MATCH_STMT_ID = 199;
    private static final int INVALID_CASE_BLOCK_ID = 200;
    private static final int INVALID_IF_STMT_ID = 201;
    private static final int INVALID_ELIF_STMT_ID = 202;
    private static final int INVALID_WHILE_STMT_ID = 203;
    private static final int INVALID_DOUBLE_STARRED_KVPAIRS_ID = 204;
    private static final int INVALID_KVPAIR_ID = 205;
    private static final int _TMP_1_ID = 206;
    private static final int _LOOP0_2_ID = 207;
    private static final int _TMP_3_ID = 208;
    private static final int _LOOP0_4_ID = 209;
    private static final int _LOOP0_6_ID = 210;
    private static final int _GATHER_5_ID = 211;
    private static final int _LOOP0_8_ID = 212;
    private static final int _GATHER_7_ID = 213;
    private static final int _LOOP0_10_ID = 214;
    private static final int _GATHER_9_ID = 215;
    private static final int _LOOP0_12_ID = 216;
    private static final int _GATHER_11_ID = 217;
    private static final int _LOOP1_13_ID = 218;
    private static final int _LOOP0_15_ID = 219;
    private static final int _GATHER_14_ID = 220;
    private static final int _TMP_16_ID = 221;
    private static final int _TMP_17_ID = 222;
    private static final int _TMP_18_ID = 223;
    private static final int _TMP_19_ID = 224;
    private static final int _LOOP1_20_ID = 225;
    private static final int _TMP_21_ID = 226;
    private static final int _TMP_22_ID = 227;
    private static final int _TMP_23_ID = 228;
    private static final int _LOOP0_25_ID = 229;
    private static final int _GATHER_24_ID = 230;
    private static final int _LOOP0_27_ID = 231;
    private static final int _GATHER_26_ID = 232;
    private static final int _TMP_28_ID = 233;
    private static final int _LOOP0_29_ID = 234;
    private static final int _LOOP1_30_ID = 235;
    private static final int _TMP_31_ID = 236;
    private static final int _LOOP0_33_ID = 237;
    private static final int _GATHER_32_ID = 238;
    private static final int _TMP_34_ID = 239;
    private static final int _LOOP0_36_ID = 240;
    private static final int _GATHER_35_ID = 241;
    private static final int _TMP_37_ID = 242;
    private static final int _TMP_38_ID = 243;
    private static final int _TMP_39_ID = 244;
    private static final int _TMP_40_ID = 245;
    private static final int _TMP_41_ID = 246;
    private static final int _TMP_42_ID = 247;
    private static final int _TMP_43_ID = 248;
    private static final int _TMP_44_ID = 249;
    private static final int _LOOP0_46_ID = 250;
    private static final int _GATHER_45_ID = 251;
    private static final int _LOOP0_48_ID = 252;
    private static final int _GATHER_47_ID = 253;
    private static final int _TMP_49_ID = 254;
    private static final int _LOOP0_51_ID = 255;
    private static final int _GATHER_50_ID = 256;
    private static final int _LOOP0_53_ID = 257;
    private static final int _GATHER_52_ID = 258;
    private static final int _TMP_54_ID = 259;
    private static final int _LOOP1_55_ID = 260;
    private static final int _TMP_56_ID = 261;
    private static final int _TMP_57_ID = 262;
    private static final int _TMP_58_ID = 263;
    private static final int _LOOP1_59_ID = 264;
    private static final int _LOOP0_61_ID = 265;
    private static final int _GATHER_60_ID = 266;
    private static final int _LOOP0_63_ID = 267;
    private static final int _GATHER_62_ID = 268;
    private static final int _TMP_64_ID = 269;
    private static final int _LOOP0_66_ID = 270;
    private static final int _GATHER_65_ID = 271;
    private static final int _TMP_67_ID = 272;
    private static final int _LOOP0_69_ID = 273;
    private static final int _GATHER_68_ID = 274;
    private static final int _LOOP0_71_ID = 275;
    private static final int _GATHER_70_ID = 276;
    private static final int _TMP_72_ID = 277;
    private static final int _TMP_73_ID = 278;
    private static final int _TMP_74_ID = 279;
    private static final int _TMP_75_ID = 280;
    private static final int _TMP_76_ID = 281;
    private static final int _TMP_77_ID = 282;
    private static final int _TMP_78_ID = 283;
    private static final int _TMP_79_ID = 284;
    private static final int _LOOP0_80_ID = 285;
    private static final int _LOOP0_81_ID = 286;
    private static final int _TMP_82_ID = 287;
    private static final int _LOOP0_83_ID = 288;
    private static final int _TMP_84_ID = 289;
    private static final int _LOOP1_85_ID = 290;
    private static final int _LOOP0_86_ID = 291;
    private static final int _TMP_87_ID = 292;
    private static final int _LOOP1_88_ID = 293;
    private static final int _TMP_89_ID = 294;
    private static final int _LOOP1_90_ID = 295;
    private static final int _LOOP1_91_ID = 296;
    private static final int _LOOP0_92_ID = 297;
    private static final int _LOOP1_93_ID = 298;
    private static final int _LOOP0_94_ID = 299;
    private static final int _LOOP1_95_ID = 300;
    private static final int _LOOP0_96_ID = 301;
    private static final int _TMP_97_ID = 302;
    private static final int _LOOP1_98_ID = 303;
    private static final int _TMP_99_ID = 304;
    private static final int _LOOP1_100_ID = 305;
    private static final int _TMP_101_ID = 306;
    private static final int _LOOP1_102_ID = 307;
    private static final int _TMP_103_ID = 308;
    private static final int _LOOP0_105_ID = 309;
    private static final int _GATHER_104_ID = 310;
    private static final int _TMP_106_ID = 311;
    private static final int _LOOP1_107_ID = 312;
    private static final int _TMP_108_ID = 313;
    private static final int _TMP_109_ID = 314;
    private static final int _LOOP0_110_ID = 315;
    private static final int _LOOP0_111_ID = 316;
    private static final int _TMP_112_ID = 317;
    private static final int _LOOP0_113_ID = 318;
    private static final int _TMP_114_ID = 319;
    private static final int _LOOP1_115_ID = 320;
    private static final int _LOOP0_116_ID = 321;
    private static final int _TMP_117_ID = 322;
    private static final int _LOOP1_118_ID = 323;
    private static final int _TMP_119_ID = 324;
    private static final int _LOOP1_120_ID = 325;
    private static final int _LOOP1_121_ID = 326;
    private static final int _LOOP0_122_ID = 327;
    private static final int _LOOP1_123_ID = 328;
    private static final int _LOOP0_124_ID = 329;
    private static final int _LOOP1_125_ID = 330;
    private static final int _LOOP0_126_ID = 331;
    private static final int _TMP_127_ID = 332;
    private static final int _LOOP1_128_ID = 333;
    private static final int _TMP_129_ID = 334;
    private static final int _LOOP1_130_ID = 335;
    private static final int _LOOP1_131_ID = 336;
    private static final int _LOOP1_132_ID = 337;
    private static final int _TMP_133_ID = 338;
    private static final int _TMP_134_ID = 339;
    private static final int _LOOP0_136_ID = 340;
    private static final int _GATHER_135_ID = 341;
    private static final int _TMP_137_ID = 342;
    private static final int _TMP_138_ID = 343;
    private static final int _TMP_139_ID = 344;
    private static final int _TMP_140_ID = 345;
    private static final int _TMP_141_ID = 346;
    private static final int _TMP_142_ID = 347;
    private static final int _TMP_143_ID = 348;
    private static final int _LOOP1_144_ID = 349;
    private static final int _TMP_145_ID = 350;
    private static final int _TMP_146_ID = 351;
    private static final int _TMP_147_ID = 352;
    private static final int _TMP_148_ID = 353;
    private static final int _LOOP0_150_ID = 354;
    private static final int _GATHER_149_ID = 355;
    private static final int _TMP_151_ID = 356;
    private static final int _LOOP1_152_ID = 357;
    private static final int _LOOP0_153_ID = 358;
    private static final int _LOOP0_154_ID = 359;
    private static final int _TMP_155_ID = 360;
    private static final int _TMP_156_ID = 361;
    private static final int _LOOP0_158_ID = 362;
    private static final int _GATHER_157_ID = 363;
    private static final int _TMP_159_ID = 364;
    private static final int _LOOP0_161_ID = 365;
    private static final int _GATHER_160_ID = 366;
    private static final int _LOOP0_163_ID = 367;
    private static final int _GATHER_162_ID = 368;
    private static final int _LOOP0_165_ID = 369;
    private static final int _GATHER_164_ID = 370;
    private static final int _LOOP0_167_ID = 371;
    private static final int _GATHER_166_ID = 372;
    private static final int _LOOP0_168_ID = 373;
    private static final int _TMP_169_ID = 374;
    private static final int _LOOP0_171_ID = 375;
    private static final int _GATHER_170_ID = 376;
    private static final int _TMP_172_ID = 377;
    private static final int _LOOP1_173_ID = 378;
    private static final int _TMP_174_ID = 379;
    private static final int _TMP_175_ID = 380;
    private static final int _TMP_176_ID = 381;
    private static final int _TMP_177_ID = 382;
    private static final int _LOOP0_179_ID = 383;
    private static final int _GATHER_178_ID = 384;
    private static final int _TMP_180_ID = 385;
    private static final int _TMP_181_ID = 386;
    private static final int _TMP_182_ID = 387;
    private static final int _LOOP0_184_ID = 388;
    private static final int _GATHER_183_ID = 389;
    private static final int _TMP_185_ID = 390;
    private static final int _TMP_186_ID = 391;
    private static final int _TMP_187_ID = 392;
    private static final int _TMP_188_ID = 393;
    private static final int _TMP_189_ID = 394;
    private static final int _LOOP0_190_ID = 395;
    private static final int _LOOP0_191_ID = 396;
    private static final int _LOOP0_192_ID = 397;
    private static final int _TMP_193_ID = 398;
    private static final int _TMP_194_ID = 399;
    private static final int _TMP_195_ID = 400;
    private static final int _TMP_196_ID = 401;
    private static final int _LOOP0_197_ID = 402;
    private static final int _LOOP1_198_ID = 403;
    private static final int _LOOP0_199_ID = 404;
    private static final int _LOOP1_200_ID = 405;
    private static final int _TMP_201_ID = 406;
    private static final int _TMP_202_ID = 407;
    private static final int _TMP_203_ID = 408;
    private static final int _LOOP0_205_ID = 409;
    private static final int _GATHER_204_ID = 410;
    private static final int _TMP_206_ID = 411;
    private static final int _LOOP0_208_ID = 412;
    private static final int _GATHER_207_ID = 413;
    private static final int _TMP_209_ID = 414;
    private static final int _TMP_210_ID = 415;
    private static final int _LOOP0_212_ID = 416;
    private static final int _GATHER_211_ID = 417;
    private static final int _TMP_213_ID = 418;
    private static final int _TMP_214_ID = 419;
    private static final int _TMP_215_ID = 420;
    private static final int _TMP_216_ID = 421;
    private static final int _TMP_217_ID = 422;
    private static final int _TMP_218_ID = 423;
    private static final int _TMP_219_ID = 424;
    private static final int _TMP_220_ID = 425;
    private static final int _TMP_221_ID = 426;
    private static final int _TMP_222_ID = 427;
    private static final int _TMP_223_ID = 428;
    private static final int _TMP_224_ID = 429;
    private static final int _TMP_225_ID = 430;
    private static final int _TMP_226_ID = 431;
    private static final int _TMP_227_ID = 432;
    private static final int _TMP_228_ID = 433;
    private static final int _TMP_229_ID = 434;
    private static final int _TMP_230_ID = 435;
    private static final int _TMP_231_ID = 436;
    private static final int _TMP_232_ID = 437;
    private static final int _TMP_233_ID = 438;
    private static final int _TMP_234_ID = 439;
    private static final int _TMP_235_ID = 440;
    private static final int _TMP_236_ID = 441;

    // keywords constants
    private static final String KEYWORD_PASS = "pass";
    private static final String KEYWORD_BREAK = "break";
    private static final String KEYWORD_CONTINUE = "continue";
    private static final String KEYWORD_GLOBAL = "global";
    private static final String KEYWORD_NONLOCAL = "nonlocal";
    private static final String KEYWORD_ASSERT = "assert";
    private static final String KEYWORD_DEL = "del";
    private static final String KEYWORD_IMPORT = "import";
    private static final String KEYWORD_FROM = "from";
    private static final String KEYWORD_IF = "if";
    private static final String KEYWORD_ELIF = "elif";
    private static final String KEYWORD_ELSE = "else";
    private static final String KEYWORD_WHILE = "while";
    private static final String KEYWORD_FOR = "for";
    private static final String KEYWORD_IN = "in";
    private static final String KEYWORD_WITH = "with";
    private static final String KEYWORD_AS = "as";
    private static final String KEYWORD_TRY = "try";
    private static final String KEYWORD_EXCEPT = "except";
    private static final String KEYWORD_FINALLY = "finally";
    private static final String KEYWORD_NONE = "None";
    private static final String KEYWORD_TRUE = "True";
    private static final String KEYWORD_FALSE = "False";
    private static final String KEYWORD_RETURN = "return";
    private static final String KEYWORD_RAISE = "raise";
    private static final String KEYWORD_DEF = "def";
    private static final String KEYWORD_CLASS = "class";
    private static final String KEYWORD_LAMBDA = "lambda";
    private static final String KEYWORD_NOT = "not";
    private static final String KEYWORD_IS = "is";
    private static final String KEYWORD_YIELD = "yield";
    private static final String KEYWORD_OR = "or";
    private static final String KEYWORD_AND = "and";

    // parser fields
    private final static boolean DEBUG = true;
    private int level = 0;

    // caching results for pos -> rule
    // the null results are cached as well
    private final RuleResultCache<SSTNode> cache; 
    private final RuleResultCache<SSTNode[]> cacheOfArrays;


    public GenParser(ParserTokenizer tokenizer) {
        super(tokenizer);
        cache = new RuleResultCache(this);
        cacheOfArrays = new RuleResultCache(this);
    }


    // file: statements? $
    public SSTNode file_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: file, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, FILE_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, FILE_ID);
        }
        // visiting Alt: statements? $
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(statements?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(statements)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_1_var = _tmp_1_rule()) != null  // statements
            // generated call: ((_opt_var = _tmp_1_rule()) != null || _opt_var == null)  // statements?
            // node.name: a, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf($) - should work
            // generated call: (endmarker_var = expect(Token.Kind.ENDMARKER)) != null  // token='ENDMARKER'
            // node.name: None, call.assigned_variable: endmarker_var
        // collecting vars: endmarker_var, Token
        //    vars: {'_opt_var': None, 'endmarker_var': 'Token'}
        Object _opt_var = null;
        Token endmarker_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: statements?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(statements?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(statements?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(statements)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_1_var = _tmp_1_rule()) != null  // statements
            // REMOVE result call ((_opt_var = _tmp_1_rule()) != null || _opt_var == null)  // statements?
            ((_opt_var = _tmp_1_rule()) != null || _opt_var == null)  // statements?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: $
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem($)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf($) - should work
            // REMOVE result call (endmarker_var = expect(Token.Kind.ENDMARKER)) != null  // token='ENDMARKER'
            (endmarker_var = expect(Token.Kind.ENDMARKER)) != null  // token='ENDMARKER'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, FILE_ID, null);
    }

    // interactive: statement_newline
    public SSTNode interactive_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: interactive, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, INTERACTIVE_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, INTERACTIVE_ID);
        }
        // visiting Alt: statement_newline
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(statement_newline) - should work
            // generated call: (statement_newline_var = statement_newline_rule()) != null  // statement_newline
            // node.name: a, call.assigned_variable: statement_newline_var
        // collecting vars: statement_newline_var, SSTNode[]
        //    vars: {'statement_newline_var': 'SSTNode[]'}
        SSTNode[] statement_newline_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: statement_newline
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(statement_newline)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(statement_newline) - should work
            // REMOVE result call (statement_newline_var = statement_newline_rule()) != null  // statement_newline
            (statement_newline_var = statement_newline_rule()) != null  // statement_newline
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, INTERACTIVE_ID, null);
    }

    // eval: expressions NEWLINE* $
    public SSTNode eval_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: eval, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, EVAL_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, EVAL_ID);
        }
        // visiting Alt: expressions NEWLINE* $
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expressions) - should work
            // generated call: (expressions_var = expressions_rule()) != null  // expressions
            // node.name: a, call.assigned_variable: expressions_var
        // collecting vars: expressions_var, SSTNode
        // TODO visiting JavaCallMakerVisitor.visit_Repeat0(NEWLINE*)
            // generated call: (_loop0_2_var = _loop0_2_rule()) != null  // NEWLINE*
            // node.name: None, call.assigned_variable: _loop0_2_var
        // collecting vars: _loop0_2_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf($) - should work
            // generated call: (endmarker_var = expect(Token.Kind.ENDMARKER)) != null  // token='ENDMARKER'
            // node.name: None, call.assigned_variable: endmarker_var
        // collecting vars: endmarker_var, Token
        //    vars: {'expressions_var': 'SSTNode', '_loop0_2_var': 'SSTNode[]', 'endmarker_var': 'Token'}
        SSTNode[] _loop0_2_var = null;
        Token endmarker_var = null;
        SSTNode expressions_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expressions)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expressions) - should work
            // REMOVE result call (expressions_var = expressions_rule()) != null  // expressions
            (expressions_var = expressions_rule()) != null  // expressions
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NEWLINE*
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE*)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(NEWLINE*)
            // REMOVE result call (_loop0_2_var = _loop0_2_rule()) != null  // NEWLINE*
            (_loop0_2_var = _loop0_2_rule()) != null  // NEWLINE*
            &&
            // TODO visiting JavaParserGeneratorNamedItem: $
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem($)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf($) - should work
            // REMOVE result call (endmarker_var = expect(Token.Kind.ENDMARKER)) != null  // token='ENDMARKER'
            (endmarker_var = expect(Token.Kind.ENDMARKER)) != null  // token='ENDMARKER'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, EVAL_ID, null);
    }

    // func_type: '(' type_expressions? ')' '->' expression NEWLINE* $
    public SSTNode func_type_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: func_type, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, FUNC_TYPE_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, FUNC_TYPE_ID);
        }
        // visiting Alt: '(' type_expressions? ')' '->' expression NEWLINE* $
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(type_expressions?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(type_expressions)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_3_var = _tmp_3_rule()) != null  // type_expressions
            // generated call: ((_opt_var = _tmp_3_rule()) != null || _opt_var == null)  // type_expressions?
            // node.name: a, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('->')
            // generated call: (_literal = expect(Token.Kind.RARROW)) != null  // token='->'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_2, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: b, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // TODO visiting JavaCallMakerVisitor.visit_Repeat0(NEWLINE*)
            // generated call: (_loop0_4_var = _loop0_4_rule()) != null  // NEWLINE*
            // node.name: None, call.assigned_variable: _loop0_4_var
        // collecting vars: _loop0_4_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf($) - should work
            // generated call: (endmarker_var = expect(Token.Kind.ENDMARKER)) != null  // token='ENDMARKER'
            // node.name: None, call.assigned_variable: endmarker_var
        // collecting vars: endmarker_var, Token
        //    vars: {'_literal': 'Token', '_opt_var': None, '_literal_1': 'Token', '_literal_2': 'Token', 'expression_var': 'SSTNode', '_loop0_4_var': 'SSTNode[]', 'endmarker_var': 'Token'}
        Token _literal = null;
        Token _literal_1 = null;
        Token _literal_2 = null;
        SSTNode[] _loop0_4_var = null;
        Object _opt_var = null;
        Token endmarker_var = null;
        SSTNode expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            &&
            // TODO visiting JavaParserGeneratorNamedItem: type_expressions?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(type_expressions?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(type_expressions?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(type_expressions)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_3_var = _tmp_3_rule()) != null  // type_expressions
            // REMOVE result call ((_opt_var = _tmp_3_rule()) != null || _opt_var == null)  // type_expressions?
            ((_opt_var = _tmp_3_rule()) != null || _opt_var == null)  // type_expressions?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '->'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('->')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('->')
            // REMOVE result call (_literal = expect(Token.Kind.RARROW)) != null  // token='->'
            (_literal_2 = expect(Token.Kind.RARROW)) != null  // token='->'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NEWLINE*
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE*)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(NEWLINE*)
            // REMOVE result call (_loop0_4_var = _loop0_4_rule()) != null  // NEWLINE*
            (_loop0_4_var = _loop0_4_rule()) != null  // NEWLINE*
            &&
            // TODO visiting JavaParserGeneratorNamedItem: $
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem($)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf($) - should work
            // REMOVE result call (endmarker_var = expect(Token.Kind.ENDMARKER)) != null  // token='ENDMARKER'
            (endmarker_var = expect(Token.Kind.ENDMARKER)) != null  // token='ENDMARKER'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, FUNC_TYPE_ID, null);
    }

    // fstring: star_expressions
    public SSTNode fstring_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: fstring, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, FSTRING_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, FSTRING_ID);
        }
        // visiting Alt: star_expressions
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // generated call: (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            // node.name: None, call.assigned_variable: star_expressions_var
        // collecting vars: star_expressions_var, SSTNode
        //    vars: {'star_expressions_var': 'SSTNode'}
        SSTNode star_expressions_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expressions)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // REMOVE result call (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            (star_expressions_var = star_expressions_rule()) != null  // star_expressions
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, FSTRING_ID, null);
    }

    // type_expressions:
    //     | ','.expression+ ',' '*' expression ',' '**' expression
    //     | ','.expression+ ',' '*' expression
    //     | ','.expression+ ',' '**' expression
    //     | '*' expression ',' '**' expression
    //     | '*' expression
    //     | '**' expression
    //     | ','.expression+
    // TODO replacing asdl_expr_seq* --> SSTNode[]
    public SSTNode[] type_expressions_rule() {
    // isLoop: False, isGather: False, type: asdl_expr_seq*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: type_expressions, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, TYPE_EXPRESSIONS_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, TYPE_EXPRESSIONS_ID);
        }
        // visiting Alt: ','.expression+ ',' '*' expression ',' '**' expression
        // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.expression+)
            // generated call: (_gather_5_var = _gather_5_rule()) != null  // ','.expression+
            // node.name: a, call.assigned_variable: _gather_5_var
        // collecting vars: _gather_5_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: b, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_2, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
            // generated call: (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_3, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: c, call.assigned_variable: expression_var
        // collecting vars: expression_var_1, SSTNode
        //    vars: {'_gather_5_var': 'SSTNode[]', '_literal': 'Token', '_literal_1': 'Token', 'expression_var': 'SSTNode', '_literal_2': 'Token', '_literal_3': 'Token', 'expression_var_1': 'SSTNode'}
        SSTNode[] _gather_5_var = null;
        Token _literal = null;
        Token _literal_1 = null;
        Token _literal_2 = null;
        Token _literal_3 = null;
        SSTNode expression_var = null;
        SSTNode expression_var_1 = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','.expression+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.expression+)
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.expression+)
            // REMOVE result call (_gather_5_var = _gather_5_rule()) != null  // ','.expression+
            (_gather_5_var = _gather_5_rule()) != null  // ','.expression+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '*'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            (_literal_1 = expect(Token.Kind.STAR)) != null  // token='*'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal_2 = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '**'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('**')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
            // REMOVE result call (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            (_literal_3 = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var_1 = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: ','.expression+ ',' '*' expression
        // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.expression+)
            // generated call: (_gather_7_var = _gather_7_rule()) != null  // ','.expression+
            // node.name: a, call.assigned_variable: _gather_7_var
        // collecting vars: _gather_7_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: b, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        //    vars: {'_gather_7_var': 'SSTNode[]', '_literal': 'Token', '_literal_1': 'Token', 'expression_var': 'SSTNode'}
        SSTNode[] _gather_7_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','.expression+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.expression+)
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.expression+)
            // REMOVE result call (_gather_7_var = _gather_7_rule()) != null  // ','.expression+
            (_gather_7_var = _gather_7_rule()) != null  // ','.expression+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '*'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            (_literal_1 = expect(Token.Kind.STAR)) != null  // token='*'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: ','.expression+ ',' '**' expression
        // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.expression+)
            // generated call: (_gather_9_var = _gather_9_rule()) != null  // ','.expression+
            // node.name: a, call.assigned_variable: _gather_9_var
        // collecting vars: _gather_9_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
            // generated call: (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: b, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        //    vars: {'_gather_9_var': 'SSTNode[]', '_literal': 'Token', '_literal_1': 'Token', 'expression_var': 'SSTNode'}
        SSTNode[] _gather_9_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','.expression+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.expression+)
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.expression+)
            // REMOVE result call (_gather_9_var = _gather_9_rule()) != null  // ','.expression+
            (_gather_9_var = _gather_9_rule()) != null  // ','.expression+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '**'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('**')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
            // REMOVE result call (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            (_literal_1 = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '*' expression ',' '**' expression
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: a, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
            // generated call: (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_2, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: b, call.assigned_variable: expression_var
        // collecting vars: expression_var_1, SSTNode
        //    vars: {'_literal': 'Token', 'expression_var': 'SSTNode', '_literal_1': 'Token', '_literal_2': 'Token', 'expression_var_1': 'SSTNode'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '*'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal_1 = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '**'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('**')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
            // REMOVE result call (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            (_literal_2 = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var_1 = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '*' expression
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: a, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        //    vars: {'_literal': 'Token', 'expression_var': 'SSTNode'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '*'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '**' expression
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
            // generated call: (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: a, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        //    vars: {'_literal': 'Token', 'expression_var': 'SSTNode'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '**'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('**')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
            // REMOVE result call (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: ','.expression+
        // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.expression+)
            // generated call: (_gather_11_var = _gather_11_rule()) != null  // ','.expression+
            // node.name: a, call.assigned_variable: _gather_11_var
        // collecting vars: _gather_11_var, asdl_expr_seq*
        //    vars: {'_gather_11_var': 'asdl_expr_seq*'}
        // TODO replacing asdl_expr_seq* --> SSTNode[]
        SSTNode[] _gather_11_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','.expression+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.expression+)
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.expression+)
            // REMOVE result call (_gather_11_var = _gather_11_rule()) != null  // ','.expression+
            (_gather_11_var = (SSTNode[])_gather_11_rule()) != null  // ','.expression+
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, TYPE_EXPRESSIONS_ID, null);
    }

    // statements: statement+
    // TODO replacing SSTNode* --> SSTNode[]
    public SSTNode[] statements_rule() {
    // isLoop: False, isGather: False, type: SSTNode*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: statements, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, STATEMENTS_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, STATEMENTS_ID);
        }
        // visiting Alt: statement+
        // TODO visiting JavaCallMakerVisitor.visit_Repeat1(statement+)
            // generated call: (_loop1_13_var = _loop1_13_rule()) != null  // statement+
            // node.name: a, call.assigned_variable: _loop1_13_var
        // collecting vars: _loop1_13_var, SSTNode[]
        //    vars: {'_loop1_13_var': 'SSTNode[]'}
        SSTNode[] _loop1_13_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: statement+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(statement+)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(statement+)
            // REMOVE result call (_loop1_13_var = _loop1_13_rule()) != null  // statement+
            (_loop1_13_var = _loop1_13_rule()) != null  // statement+
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, STATEMENTS_ID, null);
    }

    // statement: compound_stmt | simple_stmts
    // TODO replacing SSTNode* --> SSTNode[]
    public SSTNode[] statement_rule() {
    // isLoop: False, isGather: False, type: SSTNode*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: statement, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, STATEMENT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, STATEMENT_ID);
        }
        // visiting Alt: compound_stmt
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(compound_stmt) - should work
        // TODO replacing stmt_ty --> SSTNode
            // generated call: (compound_stmt_var = compound_stmt_rule()) != null  // compound_stmt
            // node.name: a, call.assigned_variable: compound_stmt_var
        // collecting vars: compound_stmt_var, SSTNode
        //    vars: {'compound_stmt_var': 'SSTNode'}
        SSTNode compound_stmt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: compound_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(compound_stmt)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(compound_stmt) - should work
            // TODO replacing stmt_ty --> SSTNode
            // REMOVE result call (compound_stmt_var = compound_stmt_rule()) != null  // compound_stmt
            (compound_stmt_var = compound_stmt_rule()) != null  // compound_stmt
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: simple_stmts
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmts) - should work
            // generated call: (simple_stmts_var = simple_stmts_rule()) != null  // simple_stmts
            // node.name: a, call.assigned_variable: simple_stmts_var
        // collecting vars: simple_stmts_var, SSTNode*
        //    vars: {'simple_stmts_var': 'SSTNode*'}
        // TODO replacing SSTNode* --> SSTNode[]
        SSTNode[] simple_stmts_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: simple_stmts
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(simple_stmts)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmts) - should work
            // REMOVE result call (simple_stmts_var = simple_stmts_rule()) != null  // simple_stmts
            (simple_stmts_var = (SSTNode[])simple_stmts_rule()) != null  // simple_stmts
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, STATEMENT_ID, null);
    }

    // statement_newline: compound_stmt NEWLINE | simple_stmts | NEWLINE | $
    // TODO replacing SSTNode* --> SSTNode[]
    public SSTNode[] statement_newline_rule() {
    // isLoop: False, isGather: False, type: SSTNode*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: statement_newline, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, STATEMENT_NEWLINE_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, STATEMENT_NEWLINE_ID);
        }
        // visiting Alt: compound_stmt NEWLINE
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(compound_stmt) - should work
        // TODO replacing stmt_ty --> SSTNode
            // generated call: (compound_stmt_var = compound_stmt_rule()) != null  // compound_stmt
            // node.name: a, call.assigned_variable: compound_stmt_var
        // collecting vars: compound_stmt_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // generated call: (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            // node.name: None, call.assigned_variable: newline_var
        // collecting vars: newline_var, Token
        //    vars: {'compound_stmt_var': 'SSTNode', 'newline_var': 'Token'}
        SSTNode compound_stmt_var = null;
        Token newline_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: compound_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(compound_stmt)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(compound_stmt) - should work
            // TODO replacing stmt_ty --> SSTNode
            // REMOVE result call (compound_stmt_var = compound_stmt_rule()) != null  // compound_stmt
            (compound_stmt_var = compound_stmt_rule()) != null  // compound_stmt
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NEWLINE
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // REMOVE result call (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: simple_stmts
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmts) - should work
            // generated call: (simple_stmts_var = simple_stmts_rule()) != null  // simple_stmts
            // node.name: None, call.assigned_variable: simple_stmts_var
        // collecting vars: simple_stmts_var, SSTNode[]
        //    vars: {'simple_stmts_var': 'SSTNode[]'}
        SSTNode[] simple_stmts_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: simple_stmts
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(simple_stmts)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmts) - should work
            // REMOVE result call (simple_stmts_var = simple_stmts_rule()) != null  // simple_stmts
            (simple_stmts_var = simple_stmts_rule()) != null  // simple_stmts
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: NEWLINE
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // generated call: (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            // node.name: None, call.assigned_variable: newline_var
        // collecting vars: newline_var, Token
        //    vars: {'newline_var': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: NEWLINE
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // REMOVE result call (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: $
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf($) - should work
            // generated call: (endmarker_var = expect(Token.Kind.ENDMARKER)) != null  // token='ENDMARKER'
            // node.name: None, call.assigned_variable: endmarker_var
        // collecting vars: endmarker_var, Token
        //    vars: {'endmarker_var': 'Token'}
        Token endmarker_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: $
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem($)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf($) - should work
            // REMOVE result call (endmarker_var = expect(Token.Kind.ENDMARKER)) != null  // token='ENDMARKER'
            (endmarker_var = expect(Token.Kind.ENDMARKER)) != null  // token='ENDMARKER'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, STATEMENT_NEWLINE_ID, null);
    }

    // simple_stmts: simple_stmt !';' NEWLINE | ';'.simple_stmt+ ';'? NEWLINE
    // TODO replacing SSTNode* --> SSTNode[]
    public SSTNode[] simple_stmts_rule() {
    // isLoop: False, isGather: False, type: SSTNode*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: simple_stmts, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, SIMPLE_STMTS_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, SIMPLE_STMTS_ID);
        }
        // visiting Alt: simple_stmt !';' NEWLINE
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmt) - should work
        // TODO replacing stmt_ty --> SSTNode
            // generated call: (simple_stmt_var = simple_stmt_rule()) != null  // simple_stmt
            // node.name: a, call.assigned_variable: simple_stmt_var
        // collecting vars: simple_stmt_var, SSTNode
        // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!';')
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // generated call: (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            // node.name: None, call.assigned_variable: newline_var
        // collecting vars: newline_var, Token
        //    vars: {'simple_stmt_var': 'SSTNode', None: None, 'newline_var': 'Token'}
        Token newline_var = null;
        SSTNode simple_stmt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: simple_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(simple_stmt)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmt) - should work
            // TODO replacing stmt_ty --> SSTNode
            // REMOVE result call (simple_stmt_var = simple_stmt_rule()) != null  // simple_stmt
            (simple_stmt_var = simple_stmt_rule()) != null  // simple_stmt
            &&
            // TODO visiting JavaParserGeneratorNamedItem: !';'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!';')
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!';')
            // TODO call is not created !';' -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NEWLINE
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // REMOVE result call (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: ';'.simple_stmt+ ';'? NEWLINE
        // REMOVE visiting JavaCallMakerVisitor.visit_Gather(';'.simple_stmt+)
            // generated call: (_gather_14_var = _gather_14_rule()) != null  // ';'.simple_stmt+
            // node.name: a, call.assigned_variable: _gather_14_var
        // collecting vars: _gather_14_var, SSTNode*
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(';'?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(';')
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_16_var = _tmp_16_rule()) != null  // ';'
            // generated call: ((_opt_var = _tmp_16_rule()) != null || _opt_var == null)  // ';'?
            // node.name: None, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // generated call: (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            // node.name: None, call.assigned_variable: newline_var
        // collecting vars: newline_var, Token
        //    vars: {'_gather_14_var': 'SSTNode*', '_opt_var': None, 'newline_var': 'Token'}
        // TODO replacing SSTNode* --> SSTNode[]
        SSTNode[] _gather_14_var = null;
        Object _opt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ';'.simple_stmt+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(';'.simple_stmt+)
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(';'.simple_stmt+)
            // REMOVE result call (_gather_14_var = _gather_14_rule()) != null  // ';'.simple_stmt+
            (_gather_14_var = (SSTNode[])_gather_14_rule()) != null  // ';'.simple_stmt+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ';'?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(';'?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(';'?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(';')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_16_var = _tmp_16_rule()) != null  // ';'
            // REMOVE result call ((_opt_var = _tmp_16_rule()) != null || _opt_var == null)  // ';'?
            ((_opt_var = _tmp_16_rule()) != null || _opt_var == null)  // ';'?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NEWLINE
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // REMOVE result call (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, SIMPLE_STMTS_ID, null);
    }

    // simple_stmt:
    //     | assignment
    //     | star_expressions
    //     | &'return' return_stmt
    //     | &('import' | 'from') import_stmt
    //     | &'raise' raise_stmt
    //     | 'pass'
    //     | &'del' del_stmt
    //     | &'yield' yield_stmt
    //     | &'assert' assert_stmt
    //     | 'break'
    //     | 'continue'
    //     | &'global' global_stmt
    //     | &'nonlocal' nonlocal_stmt
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode simple_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: simple_stmt, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, SIMPLE_STMT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, SIMPLE_STMT_ID);
        }
        // visiting Alt: assignment
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(assignment) - should work
        // TODO replacing stmt_ty --> SSTNode
            // generated call: (assignment_var = assignment_rule()) != null  // assignment
            // node.name: None, call.assigned_variable: assignment_var
        // collecting vars: assignment_var, SSTNode
        //    vars: {'assignment_var': 'SSTNode'}
        SSTNode assignment_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: assignment
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(assignment)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(assignment) - should work
            // TODO replacing stmt_ty --> SSTNode
            // REMOVE result call (assignment_var = assignment_rule()) != null  // assignment
            (assignment_var = assignment_rule()) != null  // assignment
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: star_expressions
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // generated call: (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            // node.name: e, call.assigned_variable: star_expressions_var
        // collecting vars: star_expressions_var, SSTNode
        //    vars: {'star_expressions_var': 'SSTNode'}
        SSTNode star_expressions_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expressions)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // REMOVE result call (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            (star_expressions_var = star_expressions_rule()) != null  // star_expressions
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: &'return' return_stmt
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'return')
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(return_stmt) - should work
        // TODO replacing stmt_ty --> SSTNode
            // generated call: (return_stmt_var = return_stmt_rule()) != null  // return_stmt
            // node.name: None, call.assigned_variable: return_stmt_var
        // collecting vars: return_stmt_var, SSTNode
        //    vars: {None: None, 'return_stmt_var': 'SSTNode'}
        SSTNode return_stmt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: &'return'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&'return')
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'return')
            // TODO call is not created &'return' -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: return_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(return_stmt)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(return_stmt) - should work
            // TODO replacing stmt_ty --> SSTNode
            // REMOVE result call (return_stmt_var = return_stmt_rule()) != null  // return_stmt
            (return_stmt_var = return_stmt_rule()) != null  // return_stmt
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: &('import' | 'from') import_stmt
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('import' | 'from'))
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_stmt) - should work
        // TODO replacing stmt_ty --> SSTNode
            // generated call: (import_stmt_var = import_stmt_rule()) != null  // import_stmt
            // node.name: None, call.assigned_variable: import_stmt_var
        // collecting vars: import_stmt_var, SSTNode
        //    vars: {None: None, 'import_stmt_var': 'SSTNode'}
        SSTNode import_stmt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: &('import' | 'from')
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&('import' | 'from'))
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('import' | 'from'))
            // TODO call is not created &('import' | 'from') -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: import_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(import_stmt)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_stmt) - should work
            // TODO replacing stmt_ty --> SSTNode
            // REMOVE result call (import_stmt_var = import_stmt_rule()) != null  // import_stmt
            (import_stmt_var = import_stmt_rule()) != null  // import_stmt
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: &'raise' raise_stmt
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'raise')
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(raise_stmt) - should work
        // TODO replacing stmt_ty --> SSTNode
            // generated call: (raise_stmt_var = raise_stmt_rule()) != null  // raise_stmt
            // node.name: None, call.assigned_variable: raise_stmt_var
        // collecting vars: raise_stmt_var, SSTNode
        //    vars: {None: None, 'raise_stmt_var': 'SSTNode'}
        SSTNode raise_stmt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: &'raise'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&'raise')
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'raise')
            // TODO call is not created &'raise' -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: raise_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(raise_stmt)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(raise_stmt) - should work
            // TODO replacing stmt_ty --> SSTNode
            // REMOVE result call (raise_stmt_var = raise_stmt_rule()) != null  // raise_stmt
            (raise_stmt_var = raise_stmt_rule()) != null  // raise_stmt
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: 'pass'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('pass')
            // generated call: (_keyword = expect(KEYWORD_PASS)) != null  // token='pass'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        //    vars: {'_keyword': 'Token'}
        Token _keyword = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'pass'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('pass')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('pass')
            // REMOVE result call (_keyword = expect(KEYWORD_PASS)) != null  // token='pass'
            (_keyword = expect(KEYWORD_PASS)) != null  // token='pass'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: &'del' del_stmt
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'del')
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_stmt) - should work
        // TODO replacing stmt_ty --> SSTNode
            // generated call: (del_stmt_var = del_stmt_rule()) != null  // del_stmt
            // node.name: None, call.assigned_variable: del_stmt_var
        // collecting vars: del_stmt_var, SSTNode
        //    vars: {None: None, 'del_stmt_var': 'SSTNode'}
        SSTNode del_stmt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: &'del'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&'del')
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'del')
            // TODO call is not created &'del' -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: del_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(del_stmt)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_stmt) - should work
            // TODO replacing stmt_ty --> SSTNode
            // REMOVE result call (del_stmt_var = del_stmt_rule()) != null  // del_stmt
            (del_stmt_var = del_stmt_rule()) != null  // del_stmt
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: &'yield' yield_stmt
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'yield')
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_stmt) - should work
        // TODO replacing stmt_ty --> SSTNode
            // generated call: (yield_stmt_var = yield_stmt_rule()) != null  // yield_stmt
            // node.name: None, call.assigned_variable: yield_stmt_var
        // collecting vars: yield_stmt_var, SSTNode
        //    vars: {None: None, 'yield_stmt_var': 'SSTNode'}
        SSTNode yield_stmt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: &'yield'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&'yield')
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'yield')
            // TODO call is not created &'yield' -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: yield_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(yield_stmt)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_stmt) - should work
            // TODO replacing stmt_ty --> SSTNode
            // REMOVE result call (yield_stmt_var = yield_stmt_rule()) != null  // yield_stmt
            (yield_stmt_var = yield_stmt_rule()) != null  // yield_stmt
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: &'assert' assert_stmt
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'assert')
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(assert_stmt) - should work
        // TODO replacing stmt_ty --> SSTNode
            // generated call: (assert_stmt_var = assert_stmt_rule()) != null  // assert_stmt
            // node.name: None, call.assigned_variable: assert_stmt_var
        // collecting vars: assert_stmt_var, SSTNode
        //    vars: {None: None, 'assert_stmt_var': 'SSTNode'}
        SSTNode assert_stmt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: &'assert'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&'assert')
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'assert')
            // TODO call is not created &'assert' -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: assert_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(assert_stmt)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(assert_stmt) - should work
            // TODO replacing stmt_ty --> SSTNode
            // REMOVE result call (assert_stmt_var = assert_stmt_rule()) != null  // assert_stmt
            (assert_stmt_var = assert_stmt_rule()) != null  // assert_stmt
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: 'break'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('break')
            // generated call: (_keyword = expect(KEYWORD_BREAK)) != null  // token='break'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        //    vars: {'_keyword': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'break'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('break')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('break')
            // REMOVE result call (_keyword = expect(KEYWORD_BREAK)) != null  // token='break'
            (_keyword = expect(KEYWORD_BREAK)) != null  // token='break'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: 'continue'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('continue')
            // generated call: (_keyword = expect(KEYWORD_CONTINUE)) != null  // token='continue'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        //    vars: {'_keyword': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'continue'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('continue')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('continue')
            // REMOVE result call (_keyword = expect(KEYWORD_CONTINUE)) != null  // token='continue'
            (_keyword = expect(KEYWORD_CONTINUE)) != null  // token='continue'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: &'global' global_stmt
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'global')
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(global_stmt) - should work
        // TODO replacing stmt_ty --> SSTNode
            // generated call: (global_stmt_var = global_stmt_rule()) != null  // global_stmt
            // node.name: None, call.assigned_variable: global_stmt_var
        // collecting vars: global_stmt_var, SSTNode
        //    vars: {None: None, 'global_stmt_var': 'SSTNode'}
        SSTNode global_stmt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: &'global'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&'global')
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'global')
            // TODO call is not created &'global' -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: global_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(global_stmt)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(global_stmt) - should work
            // TODO replacing stmt_ty --> SSTNode
            // REMOVE result call (global_stmt_var = global_stmt_rule()) != null  // global_stmt
            (global_stmt_var = global_stmt_rule()) != null  // global_stmt
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: &'nonlocal' nonlocal_stmt
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'nonlocal')
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(nonlocal_stmt) - should work
        // TODO replacing stmt_ty --> SSTNode
            // generated call: (nonlocal_stmt_var = nonlocal_stmt_rule()) != null  // nonlocal_stmt
            // node.name: None, call.assigned_variable: nonlocal_stmt_var
        // collecting vars: nonlocal_stmt_var, SSTNode
        //    vars: {None: None, 'nonlocal_stmt_var': 'SSTNode'}
        SSTNode nonlocal_stmt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: &'nonlocal'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&'nonlocal')
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'nonlocal')
            // TODO call is not created &'nonlocal' -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: nonlocal_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(nonlocal_stmt)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(nonlocal_stmt) - should work
            // TODO replacing stmt_ty --> SSTNode
            // REMOVE result call (nonlocal_stmt_var = nonlocal_stmt_rule()) != null  // nonlocal_stmt
            (nonlocal_stmt_var = nonlocal_stmt_rule()) != null  // nonlocal_stmt
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, SIMPLE_STMT_ID, null);
    }

    // compound_stmt:
    //     | &('def' | '@' | ASYNC) function_def
    //     | &'if' if_stmt
    //     | &('class' | '@') class_def
    //     | &('with' | ASYNC) with_stmt
    //     | &('for' | ASYNC) for_stmt
    //     | &'try' try_stmt
    //     | &'while' while_stmt
    //     | match_stmt
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode compound_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: compound_stmt, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, COMPOUND_STMT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, COMPOUND_STMT_ID);
        }
        // visiting Alt: &('def' | '@' | ASYNC) function_def
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('def' | '@' | ASYNC))
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(function_def) - should work
        // TODO replacing stmt_ty --> SSTNode
            // generated call: (function_def_var = function_def_rule()) != null  // function_def
            // node.name: None, call.assigned_variable: function_def_var
        // collecting vars: function_def_var, SSTNode
        //    vars: {None: None, 'function_def_var': 'SSTNode'}
        SSTNode function_def_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: &('def' | '@' | ASYNC)
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&('def' | '@' | ASYNC))
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('def' | '@' | ASYNC))
            // TODO call is not created &('def' | '@' | ASYNC) -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: function_def
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(function_def)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(function_def) - should work
            // TODO replacing stmt_ty --> SSTNode
            // REMOVE result call (function_def_var = function_def_rule()) != null  // function_def
            (function_def_var = function_def_rule()) != null  // function_def
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: &'if' if_stmt
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'if')
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(if_stmt) - should work
        // TODO replacing stmt_ty --> SSTNode
            // generated call: (if_stmt_var = if_stmt_rule()) != null  // if_stmt
            // node.name: None, call.assigned_variable: if_stmt_var
        // collecting vars: if_stmt_var, SSTNode
        //    vars: {None: None, 'if_stmt_var': 'SSTNode'}
        SSTNode if_stmt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: &'if'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&'if')
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'if')
            // TODO call is not created &'if' -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: if_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(if_stmt)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(if_stmt) - should work
            // TODO replacing stmt_ty --> SSTNode
            // REMOVE result call (if_stmt_var = if_stmt_rule()) != null  // if_stmt
            (if_stmt_var = if_stmt_rule()) != null  // if_stmt
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: &('class' | '@') class_def
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('class' | '@'))
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(class_def) - should work
        // TODO replacing stmt_ty --> SSTNode
            // generated call: (class_def_var = class_def_rule()) != null  // class_def
            // node.name: None, call.assigned_variable: class_def_var
        // collecting vars: class_def_var, SSTNode
        //    vars: {None: None, 'class_def_var': 'SSTNode'}
        SSTNode class_def_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: &('class' | '@')
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&('class' | '@'))
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('class' | '@'))
            // TODO call is not created &('class' | '@') -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: class_def
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(class_def)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(class_def) - should work
            // TODO replacing stmt_ty --> SSTNode
            // REMOVE result call (class_def_var = class_def_rule()) != null  // class_def
            (class_def_var = class_def_rule()) != null  // class_def
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: &('with' | ASYNC) with_stmt
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('with' | ASYNC))
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_stmt) - should work
        // TODO replacing stmt_ty --> SSTNode
            // generated call: (with_stmt_var = with_stmt_rule()) != null  // with_stmt
            // node.name: None, call.assigned_variable: with_stmt_var
        // collecting vars: with_stmt_var, SSTNode
        //    vars: {None: None, 'with_stmt_var': 'SSTNode'}
        SSTNode with_stmt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: &('with' | ASYNC)
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&('with' | ASYNC))
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('with' | ASYNC))
            // TODO call is not created &('with' | ASYNC) -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: with_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(with_stmt)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_stmt) - should work
            // TODO replacing stmt_ty --> SSTNode
            // REMOVE result call (with_stmt_var = with_stmt_rule()) != null  // with_stmt
            (with_stmt_var = with_stmt_rule()) != null  // with_stmt
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: &('for' | ASYNC) for_stmt
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('for' | ASYNC))
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_stmt) - should work
        // TODO replacing stmt_ty --> SSTNode
            // generated call: (for_stmt_var = for_stmt_rule()) != null  // for_stmt
            // node.name: None, call.assigned_variable: for_stmt_var
        // collecting vars: for_stmt_var, SSTNode
        //    vars: {None: None, 'for_stmt_var': 'SSTNode'}
        SSTNode for_stmt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: &('for' | ASYNC)
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&('for' | ASYNC))
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('for' | ASYNC))
            // TODO call is not created &('for' | ASYNC) -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: for_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(for_stmt)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_stmt) - should work
            // TODO replacing stmt_ty --> SSTNode
            // REMOVE result call (for_stmt_var = for_stmt_rule()) != null  // for_stmt
            (for_stmt_var = for_stmt_rule()) != null  // for_stmt
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: &'try' try_stmt
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'try')
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(try_stmt) - should work
        // TODO replacing stmt_ty --> SSTNode
            // generated call: (try_stmt_var = try_stmt_rule()) != null  // try_stmt
            // node.name: None, call.assigned_variable: try_stmt_var
        // collecting vars: try_stmt_var, SSTNode
        //    vars: {None: None, 'try_stmt_var': 'SSTNode'}
        SSTNode try_stmt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: &'try'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&'try')
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'try')
            // TODO call is not created &'try' -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: try_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(try_stmt)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(try_stmt) - should work
            // TODO replacing stmt_ty --> SSTNode
            // REMOVE result call (try_stmt_var = try_stmt_rule()) != null  // try_stmt
            (try_stmt_var = try_stmt_rule()) != null  // try_stmt
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: &'while' while_stmt
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'while')
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(while_stmt) - should work
        // TODO replacing stmt_ty --> SSTNode
            // generated call: (while_stmt_var = while_stmt_rule()) != null  // while_stmt
            // node.name: None, call.assigned_variable: while_stmt_var
        // collecting vars: while_stmt_var, SSTNode
        //    vars: {None: None, 'while_stmt_var': 'SSTNode'}
        SSTNode while_stmt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: &'while'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&'while')
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'while')
            // TODO call is not created &'while' -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: while_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(while_stmt)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(while_stmt) - should work
            // TODO replacing stmt_ty --> SSTNode
            // REMOVE result call (while_stmt_var = while_stmt_rule()) != null  // while_stmt
            (while_stmt_var = while_stmt_rule()) != null  // while_stmt
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: match_stmt
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(match_stmt) - should work
        // TODO replacing stmt_ty --> SSTNode
            // generated call: (match_stmt_var = match_stmt_rule()) != null  // match_stmt
            // node.name: None, call.assigned_variable: match_stmt_var
        // collecting vars: match_stmt_var, SSTNode
        //    vars: {'match_stmt_var': 'SSTNode'}
        SSTNode match_stmt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: match_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(match_stmt)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(match_stmt) - should work
            // TODO replacing stmt_ty --> SSTNode
            // REMOVE result call (match_stmt_var = match_stmt_rule()) != null  // match_stmt
            (match_stmt_var = match_stmt_rule()) != null  // match_stmt
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, COMPOUND_STMT_ID, null);
    }

    // assignment:
    //     | NAME ':' expression ['=' annotated_rhs]
    //     | ('(' single_target ')' | single_subscript_attribute_target) ':' expression ['=' annotated_rhs]
    //     | ((star_targets '='))+ (yield_expr | star_expressions) !'=' TYPE_COMMENT?
    //     | single_target augassign ~ (yield_expr | star_expressions)
    //     | invalid_assignment
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode assignment_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: assignment, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, ASSIGNMENT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, ASSIGNMENT_ID);
        }
        // visiting Alt: NAME ':' expression ['=' annotated_rhs]
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: a, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: b, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['=' annotated_rhs])
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('=' annotated_rhs)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_17_var = _tmp_17_rule()) != null  // '=' annotated_rhs
            // generated call: ((_opt_var = _tmp_17_rule()) != null || _opt_var == null)  // ['=' annotated_rhs]
            // node.name: c, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'name_var': 'Token', '_literal': 'Token', 'expression_var': 'SSTNode', '_opt_var': None}
        Token _literal = null;
        Object _opt_var = null;
        SSTNode expression_var = null;
        Token name_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ['=' annotated_rhs]
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(['=' annotated_rhs])
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['=' annotated_rhs])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('=' annotated_rhs)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_17_var = _tmp_17_rule()) != null  // '=' annotated_rhs
            // REMOVE result call ((_opt_var = _tmp_17_rule()) != null || _opt_var == null)  // ['=' annotated_rhs]
            ((_opt_var = _tmp_17_rule()) != null || _opt_var == null)  // ['=' annotated_rhs]
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: ('(' single_target ')' | single_subscript_attribute_target) ':' expression ['=' annotated_rhs]
        // TODO visiting JavaCallMakerVisitor.visit_Group(('(' single_target ')' | single_subscript_attribute_target))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('(' single_target ')' | single_subscript_attribute_target)
            // generated call: (_tmp_18_var = _tmp_18_rule()) != null  // '(' single_target ')' | single_subscript_attribute_target
            // node.name: a, call.assigned_variable: _tmp_18_var
        // collecting vars: _tmp_18_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: b, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['=' annotated_rhs])
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('=' annotated_rhs)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_19_var = _tmp_19_rule()) != null  // '=' annotated_rhs
            // generated call: ((_opt_var = _tmp_19_rule()) != null || _opt_var == null)  // ['=' annotated_rhs]
            // node.name: c, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'_tmp_18_var': None, '_literal': 'Token', 'expression_var': 'SSTNode', '_opt_var': None}
        Object _tmp_18_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ('(' single_target ')' | single_subscript_attribute_target)
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(('(' single_target ')' | single_subscript_attribute_target))
            // TODO visiting JavaCallMakerVisitor.visit_Group(('(' single_target ')' | single_subscript_attribute_target))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('(' single_target ')' | single_subscript_attribute_target)
            // REMOVE result call (_tmp_18_var = _tmp_18_rule()) != null  // '(' single_target ')' | single_subscript_attribute_target
            (_tmp_18_var = _tmp_18_rule()) != null  // '(' single_target ')' | single_subscript_attribute_target
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ['=' annotated_rhs]
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(['=' annotated_rhs])
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['=' annotated_rhs])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('=' annotated_rhs)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_19_var = _tmp_19_rule()) != null  // '=' annotated_rhs
            // REMOVE result call ((_opt_var = _tmp_19_rule()) != null || _opt_var == null)  // ['=' annotated_rhs]
            ((_opt_var = _tmp_19_rule()) != null || _opt_var == null)  // ['=' annotated_rhs]
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: ((star_targets '='))+ (yield_expr | star_expressions) !'=' TYPE_COMMENT?
        // TODO visiting JavaCallMakerVisitor.visit_Repeat1(((star_targets '='))+)
            // generated call: (_loop1_20_var = _loop1_20_rule()) != null  // ((star_targets '='))+
            // node.name: a, call.assigned_variable: _loop1_20_var
        // collecting vars: _loop1_20_var, asdl_expr_seq*
        // TODO visiting JavaCallMakerVisitor.visit_Group((yield_expr | star_expressions))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(yield_expr | star_expressions)
            // generated call: (_tmp_21_var = _tmp_21_rule()) != null  // yield_expr | star_expressions
            // node.name: b, call.assigned_variable: _tmp_21_var
        // collecting vars: _tmp_21_var, None
        // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!'=')
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(TYPE_COMMENT)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_22_var = _tmp_22_rule()) != null  // TYPE_COMMENT
            // generated call: ((_opt_var = _tmp_22_rule()) != null || _opt_var == null)  // TYPE_COMMENT?
            // node.name: tc, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'_loop1_20_var': 'asdl_expr_seq*', '_tmp_21_var': None, None: None, '_opt_var': None}
        // TODO replacing asdl_expr_seq* --> SSTNode[]
        SSTNode[] _loop1_20_var = null;
        Object _tmp_21_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ((star_targets '='))+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(((star_targets '='))+)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(((star_targets '='))+)
            // REMOVE result call (_loop1_20_var = _loop1_20_rule()) != null  // ((star_targets '='))+
            (_loop1_20_var = (SSTNode[])_loop1_20_rule()) != null  // ((star_targets '='))+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: (yield_expr | star_expressions)
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((yield_expr | star_expressions))
            // TODO visiting JavaCallMakerVisitor.visit_Group((yield_expr | star_expressions))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(yield_expr | star_expressions)
            // REMOVE result call (_tmp_21_var = _tmp_21_rule()) != null  // yield_expr | star_expressions
            (_tmp_21_var = _tmp_21_rule()) != null  // yield_expr | star_expressions
            &&
            // TODO visiting JavaParserGeneratorNamedItem: !'='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!'=')
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!'=')
            // TODO call is not created !'=' -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(TYPE_COMMENT)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_22_var = _tmp_22_rule()) != null  // TYPE_COMMENT
            // REMOVE result call ((_opt_var = _tmp_22_rule()) != null || _opt_var == null)  // TYPE_COMMENT?
            ((_opt_var = _tmp_22_rule()) != null || _opt_var == null)  // TYPE_COMMENT?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: single_target augassign ~ (yield_expr | star_expressions)
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(single_target) - should work
            // generated call: (single_target_var = single_target_rule()) != null  // single_target
            // node.name: a, call.assigned_variable: single_target_var
        // collecting vars: single_target_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(augassign) - should work
        // TODO replacing AugOperator[] --> SSTNode[]
            // generated call: (augassign_var = augassign_rule()) != null  // augassign
            // node.name: b, call.assigned_variable: augassign_var
        // collecting vars: augassign_var, SSTNode[]
        // TODO visiting JavaCallMakerVisitor.visit_Cut(~)
            // generated call: None
        // collecting vars: None, None
        // TODO visiting JavaCallMakerVisitor.visit_Group((yield_expr | star_expressions))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(yield_expr | star_expressions)
            // generated call: (_tmp_23_var = _tmp_23_rule()) != null  // yield_expr | star_expressions
            // node.name: c, call.assigned_variable: _tmp_23_var
        // collecting vars: _tmp_23_var, None
        //    vars: {'single_target_var': 'SSTNode', 'augassign_var': 'SSTNode[]', None: None, '_tmp_23_var': None}
        Object _tmp_23_var = null;
        SSTNode[] augassign_var = null;
        SSTNode single_target_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: single_target
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(single_target)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(single_target) - should work
            // REMOVE result call (single_target_var = single_target_rule()) != null  // single_target
            (single_target_var = single_target_rule()) != null  // single_target
            &&
            // TODO visiting JavaParserGeneratorNamedItem: augassign
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(augassign)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(augassign) - should work
            // TODO replacing AugOperator[] --> SSTNode[]
            // REMOVE result call (augassign_var = augassign_rule()) != null  // augassign
            (augassign_var = augassign_rule()) != null  // augassign
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ~
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(~)
            // TODO visiting JavaCallMakerVisitor.visit_Cut(~)
            // TODO call is not created ~ -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: (yield_expr | star_expressions)
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((yield_expr | star_expressions))
            // TODO visiting JavaCallMakerVisitor.visit_Group((yield_expr | star_expressions))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(yield_expr | star_expressions)
            // REMOVE result call (_tmp_23_var = _tmp_23_rule()) != null  // yield_expr | star_expressions
            (_tmp_23_var = _tmp_23_rule()) != null  // yield_expr | star_expressions
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: invalid_assignment
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_assignment) - should work
            // generated call: (invalid_assignment_var = invalid_assignment_rule()) != null  // invalid_assignment
            // node.name: None, call.assigned_variable: invalid_assignment_var
        // collecting vars: invalid_assignment_var, None
        //    vars: {'invalid_assignment_var': None}
        Object invalid_assignment_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: invalid_assignment
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_assignment)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_assignment) - should work
            // REMOVE result call (invalid_assignment_var = invalid_assignment_rule()) != null  // invalid_assignment
            (invalid_assignment_var = invalid_assignment_rule()) != null  // invalid_assignment
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, ASSIGNMENT_ID, null);
    }

    // augassign:
    //     | '+='
    //     | '-='
    //     | '*='
    //     | '@='
    //     | '/='
    //     | '%='
    //     | '&='
    //     | '|='
    //     | '^='
    //     | '<<='
    //     | '>>='
    //     | '**='
    //     | '//='
    // TODO replacing AugOperator* --> SSTNode[]
    public SSTNode[] augassign_rule() {
    // isLoop: False, isGather: False, type: AugOperator*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: augassign, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, AUGASSIGN_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, AUGASSIGN_ID);
        }
        // visiting Alt: '+='
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('+=')
            // generated call: (_literal = expect(Token.Kind.PLUSEQUAL)) != null  // token='+='
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        Token _literal = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '+='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('+=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('+=')
            // REMOVE result call (_literal = expect(Token.Kind.PLUSEQUAL)) != null  // token='+='
            (_literal = expect(Token.Kind.PLUSEQUAL)) != null  // token='+='
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '-='
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('-=')
            // generated call: (_literal = expect(Token.Kind.MINEQUAL)) != null  // token='-='
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '-='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('-=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('-=')
            // REMOVE result call (_literal = expect(Token.Kind.MINEQUAL)) != null  // token='-='
            (_literal = expect(Token.Kind.MINEQUAL)) != null  // token='-='
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '*='
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*=')
            // generated call: (_literal = expect(Token.Kind.STAREQUAL)) != null  // token='*='
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '*='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*=')
            // REMOVE result call (_literal = expect(Token.Kind.STAREQUAL)) != null  // token='*='
            (_literal = expect(Token.Kind.STAREQUAL)) != null  // token='*='
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '@='
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('@=')
            // generated call: (_literal = expect(Token.Kind.ATEQUAL)) != null  // token='@='
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '@='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('@=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('@=')
            // REMOVE result call (_literal = expect(Token.Kind.ATEQUAL)) != null  // token='@='
            (_literal = expect(Token.Kind.ATEQUAL)) != null  // token='@='
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '/='
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/=')
            // generated call: (_literal = expect(Token.Kind.SLASHEQUAL)) != null  // token='/='
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '/='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('/=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/=')
            // REMOVE result call (_literal = expect(Token.Kind.SLASHEQUAL)) != null  // token='/='
            (_literal = expect(Token.Kind.SLASHEQUAL)) != null  // token='/='
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '%='
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('%=')
            // generated call: (_literal = expect(Token.Kind.PERCENTEQUAL)) != null  // token='%='
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '%='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('%=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('%=')
            // REMOVE result call (_literal = expect(Token.Kind.PERCENTEQUAL)) != null  // token='%='
            (_literal = expect(Token.Kind.PERCENTEQUAL)) != null  // token='%='
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '&='
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('&=')
            // generated call: (_literal = expect(Token.Kind.AMPEREQUAL)) != null  // token='&='
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '&='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('&=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('&=')
            // REMOVE result call (_literal = expect(Token.Kind.AMPEREQUAL)) != null  // token='&='
            (_literal = expect(Token.Kind.AMPEREQUAL)) != null  // token='&='
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '|='
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('|=')
            // generated call: (_literal = expect(Token.Kind.VBAREQUAL)) != null  // token='|='
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '|='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('|=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('|=')
            // REMOVE result call (_literal = expect(Token.Kind.VBAREQUAL)) != null  // token='|='
            (_literal = expect(Token.Kind.VBAREQUAL)) != null  // token='|='
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '^='
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('^=')
            // generated call: (_literal = expect(Token.Kind.CIRCUMFLEXEQUAL)) != null  // token='^='
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '^='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('^=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('^=')
            // REMOVE result call (_literal = expect(Token.Kind.CIRCUMFLEXEQUAL)) != null  // token='^='
            (_literal = expect(Token.Kind.CIRCUMFLEXEQUAL)) != null  // token='^='
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '<<='
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('<<=')
            // generated call: (_literal = expect(Token.Kind.LEFTSHIFTEQUAL)) != null  // token='<<='
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '<<='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('<<=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('<<=')
            // REMOVE result call (_literal = expect(Token.Kind.LEFTSHIFTEQUAL)) != null  // token='<<='
            (_literal = expect(Token.Kind.LEFTSHIFTEQUAL)) != null  // token='<<='
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '>>='
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('>>=')
            // generated call: (_literal = expect(Token.Kind.RIGHTSHIFTEQUAL)) != null  // token='>>='
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '>>='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('>>=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('>>=')
            // REMOVE result call (_literal = expect(Token.Kind.RIGHTSHIFTEQUAL)) != null  // token='>>='
            (_literal = expect(Token.Kind.RIGHTSHIFTEQUAL)) != null  // token='>>='
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '**='
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**=')
            // generated call: (_literal = expect(Token.Kind.DOUBLESTAREQUAL)) != null  // token='**='
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '**='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('**=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**=')
            // REMOVE result call (_literal = expect(Token.Kind.DOUBLESTAREQUAL)) != null  // token='**='
            (_literal = expect(Token.Kind.DOUBLESTAREQUAL)) != null  // token='**='
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '//='
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('//=')
            // generated call: (_literal = expect(Token.Kind.DOUBLESLASHEQUAL)) != null  // token='//='
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '//='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('//=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('//=')
            // REMOVE result call (_literal = expect(Token.Kind.DOUBLESLASHEQUAL)) != null  // token='//='
            (_literal = expect(Token.Kind.DOUBLESLASHEQUAL)) != null  // token='//='
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, AUGASSIGN_ID, null);
    }

    // global_stmt: 'global' ','.NAME+
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode global_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: global_stmt, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, GLOBAL_STMT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, GLOBAL_STMT_ID);
        }
        // visiting Alt: 'global' ','.NAME+
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('global')
            // generated call: (_keyword = expect(KEYWORD_GLOBAL)) != null  // token='global'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.NAME+)
            // generated call: (_gather_24_var = _gather_24_rule()) != null  // ','.NAME+
            // node.name: a, call.assigned_variable: _gather_24_var
        // collecting vars: _gather_24_var, asdl_expr_seq*
        //    vars: {'_keyword': 'Token', '_gather_24_var': 'asdl_expr_seq*'}
        // TODO replacing asdl_expr_seq* --> SSTNode[]
        SSTNode[] _gather_24_var = null;
        Token _keyword = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'global'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('global')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('global')
            // REMOVE result call (_keyword = expect(KEYWORD_GLOBAL)) != null  // token='global'
            (_keyword = expect(KEYWORD_GLOBAL)) != null  // token='global'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','.NAME+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.NAME+)
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.NAME+)
            // REMOVE result call (_gather_24_var = _gather_24_rule()) != null  // ','.NAME+
            (_gather_24_var = (SSTNode[])_gather_24_rule()) != null  // ','.NAME+
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, GLOBAL_STMT_ID, null);
    }

    // nonlocal_stmt: 'nonlocal' ','.NAME+
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode nonlocal_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: nonlocal_stmt, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, NONLOCAL_STMT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, NONLOCAL_STMT_ID);
        }
        // visiting Alt: 'nonlocal' ','.NAME+
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('nonlocal')
            // generated call: (_keyword = expect(KEYWORD_NONLOCAL)) != null  // token='nonlocal'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.NAME+)
            // generated call: (_gather_26_var = _gather_26_rule()) != null  // ','.NAME+
            // node.name: a, call.assigned_variable: _gather_26_var
        // collecting vars: _gather_26_var, asdl_expr_seq*
        //    vars: {'_keyword': 'Token', '_gather_26_var': 'asdl_expr_seq*'}
        // TODO replacing asdl_expr_seq* --> SSTNode[]
        SSTNode[] _gather_26_var = null;
        Token _keyword = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'nonlocal'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('nonlocal')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('nonlocal')
            // REMOVE result call (_keyword = expect(KEYWORD_NONLOCAL)) != null  // token='nonlocal'
            (_keyword = expect(KEYWORD_NONLOCAL)) != null  // token='nonlocal'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','.NAME+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.NAME+)
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.NAME+)
            // REMOVE result call (_gather_26_var = _gather_26_rule()) != null  // ','.NAME+
            (_gather_26_var = (SSTNode[])_gather_26_rule()) != null  // ','.NAME+
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, NONLOCAL_STMT_ID, null);
    }

    // yield_stmt: yield_expr
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode yield_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: yield_stmt, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, YIELD_STMT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, YIELD_STMT_ID);
        }
        // visiting Alt: yield_expr
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
            // generated call: (yield_expr_var = yield_expr_rule()) != null  // yield_expr
            // node.name: y, call.assigned_variable: yield_expr_var
        // collecting vars: yield_expr_var, SSTNode
        //    vars: {'yield_expr_var': 'SSTNode'}
        SSTNode yield_expr_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: yield_expr
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(yield_expr)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
            // REMOVE result call (yield_expr_var = yield_expr_rule()) != null  // yield_expr
            (yield_expr_var = yield_expr_rule()) != null  // yield_expr
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, YIELD_STMT_ID, null);
    }

    // assert_stmt: 'assert' expression [',' expression]
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode assert_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: assert_stmt, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, ASSERT_STMT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, ASSERT_STMT_ID);
        }
        // visiting Alt: 'assert' expression [',' expression]
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('assert')
            // generated call: (_keyword = expect(KEYWORD_ASSERT)) != null  // token='assert'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: a, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt([',' expression])
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' expression)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_28_var = _tmp_28_rule()) != null  // ',' expression
            // generated call: ((_opt_var = _tmp_28_rule()) != null || _opt_var == null)  // [',' expression]
            // node.name: b, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'_keyword': 'Token', 'expression_var': 'SSTNode', '_opt_var': None}
        Token _keyword = null;
        Object _opt_var = null;
        SSTNode expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'assert'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('assert')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('assert')
            // REMOVE result call (_keyword = expect(KEYWORD_ASSERT)) != null  // token='assert'
            (_keyword = expect(KEYWORD_ASSERT)) != null  // token='assert'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: [',' expression]
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem([',' expression])
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt([',' expression])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' expression)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_28_var = _tmp_28_rule()) != null  // ',' expression
            // REMOVE result call ((_opt_var = _tmp_28_rule()) != null || _opt_var == null)  // [',' expression]
            ((_opt_var = _tmp_28_rule()) != null || _opt_var == null)  // [',' expression]
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, ASSERT_STMT_ID, null);
    }

    // del_stmt: 'del' del_targets &(';' | NEWLINE) | invalid_del_stmt
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode del_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: del_stmt, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, DEL_STMT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, DEL_STMT_ID);
        }
        // visiting Alt: 'del' del_targets &(';' | NEWLINE)
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('del')
            // generated call: (_keyword = expect(KEYWORD_DEL)) != null  // token='del'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_targets) - should work
        // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // generated call: (del_targets_var = del_targets_rule()) != null  // del_targets
            // node.name: a, call.assigned_variable: del_targets_var
        // collecting vars: del_targets_var, SSTNode[]
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&(';' | NEWLINE))
            // generated call: None
        // collecting vars: None, None
        //    vars: {'_keyword': 'Token', 'del_targets_var': 'SSTNode[]', None: None}
        Token _keyword = null;
        SSTNode[] del_targets_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'del'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('del')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('del')
            // REMOVE result call (_keyword = expect(KEYWORD_DEL)) != null  // token='del'
            (_keyword = expect(KEYWORD_DEL)) != null  // token='del'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: del_targets
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(del_targets)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_targets) - should work
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // REMOVE result call (del_targets_var = del_targets_rule()) != null  // del_targets
            (del_targets_var = del_targets_rule()) != null  // del_targets
            &&
            // TODO visiting JavaParserGeneratorNamedItem: &(';' | NEWLINE)
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&(';' | NEWLINE))
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&(';' | NEWLINE))
            // TODO call is not created &(';' | NEWLINE) -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: invalid_del_stmt
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_del_stmt) - should work
            // generated call: (invalid_del_stmt_var = invalid_del_stmt_rule()) != null  // invalid_del_stmt
            // node.name: None, call.assigned_variable: invalid_del_stmt_var
        // collecting vars: invalid_del_stmt_var, None
        //    vars: {'invalid_del_stmt_var': None}
        Object invalid_del_stmt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: invalid_del_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_del_stmt)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_del_stmt) - should work
            // REMOVE result call (invalid_del_stmt_var = invalid_del_stmt_rule()) != null  // invalid_del_stmt
            (invalid_del_stmt_var = invalid_del_stmt_rule()) != null  // invalid_del_stmt
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, DEL_STMT_ID, null);
    }

    // import_stmt: import_name | import_from
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode import_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: import_stmt, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, IMPORT_STMT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, IMPORT_STMT_ID);
        }
        // visiting Alt: import_name
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_name) - should work
        // TODO replacing stmt_ty --> SSTNode
            // generated call: (import_name_var = import_name_rule()) != null  // import_name
            // node.name: None, call.assigned_variable: import_name_var
        // collecting vars: import_name_var, SSTNode
        //    vars: {'import_name_var': 'SSTNode'}
        SSTNode import_name_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: import_name
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(import_name)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_name) - should work
            // TODO replacing stmt_ty --> SSTNode
            // REMOVE result call (import_name_var = import_name_rule()) != null  // import_name
            (import_name_var = import_name_rule()) != null  // import_name
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: import_from
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from) - should work
        // TODO replacing stmt_ty --> SSTNode
            // generated call: (import_from_var = import_from_rule()) != null  // import_from
            // node.name: None, call.assigned_variable: import_from_var
        // collecting vars: import_from_var, SSTNode
        //    vars: {'import_from_var': 'SSTNode'}
        SSTNode import_from_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: import_from
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(import_from)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from) - should work
            // TODO replacing stmt_ty --> SSTNode
            // REMOVE result call (import_from_var = import_from_rule()) != null  // import_from
            (import_from_var = import_from_rule()) != null  // import_from
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, IMPORT_STMT_ID, null);
    }

    // import_name: 'import' dotted_as_names
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode import_name_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: import_name, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, IMPORT_NAME_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, IMPORT_NAME_ID);
        }
        // visiting Alt: 'import' dotted_as_names
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('import')
            // generated call: (_keyword = expect(KEYWORD_IMPORT)) != null  // token='import'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_as_names) - should work
        // TODO replacing asdl_alias_seq[] --> SSTNode[]
            // generated call: (dotted_as_names_var = dotted_as_names_rule()) != null  // dotted_as_names
            // node.name: a, call.assigned_variable: dotted_as_names_var
        // collecting vars: dotted_as_names_var, SSTNode[]
        //    vars: {'_keyword': 'Token', 'dotted_as_names_var': 'SSTNode[]'}
        Token _keyword = null;
        SSTNode[] dotted_as_names_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'import'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('import')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('import')
            // REMOVE result call (_keyword = expect(KEYWORD_IMPORT)) != null  // token='import'
            (_keyword = expect(KEYWORD_IMPORT)) != null  // token='import'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: dotted_as_names
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(dotted_as_names)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_as_names) - should work
            // TODO replacing asdl_alias_seq[] --> SSTNode[]
            // REMOVE result call (dotted_as_names_var = dotted_as_names_rule()) != null  // dotted_as_names
            (dotted_as_names_var = dotted_as_names_rule()) != null  // dotted_as_names
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, IMPORT_NAME_ID, null);
    }

    // import_from:
    //     | 'from' (('.' | '...'))* dotted_name 'import' import_from_targets
    //     | 'from' (('.' | '...'))+ 'import' import_from_targets
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode import_from_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: import_from, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, IMPORT_FROM_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, IMPORT_FROM_ID);
        }
        // visiting Alt: 'from' (('.' | '...'))* dotted_name 'import' import_from_targets
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('from')
            // generated call: (_keyword = expect(KEYWORD_FROM)) != null  // token='from'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // TODO visiting JavaCallMakerVisitor.visit_Repeat0((('.' | '...'))*)
            // generated call: (_loop0_29_var = _loop0_29_rule()) != null  // (('.' | '...'))*
            // node.name: a, call.assigned_variable: _loop0_29_var
        // collecting vars: _loop0_29_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_name) - should work
            // generated call: (dotted_name_var = dotted_name_rule()) != null  // dotted_name
            // node.name: b, call.assigned_variable: dotted_name_var
        // collecting vars: dotted_name_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('import')
            // generated call: (_keyword = expect(KEYWORD_IMPORT)) != null  // token='import'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword_1, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_targets) - should work
        // TODO replacing asdl_alias_seq[] --> SSTNode[]
            // generated call: (import_from_targets_var = import_from_targets_rule()) != null  // import_from_targets
            // node.name: c, call.assigned_variable: import_from_targets_var
        // collecting vars: import_from_targets_var, SSTNode[]
        //    vars: {'_keyword': 'Token', '_loop0_29_var': 'SSTNode[]', 'dotted_name_var': 'SSTNode', '_keyword_1': 'Token', 'import_from_targets_var': 'SSTNode[]'}
        Token _keyword = null;
        Token _keyword_1 = null;
        SSTNode[] _loop0_29_var = null;
        SSTNode dotted_name_var = null;
        SSTNode[] import_from_targets_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'from'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('from')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('from')
            // REMOVE result call (_keyword = expect(KEYWORD_FROM)) != null  // token='from'
            (_keyword = expect(KEYWORD_FROM)) != null  // token='from'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: (('.' | '...'))*
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((('.' | '...'))*)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0((('.' | '...'))*)
            // REMOVE result call (_loop0_29_var = _loop0_29_rule()) != null  // (('.' | '...'))*
            (_loop0_29_var = _loop0_29_rule()) != null  // (('.' | '...'))*
            &&
            // TODO visiting JavaParserGeneratorNamedItem: dotted_name
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(dotted_name)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_name) - should work
            // REMOVE result call (dotted_name_var = dotted_name_rule()) != null  // dotted_name
            (dotted_name_var = dotted_name_rule()) != null  // dotted_name
            &&
            // TODO visiting JavaParserGeneratorNamedItem: 'import'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('import')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('import')
            // REMOVE result call (_keyword = expect(KEYWORD_IMPORT)) != null  // token='import'
            (_keyword_1 = expect(KEYWORD_IMPORT)) != null  // token='import'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: import_from_targets
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(import_from_targets)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_targets) - should work
            // TODO replacing asdl_alias_seq[] --> SSTNode[]
            // REMOVE result call (import_from_targets_var = import_from_targets_rule()) != null  // import_from_targets
            (import_from_targets_var = import_from_targets_rule()) != null  // import_from_targets
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: 'from' (('.' | '...'))+ 'import' import_from_targets
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('from')
            // generated call: (_keyword = expect(KEYWORD_FROM)) != null  // token='from'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // TODO visiting JavaCallMakerVisitor.visit_Repeat1((('.' | '...'))+)
            // generated call: (_loop1_30_var = _loop1_30_rule()) != null  // (('.' | '...'))+
            // node.name: a, call.assigned_variable: _loop1_30_var
        // collecting vars: _loop1_30_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('import')
            // generated call: (_keyword = expect(KEYWORD_IMPORT)) != null  // token='import'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword_1, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_targets) - should work
        // TODO replacing asdl_alias_seq[] --> SSTNode[]
            // generated call: (import_from_targets_var = import_from_targets_rule()) != null  // import_from_targets
            // node.name: b, call.assigned_variable: import_from_targets_var
        // collecting vars: import_from_targets_var, SSTNode[]
        //    vars: {'_keyword': 'Token', '_loop1_30_var': 'SSTNode[]', '_keyword_1': 'Token', 'import_from_targets_var': 'SSTNode[]'}
        SSTNode[] _loop1_30_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'from'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('from')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('from')
            // REMOVE result call (_keyword = expect(KEYWORD_FROM)) != null  // token='from'
            (_keyword = expect(KEYWORD_FROM)) != null  // token='from'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: (('.' | '...'))+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((('.' | '...'))+)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1((('.' | '...'))+)
            // REMOVE result call (_loop1_30_var = _loop1_30_rule()) != null  // (('.' | '...'))+
            (_loop1_30_var = _loop1_30_rule()) != null  // (('.' | '...'))+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: 'import'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('import')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('import')
            // REMOVE result call (_keyword = expect(KEYWORD_IMPORT)) != null  // token='import'
            (_keyword_1 = expect(KEYWORD_IMPORT)) != null  // token='import'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: import_from_targets
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(import_from_targets)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_targets) - should work
            // TODO replacing asdl_alias_seq[] --> SSTNode[]
            // REMOVE result call (import_from_targets_var = import_from_targets_rule()) != null  // import_from_targets
            (import_from_targets_var = import_from_targets_rule()) != null  // import_from_targets
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, IMPORT_FROM_ID, null);
    }

    // import_from_targets:
    //     | '(' import_from_as_names ','? ')'
    //     | import_from_as_names !','
    //     | '*'
    //     | invalid_import_from_targets
    // TODO replacing asdl_alias_seq* --> SSTNode[]
    public SSTNode[] import_from_targets_rule() {
    // isLoop: False, isGather: False, type: asdl_alias_seq*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: import_from_targets, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, IMPORT_FROM_TARGETS_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, IMPORT_FROM_TARGETS_ID);
        }
        // visiting Alt: '(' import_from_as_names ','? ')'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_as_names) - should work
        // TODO replacing asdl_alias_seq[] --> SSTNode[]
            // generated call: (import_from_as_names_var = import_from_as_names_rule()) != null  // import_from_as_names
            // node.name: a, call.assigned_variable: import_from_as_names_var
        // collecting vars: import_from_as_names_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_31_var = _tmp_31_rule()) != null  // ','
            // generated call: ((_opt_var = _tmp_31_rule()) != null || _opt_var == null)  // ','?
            // node.name: None, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_literal': 'Token', 'import_from_as_names_var': 'SSTNode[]', '_opt_var': None, '_literal_1': 'Token'}
        Token _literal = null;
        Token _literal_1 = null;
        Object _opt_var = null;
        SSTNode[] import_from_as_names_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            &&
            // TODO visiting JavaParserGeneratorNamedItem: import_from_as_names
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(import_from_as_names)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_as_names) - should work
            // TODO replacing asdl_alias_seq[] --> SSTNode[]
            // REMOVE result call (import_from_as_names_var = import_from_as_names_rule()) != null  // import_from_as_names
            (import_from_as_names_var = import_from_as_names_rule()) != null  // import_from_as_names
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_31_var = _tmp_31_rule()) != null  // ','
            // REMOVE result call ((_opt_var = _tmp_31_rule()) != null || _opt_var == null)  // ','?
            ((_opt_var = _tmp_31_rule()) != null || _opt_var == null)  // ','?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: import_from_as_names !','
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_as_names) - should work
        // TODO replacing asdl_alias_seq[] --> SSTNode[]
            // generated call: (import_from_as_names_var = import_from_as_names_rule()) != null  // import_from_as_names
            // node.name: None, call.assigned_variable: import_from_as_names_var
        // collecting vars: import_from_as_names_var, SSTNode[]
        // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!',')
            // generated call: None
        // collecting vars: None, None
        //    vars: {'import_from_as_names_var': 'SSTNode[]', None: None}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: import_from_as_names
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(import_from_as_names)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_as_names) - should work
            // TODO replacing asdl_alias_seq[] --> SSTNode[]
            // REMOVE result call (import_from_as_names_var = import_from_as_names_rule()) != null  // import_from_as_names
            (import_from_as_names_var = import_from_as_names_rule()) != null  // import_from_as_names
            &&
            // TODO visiting JavaParserGeneratorNamedItem: !','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!',')
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!',')
            // TODO call is not created !',' -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '*'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '*'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            (_literal = expect(Token.Kind.STAR)) != null  // token='*'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: invalid_import_from_targets
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_import_from_targets) - should work
            // generated call: (invalid_import_from_targets_var = invalid_import_from_targets_rule()) != null  // invalid_import_from_targets
            // node.name: None, call.assigned_variable: invalid_import_from_targets_var
        // collecting vars: invalid_import_from_targets_var, None
        //    vars: {'invalid_import_from_targets_var': None}
        Object invalid_import_from_targets_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: invalid_import_from_targets
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_import_from_targets)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_import_from_targets) - should work
            // REMOVE result call (invalid_import_from_targets_var = invalid_import_from_targets_rule()) != null  // invalid_import_from_targets
            (invalid_import_from_targets_var = invalid_import_from_targets_rule()) != null  // invalid_import_from_targets
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, IMPORT_FROM_TARGETS_ID, null);
    }

    // import_from_as_names: ','.import_from_as_name+
    // TODO replacing asdl_alias_seq* --> SSTNode[]
    public SSTNode[] import_from_as_names_rule() {
    // isLoop: False, isGather: False, type: asdl_alias_seq*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: import_from_as_names, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, IMPORT_FROM_AS_NAMES_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, IMPORT_FROM_AS_NAMES_ID);
        }
        // visiting Alt: ','.import_from_as_name+
        // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.import_from_as_name+)
            // generated call: (_gather_32_var = _gather_32_rule()) != null  // ','.import_from_as_name+
            // node.name: a, call.assigned_variable: _gather_32_var
        // collecting vars: _gather_32_var, asdl_alias_seq*
        //    vars: {'_gather_32_var': 'asdl_alias_seq*'}
        // TODO replacing asdl_alias_seq* --> SSTNode[]
        SSTNode[] _gather_32_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','.import_from_as_name+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.import_from_as_name+)
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.import_from_as_name+)
            // REMOVE result call (_gather_32_var = _gather_32_rule()) != null  // ','.import_from_as_name+
            (_gather_32_var = (SSTNode[])_gather_32_rule()) != null  // ','.import_from_as_name+
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, IMPORT_FROM_AS_NAMES_ID, null);
    }

    // import_from_as_name: NAME ['as' NAME]
    // TODO replacing alias_ty --> SSTNode
    public SSTNode import_from_as_name_rule() {
    // isLoop: False, isGather: False, type: alias_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: import_from_as_name, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, IMPORT_FROM_AS_NAME_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, IMPORT_FROM_AS_NAME_ID);
        }
        // visiting Alt: NAME ['as' NAME]
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: a, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' NAME])
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' NAME)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_34_var = _tmp_34_rule()) != null  // 'as' NAME
            // generated call: ((_opt_var = _tmp_34_rule()) != null || _opt_var == null)  // ['as' NAME]
            // node.name: b, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'name_var': 'Token', '_opt_var': None}
        Object _opt_var = null;
        Token name_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ['as' NAME]
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(['as' NAME])
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' NAME])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' NAME)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_34_var = _tmp_34_rule()) != null  // 'as' NAME
            // REMOVE result call ((_opt_var = _tmp_34_rule()) != null || _opt_var == null)  // ['as' NAME]
            ((_opt_var = _tmp_34_rule()) != null || _opt_var == null)  // ['as' NAME]
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, IMPORT_FROM_AS_NAME_ID, null);
    }

    // dotted_as_names: ','.dotted_as_name+
    // TODO replacing asdl_alias_seq* --> SSTNode[]
    public SSTNode[] dotted_as_names_rule() {
    // isLoop: False, isGather: False, type: asdl_alias_seq*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: dotted_as_names, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, DOTTED_AS_NAMES_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, DOTTED_AS_NAMES_ID);
        }
        // visiting Alt: ','.dotted_as_name+
        // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.dotted_as_name+)
            // generated call: (_gather_35_var = _gather_35_rule()) != null  // ','.dotted_as_name+
            // node.name: a, call.assigned_variable: _gather_35_var
        // collecting vars: _gather_35_var, asdl_alias_seq*
        //    vars: {'_gather_35_var': 'asdl_alias_seq*'}
        // TODO replacing asdl_alias_seq* --> SSTNode[]
        SSTNode[] _gather_35_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','.dotted_as_name+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.dotted_as_name+)
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.dotted_as_name+)
            // REMOVE result call (_gather_35_var = _gather_35_rule()) != null  // ','.dotted_as_name+
            (_gather_35_var = (SSTNode[])_gather_35_rule()) != null  // ','.dotted_as_name+
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, DOTTED_AS_NAMES_ID, null);
    }

    // dotted_as_name: dotted_name ['as' NAME]
    // TODO replacing alias_ty --> SSTNode
    public SSTNode dotted_as_name_rule() {
    // isLoop: False, isGather: False, type: alias_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: dotted_as_name, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, DOTTED_AS_NAME_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, DOTTED_AS_NAME_ID);
        }
        // visiting Alt: dotted_name ['as' NAME]
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_name) - should work
            // generated call: (dotted_name_var = dotted_name_rule()) != null  // dotted_name
            // node.name: a, call.assigned_variable: dotted_name_var
        // collecting vars: dotted_name_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' NAME])
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' NAME)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_37_var = _tmp_37_rule()) != null  // 'as' NAME
            // generated call: ((_opt_var = _tmp_37_rule()) != null || _opt_var == null)  // ['as' NAME]
            // node.name: b, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'dotted_name_var': 'SSTNode', '_opt_var': None}
        Object _opt_var = null;
        SSTNode dotted_name_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: dotted_name
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(dotted_name)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_name) - should work
            // REMOVE result call (dotted_name_var = dotted_name_rule()) != null  // dotted_name
            (dotted_name_var = dotted_name_rule()) != null  // dotted_name
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ['as' NAME]
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(['as' NAME])
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' NAME])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' NAME)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_37_var = _tmp_37_rule()) != null  // 'as' NAME
            // REMOVE result call ((_opt_var = _tmp_37_rule()) != null || _opt_var == null)  // ['as' NAME]
            ((_opt_var = _tmp_37_rule()) != null || _opt_var == null)  // ['as' NAME]
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, DOTTED_AS_NAME_ID, null);
    }

    // Left-recursive
    // dotted_name: dotted_name '.' NAME | NAME
    public SSTNode dotted_name_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // left recursion--
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Left Recursion Rule: dotted_name, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, DOTTED_NAME_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, DOTTED_NAME_ID);
        }
        int lastPos = pos;
        int endPos;
        SSTNode lastResult = null;
        cache.putResult(pos, DOTTED_NAME_ID, null);
        while(true) {
            reset(pos);
            SSTNode result = dotted_name_rule_body();
            endPos = mark();
            if (endPos <= lastPos) {
                break;
            }
            lastResult = result;
            lastPos = endPos;
            cache.putResult(pos, DOTTED_NAME_ID, result);
        }
        reset(lastPos);
        if (DEBUG) {
            debugMessageln("Result: " + lastResult);
            this.level--;
        }
        return lastResult;
    }

    // left-rersive rule body
    public SSTNode dotted_name_rule_body() {
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: dotted_name, pos: " + pos);
            this.level++;
        }
        // visiting Alt: dotted_name '.' NAME
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_name) - should work
            // generated call: (dotted_name_var = dotted_name_rule()) != null  // dotted_name
            // node.name: a, call.assigned_variable: dotted_name_var
        // collecting vars: dotted_name_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
            // generated call: (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: b, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        //    vars: {'dotted_name_var': 'SSTNode', '_literal': 'Token', 'name_var': 'Token'}
        Token _literal = null;
        SSTNode dotted_name_var = null;
        Token name_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: dotted_name
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(dotted_name)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_name) - should work
            // REMOVE result call (dotted_name_var = dotted_name_rule()) != null  // dotted_name
            (dotted_name_var = dotted_name_rule()) != null  // dotted_name
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '.'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('.')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
            // REMOVE result call (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: NAME
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: None, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        //    vars: {'name_var': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, DOTTED_NAME_ID, null);
    }

    // if_stmt:
    //     | 'if' named_expression ':' block elif_stmt
    //     | 'if' named_expression ':' block else_block?
    //     | invalid_if_stmt
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode if_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: if_stmt, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, IF_STMT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, IF_STMT_ID);
        }
        // visiting Alt: 'if' named_expression ':' block elif_stmt
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
            // generated call: (_keyword = expect(KEYWORD_IF)) != null  // token='if'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // generated call: (named_expression_var = named_expression_rule()) != null  // named_expression
            // node.name: a, call.assigned_variable: named_expression_var
        // collecting vars: named_expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // generated call: (block_var = block_rule()) != null  // block
            // node.name: b, call.assigned_variable: block_var
        // collecting vars: block_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(elif_stmt) - should work
        // TODO replacing stmt_ty --> SSTNode
            // generated call: (elif_stmt_var = elif_stmt_rule()) != null  // elif_stmt
            // node.name: c, call.assigned_variable: elif_stmt_var
        // collecting vars: elif_stmt_var, SSTNode
        //    vars: {'_keyword': 'Token', 'named_expression_var': 'SSTNode', '_literal': 'Token', 'block_var': 'SSTNode[]', 'elif_stmt_var': 'SSTNode'}
        Token _keyword = null;
        Token _literal = null;
        SSTNode[] block_var = null;
        SSTNode elif_stmt_var = null;
        SSTNode named_expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'if'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('if')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
            // REMOVE result call (_keyword = expect(KEYWORD_IF)) != null  // token='if'
            (_keyword = expect(KEYWORD_IF)) != null  // token='if'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: named_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(named_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // REMOVE result call (named_expression_var = named_expression_rule()) != null  // named_expression
            (named_expression_var = named_expression_rule()) != null  // named_expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // REMOVE result call (block_var = block_rule()) != null  // block
            (block_var = block_rule()) != null  // block
            &&
            // TODO visiting JavaParserGeneratorNamedItem: elif_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(elif_stmt)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(elif_stmt) - should work
            // TODO replacing stmt_ty --> SSTNode
            // REMOVE result call (elif_stmt_var = elif_stmt_rule()) != null  // elif_stmt
            (elif_stmt_var = elif_stmt_rule()) != null  // elif_stmt
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: 'if' named_expression ':' block else_block?
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
            // generated call: (_keyword = expect(KEYWORD_IF)) != null  // token='if'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // generated call: (named_expression_var = named_expression_rule()) != null  // named_expression
            // node.name: a, call.assigned_variable: named_expression_var
        // collecting vars: named_expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // generated call: (block_var = block_rule()) != null  // block
            // node.name: b, call.assigned_variable: block_var
        // collecting vars: block_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_38_var = _tmp_38_rule()) != null  // else_block
            // generated call: ((_opt_var = _tmp_38_rule()) != null || _opt_var == null)  // else_block?
            // node.name: c, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'_keyword': 'Token', 'named_expression_var': 'SSTNode', '_literal': 'Token', 'block_var': 'SSTNode[]', '_opt_var': None}
        Object _opt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'if'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('if')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
            // REMOVE result call (_keyword = expect(KEYWORD_IF)) != null  // token='if'
            (_keyword = expect(KEYWORD_IF)) != null  // token='if'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: named_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(named_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // REMOVE result call (named_expression_var = named_expression_rule()) != null  // named_expression
            (named_expression_var = named_expression_rule()) != null  // named_expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // REMOVE result call (block_var = block_rule()) != null  // block
            (block_var = block_rule()) != null  // block
            &&
            // TODO visiting JavaParserGeneratorNamedItem: else_block?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(else_block?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_38_var = _tmp_38_rule()) != null  // else_block
            // REMOVE result call ((_opt_var = _tmp_38_rule()) != null || _opt_var == null)  // else_block?
            ((_opt_var = _tmp_38_rule()) != null || _opt_var == null)  // else_block?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: invalid_if_stmt
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_if_stmt) - should work
            // generated call: (invalid_if_stmt_var = invalid_if_stmt_rule()) != null  // invalid_if_stmt
            // node.name: None, call.assigned_variable: invalid_if_stmt_var
        // collecting vars: invalid_if_stmt_var, None
        //    vars: {'invalid_if_stmt_var': None}
        Object invalid_if_stmt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: invalid_if_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_if_stmt)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_if_stmt) - should work
            // REMOVE result call (invalid_if_stmt_var = invalid_if_stmt_rule()) != null  // invalid_if_stmt
            (invalid_if_stmt_var = invalid_if_stmt_rule()) != null  // invalid_if_stmt
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, IF_STMT_ID, null);
    }

    // elif_stmt:
    //     | 'elif' named_expression ':' block elif_stmt
    //     | 'elif' named_expression ':' block else_block?
    //     | invalid_elif_stmt
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode elif_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: elif_stmt, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, ELIF_STMT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, ELIF_STMT_ID);
        }
        // visiting Alt: 'elif' named_expression ':' block elif_stmt
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('elif')
            // generated call: (_keyword = expect(KEYWORD_ELIF)) != null  // token='elif'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // generated call: (named_expression_var = named_expression_rule()) != null  // named_expression
            // node.name: a, call.assigned_variable: named_expression_var
        // collecting vars: named_expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // generated call: (block_var = block_rule()) != null  // block
            // node.name: b, call.assigned_variable: block_var
        // collecting vars: block_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(elif_stmt) - should work
        // TODO replacing stmt_ty --> SSTNode
            // generated call: (elif_stmt_var = elif_stmt_rule()) != null  // elif_stmt
            // node.name: c, call.assigned_variable: elif_stmt_var
        // collecting vars: elif_stmt_var, SSTNode
        //    vars: {'_keyword': 'Token', 'named_expression_var': 'SSTNode', '_literal': 'Token', 'block_var': 'SSTNode[]', 'elif_stmt_var': 'SSTNode'}
        Token _keyword = null;
        Token _literal = null;
        SSTNode[] block_var = null;
        SSTNode elif_stmt_var = null;
        SSTNode named_expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'elif'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('elif')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('elif')
            // REMOVE result call (_keyword = expect(KEYWORD_ELIF)) != null  // token='elif'
            (_keyword = expect(KEYWORD_ELIF)) != null  // token='elif'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: named_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(named_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // REMOVE result call (named_expression_var = named_expression_rule()) != null  // named_expression
            (named_expression_var = named_expression_rule()) != null  // named_expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // REMOVE result call (block_var = block_rule()) != null  // block
            (block_var = block_rule()) != null  // block
            &&
            // TODO visiting JavaParserGeneratorNamedItem: elif_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(elif_stmt)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(elif_stmt) - should work
            // TODO replacing stmt_ty --> SSTNode
            // REMOVE result call (elif_stmt_var = elif_stmt_rule()) != null  // elif_stmt
            (elif_stmt_var = elif_stmt_rule()) != null  // elif_stmt
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: 'elif' named_expression ':' block else_block?
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('elif')
            // generated call: (_keyword = expect(KEYWORD_ELIF)) != null  // token='elif'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // generated call: (named_expression_var = named_expression_rule()) != null  // named_expression
            // node.name: a, call.assigned_variable: named_expression_var
        // collecting vars: named_expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // generated call: (block_var = block_rule()) != null  // block
            // node.name: b, call.assigned_variable: block_var
        // collecting vars: block_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_39_var = _tmp_39_rule()) != null  // else_block
            // generated call: ((_opt_var = _tmp_39_rule()) != null || _opt_var == null)  // else_block?
            // node.name: c, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'_keyword': 'Token', 'named_expression_var': 'SSTNode', '_literal': 'Token', 'block_var': 'SSTNode[]', '_opt_var': None}
        Object _opt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'elif'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('elif')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('elif')
            // REMOVE result call (_keyword = expect(KEYWORD_ELIF)) != null  // token='elif'
            (_keyword = expect(KEYWORD_ELIF)) != null  // token='elif'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: named_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(named_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // REMOVE result call (named_expression_var = named_expression_rule()) != null  // named_expression
            (named_expression_var = named_expression_rule()) != null  // named_expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // REMOVE result call (block_var = block_rule()) != null  // block
            (block_var = block_rule()) != null  // block
            &&
            // TODO visiting JavaParserGeneratorNamedItem: else_block?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(else_block?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_39_var = _tmp_39_rule()) != null  // else_block
            // REMOVE result call ((_opt_var = _tmp_39_rule()) != null || _opt_var == null)  // else_block?
            ((_opt_var = _tmp_39_rule()) != null || _opt_var == null)  // else_block?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: invalid_elif_stmt
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_elif_stmt) - should work
            // generated call: (invalid_elif_stmt_var = invalid_elif_stmt_rule()) != null  // invalid_elif_stmt
            // node.name: None, call.assigned_variable: invalid_elif_stmt_var
        // collecting vars: invalid_elif_stmt_var, None
        //    vars: {'invalid_elif_stmt_var': None}
        Object invalid_elif_stmt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: invalid_elif_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_elif_stmt)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_elif_stmt) - should work
            // REMOVE result call (invalid_elif_stmt_var = invalid_elif_stmt_rule()) != null  // invalid_elif_stmt
            (invalid_elif_stmt_var = invalid_elif_stmt_rule()) != null  // invalid_elif_stmt
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, ELIF_STMT_ID, null);
    }

    // else_block: 'else' &&':' block
    // TODO replacing SSTNode* --> SSTNode[]
    public SSTNode[] else_block_rule() {
    // isLoop: False, isGather: False, type: SSTNode*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: else_block, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, ELSE_BLOCK_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, ELSE_BLOCK_ID);
        }
        // visiting Alt: 'else' &&':' block
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('else')
            // generated call: (_keyword = expect(KEYWORD_ELSE)) != null  // token='else'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // generated call: (block_var = block_rule()) != null  // block
            // node.name: b, call.assigned_variable: block_var
        // collecting vars: block_var, SSTNode[]
        //    vars: {'_keyword': 'Token', None: None, 'block_var': 'SSTNode[]'}
        Token _keyword = null;
        SSTNode[] block_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'else'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('else')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('else')
            // REMOVE result call (_keyword = expect(KEYWORD_ELSE)) != null  // token='else'
            (_keyword = expect(KEYWORD_ELSE)) != null  // token='else'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: &&':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&&':')
            // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
            // TODO call is not created &&':' -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // REMOVE result call (block_var = block_rule()) != null  // block
            (block_var = block_rule()) != null  // block
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, ELSE_BLOCK_ID, null);
    }

    // while_stmt: 'while' named_expression ':' block else_block? | invalid_while_stmt
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode while_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: while_stmt, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, WHILE_STMT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, WHILE_STMT_ID);
        }
        // visiting Alt: 'while' named_expression ':' block else_block?
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('while')
            // generated call: (_keyword = expect(KEYWORD_WHILE)) != null  // token='while'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // generated call: (named_expression_var = named_expression_rule()) != null  // named_expression
            // node.name: a, call.assigned_variable: named_expression_var
        // collecting vars: named_expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // generated call: (block_var = block_rule()) != null  // block
            // node.name: b, call.assigned_variable: block_var
        // collecting vars: block_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_40_var = _tmp_40_rule()) != null  // else_block
            // generated call: ((_opt_var = _tmp_40_rule()) != null || _opt_var == null)  // else_block?
            // node.name: c, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'_keyword': 'Token', 'named_expression_var': 'SSTNode', '_literal': 'Token', 'block_var': 'SSTNode[]', '_opt_var': None}
        Token _keyword = null;
        Token _literal = null;
        Object _opt_var = null;
        SSTNode[] block_var = null;
        SSTNode named_expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'while'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('while')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('while')
            // REMOVE result call (_keyword = expect(KEYWORD_WHILE)) != null  // token='while'
            (_keyword = expect(KEYWORD_WHILE)) != null  // token='while'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: named_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(named_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // REMOVE result call (named_expression_var = named_expression_rule()) != null  // named_expression
            (named_expression_var = named_expression_rule()) != null  // named_expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // REMOVE result call (block_var = block_rule()) != null  // block
            (block_var = block_rule()) != null  // block
            &&
            // TODO visiting JavaParserGeneratorNamedItem: else_block?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(else_block?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_40_var = _tmp_40_rule()) != null  // else_block
            // REMOVE result call ((_opt_var = _tmp_40_rule()) != null || _opt_var == null)  // else_block?
            ((_opt_var = _tmp_40_rule()) != null || _opt_var == null)  // else_block?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: invalid_while_stmt
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_while_stmt) - should work
            // generated call: (invalid_while_stmt_var = invalid_while_stmt_rule()) != null  // invalid_while_stmt
            // node.name: None, call.assigned_variable: invalid_while_stmt_var
        // collecting vars: invalid_while_stmt_var, None
        //    vars: {'invalid_while_stmt_var': None}
        Object invalid_while_stmt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: invalid_while_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_while_stmt)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_while_stmt) - should work
            // REMOVE result call (invalid_while_stmt_var = invalid_while_stmt_rule()) != null  // invalid_while_stmt
            (invalid_while_stmt_var = invalid_while_stmt_rule()) != null  // invalid_while_stmt
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, WHILE_STMT_ID, null);
    }

    // for_stmt:
    //     | 'for' star_targets 'in' ~ star_expressions &&':' TYPE_COMMENT? block else_block?
    //     | ASYNC 'for' star_targets 'in' ~ star_expressions &&':' TYPE_COMMENT? block else_block?
    //     | invalid_for_target
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode for_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: for_stmt, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, FOR_STMT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, FOR_STMT_ID);
        }
        // visiting Alt: 'for' star_targets 'in' ~ star_expressions &&':' TYPE_COMMENT? block else_block?
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('for')
            // generated call: (_keyword = expect(KEYWORD_FOR)) != null  // token='for'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
            // generated call: (star_targets_var = star_targets_rule()) != null  // star_targets
            // node.name: t, call.assigned_variable: star_targets_var
        // collecting vars: star_targets_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
            // generated call: (_keyword = expect(KEYWORD_IN)) != null  // token='in'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword_1, Token
        // TODO visiting JavaCallMakerVisitor.visit_Cut(~)
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // generated call: (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            // node.name: ex, call.assigned_variable: star_expressions_var
        // collecting vars: star_expressions_var, SSTNode
        // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(TYPE_COMMENT)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_41_var = _tmp_41_rule()) != null  // TYPE_COMMENT
            // generated call: ((_opt_var = _tmp_41_rule()) != null || _opt_var == null)  // TYPE_COMMENT?
            // node.name: tc, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // generated call: (block_var = block_rule()) != null  // block
            // node.name: b, call.assigned_variable: block_var
        // collecting vars: block_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_42_var = _tmp_42_rule()) != null  // else_block
            // generated call: ((_opt_var = _tmp_42_rule()) != null || _opt_var == null)  // else_block?
            // node.name: el, call.assigned_variable: _opt_var
        // collecting vars: _opt_var_1, None
        //    vars: {'_keyword': 'Token', 'star_targets_var': 'SSTNode', '_keyword_1': 'Token', None: None, 'star_expressions_var': 'SSTNode', '_opt_var': None, 'block_var': 'SSTNode[]', '_opt_var_1': None}
        Token _keyword = null;
        Token _keyword_1 = null;
        Object _opt_var = null;
        Object _opt_var_1 = null;
        SSTNode[] block_var = null;
        SSTNode star_expressions_var = null;
        SSTNode star_targets_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'for'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('for')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('for')
            // REMOVE result call (_keyword = expect(KEYWORD_FOR)) != null  // token='for'
            (_keyword = expect(KEYWORD_FOR)) != null  // token='for'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: star_targets
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_targets)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
            // REMOVE result call (star_targets_var = star_targets_rule()) != null  // star_targets
            (star_targets_var = star_targets_rule()) != null  // star_targets
            &&
            // TODO visiting JavaParserGeneratorNamedItem: 'in'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('in')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
            // REMOVE result call (_keyword = expect(KEYWORD_IN)) != null  // token='in'
            (_keyword_1 = expect(KEYWORD_IN)) != null  // token='in'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ~
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(~)
            // TODO visiting JavaCallMakerVisitor.visit_Cut(~)
            // TODO call is not created ~ -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: star_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expressions)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // REMOVE result call (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            &&
            // TODO visiting JavaParserGeneratorNamedItem: &&':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&&':')
            // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
            // TODO call is not created &&':' -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(TYPE_COMMENT)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_41_var = _tmp_41_rule()) != null  // TYPE_COMMENT
            // REMOVE result call ((_opt_var = _tmp_41_rule()) != null || _opt_var == null)  // TYPE_COMMENT?
            ((_opt_var = _tmp_41_rule()) != null || _opt_var == null)  // TYPE_COMMENT?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // REMOVE result call (block_var = block_rule()) != null  // block
            (block_var = block_rule()) != null  // block
            &&
            // TODO visiting JavaParserGeneratorNamedItem: else_block?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(else_block?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_42_var = _tmp_42_rule()) != null  // else_block
            // REMOVE result call ((_opt_var = _tmp_42_rule()) != null || _opt_var == null)  // else_block?
            ((_opt_var_1 = _tmp_42_rule()) != null || _opt_var_1 == null)  // else_block?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: ASYNC 'for' star_targets 'in' ~ star_expressions &&':' TYPE_COMMENT? block else_block?
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
            // generated call: (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            // node.name: None, call.assigned_variable: async_var
        // collecting vars: async_var, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('for')
            // generated call: (_keyword = expect(KEYWORD_FOR)) != null  // token='for'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
            // generated call: (star_targets_var = star_targets_rule()) != null  // star_targets
            // node.name: t, call.assigned_variable: star_targets_var
        // collecting vars: star_targets_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
            // generated call: (_keyword = expect(KEYWORD_IN)) != null  // token='in'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword_1, Token
        // TODO visiting JavaCallMakerVisitor.visit_Cut(~)
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // generated call: (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            // node.name: ex, call.assigned_variable: star_expressions_var
        // collecting vars: star_expressions_var, SSTNode
        // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(TYPE_COMMENT)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_43_var = _tmp_43_rule()) != null  // TYPE_COMMENT
            // generated call: ((_opt_var = _tmp_43_rule()) != null || _opt_var == null)  // TYPE_COMMENT?
            // node.name: tc, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // generated call: (block_var = block_rule()) != null  // block
            // node.name: b, call.assigned_variable: block_var
        // collecting vars: block_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_44_var = _tmp_44_rule()) != null  // else_block
            // generated call: ((_opt_var = _tmp_44_rule()) != null || _opt_var == null)  // else_block?
            // node.name: el, call.assigned_variable: _opt_var
        // collecting vars: _opt_var_1, None
        //    vars: {'async_var': 'Token', '_keyword': 'Token', 'star_targets_var': 'SSTNode', '_keyword_1': 'Token', None: None, 'star_expressions_var': 'SSTNode', '_opt_var': None, 'block_var': 'SSTNode[]', '_opt_var_1': None}
        Token async_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ASYNC
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(ASYNC)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
            // REMOVE result call (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: 'for'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('for')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('for')
            // REMOVE result call (_keyword = expect(KEYWORD_FOR)) != null  // token='for'
            (_keyword = expect(KEYWORD_FOR)) != null  // token='for'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: star_targets
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_targets)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
            // REMOVE result call (star_targets_var = star_targets_rule()) != null  // star_targets
            (star_targets_var = star_targets_rule()) != null  // star_targets
            &&
            // TODO visiting JavaParserGeneratorNamedItem: 'in'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('in')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
            // REMOVE result call (_keyword = expect(KEYWORD_IN)) != null  // token='in'
            (_keyword_1 = expect(KEYWORD_IN)) != null  // token='in'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ~
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(~)
            // TODO visiting JavaCallMakerVisitor.visit_Cut(~)
            // TODO call is not created ~ -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: star_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expressions)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // REMOVE result call (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            &&
            // TODO visiting JavaParserGeneratorNamedItem: &&':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&&':')
            // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
            // TODO call is not created &&':' -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(TYPE_COMMENT)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_43_var = _tmp_43_rule()) != null  // TYPE_COMMENT
            // REMOVE result call ((_opt_var = _tmp_43_rule()) != null || _opt_var == null)  // TYPE_COMMENT?
            ((_opt_var = _tmp_43_rule()) != null || _opt_var == null)  // TYPE_COMMENT?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // REMOVE result call (block_var = block_rule()) != null  // block
            (block_var = block_rule()) != null  // block
            &&
            // TODO visiting JavaParserGeneratorNamedItem: else_block?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(else_block?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_44_var = _tmp_44_rule()) != null  // else_block
            // REMOVE result call ((_opt_var = _tmp_44_rule()) != null || _opt_var == null)  // else_block?
            ((_opt_var_1 = _tmp_44_rule()) != null || _opt_var_1 == null)  // else_block?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: invalid_for_target
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_for_target) - should work
            // generated call: (invalid_for_target_var = invalid_for_target_rule()) != null  // invalid_for_target
            // node.name: None, call.assigned_variable: invalid_for_target_var
        // collecting vars: invalid_for_target_var, None
        //    vars: {'invalid_for_target_var': None}
        Object invalid_for_target_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: invalid_for_target
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_for_target)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_for_target) - should work
            // REMOVE result call (invalid_for_target_var = invalid_for_target_rule()) != null  // invalid_for_target
            (invalid_for_target_var = invalid_for_target_rule()) != null  // invalid_for_target
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, FOR_STMT_ID, null);
    }

    // with_stmt:
    //     | 'with' '(' ','.with_item+ ','? ')' ':' block
    //     | 'with' ','.with_item+ ':' TYPE_COMMENT? block
    //     | ASYNC 'with' '(' ','.with_item+ ','? ')' ':' block
    //     | ASYNC 'with' ','.with_item+ ':' TYPE_COMMENT? block
    //     | invalid_with_stmt
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode with_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: with_stmt, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, WITH_STMT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, WITH_STMT_ID);
        }
        // visiting Alt: 'with' '(' ','.with_item+ ','? ')' ':' block
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
            // generated call: (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.with_item+)
            // generated call: (_gather_45_var = _gather_45_rule()) != null  // ','.with_item+
            // node.name: a, call.assigned_variable: _gather_45_var
        // collecting vars: _gather_45_var, asdl_withitem_seq*
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // generated call: ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
            // node.name: None, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_2, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // generated call: (block_var = block_rule()) != null  // block
            // node.name: b, call.assigned_variable: block_var
        // collecting vars: block_var, SSTNode[]
        //    vars: {'_keyword': 'Token', '_literal': 'Token', '_gather_45_var': 'asdl_withitem_seq*', '_opt_var': None, '_literal_1': 'Token', '_literal_2': 'Token', 'block_var': 'SSTNode[]'}
        // TODO replacing asdl_withitem_seq* --> SSTNode[]
        SSTNode[] _gather_45_var = null;
        Token _keyword = null;
        Token _literal = null;
        Token _literal_1 = null;
        Token _literal_2 = null;
        Object _opt_var = null;
        SSTNode[] block_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'with'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('with')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
            // REMOVE result call (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
            (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','.with_item+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.with_item+)
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.with_item+)
            // REMOVE result call (_gather_45_var = _gather_45_rule()) != null  // ','.with_item+
            (_gather_45_var = (SSTNode[])_gather_45_rule()) != null  // ','.with_item+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // REMOVE result call ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
            ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            (_literal_2 = expect(Token.Kind.COLON)) != null  // token=':'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // REMOVE result call (block_var = block_rule()) != null  // block
            (block_var = block_rule()) != null  // block
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: 'with' ','.with_item+ ':' TYPE_COMMENT? block
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
            // generated call: (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.with_item+)
            // generated call: (_gather_47_var = _gather_47_rule()) != null  // ','.with_item+
            // node.name: a, call.assigned_variable: _gather_47_var
        // collecting vars: _gather_47_var, asdl_withitem_seq*
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(TYPE_COMMENT)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_49_var = _tmp_49_rule()) != null  // TYPE_COMMENT
            // generated call: ((_opt_var = _tmp_49_rule()) != null || _opt_var == null)  // TYPE_COMMENT?
            // node.name: tc, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // generated call: (block_var = block_rule()) != null  // block
            // node.name: b, call.assigned_variable: block_var
        // collecting vars: block_var, SSTNode[]
        //    vars: {'_keyword': 'Token', '_gather_47_var': 'asdl_withitem_seq*', '_literal': 'Token', '_opt_var': None, 'block_var': 'SSTNode[]'}
        // TODO replacing asdl_withitem_seq* --> SSTNode[]
        SSTNode[] _gather_47_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'with'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('with')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
            // REMOVE result call (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
            (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','.with_item+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.with_item+)
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.with_item+)
            // REMOVE result call (_gather_47_var = _gather_47_rule()) != null  // ','.with_item+
            (_gather_47_var = (SSTNode[])_gather_47_rule()) != null  // ','.with_item+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(TYPE_COMMENT)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_49_var = _tmp_49_rule()) != null  // TYPE_COMMENT
            // REMOVE result call ((_opt_var = _tmp_49_rule()) != null || _opt_var == null)  // TYPE_COMMENT?
            ((_opt_var = _tmp_49_rule()) != null || _opt_var == null)  // TYPE_COMMENT?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // REMOVE result call (block_var = block_rule()) != null  // block
            (block_var = block_rule()) != null  // block
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: ASYNC 'with' '(' ','.with_item+ ','? ')' ':' block
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
            // generated call: (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            // node.name: None, call.assigned_variable: async_var
        // collecting vars: async_var, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
            // generated call: (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.with_item+)
            // generated call: (_gather_50_var = _gather_50_rule()) != null  // ','.with_item+
            // node.name: a, call.assigned_variable: _gather_50_var
        // collecting vars: _gather_50_var, asdl_withitem_seq*
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // generated call: ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
            // node.name: None, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_2, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // generated call: (block_var = block_rule()) != null  // block
            // node.name: b, call.assigned_variable: block_var
        // collecting vars: block_var, SSTNode[]
        //    vars: {'async_var': 'Token', '_keyword': 'Token', '_literal': 'Token', '_gather_50_var': 'asdl_withitem_seq*', '_opt_var': None, '_literal_1': 'Token', '_literal_2': 'Token', 'block_var': 'SSTNode[]'}
        // TODO replacing asdl_withitem_seq* --> SSTNode[]
        SSTNode[] _gather_50_var = null;
        Token async_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ASYNC
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(ASYNC)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
            // REMOVE result call (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: 'with'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('with')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
            // REMOVE result call (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
            (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','.with_item+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.with_item+)
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.with_item+)
            // REMOVE result call (_gather_50_var = _gather_50_rule()) != null  // ','.with_item+
            (_gather_50_var = (SSTNode[])_gather_50_rule()) != null  // ','.with_item+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // REMOVE result call ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
            ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            (_literal_2 = expect(Token.Kind.COLON)) != null  // token=':'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // REMOVE result call (block_var = block_rule()) != null  // block
            (block_var = block_rule()) != null  // block
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: ASYNC 'with' ','.with_item+ ':' TYPE_COMMENT? block
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
            // generated call: (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            // node.name: None, call.assigned_variable: async_var
        // collecting vars: async_var, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
            // generated call: (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.with_item+)
            // generated call: (_gather_52_var = _gather_52_rule()) != null  // ','.with_item+
            // node.name: a, call.assigned_variable: _gather_52_var
        // collecting vars: _gather_52_var, asdl_withitem_seq*
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(TYPE_COMMENT)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_54_var = _tmp_54_rule()) != null  // TYPE_COMMENT
            // generated call: ((_opt_var = _tmp_54_rule()) != null || _opt_var == null)  // TYPE_COMMENT?
            // node.name: tc, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // generated call: (block_var = block_rule()) != null  // block
            // node.name: b, call.assigned_variable: block_var
        // collecting vars: block_var, SSTNode[]
        //    vars: {'async_var': 'Token', '_keyword': 'Token', '_gather_52_var': 'asdl_withitem_seq*', '_literal': 'Token', '_opt_var': None, 'block_var': 'SSTNode[]'}
        // TODO replacing asdl_withitem_seq* --> SSTNode[]
        SSTNode[] _gather_52_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ASYNC
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(ASYNC)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
            // REMOVE result call (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: 'with'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('with')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
            // REMOVE result call (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
            (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','.with_item+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.with_item+)
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.with_item+)
            // REMOVE result call (_gather_52_var = _gather_52_rule()) != null  // ','.with_item+
            (_gather_52_var = (SSTNode[])_gather_52_rule()) != null  // ','.with_item+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(TYPE_COMMENT)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_54_var = _tmp_54_rule()) != null  // TYPE_COMMENT
            // REMOVE result call ((_opt_var = _tmp_54_rule()) != null || _opt_var == null)  // TYPE_COMMENT?
            ((_opt_var = _tmp_54_rule()) != null || _opt_var == null)  // TYPE_COMMENT?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // REMOVE result call (block_var = block_rule()) != null  // block
            (block_var = block_rule()) != null  // block
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: invalid_with_stmt
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_with_stmt) - should work
            // generated call: (invalid_with_stmt_var = invalid_with_stmt_rule()) != null  // invalid_with_stmt
            // node.name: None, call.assigned_variable: invalid_with_stmt_var
        // collecting vars: invalid_with_stmt_var, None
        //    vars: {'invalid_with_stmt_var': None}
        Object invalid_with_stmt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: invalid_with_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_with_stmt)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_with_stmt) - should work
            // REMOVE result call (invalid_with_stmt_var = invalid_with_stmt_rule()) != null  // invalid_with_stmt
            (invalid_with_stmt_var = invalid_with_stmt_rule()) != null  // invalid_with_stmt
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, WITH_STMT_ID, null);
    }

    // with_item:
    //     | expression 'as' star_target &(',' | ')' | ':')
    //     | invalid_with_item
    //     | expression
    // TODO replacing withitem_ty --> SSTNode
    public SSTNode with_item_rule() {
    // isLoop: False, isGather: False, type: withitem_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: with_item, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, WITH_ITEM_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, WITH_ITEM_ID);
        }
        // visiting Alt: expression 'as' star_target &(',' | ')' | ':')
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: e, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
            // generated call: (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // generated call: (star_target_var = star_target_rule()) != null  // star_target
            // node.name: t, call.assigned_variable: star_target_var
        // collecting vars: star_target_var, SSTNode
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&(',' | ')' | ':'))
            // generated call: None
        // collecting vars: None, None
        //    vars: {'expression_var': 'SSTNode', '_keyword': 'Token', 'star_target_var': 'SSTNode', None: None}
        Token _keyword = null;
        SSTNode expression_var = null;
        SSTNode star_target_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: 'as'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('as')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
            // REMOVE result call (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: star_target
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_target)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // REMOVE result call (star_target_var = star_target_rule()) != null  // star_target
            (star_target_var = star_target_rule()) != null  // star_target
            &&
            // TODO visiting JavaParserGeneratorNamedItem: &(',' | ')' | ':')
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&(',' | ')' | ':'))
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&(',' | ')' | ':'))
            // TODO call is not created &(',' | ')' | ':') -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: invalid_with_item
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_with_item) - should work
            // generated call: (invalid_with_item_var = invalid_with_item_rule()) != null  // invalid_with_item
            // node.name: None, call.assigned_variable: invalid_with_item_var
        // collecting vars: invalid_with_item_var, None
        //    vars: {'invalid_with_item_var': None}
        Object invalid_with_item_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: invalid_with_item
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_with_item)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_with_item) - should work
            // REMOVE result call (invalid_with_item_var = invalid_with_item_rule()) != null  // invalid_with_item
            (invalid_with_item_var = invalid_with_item_rule()) != null  // invalid_with_item
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: expression
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: e, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        //    vars: {'expression_var': 'SSTNode'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, WITH_ITEM_ID, null);
    }

    // try_stmt:
    //     | 'try' &&':' block finally_block
    //     | 'try' &&':' block except_block+ else_block? finally_block?
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode try_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: try_stmt, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, TRY_STMT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, TRY_STMT_ID);
        }
        // visiting Alt: 'try' &&':' block finally_block
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('try')
            // generated call: (_keyword = expect(KEYWORD_TRY)) != null  // token='try'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // generated call: (block_var = block_rule()) != null  // block
            // node.name: b, call.assigned_variable: block_var
        // collecting vars: block_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(finally_block) - should work
            // generated call: (finally_block_var = finally_block_rule()) != null  // finally_block
            // node.name: f, call.assigned_variable: finally_block_var
        // collecting vars: finally_block_var, SSTNode[]
        //    vars: {'_keyword': 'Token', None: None, 'block_var': 'SSTNode[]', 'finally_block_var': 'SSTNode[]'}
        Token _keyword = null;
        SSTNode[] block_var = null;
        SSTNode[] finally_block_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'try'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('try')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('try')
            // REMOVE result call (_keyword = expect(KEYWORD_TRY)) != null  // token='try'
            (_keyword = expect(KEYWORD_TRY)) != null  // token='try'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: &&':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&&':')
            // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
            // TODO call is not created &&':' -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // REMOVE result call (block_var = block_rule()) != null  // block
            (block_var = block_rule()) != null  // block
            &&
            // TODO visiting JavaParserGeneratorNamedItem: finally_block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(finally_block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(finally_block) - should work
            // REMOVE result call (finally_block_var = finally_block_rule()) != null  // finally_block
            (finally_block_var = finally_block_rule()) != null  // finally_block
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: 'try' &&':' block except_block+ else_block? finally_block?
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('try')
            // generated call: (_keyword = expect(KEYWORD_TRY)) != null  // token='try'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // generated call: (block_var = block_rule()) != null  // block
            // node.name: b, call.assigned_variable: block_var
        // collecting vars: block_var, SSTNode[]
        // TODO visiting JavaCallMakerVisitor.visit_Repeat1(except_block+)
            // generated call: (_loop1_55_var = _loop1_55_rule()) != null  // except_block+
            // node.name: ex, call.assigned_variable: _loop1_55_var
        // collecting vars: _loop1_55_var, asdl_excepthandler_seq*
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_56_var = _tmp_56_rule()) != null  // else_block
            // generated call: ((_opt_var = _tmp_56_rule()) != null || _opt_var == null)  // else_block?
            // node.name: el, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(finally_block?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(finally_block)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_57_var = _tmp_57_rule()) != null  // finally_block
            // generated call: ((_opt_var = _tmp_57_rule()) != null || _opt_var == null)  // finally_block?
            // node.name: f, call.assigned_variable: _opt_var
        // collecting vars: _opt_var_1, None
        //    vars: {'_keyword': 'Token', None: None, 'block_var': 'SSTNode[]', '_loop1_55_var': 'asdl_excepthandler_seq*', '_opt_var': None, '_opt_var_1': None}
        // TODO replacing asdl_excepthandler_seq* --> SSTNode[]
        SSTNode[] _loop1_55_var = null;
        Object _opt_var = null;
        Object _opt_var_1 = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'try'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('try')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('try')
            // REMOVE result call (_keyword = expect(KEYWORD_TRY)) != null  // token='try'
            (_keyword = expect(KEYWORD_TRY)) != null  // token='try'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: &&':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&&':')
            // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
            // TODO call is not created &&':' -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // REMOVE result call (block_var = block_rule()) != null  // block
            (block_var = block_rule()) != null  // block
            &&
            // TODO visiting JavaParserGeneratorNamedItem: except_block+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(except_block+)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(except_block+)
            // REMOVE result call (_loop1_55_var = _loop1_55_rule()) != null  // except_block+
            (_loop1_55_var = (SSTNode[])_loop1_55_rule()) != null  // except_block+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: else_block?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(else_block?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_56_var = _tmp_56_rule()) != null  // else_block
            // REMOVE result call ((_opt_var = _tmp_56_rule()) != null || _opt_var == null)  // else_block?
            ((_opt_var = _tmp_56_rule()) != null || _opt_var == null)  // else_block?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: finally_block?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(finally_block?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(finally_block?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(finally_block)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_57_var = _tmp_57_rule()) != null  // finally_block
            // REMOVE result call ((_opt_var = _tmp_57_rule()) != null || _opt_var == null)  // finally_block?
            ((_opt_var_1 = _tmp_57_rule()) != null || _opt_var_1 == null)  // finally_block?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, TRY_STMT_ID, null);
    }

    // except_block:
    //     | 'except' expression ['as' NAME] ':' block
    //     | 'except' ':' block
    //     | invalid_except_block
    // TODO replacing excepthandler_ty --> SSTNode
    public SSTNode except_block_rule() {
    // isLoop: False, isGather: False, type: excepthandler_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: except_block, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, EXCEPT_BLOCK_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, EXCEPT_BLOCK_ID);
        }
        // visiting Alt: 'except' expression ['as' NAME] ':' block
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('except')
            // generated call: (_keyword = expect(KEYWORD_EXCEPT)) != null  // token='except'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: e, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' NAME])
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' NAME)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_58_var = _tmp_58_rule()) != null  // 'as' NAME
            // generated call: ((_opt_var = _tmp_58_rule()) != null || _opt_var == null)  // ['as' NAME]
            // node.name: t, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // generated call: (block_var = block_rule()) != null  // block
            // node.name: b, call.assigned_variable: block_var
        // collecting vars: block_var, SSTNode[]
        //    vars: {'_keyword': 'Token', 'expression_var': 'SSTNode', '_opt_var': None, '_literal': 'Token', 'block_var': 'SSTNode[]'}
        Token _keyword = null;
        Token _literal = null;
        Object _opt_var = null;
        SSTNode[] block_var = null;
        SSTNode expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'except'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('except')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('except')
            // REMOVE result call (_keyword = expect(KEYWORD_EXCEPT)) != null  // token='except'
            (_keyword = expect(KEYWORD_EXCEPT)) != null  // token='except'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ['as' NAME]
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(['as' NAME])
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' NAME])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' NAME)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_58_var = _tmp_58_rule()) != null  // 'as' NAME
            // REMOVE result call ((_opt_var = _tmp_58_rule()) != null || _opt_var == null)  // ['as' NAME]
            ((_opt_var = _tmp_58_rule()) != null || _opt_var == null)  // ['as' NAME]
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // REMOVE result call (block_var = block_rule()) != null  // block
            (block_var = block_rule()) != null  // block
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: 'except' ':' block
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('except')
            // generated call: (_keyword = expect(KEYWORD_EXCEPT)) != null  // token='except'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // generated call: (block_var = block_rule()) != null  // block
            // node.name: b, call.assigned_variable: block_var
        // collecting vars: block_var, SSTNode[]
        //    vars: {'_keyword': 'Token', '_literal': 'Token', 'block_var': 'SSTNode[]'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'except'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('except')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('except')
            // REMOVE result call (_keyword = expect(KEYWORD_EXCEPT)) != null  // token='except'
            (_keyword = expect(KEYWORD_EXCEPT)) != null  // token='except'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // REMOVE result call (block_var = block_rule()) != null  // block
            (block_var = block_rule()) != null  // block
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: invalid_except_block
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_except_block) - should work
            // generated call: (invalid_except_block_var = invalid_except_block_rule()) != null  // invalid_except_block
            // node.name: None, call.assigned_variable: invalid_except_block_var
        // collecting vars: invalid_except_block_var, None
        //    vars: {'invalid_except_block_var': None}
        Object invalid_except_block_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: invalid_except_block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_except_block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_except_block) - should work
            // REMOVE result call (invalid_except_block_var = invalid_except_block_rule()) != null  // invalid_except_block
            (invalid_except_block_var = invalid_except_block_rule()) != null  // invalid_except_block
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, EXCEPT_BLOCK_ID, null);
    }

    // finally_block: 'finally' ':' block
    // TODO replacing SSTNode* --> SSTNode[]
    public SSTNode[] finally_block_rule() {
    // isLoop: False, isGather: False, type: SSTNode*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: finally_block, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, FINALLY_BLOCK_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, FINALLY_BLOCK_ID);
        }
        // visiting Alt: 'finally' ':' block
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('finally')
            // generated call: (_keyword = expect(KEYWORD_FINALLY)) != null  // token='finally'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // generated call: (block_var = block_rule()) != null  // block
            // node.name: a, call.assigned_variable: block_var
        // collecting vars: block_var, SSTNode[]
        //    vars: {'_keyword': 'Token', '_literal': 'Token', 'block_var': 'SSTNode[]'}
        Token _keyword = null;
        Token _literal = null;
        SSTNode[] block_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'finally'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('finally')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('finally')
            // REMOVE result call (_keyword = expect(KEYWORD_FINALLY)) != null  // token='finally'
            (_keyword = expect(KEYWORD_FINALLY)) != null  // token='finally'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // REMOVE result call (block_var = block_rule()) != null  // block
            (block_var = block_rule()) != null  // block
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, FINALLY_BLOCK_ID, null);
    }

    // match_stmt:
    //     | "match" subject_expr ':' NEWLINE INDENT case_block+ DEDENT
    //     | invalid_match_stmt
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode match_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: match_stmt, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, MATCH_STMT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, MATCH_STMT_ID);
        }
        // visiting Alt: "match" subject_expr ':' NEWLINE INDENT case_block+ DEDENT
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf("match")
            // generated call: (_keyword = expect("match")) != null  // soft_keyword='"match"'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(subject_expr) - should work
            // generated call: (subject_expr_var = subject_expr_rule()) != null  // subject_expr
            // node.name: subject, call.assigned_variable: subject_expr_var
        // collecting vars: subject_expr_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // generated call: (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            // node.name: None, call.assigned_variable: newline_var
        // collecting vars: newline_var, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(INDENT) - should work
            // generated call: (indent_var = expect(Token.Kind.INDENT)) != null  // token='INDENT'
            // node.name: None, call.assigned_variable: indent_var
        // collecting vars: indent_var, Token
        // TODO visiting JavaCallMakerVisitor.visit_Repeat1(case_block+)
            // generated call: (_loop1_59_var = _loop1_59_rule()) != null  // case_block+
            // node.name: cases, call.assigned_variable: _loop1_59_var
        // collecting vars: _loop1_59_var, asdl_match_case_seq*
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(DEDENT) - should work
            // generated call: (dedent_var = expect(Token.Kind.DEDENT)) != null  // token='DEDENT'
            // node.name: None, call.assigned_variable: dedent_var
        // collecting vars: dedent_var, Token
        //    vars: {'_keyword': 'Token', 'subject_expr_var': 'SSTNode', '_literal': 'Token', 'newline_var': 'Token', 'indent_var': 'Token', '_loop1_59_var': 'asdl_match_case_seq*', 'dedent_var': 'Token'}
        Token _keyword = null;
        Token _literal = null;
        // TODO replacing asdl_match_case_seq* --> SSTNode[]
        SSTNode[] _loop1_59_var = null;
        Token dedent_var = null;
        Token indent_var = null;
        Token newline_var = null;
        SSTNode subject_expr_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: "match"
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem("match")
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf("match")
            // REMOVE result call (_keyword = expect("match")) != null  // soft_keyword='"match"'
            (_keyword = expect("match")) != null  // soft_keyword='"match"'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: subject_expr
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(subject_expr)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(subject_expr) - should work
            // REMOVE result call (subject_expr_var = subject_expr_rule()) != null  // subject_expr
            (subject_expr_var = subject_expr_rule()) != null  // subject_expr
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NEWLINE
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // REMOVE result call (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: INDENT
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(INDENT)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(INDENT) - should work
            // REMOVE result call (indent_var = expect(Token.Kind.INDENT)) != null  // token='INDENT'
            (indent_var = expect(Token.Kind.INDENT)) != null  // token='INDENT'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: case_block+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(case_block+)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(case_block+)
            // REMOVE result call (_loop1_59_var = _loop1_59_rule()) != null  // case_block+
            (_loop1_59_var = (SSTNode[])_loop1_59_rule()) != null  // case_block+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: DEDENT
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(DEDENT)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(DEDENT) - should work
            // REMOVE result call (dedent_var = expect(Token.Kind.DEDENT)) != null  // token='DEDENT'
            (dedent_var = expect(Token.Kind.DEDENT)) != null  // token='DEDENT'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: invalid_match_stmt
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_match_stmt) - should work
            // generated call: (invalid_match_stmt_var = invalid_match_stmt_rule()) != null  // invalid_match_stmt
            // node.name: None, call.assigned_variable: invalid_match_stmt_var
        // collecting vars: invalid_match_stmt_var, None
        //    vars: {'invalid_match_stmt_var': None}
        Object invalid_match_stmt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: invalid_match_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_match_stmt)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_match_stmt) - should work
            // REMOVE result call (invalid_match_stmt_var = invalid_match_stmt_rule()) != null  // invalid_match_stmt
            (invalid_match_stmt_var = invalid_match_stmt_rule()) != null  // invalid_match_stmt
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, MATCH_STMT_ID, null);
    }

    // subject_expr: star_named_expression ',' star_named_expressions? | named_expression
    public SSTNode subject_expr_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: subject_expr, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, SUBJECT_EXPR_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, SUBJECT_EXPR_ID);
        }
        // visiting Alt: star_named_expression ',' star_named_expressions?
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
            // generated call: (star_named_expression_var = star_named_expression_rule()) != null  // star_named_expression
            // node.name: value, call.assigned_variable: star_named_expression_var
        // collecting vars: star_named_expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_named_expressions?)
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
        // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // JavaCallMakerVisitor.visit_Opt.generated call: (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
            // generated call: ((_opt_var = star_named_expressions_rule()) != null || _opt_var == null)  // star_named_expressions?
            // node.name: values, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'star_named_expression_var': 'SSTNode', '_literal': 'Token', '_opt_var': None}
        Token _literal = null;
        Object _opt_var = null;
        SSTNode star_named_expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_named_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_named_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
            // REMOVE result call (star_named_expression_var = star_named_expression_rule()) != null  // star_named_expression
            (star_named_expression_var = star_named_expression_rule()) != null  // star_named_expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: star_named_expressions?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_named_expressions?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_named_expressions?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // JavaCallMakerVisitor.visit_Opt.generated call: (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
            // REMOVE result call ((_opt_var = star_named_expressions_rule()) != null || _opt_var == null)  // star_named_expressions?
            ((_opt_var = star_named_expressions_rule()) != null || _opt_var == null)  // star_named_expressions?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: named_expression
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // generated call: (named_expression_var = named_expression_rule()) != null  // named_expression
            // node.name: None, call.assigned_variable: named_expression_var
        // collecting vars: named_expression_var, SSTNode
        //    vars: {'named_expression_var': 'SSTNode'}
        SSTNode named_expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: named_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(named_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // REMOVE result call (named_expression_var = named_expression_rule()) != null  // named_expression
            (named_expression_var = named_expression_rule()) != null  // named_expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, SUBJECT_EXPR_ID, null);
    }

    // case_block: "case" patterns guard? ':' block | invalid_case_block
    // TODO replacing match_case_ty --> SSTNode
    public SSTNode case_block_rule() {
    // isLoop: False, isGather: False, type: match_case_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: case_block, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, CASE_BLOCK_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, CASE_BLOCK_ID);
        }
        // visiting Alt: "case" patterns guard? ':' block
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf("case")
            // generated call: (_keyword = expect("case")) != null  // soft_keyword='"case"'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(patterns) - should work
            // generated call: (patterns_var = patterns_rule()) != null  // patterns
            // node.name: pattern, call.assigned_variable: patterns_var
        // collecting vars: patterns_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(guard?)
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(guard) - should work
            // JavaCallMakerVisitor.visit_Opt.generated call: (guard_var = guard_rule()) != null  // guard
            // generated call: ((_opt_var = guard_rule()) != null || _opt_var == null)  // guard?
            // node.name: guard, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // generated call: (block_var = block_rule()) != null  // block
            // node.name: body, call.assigned_variable: block_var
        // collecting vars: block_var, SSTNode[]
        //    vars: {'_keyword': 'Token', 'patterns_var': 'SSTNode', '_opt_var': None, '_literal': 'Token', 'block_var': 'SSTNode[]'}
        Token _keyword = null;
        Token _literal = null;
        Object _opt_var = null;
        SSTNode[] block_var = null;
        SSTNode patterns_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: "case"
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem("case")
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf("case")
            // REMOVE result call (_keyword = expect("case")) != null  // soft_keyword='"case"'
            (_keyword = expect("case")) != null  // soft_keyword='"case"'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: patterns
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(patterns)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(patterns) - should work
            // REMOVE result call (patterns_var = patterns_rule()) != null  // patterns
            (patterns_var = patterns_rule()) != null  // patterns
            &&
            // TODO visiting JavaParserGeneratorNamedItem: guard?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(guard?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(guard?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(guard) - should work
                // JavaCallMakerVisitor.visit_Opt.generated call: (guard_var = guard_rule()) != null  // guard
            // REMOVE result call ((_opt_var = guard_rule()) != null || _opt_var == null)  // guard?
            ((_opt_var = guard_rule()) != null || _opt_var == null)  // guard?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // REMOVE result call (block_var = block_rule()) != null  // block
            (block_var = block_rule()) != null  // block
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: invalid_case_block
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_case_block) - should work
            // generated call: (invalid_case_block_var = invalid_case_block_rule()) != null  // invalid_case_block
            // node.name: None, call.assigned_variable: invalid_case_block_var
        // collecting vars: invalid_case_block_var, None
        //    vars: {'invalid_case_block_var': None}
        Object invalid_case_block_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: invalid_case_block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_case_block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_case_block) - should work
            // REMOVE result call (invalid_case_block_var = invalid_case_block_rule()) != null  // invalid_case_block
            (invalid_case_block_var = invalid_case_block_rule()) != null  // invalid_case_block
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, CASE_BLOCK_ID, null);
    }

    // guard: 'if' named_expression
    public SSTNode guard_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: guard, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, GUARD_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, GUARD_ID);
        }
        // visiting Alt: 'if' named_expression
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
            // generated call: (_keyword = expect(KEYWORD_IF)) != null  // token='if'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // generated call: (named_expression_var = named_expression_rule()) != null  // named_expression
            // node.name: guard, call.assigned_variable: named_expression_var
        // collecting vars: named_expression_var, SSTNode
        //    vars: {'_keyword': 'Token', 'named_expression_var': 'SSTNode'}
        Token _keyword = null;
        SSTNode named_expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'if'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('if')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
            // REMOVE result call (_keyword = expect(KEYWORD_IF)) != null  // token='if'
            (_keyword = expect(KEYWORD_IF)) != null  // token='if'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: named_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(named_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // REMOVE result call (named_expression_var = named_expression_rule()) != null  // named_expression
            (named_expression_var = named_expression_rule()) != null  // named_expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, GUARD_ID, null);
    }

    // patterns: open_sequence_pattern | pattern
    public SSTNode patterns_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: patterns, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, PATTERNS_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, PATTERNS_ID);
        }
        // visiting Alt: open_sequence_pattern
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(open_sequence_pattern) - should work
        // TODO replacing asdl_seq[] --> SSTNode[]
            // generated call: (open_sequence_pattern_var = open_sequence_pattern_rule()) != null  // open_sequence_pattern
            // node.name: values, call.assigned_variable: open_sequence_pattern_var
        // collecting vars: open_sequence_pattern_var, asdl_expr_seq*
        //    vars: {'open_sequence_pattern_var': 'asdl_expr_seq*'}
        // TODO replacing asdl_expr_seq* --> SSTNode[]
        SSTNode[] open_sequence_pattern_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: open_sequence_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(open_sequence_pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(open_sequence_pattern) - should work
            // TODO replacing asdl_seq[] --> SSTNode[]
            // REMOVE result call (open_sequence_pattern_var = open_sequence_pattern_rule()) != null  // open_sequence_pattern
            (open_sequence_pattern_var = (SSTNode[])open_sequence_pattern_rule()) != null  // open_sequence_pattern
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: pattern
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
            // generated call: (pattern_var = pattern_rule()) != null  // pattern
            // node.name: None, call.assigned_variable: pattern_var
        // collecting vars: pattern_var, SSTNode
        //    vars: {'pattern_var': 'SSTNode'}
        SSTNode pattern_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
            // REMOVE result call (pattern_var = pattern_rule()) != null  // pattern
            (pattern_var = pattern_rule()) != null  // pattern
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, PATTERNS_ID, null);
    }

    // pattern: as_pattern | or_pattern
    public SSTNode pattern_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: pattern, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, PATTERN_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, PATTERN_ID);
        }
        // visiting Alt: as_pattern
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(as_pattern) - should work
            // generated call: (as_pattern_var = as_pattern_rule()) != null  // as_pattern
            // node.name: None, call.assigned_variable: as_pattern_var
        // collecting vars: as_pattern_var, SSTNode
        //    vars: {'as_pattern_var': 'SSTNode'}
        SSTNode as_pattern_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: as_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(as_pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(as_pattern) - should work
            // REMOVE result call (as_pattern_var = as_pattern_rule()) != null  // as_pattern
            (as_pattern_var = as_pattern_rule()) != null  // as_pattern
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: or_pattern
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(or_pattern) - should work
            // generated call: (or_pattern_var = or_pattern_rule()) != null  // or_pattern
            // node.name: None, call.assigned_variable: or_pattern_var
        // collecting vars: or_pattern_var, SSTNode
        //    vars: {'or_pattern_var': 'SSTNode'}
        SSTNode or_pattern_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: or_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(or_pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(or_pattern) - should work
            // REMOVE result call (or_pattern_var = or_pattern_rule()) != null  // or_pattern
            (or_pattern_var = or_pattern_rule()) != null  // or_pattern
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, PATTERN_ID, null);
    }

    // as_pattern: or_pattern 'as' capture_pattern
    public SSTNode as_pattern_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: as_pattern, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, AS_PATTERN_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, AS_PATTERN_ID);
        }
        // visiting Alt: or_pattern 'as' capture_pattern
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(or_pattern) - should work
            // generated call: (or_pattern_var = or_pattern_rule()) != null  // or_pattern
            // node.name: pattern, call.assigned_variable: or_pattern_var
        // collecting vars: or_pattern_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
            // generated call: (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(capture_pattern) - should work
            // generated call: (capture_pattern_var = capture_pattern_rule()) != null  // capture_pattern
            // node.name: target, call.assigned_variable: capture_pattern_var
        // collecting vars: capture_pattern_var, SSTNode
        //    vars: {'or_pattern_var': 'SSTNode', '_keyword': 'Token', 'capture_pattern_var': 'SSTNode'}
        Token _keyword = null;
        SSTNode capture_pattern_var = null;
        SSTNode or_pattern_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: or_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(or_pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(or_pattern) - should work
            // REMOVE result call (or_pattern_var = or_pattern_rule()) != null  // or_pattern
            (or_pattern_var = or_pattern_rule()) != null  // or_pattern
            &&
            // TODO visiting JavaParserGeneratorNamedItem: 'as'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('as')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
            // REMOVE result call (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: capture_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(capture_pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(capture_pattern) - should work
            // REMOVE result call (capture_pattern_var = capture_pattern_rule()) != null  // capture_pattern
            (capture_pattern_var = capture_pattern_rule()) != null  // capture_pattern
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, AS_PATTERN_ID, null);
    }

    // or_pattern: '|'.closed_pattern+
    public SSTNode or_pattern_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: or_pattern, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, OR_PATTERN_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, OR_PATTERN_ID);
        }
        // visiting Alt: '|'.closed_pattern+
        // REMOVE visiting JavaCallMakerVisitor.visit_Gather('|'.closed_pattern+)
            // generated call: (_gather_60_var = _gather_60_rule()) != null  // '|'.closed_pattern+
            // node.name: patterns, call.assigned_variable: _gather_60_var
        // collecting vars: _gather_60_var, asdl_expr_seq*
        //    vars: {'_gather_60_var': 'asdl_expr_seq*'}
        // TODO replacing asdl_expr_seq* --> SSTNode[]
        SSTNode[] _gather_60_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '|'.closed_pattern+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('|'.closed_pattern+)
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather('|'.closed_pattern+)
            // REMOVE result call (_gather_60_var = _gather_60_rule()) != null  // '|'.closed_pattern+
            (_gather_60_var = (SSTNode[])_gather_60_rule()) != null  // '|'.closed_pattern+
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, OR_PATTERN_ID, null);
    }

    // closed_pattern:
    //     | literal_pattern
    //     | capture_pattern
    //     | wildcard_pattern
    //     | value_pattern
    //     | group_pattern
    //     | sequence_pattern
    //     | mapping_pattern
    //     | class_pattern
    public SSTNode closed_pattern_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: closed_pattern, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, CLOSED_PATTERN_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, CLOSED_PATTERN_ID);
        }
        // visiting Alt: literal_pattern
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(literal_pattern) - should work
            // generated call: (literal_pattern_var = literal_pattern_rule()) != null  // literal_pattern
            // node.name: None, call.assigned_variable: literal_pattern_var
        // collecting vars: literal_pattern_var, SSTNode
        //    vars: {'literal_pattern_var': 'SSTNode'}
        SSTNode literal_pattern_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: literal_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(literal_pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(literal_pattern) - should work
            // REMOVE result call (literal_pattern_var = literal_pattern_rule()) != null  // literal_pattern
            (literal_pattern_var = literal_pattern_rule()) != null  // literal_pattern
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: capture_pattern
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(capture_pattern) - should work
            // generated call: (capture_pattern_var = capture_pattern_rule()) != null  // capture_pattern
            // node.name: None, call.assigned_variable: capture_pattern_var
        // collecting vars: capture_pattern_var, SSTNode
        //    vars: {'capture_pattern_var': 'SSTNode'}
        SSTNode capture_pattern_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: capture_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(capture_pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(capture_pattern) - should work
            // REMOVE result call (capture_pattern_var = capture_pattern_rule()) != null  // capture_pattern
            (capture_pattern_var = capture_pattern_rule()) != null  // capture_pattern
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: wildcard_pattern
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(wildcard_pattern) - should work
            // generated call: (wildcard_pattern_var = wildcard_pattern_rule()) != null  // wildcard_pattern
            // node.name: None, call.assigned_variable: wildcard_pattern_var
        // collecting vars: wildcard_pattern_var, SSTNode
        //    vars: {'wildcard_pattern_var': 'SSTNode'}
        SSTNode wildcard_pattern_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: wildcard_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(wildcard_pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(wildcard_pattern) - should work
            // REMOVE result call (wildcard_pattern_var = wildcard_pattern_rule()) != null  // wildcard_pattern
            (wildcard_pattern_var = wildcard_pattern_rule()) != null  // wildcard_pattern
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: value_pattern
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(value_pattern) - should work
            // generated call: (value_pattern_var = value_pattern_rule()) != null  // value_pattern
            // node.name: None, call.assigned_variable: value_pattern_var
        // collecting vars: value_pattern_var, SSTNode
        //    vars: {'value_pattern_var': 'SSTNode'}
        SSTNode value_pattern_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: value_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(value_pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(value_pattern) - should work
            // REMOVE result call (value_pattern_var = value_pattern_rule()) != null  // value_pattern
            (value_pattern_var = value_pattern_rule()) != null  // value_pattern
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: group_pattern
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(group_pattern) - should work
            // generated call: (group_pattern_var = group_pattern_rule()) != null  // group_pattern
            // node.name: None, call.assigned_variable: group_pattern_var
        // collecting vars: group_pattern_var, SSTNode
        //    vars: {'group_pattern_var': 'SSTNode'}
        SSTNode group_pattern_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: group_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(group_pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(group_pattern) - should work
            // REMOVE result call (group_pattern_var = group_pattern_rule()) != null  // group_pattern
            (group_pattern_var = group_pattern_rule()) != null  // group_pattern
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: sequence_pattern
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sequence_pattern) - should work
            // generated call: (sequence_pattern_var = sequence_pattern_rule()) != null  // sequence_pattern
            // node.name: None, call.assigned_variable: sequence_pattern_var
        // collecting vars: sequence_pattern_var, SSTNode
        //    vars: {'sequence_pattern_var': 'SSTNode'}
        SSTNode sequence_pattern_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: sequence_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(sequence_pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sequence_pattern) - should work
            // REMOVE result call (sequence_pattern_var = sequence_pattern_rule()) != null  // sequence_pattern
            (sequence_pattern_var = sequence_pattern_rule()) != null  // sequence_pattern
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: mapping_pattern
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(mapping_pattern) - should work
            // generated call: (mapping_pattern_var = mapping_pattern_rule()) != null  // mapping_pattern
            // node.name: None, call.assigned_variable: mapping_pattern_var
        // collecting vars: mapping_pattern_var, SSTNode
        //    vars: {'mapping_pattern_var': 'SSTNode'}
        SSTNode mapping_pattern_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: mapping_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(mapping_pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(mapping_pattern) - should work
            // REMOVE result call (mapping_pattern_var = mapping_pattern_rule()) != null  // mapping_pattern
            (mapping_pattern_var = mapping_pattern_rule()) != null  // mapping_pattern
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: class_pattern
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(class_pattern) - should work
            // generated call: (class_pattern_var = class_pattern_rule()) != null  // class_pattern
            // node.name: None, call.assigned_variable: class_pattern_var
        // collecting vars: class_pattern_var, SSTNode
        //    vars: {'class_pattern_var': 'SSTNode'}
        SSTNode class_pattern_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: class_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(class_pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(class_pattern) - should work
            // REMOVE result call (class_pattern_var = class_pattern_rule()) != null  // class_pattern
            (class_pattern_var = class_pattern_rule()) != null  // class_pattern
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, CLOSED_PATTERN_ID, null);
    }

    // literal_pattern:
    //     | signed_number !('+' | '-')
    //     | signed_number '+' NUMBER
    //     | signed_number '-' NUMBER
    //     | strings
    //     | 'None'
    //     | 'True'
    //     | 'False'
    public SSTNode literal_pattern_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: literal_pattern, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, LITERAL_PATTERN_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, LITERAL_PATTERN_ID);
        }
        // visiting Alt: signed_number !('+' | '-')
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(signed_number) - should work
            // generated call: (signed_number_var = signed_number_rule()) != null  // signed_number
            // node.name: None, call.assigned_variable: signed_number_var
        // collecting vars: signed_number_var, SSTNode
        // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!('+' | '-'))
            // generated call: None
        // collecting vars: None, None
        //    vars: {'signed_number_var': 'SSTNode', None: None}
        SSTNode signed_number_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: signed_number
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(signed_number)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(signed_number) - should work
            // REMOVE result call (signed_number_var = signed_number_rule()) != null  // signed_number
            (signed_number_var = signed_number_rule()) != null  // signed_number
            &&
            // TODO visiting JavaParserGeneratorNamedItem: !('+' | '-')
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!('+' | '-'))
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!('+' | '-'))
            // TODO call is not created !('+' | '-') -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: signed_number '+' NUMBER
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(signed_number) - should work
            // generated call: (signed_number_var = signed_number_rule()) != null  // signed_number
            // node.name: real, call.assigned_variable: signed_number_var
        // collecting vars: signed_number_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('+')
            // generated call: (_literal = expect(Token.Kind.PLUS)) != null  // token='+'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NUMBER) - should work
            // generated call: (number_var = expect(Token.Kind.NUMBER)) != null  // NUMBER
            // node.name: imag, call.assigned_variable: number_var
        // collecting vars: number_var, Token
        //    vars: {'signed_number_var': 'SSTNode', '_literal': 'Token', 'number_var': 'Token'}
        Token _literal = null;
        Token number_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: signed_number
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(signed_number)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(signed_number) - should work
            // REMOVE result call (signed_number_var = signed_number_rule()) != null  // signed_number
            (signed_number_var = signed_number_rule()) != null  // signed_number
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '+'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('+')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('+')
            // REMOVE result call (_literal = expect(Token.Kind.PLUS)) != null  // token='+'
            (_literal = expect(Token.Kind.PLUS)) != null  // token='+'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NUMBER
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NUMBER)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NUMBER) - should work
            // REMOVE result call (number_var = expect(Token.Kind.NUMBER)) != null  // NUMBER
            (number_var = expect(Token.Kind.NUMBER)) != null  // NUMBER
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: signed_number '-' NUMBER
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(signed_number) - should work
            // generated call: (signed_number_var = signed_number_rule()) != null  // signed_number
            // node.name: real, call.assigned_variable: signed_number_var
        // collecting vars: signed_number_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('-')
            // generated call: (_literal = expect(Token.Kind.MINUS)) != null  // token='-'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NUMBER) - should work
            // generated call: (number_var = expect(Token.Kind.NUMBER)) != null  // NUMBER
            // node.name: imag, call.assigned_variable: number_var
        // collecting vars: number_var, Token
        //    vars: {'signed_number_var': 'SSTNode', '_literal': 'Token', 'number_var': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: signed_number
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(signed_number)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(signed_number) - should work
            // REMOVE result call (signed_number_var = signed_number_rule()) != null  // signed_number
            (signed_number_var = signed_number_rule()) != null  // signed_number
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '-'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('-')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('-')
            // REMOVE result call (_literal = expect(Token.Kind.MINUS)) != null  // token='-'
            (_literal = expect(Token.Kind.MINUS)) != null  // token='-'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NUMBER
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NUMBER)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NUMBER) - should work
            // REMOVE result call (number_var = expect(Token.Kind.NUMBER)) != null  // NUMBER
            (number_var = expect(Token.Kind.NUMBER)) != null  // NUMBER
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: strings
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(strings) - should work
            // generated call: (strings_var = strings_rule()) != null  // strings
            // node.name: None, call.assigned_variable: strings_var
        // collecting vars: strings_var, SSTNode
        //    vars: {'strings_var': 'SSTNode'}
        SSTNode strings_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: strings
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(strings)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(strings) - should work
            // REMOVE result call (strings_var = strings_rule()) != null  // strings
            (strings_var = strings_rule()) != null  // strings
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: 'None'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('None')
            // generated call: (_keyword = expect(KEYWORD_NONE)) != null  // token='None'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        //    vars: {'_keyword': 'Token'}
        Token _keyword = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'None'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('None')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('None')
            // REMOVE result call (_keyword = expect(KEYWORD_NONE)) != null  // token='None'
            (_keyword = expect(KEYWORD_NONE)) != null  // token='None'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: 'True'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('True')
            // generated call: (_keyword = expect(KEYWORD_TRUE)) != null  // token='True'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        //    vars: {'_keyword': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'True'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('True')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('True')
            // REMOVE result call (_keyword = expect(KEYWORD_TRUE)) != null  // token='True'
            (_keyword = expect(KEYWORD_TRUE)) != null  // token='True'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: 'False'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('False')
            // generated call: (_keyword = expect(KEYWORD_FALSE)) != null  // token='False'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        //    vars: {'_keyword': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'False'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('False')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('False')
            // REMOVE result call (_keyword = expect(KEYWORD_FALSE)) != null  // token='False'
            (_keyword = expect(KEYWORD_FALSE)) != null  // token='False'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, LITERAL_PATTERN_ID, null);
    }

    // signed_number: NUMBER | '-' NUMBER
    public SSTNode signed_number_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: signed_number, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, SIGNED_NUMBER_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, SIGNED_NUMBER_ID);
        }
        // visiting Alt: NUMBER
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NUMBER) - should work
            // generated call: (number_var = expect(Token.Kind.NUMBER)) != null  // NUMBER
            // node.name: None, call.assigned_variable: number_var
        // collecting vars: number_var, Token
        //    vars: {'number_var': 'Token'}
        Token number_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: NUMBER
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NUMBER)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NUMBER) - should work
            // REMOVE result call (number_var = expect(Token.Kind.NUMBER)) != null  // NUMBER
            (number_var = expect(Token.Kind.NUMBER)) != null  // NUMBER
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '-' NUMBER
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('-')
            // generated call: (_literal = expect(Token.Kind.MINUS)) != null  // token='-'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NUMBER) - should work
            // generated call: (number_var = expect(Token.Kind.NUMBER)) != null  // NUMBER
            // node.name: number, call.assigned_variable: number_var
        // collecting vars: number_var, Token
        //    vars: {'_literal': 'Token', 'number_var': 'Token'}
        Token _literal = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '-'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('-')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('-')
            // REMOVE result call (_literal = expect(Token.Kind.MINUS)) != null  // token='-'
            (_literal = expect(Token.Kind.MINUS)) != null  // token='-'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NUMBER
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NUMBER)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NUMBER) - should work
            // REMOVE result call (number_var = expect(Token.Kind.NUMBER)) != null  // NUMBER
            (number_var = expect(Token.Kind.NUMBER)) != null  // NUMBER
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, SIGNED_NUMBER_ID, null);
    }

    // capture_pattern: !"_" NAME !('.' | '(' | '=')
    public SSTNode capture_pattern_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: capture_pattern, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, CAPTURE_PATTERN_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, CAPTURE_PATTERN_ID);
        }
        // visiting Alt: !"_" NAME !('.' | '(' | '=')
        // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!"_")
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: name, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!('.' | '(' | '='))
            // generated call: None
        // collecting vars: None, None
        //    vars: {None: None, 'name_var': 'Token'}
        Token name_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: !"_"
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!"_")
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!"_")
            // TODO call is not created !"_" -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
            &&
            // TODO visiting JavaParserGeneratorNamedItem: !('.' | '(' | '=')
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!('.' | '(' | '='))
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!('.' | '(' | '='))
            // TODO call is not created !('.' | '(' | '=') -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, CAPTURE_PATTERN_ID, null);
    }

    // wildcard_pattern: "_"
    public SSTNode wildcard_pattern_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: wildcard_pattern, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, WILDCARD_PATTERN_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, WILDCARD_PATTERN_ID);
        }
        // visiting Alt: "_"
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf("_")
            // generated call: (_keyword = expect("_")) != null  // soft_keyword='"_"'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        //    vars: {'_keyword': 'Token'}
        Token _keyword = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: "_"
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem("_")
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf("_")
            // REMOVE result call (_keyword = expect("_")) != null  // soft_keyword='"_"'
            (_keyword = expect("_")) != null  // soft_keyword='"_"'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, WILDCARD_PATTERN_ID, null);
    }

    // value_pattern: attr !('.' | '(' | '=')
    public SSTNode value_pattern_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: value_pattern, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, VALUE_PATTERN_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, VALUE_PATTERN_ID);
        }
        // visiting Alt: attr !('.' | '(' | '=')
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(attr) - should work
            // generated call: (attr_var = attr_rule()) != null  // attr
            // node.name: attr, call.assigned_variable: attr_var
        // collecting vars: attr_var, SSTNode
        // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!('.' | '(' | '='))
            // generated call: None
        // collecting vars: None, None
        //    vars: {'attr_var': 'SSTNode', None: None}
        SSTNode attr_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: attr
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(attr)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(attr) - should work
            // REMOVE result call (attr_var = attr_rule()) != null  // attr
            (attr_var = attr_rule()) != null  // attr
            &&
            // TODO visiting JavaParserGeneratorNamedItem: !('.' | '(' | '=')
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!('.' | '(' | '='))
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!('.' | '(' | '='))
            // TODO call is not created !('.' | '(' | '=') -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, VALUE_PATTERN_ID, null);
    }

    // Left-recursive
    // attr: name_or_attr '.' NAME
    public SSTNode attr_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // left recursion--
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Left Recursion Rule: attr, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, ATTR_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, ATTR_ID);
        }
        int lastPos = pos;
        int endPos;
        SSTNode lastResult = null;
        cache.putResult(pos, ATTR_ID, null);
        while(true) {
            reset(pos);
            SSTNode result = attr_rule_body();
            endPos = mark();
            if (endPos <= lastPos) {
                break;
            }
            lastResult = result;
            lastPos = endPos;
            cache.putResult(pos, ATTR_ID, result);
        }
        reset(lastPos);
        if (DEBUG) {
            debugMessageln("Result: " + lastResult);
            this.level--;
        }
        return lastResult;
    }

    // left-rersive rule body
    public SSTNode attr_rule_body() {
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: attr, pos: " + pos);
            this.level++;
        }
        // visiting Alt: name_or_attr '.' NAME
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(name_or_attr) - should work
            // generated call: (name_or_attr_var = name_or_attr_rule()) != null  // name_or_attr
            // node.name: value, call.assigned_variable: name_or_attr_var
        // collecting vars: name_or_attr_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
            // generated call: (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: attr, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        //    vars: {'name_or_attr_var': 'SSTNode', '_literal': 'Token', 'name_var': 'Token'}
        Token _literal = null;
        SSTNode name_or_attr_var = null;
        Token name_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: name_or_attr
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(name_or_attr)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(name_or_attr) - should work
            // REMOVE result call (name_or_attr_var = name_or_attr_rule()) != null  // name_or_attr
            (name_or_attr_var = name_or_attr_rule()) != null  // name_or_attr
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '.'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('.')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
            // REMOVE result call (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, ATTR_ID, null);
    }

    // Left-recursive
    // name_or_attr: attr | NAME
    public SSTNode name_or_attr_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: name_or_attr, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, NAME_OR_ATTR_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, NAME_OR_ATTR_ID);
        }
        // visiting Alt: attr
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(attr) - should work
            // generated call: (attr_var = attr_rule()) != null  // attr
            // node.name: None, call.assigned_variable: attr_var
        // collecting vars: attr_var, SSTNode
        //    vars: {'attr_var': 'SSTNode'}
        SSTNode attr_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: attr
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(attr)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(attr) - should work
            // REMOVE result call (attr_var = attr_rule()) != null  // attr
            (attr_var = attr_rule()) != null  // attr
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: NAME
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: None, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        //    vars: {'name_var': 'Token'}
        Token name_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, NAME_OR_ATTR_ID, null);
    }

    // group_pattern: '(' pattern ')'
    public SSTNode group_pattern_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: group_pattern, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, GROUP_PATTERN_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, GROUP_PATTERN_ID);
        }
        // visiting Alt: '(' pattern ')'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
            // generated call: (pattern_var = pattern_rule()) != null  // pattern
            // node.name: pattern, call.assigned_variable: pattern_var
        // collecting vars: pattern_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_literal': 'Token', 'pattern_var': 'SSTNode', '_literal_1': 'Token'}
        Token _literal = null;
        Token _literal_1 = null;
        SSTNode pattern_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            &&
            // TODO visiting JavaParserGeneratorNamedItem: pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
            // REMOVE result call (pattern_var = pattern_rule()) != null  // pattern
            (pattern_var = pattern_rule()) != null  // pattern
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, GROUP_PATTERN_ID, null);
    }

    // sequence_pattern: '[' maybe_sequence_pattern? ']' | '(' open_sequence_pattern? ')'
    public SSTNode sequence_pattern_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: sequence_pattern, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, SEQUENCE_PATTERN_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, SEQUENCE_PATTERN_ID);
        }
        // visiting Alt: '[' maybe_sequence_pattern? ']'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
            // generated call: (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(maybe_sequence_pattern?)
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(maybe_sequence_pattern) - should work
        // TODO replacing asdl_seq[] --> SSTNode[]
            // JavaCallMakerVisitor.visit_Opt.generated call: (maybe_sequence_pattern_var = maybe_sequence_pattern_rule()) != null  // maybe_sequence_pattern
            // generated call: ((_opt_var = maybe_sequence_pattern_rule()) != null || _opt_var == null)  // maybe_sequence_pattern?
            // node.name: values, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
            // generated call: (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_literal': 'Token', '_opt_var': None, '_literal_1': 'Token'}
        Token _literal = null;
        Token _literal_1 = null;
        Object _opt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '['
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('[')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
            // REMOVE result call (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            &&
            // TODO visiting JavaParserGeneratorNamedItem: maybe_sequence_pattern?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(maybe_sequence_pattern?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(maybe_sequence_pattern?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(maybe_sequence_pattern) - should work
            // TODO replacing asdl_seq[] --> SSTNode[]
                // JavaCallMakerVisitor.visit_Opt.generated call: (maybe_sequence_pattern_var = maybe_sequence_pattern_rule()) != null  // maybe_sequence_pattern
            // REMOVE result call ((_opt_var = maybe_sequence_pattern_rule()) != null || _opt_var == null)  // maybe_sequence_pattern?
            ((_opt_var = maybe_sequence_pattern_rule()) != null || _opt_var == null)  // maybe_sequence_pattern?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ']'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(']')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
            // REMOVE result call (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            (_literal_1 = expect(Token.Kind.RSQB)) != null  // token=']'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '(' open_sequence_pattern? ')'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(open_sequence_pattern?)
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(open_sequence_pattern) - should work
        // TODO replacing asdl_seq[] --> SSTNode[]
            // JavaCallMakerVisitor.visit_Opt.generated call: (open_sequence_pattern_var = open_sequence_pattern_rule()) != null  // open_sequence_pattern
            // generated call: ((_opt_var = open_sequence_pattern_rule()) != null || _opt_var == null)  // open_sequence_pattern?
            // node.name: values, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_literal': 'Token', '_opt_var': None, '_literal_1': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            &&
            // TODO visiting JavaParserGeneratorNamedItem: open_sequence_pattern?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(open_sequence_pattern?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(open_sequence_pattern?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(open_sequence_pattern) - should work
            // TODO replacing asdl_seq[] --> SSTNode[]
                // JavaCallMakerVisitor.visit_Opt.generated call: (open_sequence_pattern_var = open_sequence_pattern_rule()) != null  // open_sequence_pattern
            // REMOVE result call ((_opt_var = open_sequence_pattern_rule()) != null || _opt_var == null)  // open_sequence_pattern?
            ((_opt_var = open_sequence_pattern_rule()) != null || _opt_var == null)  // open_sequence_pattern?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, SEQUENCE_PATTERN_ID, null);
    }

    // open_sequence_pattern: maybe_star_pattern ',' maybe_sequence_pattern?
    // TODO replacing asdl_seq* --> SSTNode[]
    public SSTNode[] open_sequence_pattern_rule() {
    // isLoop: False, isGather: False, type: asdl_seq*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: open_sequence_pattern, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, OPEN_SEQUENCE_PATTERN_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, OPEN_SEQUENCE_PATTERN_ID);
        }
        // visiting Alt: maybe_star_pattern ',' maybe_sequence_pattern?
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(maybe_star_pattern) - should work
            // generated call: (maybe_star_pattern_var = maybe_star_pattern_rule()) != null  // maybe_star_pattern
            // node.name: value, call.assigned_variable: maybe_star_pattern_var
        // collecting vars: maybe_star_pattern_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(maybe_sequence_pattern?)
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(maybe_sequence_pattern) - should work
        // TODO replacing asdl_seq[] --> SSTNode[]
            // JavaCallMakerVisitor.visit_Opt.generated call: (maybe_sequence_pattern_var = maybe_sequence_pattern_rule()) != null  // maybe_sequence_pattern
            // generated call: ((_opt_var = maybe_sequence_pattern_rule()) != null || _opt_var == null)  // maybe_sequence_pattern?
            // node.name: values, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'maybe_star_pattern_var': 'SSTNode', '_literal': 'Token', '_opt_var': None}
        Token _literal = null;
        Object _opt_var = null;
        SSTNode maybe_star_pattern_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: maybe_star_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(maybe_star_pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(maybe_star_pattern) - should work
            // REMOVE result call (maybe_star_pattern_var = maybe_star_pattern_rule()) != null  // maybe_star_pattern
            (maybe_star_pattern_var = maybe_star_pattern_rule()) != null  // maybe_star_pattern
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: maybe_sequence_pattern?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(maybe_sequence_pattern?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(maybe_sequence_pattern?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(maybe_sequence_pattern) - should work
            // TODO replacing asdl_seq[] --> SSTNode[]
                // JavaCallMakerVisitor.visit_Opt.generated call: (maybe_sequence_pattern_var = maybe_sequence_pattern_rule()) != null  // maybe_sequence_pattern
            // REMOVE result call ((_opt_var = maybe_sequence_pattern_rule()) != null || _opt_var == null)  // maybe_sequence_pattern?
            ((_opt_var = maybe_sequence_pattern_rule()) != null || _opt_var == null)  // maybe_sequence_pattern?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, OPEN_SEQUENCE_PATTERN_ID, null);
    }

    // maybe_sequence_pattern: ','.maybe_star_pattern+ ','?
    // TODO replacing asdl_seq* --> SSTNode[]
    public SSTNode[] maybe_sequence_pattern_rule() {
    // isLoop: False, isGather: False, type: asdl_seq*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: maybe_sequence_pattern, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, MAYBE_SEQUENCE_PATTERN_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, MAYBE_SEQUENCE_PATTERN_ID);
        }
        // visiting Alt: ','.maybe_star_pattern+ ','?
        // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.maybe_star_pattern+)
            // generated call: (_gather_62_var = _gather_62_rule()) != null  // ','.maybe_star_pattern+
            // node.name: values, call.assigned_variable: _gather_62_var
        // collecting vars: _gather_62_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // generated call: ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
            // node.name: None, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'_gather_62_var': 'SSTNode[]', '_opt_var': None}
        SSTNode[] _gather_62_var = null;
        Object _opt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','.maybe_star_pattern+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.maybe_star_pattern+)
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.maybe_star_pattern+)
            // REMOVE result call (_gather_62_var = _gather_62_rule()) != null  // ','.maybe_star_pattern+
            (_gather_62_var = _gather_62_rule()) != null  // ','.maybe_star_pattern+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // REMOVE result call ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
            ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, MAYBE_SEQUENCE_PATTERN_ID, null);
    }

    // maybe_star_pattern: star_pattern | pattern
    public SSTNode maybe_star_pattern_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: maybe_star_pattern, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, MAYBE_STAR_PATTERN_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, MAYBE_STAR_PATTERN_ID);
        }
        // visiting Alt: star_pattern
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_pattern) - should work
            // generated call: (star_pattern_var = star_pattern_rule()) != null  // star_pattern
            // node.name: None, call.assigned_variable: star_pattern_var
        // collecting vars: star_pattern_var, SSTNode
        //    vars: {'star_pattern_var': 'SSTNode'}
        SSTNode star_pattern_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_pattern) - should work
            // REMOVE result call (star_pattern_var = star_pattern_rule()) != null  // star_pattern
            (star_pattern_var = star_pattern_rule()) != null  // star_pattern
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: pattern
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
            // generated call: (pattern_var = pattern_rule()) != null  // pattern
            // node.name: None, call.assigned_variable: pattern_var
        // collecting vars: pattern_var, SSTNode
        //    vars: {'pattern_var': 'SSTNode'}
        SSTNode pattern_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
            // REMOVE result call (pattern_var = pattern_rule()) != null  // pattern
            (pattern_var = pattern_rule()) != null  // pattern
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, MAYBE_STAR_PATTERN_ID, null);
    }

    // star_pattern: '*' (capture_pattern | wildcard_pattern)
    public SSTNode star_pattern_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: star_pattern, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, STAR_PATTERN_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, STAR_PATTERN_ID);
        }
        // visiting Alt: '*' (capture_pattern | wildcard_pattern)
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // TODO visiting JavaCallMakerVisitor.visit_Group((capture_pattern | wildcard_pattern))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(capture_pattern | wildcard_pattern)
            // generated call: (_tmp_64_var = _tmp_64_rule()) != null  // capture_pattern | wildcard_pattern
            // node.name: value, call.assigned_variable: _tmp_64_var
        // collecting vars: _tmp_64_var, None
        //    vars: {'_literal': 'Token', '_tmp_64_var': None}
        Token _literal = null;
        Object _tmp_64_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '*'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: (capture_pattern | wildcard_pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((capture_pattern | wildcard_pattern))
            // TODO visiting JavaCallMakerVisitor.visit_Group((capture_pattern | wildcard_pattern))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(capture_pattern | wildcard_pattern)
            // REMOVE result call (_tmp_64_var = _tmp_64_rule()) != null  // capture_pattern | wildcard_pattern
            (_tmp_64_var = _tmp_64_rule()) != null  // capture_pattern | wildcard_pattern
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, STAR_PATTERN_ID, null);
    }

    // mapping_pattern: '{' items_pattern? '}'
    public SSTNode mapping_pattern_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: mapping_pattern, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, MAPPING_PATTERN_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, MAPPING_PATTERN_ID);
        }
        // visiting Alt: '{' items_pattern? '}'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
            // generated call: (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(items_pattern?)
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(items_pattern) - should work
        // TODO replacing asdl_seq[] --> SSTNode[]
            // JavaCallMakerVisitor.visit_Opt.generated call: (items_pattern_var = items_pattern_rule()) != null  // items_pattern
            // generated call: ((_opt_var = items_pattern_rule()) != null || _opt_var == null)  // items_pattern?
            // node.name: items, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
            // generated call: (_literal = expect(Token.Kind.RBRACE)) != null  // token='}'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_literal': 'Token', '_opt_var': None, '_literal_1': 'Token'}
        Token _literal = null;
        Token _literal_1 = null;
        Object _opt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '{'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('{')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
            // REMOVE result call (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: items_pattern?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(items_pattern?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(items_pattern?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(items_pattern) - should work
            // TODO replacing asdl_seq[] --> SSTNode[]
                // JavaCallMakerVisitor.visit_Opt.generated call: (items_pattern_var = items_pattern_rule()) != null  // items_pattern
            // REMOVE result call ((_opt_var = items_pattern_rule()) != null || _opt_var == null)  // items_pattern?
            ((_opt_var = items_pattern_rule()) != null || _opt_var == null)  // items_pattern?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '}'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('}')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
            // REMOVE result call (_literal = expect(Token.Kind.RBRACE)) != null  // token='}'
            (_literal_1 = expect(Token.Kind.RBRACE)) != null  // token='}'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, MAPPING_PATTERN_ID, null);
    }

    // items_pattern: ','.key_value_pattern+ ','?
    // TODO replacing asdl_seq* --> SSTNode[]
    public SSTNode[] items_pattern_rule() {
    // isLoop: False, isGather: False, type: asdl_seq*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: items_pattern, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, ITEMS_PATTERN_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, ITEMS_PATTERN_ID);
        }
        // visiting Alt: ','.key_value_pattern+ ','?
        // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.key_value_pattern+)
            // generated call: (_gather_65_var = _gather_65_rule()) != null  // ','.key_value_pattern+
            // node.name: items, call.assigned_variable: _gather_65_var
        // collecting vars: _gather_65_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // generated call: ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
            // node.name: None, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'_gather_65_var': 'SSTNode[]', '_opt_var': None}
        SSTNode[] _gather_65_var = null;
        Object _opt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','.key_value_pattern+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.key_value_pattern+)
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.key_value_pattern+)
            // REMOVE result call (_gather_65_var = _gather_65_rule()) != null  // ','.key_value_pattern+
            (_gather_65_var = _gather_65_rule()) != null  // ','.key_value_pattern+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // REMOVE result call ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
            ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, ITEMS_PATTERN_ID, null);
    }

    // key_value_pattern: (literal_pattern | value_pattern) ':' pattern | double_star_pattern
    // TODO replacing KeyValuePair* --> SSTNode[]
    public SSTNode[] key_value_pattern_rule() {
    // isLoop: False, isGather: False, type: KeyValuePair*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: key_value_pattern, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, KEY_VALUE_PATTERN_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, KEY_VALUE_PATTERN_ID);
        }
        // visiting Alt: (literal_pattern | value_pattern) ':' pattern
        // TODO visiting JavaCallMakerVisitor.visit_Group((literal_pattern | value_pattern))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(literal_pattern | value_pattern)
            // generated call: (_tmp_67_var = _tmp_67_rule()) != null  // literal_pattern | value_pattern
            // node.name: key, call.assigned_variable: _tmp_67_var
        // collecting vars: _tmp_67_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
            // generated call: (pattern_var = pattern_rule()) != null  // pattern
            // node.name: value, call.assigned_variable: pattern_var
        // collecting vars: pattern_var, SSTNode
        //    vars: {'_tmp_67_var': None, '_literal': 'Token', 'pattern_var': 'SSTNode'}
        Token _literal = null;
        Object _tmp_67_var = null;
        SSTNode pattern_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: (literal_pattern | value_pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((literal_pattern | value_pattern))
            // TODO visiting JavaCallMakerVisitor.visit_Group((literal_pattern | value_pattern))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(literal_pattern | value_pattern)
            // REMOVE result call (_tmp_67_var = _tmp_67_rule()) != null  // literal_pattern | value_pattern
            (_tmp_67_var = _tmp_67_rule()) != null  // literal_pattern | value_pattern
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
            // REMOVE result call (pattern_var = pattern_rule()) != null  // pattern
            (pattern_var = pattern_rule()) != null  // pattern
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: double_star_pattern
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_star_pattern) - should work
        // TODO replacing KeyValuePair[] --> SSTNode[]
            // generated call: (double_star_pattern_var = double_star_pattern_rule()) != null  // double_star_pattern
            // node.name: None, call.assigned_variable: double_star_pattern_var
        // collecting vars: double_star_pattern_var, SSTNode[]
        //    vars: {'double_star_pattern_var': 'SSTNode[]'}
        SSTNode[] double_star_pattern_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: double_star_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(double_star_pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_star_pattern) - should work
            // TODO replacing KeyValuePair[] --> SSTNode[]
            // REMOVE result call (double_star_pattern_var = double_star_pattern_rule()) != null  // double_star_pattern
            (double_star_pattern_var = double_star_pattern_rule()) != null  // double_star_pattern
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, KEY_VALUE_PATTERN_ID, null);
    }

    // double_star_pattern: '**' capture_pattern
    // TODO replacing KeyValuePair* --> SSTNode[]
    public SSTNode[] double_star_pattern_rule() {
    // isLoop: False, isGather: False, type: KeyValuePair*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: double_star_pattern, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, DOUBLE_STAR_PATTERN_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, DOUBLE_STAR_PATTERN_ID);
        }
        // visiting Alt: '**' capture_pattern
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
            // generated call: (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(capture_pattern) - should work
            // generated call: (capture_pattern_var = capture_pattern_rule()) != null  // capture_pattern
            // node.name: value, call.assigned_variable: capture_pattern_var
        // collecting vars: capture_pattern_var, SSTNode
        //    vars: {'_literal': 'Token', 'capture_pattern_var': 'SSTNode'}
        Token _literal = null;
        SSTNode capture_pattern_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '**'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('**')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
            // REMOVE result call (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: capture_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(capture_pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(capture_pattern) - should work
            // REMOVE result call (capture_pattern_var = capture_pattern_rule()) != null  // capture_pattern
            (capture_pattern_var = capture_pattern_rule()) != null  // capture_pattern
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, DOUBLE_STAR_PATTERN_ID, null);
    }

    // class_pattern:
    //     | name_or_attr '(' ')'
    //     | name_or_attr '(' positional_patterns ','? ')'
    //     | name_or_attr '(' keyword_patterns ','? ')'
    //     | name_or_attr '(' positional_patterns ',' keyword_patterns ','? ')'
    public SSTNode class_pattern_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: class_pattern, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, CLASS_PATTERN_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, CLASS_PATTERN_ID);
        }
        // visiting Alt: name_or_attr '(' ')'
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(name_or_attr) - should work
            // generated call: (name_or_attr_var = name_or_attr_rule()) != null  // name_or_attr
            // node.name: func, call.assigned_variable: name_or_attr_var
        // collecting vars: name_or_attr_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'name_or_attr_var': 'SSTNode', '_literal': 'Token', '_literal_1': 'Token'}
        Token _literal = null;
        Token _literal_1 = null;
        SSTNode name_or_attr_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: name_or_attr
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(name_or_attr)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(name_or_attr) - should work
            // REMOVE result call (name_or_attr_var = name_or_attr_rule()) != null  // name_or_attr
            (name_or_attr_var = name_or_attr_rule()) != null  // name_or_attr
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: name_or_attr '(' positional_patterns ','? ')'
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(name_or_attr) - should work
            // generated call: (name_or_attr_var = name_or_attr_rule()) != null  // name_or_attr
            // node.name: func, call.assigned_variable: name_or_attr_var
        // collecting vars: name_or_attr_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(positional_patterns) - should work
        // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // generated call: (positional_patterns_var = positional_patterns_rule()) != null  // positional_patterns
            // node.name: args, call.assigned_variable: positional_patterns_var
        // collecting vars: positional_patterns_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // generated call: ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
            // node.name: None, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'name_or_attr_var': 'SSTNode', '_literal': 'Token', 'positional_patterns_var': 'SSTNode[]', '_opt_var': None, '_literal_1': 'Token'}
        Object _opt_var = null;
        SSTNode[] positional_patterns_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: name_or_attr
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(name_or_attr)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(name_or_attr) - should work
            // REMOVE result call (name_or_attr_var = name_or_attr_rule()) != null  // name_or_attr
            (name_or_attr_var = name_or_attr_rule()) != null  // name_or_attr
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            &&
            // TODO visiting JavaParserGeneratorNamedItem: positional_patterns
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(positional_patterns)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(positional_patterns) - should work
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // REMOVE result call (positional_patterns_var = positional_patterns_rule()) != null  // positional_patterns
            (positional_patterns_var = positional_patterns_rule()) != null  // positional_patterns
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // REMOVE result call ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
            ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: name_or_attr '(' keyword_patterns ','? ')'
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(name_or_attr) - should work
            // generated call: (name_or_attr_var = name_or_attr_rule()) != null  // name_or_attr
            // node.name: func, call.assigned_variable: name_or_attr_var
        // collecting vars: name_or_attr_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(keyword_patterns) - should work
        // TODO replacing asdl_keyword_seq[] --> SSTNode[]
            // generated call: (keyword_patterns_var = keyword_patterns_rule()) != null  // keyword_patterns
            // node.name: keywords, call.assigned_variable: keyword_patterns_var
        // collecting vars: keyword_patterns_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // generated call: ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
            // node.name: None, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'name_or_attr_var': 'SSTNode', '_literal': 'Token', 'keyword_patterns_var': 'SSTNode[]', '_opt_var': None, '_literal_1': 'Token'}
        SSTNode[] keyword_patterns_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: name_or_attr
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(name_or_attr)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(name_or_attr) - should work
            // REMOVE result call (name_or_attr_var = name_or_attr_rule()) != null  // name_or_attr
            (name_or_attr_var = name_or_attr_rule()) != null  // name_or_attr
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            &&
            // TODO visiting JavaParserGeneratorNamedItem: keyword_patterns
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(keyword_patterns)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(keyword_patterns) - should work
            // TODO replacing asdl_keyword_seq[] --> SSTNode[]
            // REMOVE result call (keyword_patterns_var = keyword_patterns_rule()) != null  // keyword_patterns
            (keyword_patterns_var = keyword_patterns_rule()) != null  // keyword_patterns
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // REMOVE result call ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
            ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: name_or_attr '(' positional_patterns ',' keyword_patterns ','? ')'
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(name_or_attr) - should work
            // generated call: (name_or_attr_var = name_or_attr_rule()) != null  // name_or_attr
            // node.name: func, call.assigned_variable: name_or_attr_var
        // collecting vars: name_or_attr_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(positional_patterns) - should work
        // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // generated call: (positional_patterns_var = positional_patterns_rule()) != null  // positional_patterns
            // node.name: args, call.assigned_variable: positional_patterns_var
        // collecting vars: positional_patterns_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(keyword_patterns) - should work
        // TODO replacing asdl_keyword_seq[] --> SSTNode[]
            // generated call: (keyword_patterns_var = keyword_patterns_rule()) != null  // keyword_patterns
            // node.name: keywords, call.assigned_variable: keyword_patterns_var
        // collecting vars: keyword_patterns_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // generated call: ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
            // node.name: None, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_2, Token
        //    vars: {'name_or_attr_var': 'SSTNode', '_literal': 'Token', 'positional_patterns_var': 'SSTNode[]', '_literal_1': 'Token', 'keyword_patterns_var': 'SSTNode[]', '_opt_var': None, '_literal_2': 'Token'}
        Token _literal_2 = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: name_or_attr
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(name_or_attr)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(name_or_attr) - should work
            // REMOVE result call (name_or_attr_var = name_or_attr_rule()) != null  // name_or_attr
            (name_or_attr_var = name_or_attr_rule()) != null  // name_or_attr
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            &&
            // TODO visiting JavaParserGeneratorNamedItem: positional_patterns
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(positional_patterns)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(positional_patterns) - should work
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // REMOVE result call (positional_patterns_var = positional_patterns_rule()) != null  // positional_patterns
            (positional_patterns_var = positional_patterns_rule()) != null  // positional_patterns
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal_1 = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: keyword_patterns
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(keyword_patterns)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(keyword_patterns) - should work
            // TODO replacing asdl_keyword_seq[] --> SSTNode[]
            // REMOVE result call (keyword_patterns_var = keyword_patterns_rule()) != null  // keyword_patterns
            (keyword_patterns_var = keyword_patterns_rule()) != null  // keyword_patterns
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // REMOVE result call ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
            ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            (_literal_2 = expect(Token.Kind.RPAR)) != null  // token=')'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, CLASS_PATTERN_ID, null);
    }

    // positional_patterns: ','.pattern+
    // TODO replacing asdl_expr_seq* --> SSTNode[]
    public SSTNode[] positional_patterns_rule() {
    // isLoop: False, isGather: False, type: asdl_expr_seq*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: positional_patterns, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, POSITIONAL_PATTERNS_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, POSITIONAL_PATTERNS_ID);
        }
        // visiting Alt: ','.pattern+
        // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.pattern+)
            // generated call: (_gather_68_var = _gather_68_rule()) != null  // ','.pattern+
            // node.name: args, call.assigned_variable: _gather_68_var
        // collecting vars: _gather_68_var, asdl_expr_seq*
        //    vars: {'_gather_68_var': 'asdl_expr_seq*'}
        // TODO replacing asdl_expr_seq* --> SSTNode[]
        SSTNode[] _gather_68_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','.pattern+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.pattern+)
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.pattern+)
            // REMOVE result call (_gather_68_var = _gather_68_rule()) != null  // ','.pattern+
            (_gather_68_var = (SSTNode[])_gather_68_rule()) != null  // ','.pattern+
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, POSITIONAL_PATTERNS_ID, null);
    }

    // keyword_patterns: ','.keyword_pattern+
    // TODO replacing asdl_keyword_seq* --> SSTNode[]
    public SSTNode[] keyword_patterns_rule() {
    // isLoop: False, isGather: False, type: asdl_keyword_seq*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: keyword_patterns, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, KEYWORD_PATTERNS_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, KEYWORD_PATTERNS_ID);
        }
        // visiting Alt: ','.keyword_pattern+
        // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.keyword_pattern+)
            // generated call: (_gather_70_var = _gather_70_rule()) != null  // ','.keyword_pattern+
            // node.name: keywords, call.assigned_variable: _gather_70_var
        // collecting vars: _gather_70_var, asdl_keyword_seq*
        //    vars: {'_gather_70_var': 'asdl_keyword_seq*'}
        // TODO replacing asdl_keyword_seq* --> SSTNode[]
        SSTNode[] _gather_70_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','.keyword_pattern+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.keyword_pattern+)
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.keyword_pattern+)
            // REMOVE result call (_gather_70_var = _gather_70_rule()) != null  // ','.keyword_pattern+
            (_gather_70_var = (SSTNode[])_gather_70_rule()) != null  // ','.keyword_pattern+
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, KEYWORD_PATTERNS_ID, null);
    }

    // keyword_pattern: NAME '=' pattern
    // TODO replacing keyword_ty --> SSTNode
    public SSTNode keyword_pattern_rule() {
    // isLoop: False, isGather: False, type: keyword_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: keyword_pattern, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, KEYWORD_PATTERN_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, KEYWORD_PATTERN_ID);
        }
        // visiting Alt: NAME '=' pattern
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: arg, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
            // generated call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
            // generated call: (pattern_var = pattern_rule()) != null  // pattern
            // node.name: value, call.assigned_variable: pattern_var
        // collecting vars: pattern_var, SSTNode
        //    vars: {'name_var': 'Token', '_literal': 'Token', 'pattern_var': 'SSTNode'}
        Token _literal = null;
        Token name_var = null;
        SSTNode pattern_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
            // REMOVE result call (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            &&
            // TODO visiting JavaParserGeneratorNamedItem: pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
            // REMOVE result call (pattern_var = pattern_rule()) != null  // pattern
            (pattern_var = pattern_rule()) != null  // pattern
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, KEYWORD_PATTERN_ID, null);
    }

    // return_stmt: 'return' star_expressions?
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode return_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: return_stmt, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, RETURN_STMT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, RETURN_STMT_ID);
        }
        // visiting Alt: 'return' star_expressions?
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('return')
            // generated call: (_keyword = expect(KEYWORD_RETURN)) != null  // token='return'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_expressions?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_expressions)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_72_var = _tmp_72_rule()) != null  // star_expressions
            // generated call: ((_opt_var = _tmp_72_rule()) != null || _opt_var == null)  // star_expressions?
            // node.name: a, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'_keyword': 'Token', '_opt_var': None}
        Token _keyword = null;
        Object _opt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'return'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('return')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('return')
            // REMOVE result call (_keyword = expect(KEYWORD_RETURN)) != null  // token='return'
            (_keyword = expect(KEYWORD_RETURN)) != null  // token='return'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: star_expressions?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expressions?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_expressions?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_expressions)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_72_var = _tmp_72_rule()) != null  // star_expressions
            // REMOVE result call ((_opt_var = _tmp_72_rule()) != null || _opt_var == null)  // star_expressions?
            ((_opt_var = _tmp_72_rule()) != null || _opt_var == null)  // star_expressions?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, RETURN_STMT_ID, null);
    }

    // raise_stmt: 'raise' expression ['from' expression] | 'raise'
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode raise_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: raise_stmt, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, RAISE_STMT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, RAISE_STMT_ID);
        }
        // visiting Alt: 'raise' expression ['from' expression]
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('raise')
            // generated call: (_keyword = expect(KEYWORD_RAISE)) != null  // token='raise'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: a, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['from' expression])
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('from' expression)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_73_var = _tmp_73_rule()) != null  // 'from' expression
            // generated call: ((_opt_var = _tmp_73_rule()) != null || _opt_var == null)  // ['from' expression]
            // node.name: b, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'_keyword': 'Token', 'expression_var': 'SSTNode', '_opt_var': None}
        Token _keyword = null;
        Object _opt_var = null;
        SSTNode expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'raise'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('raise')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('raise')
            // REMOVE result call (_keyword = expect(KEYWORD_RAISE)) != null  // token='raise'
            (_keyword = expect(KEYWORD_RAISE)) != null  // token='raise'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ['from' expression]
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(['from' expression])
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['from' expression])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('from' expression)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_73_var = _tmp_73_rule()) != null  // 'from' expression
            // REMOVE result call ((_opt_var = _tmp_73_rule()) != null || _opt_var == null)  // ['from' expression]
            ((_opt_var = _tmp_73_rule()) != null || _opt_var == null)  // ['from' expression]
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: 'raise'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('raise')
            // generated call: (_keyword = expect(KEYWORD_RAISE)) != null  // token='raise'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        //    vars: {'_keyword': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'raise'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('raise')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('raise')
            // REMOVE result call (_keyword = expect(KEYWORD_RAISE)) != null  // token='raise'
            (_keyword = expect(KEYWORD_RAISE)) != null  // token='raise'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, RAISE_STMT_ID, null);
    }

    // function_def: decorators function_def_raw | function_def_raw
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode function_def_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: function_def, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, FUNCTION_DEF_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, FUNCTION_DEF_ID);
        }
        // visiting Alt: decorators function_def_raw
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(decorators) - should work
        // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // generated call: (decorators_var = decorators_rule()) != null  // decorators
            // node.name: d, call.assigned_variable: decorators_var
        // collecting vars: decorators_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(function_def_raw) - should work
        // TODO replacing stmt_ty --> SSTNode
            // generated call: (function_def_raw_var = function_def_raw_rule()) != null  // function_def_raw
            // node.name: f, call.assigned_variable: function_def_raw_var
        // collecting vars: function_def_raw_var, SSTNode
        //    vars: {'decorators_var': 'SSTNode[]', 'function_def_raw_var': 'SSTNode'}
        SSTNode[] decorators_var = null;
        SSTNode function_def_raw_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: decorators
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(decorators)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(decorators) - should work
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // REMOVE result call (decorators_var = decorators_rule()) != null  // decorators
            (decorators_var = decorators_rule()) != null  // decorators
            &&
            // TODO visiting JavaParserGeneratorNamedItem: function_def_raw
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(function_def_raw)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(function_def_raw) - should work
            // TODO replacing stmt_ty --> SSTNode
            // REMOVE result call (function_def_raw_var = function_def_raw_rule()) != null  // function_def_raw
            (function_def_raw_var = function_def_raw_rule()) != null  // function_def_raw
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: function_def_raw
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(function_def_raw) - should work
        // TODO replacing stmt_ty --> SSTNode
            // generated call: (function_def_raw_var = function_def_raw_rule()) != null  // function_def_raw
            // node.name: None, call.assigned_variable: function_def_raw_var
        // collecting vars: function_def_raw_var, SSTNode
        //    vars: {'function_def_raw_var': 'SSTNode'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: function_def_raw
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(function_def_raw)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(function_def_raw) - should work
            // TODO replacing stmt_ty --> SSTNode
            // REMOVE result call (function_def_raw_var = function_def_raw_rule()) != null  // function_def_raw
            (function_def_raw_var = function_def_raw_rule()) != null  // function_def_raw
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, FUNCTION_DEF_ID, null);
    }

    // function_def_raw:
    //     | 'def' NAME '(' params? ')' ['->' expression] &&':' func_type_comment? block
    //     | ASYNC 'def' NAME '(' params? ')' ['->' expression] &&':' func_type_comment? block
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode function_def_raw_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: function_def_raw, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, FUNCTION_DEF_RAW_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, FUNCTION_DEF_RAW_ID);
        }
        // visiting Alt: 'def' NAME '(' params? ')' ['->' expression] &&':' func_type_comment? block
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('def')
            // generated call: (_keyword = expect(KEYWORD_DEF)) != null  // token='def'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: n, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(params?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(params)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_74_var = _tmp_74_rule()) != null  // params
            // generated call: ((_opt_var = _tmp_74_rule()) != null || _opt_var == null)  // params?
            // node.name: params, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['->' expression])
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('->' expression)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_75_var = _tmp_75_rule()) != null  // '->' expression
            // generated call: ((_opt_var = _tmp_75_rule()) != null || _opt_var == null)  // ['->' expression]
            // node.name: a, call.assigned_variable: _opt_var
        // collecting vars: _opt_var_1, None
        // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(func_type_comment?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(func_type_comment)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_76_var = _tmp_76_rule()) != null  // func_type_comment
            // generated call: ((_opt_var = _tmp_76_rule()) != null || _opt_var == null)  // func_type_comment?
            // node.name: tc, call.assigned_variable: _opt_var
        // collecting vars: _opt_var_2, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // generated call: (block_var = block_rule()) != null  // block
            // node.name: b, call.assigned_variable: block_var
        // collecting vars: block_var, SSTNode[]
        //    vars: {'_keyword': 'Token', 'name_var': 'Token', '_literal': 'Token', '_opt_var': None, '_literal_1': 'Token', '_opt_var_1': None, None: None, '_opt_var_2': None, 'block_var': 'SSTNode[]'}
        Token _keyword = null;
        Token _literal = null;
        Token _literal_1 = null;
        Object _opt_var = null;
        Object _opt_var_1 = null;
        Object _opt_var_2 = null;
        SSTNode[] block_var = null;
        Token name_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'def'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('def')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('def')
            // REMOVE result call (_keyword = expect(KEYWORD_DEF)) != null  // token='def'
            (_keyword = expect(KEYWORD_DEF)) != null  // token='def'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            &&
            // TODO visiting JavaParserGeneratorNamedItem: params?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(params?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(params?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(params)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_74_var = _tmp_74_rule()) != null  // params
            // REMOVE result call ((_opt_var = _tmp_74_rule()) != null || _opt_var == null)  // params?
            ((_opt_var = _tmp_74_rule()) != null || _opt_var == null)  // params?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ['->' expression]
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(['->' expression])
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['->' expression])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('->' expression)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_75_var = _tmp_75_rule()) != null  // '->' expression
            // REMOVE result call ((_opt_var = _tmp_75_rule()) != null || _opt_var == null)  // ['->' expression]
            ((_opt_var_1 = _tmp_75_rule()) != null || _opt_var_1 == null)  // ['->' expression]
            &&
            // TODO visiting JavaParserGeneratorNamedItem: &&':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&&':')
            // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
            // TODO call is not created &&':' -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: func_type_comment?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(func_type_comment?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(func_type_comment?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(func_type_comment)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_76_var = _tmp_76_rule()) != null  // func_type_comment
            // REMOVE result call ((_opt_var = _tmp_76_rule()) != null || _opt_var == null)  // func_type_comment?
            ((_opt_var_2 = _tmp_76_rule()) != null || _opt_var_2 == null)  // func_type_comment?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // REMOVE result call (block_var = block_rule()) != null  // block
            (block_var = block_rule()) != null  // block
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: ASYNC 'def' NAME '(' params? ')' ['->' expression] &&':' func_type_comment? block
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
            // generated call: (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            // node.name: None, call.assigned_variable: async_var
        // collecting vars: async_var, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('def')
            // generated call: (_keyword = expect(KEYWORD_DEF)) != null  // token='def'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: n, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(params?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(params)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_77_var = _tmp_77_rule()) != null  // params
            // generated call: ((_opt_var = _tmp_77_rule()) != null || _opt_var == null)  // params?
            // node.name: params, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['->' expression])
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('->' expression)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_78_var = _tmp_78_rule()) != null  // '->' expression
            // generated call: ((_opt_var = _tmp_78_rule()) != null || _opt_var == null)  // ['->' expression]
            // node.name: a, call.assigned_variable: _opt_var
        // collecting vars: _opt_var_1, None
        // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(func_type_comment?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(func_type_comment)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_79_var = _tmp_79_rule()) != null  // func_type_comment
            // generated call: ((_opt_var = _tmp_79_rule()) != null || _opt_var == null)  // func_type_comment?
            // node.name: tc, call.assigned_variable: _opt_var
        // collecting vars: _opt_var_2, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // generated call: (block_var = block_rule()) != null  // block
            // node.name: b, call.assigned_variable: block_var
        // collecting vars: block_var, SSTNode[]
        //    vars: {'async_var': 'Token', '_keyword': 'Token', 'name_var': 'Token', '_literal': 'Token', '_opt_var': None, '_literal_1': 'Token', '_opt_var_1': None, None: None, '_opt_var_2': None, 'block_var': 'SSTNode[]'}
        Token async_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ASYNC
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(ASYNC)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
            // REMOVE result call (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: 'def'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('def')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('def')
            // REMOVE result call (_keyword = expect(KEYWORD_DEF)) != null  // token='def'
            (_keyword = expect(KEYWORD_DEF)) != null  // token='def'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            &&
            // TODO visiting JavaParserGeneratorNamedItem: params?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(params?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(params?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(params)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_77_var = _tmp_77_rule()) != null  // params
            // REMOVE result call ((_opt_var = _tmp_77_rule()) != null || _opt_var == null)  // params?
            ((_opt_var = _tmp_77_rule()) != null || _opt_var == null)  // params?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ['->' expression]
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(['->' expression])
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['->' expression])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('->' expression)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_78_var = _tmp_78_rule()) != null  // '->' expression
            // REMOVE result call ((_opt_var = _tmp_78_rule()) != null || _opt_var == null)  // ['->' expression]
            ((_opt_var_1 = _tmp_78_rule()) != null || _opt_var_1 == null)  // ['->' expression]
            &&
            // TODO visiting JavaParserGeneratorNamedItem: &&':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&&':')
            // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
            // TODO call is not created &&':' -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: func_type_comment?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(func_type_comment?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(func_type_comment?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(func_type_comment)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_79_var = _tmp_79_rule()) != null  // func_type_comment
            // REMOVE result call ((_opt_var = _tmp_79_rule()) != null || _opt_var == null)  // func_type_comment?
            ((_opt_var_2 = _tmp_79_rule()) != null || _opt_var_2 == null)  // func_type_comment?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // REMOVE result call (block_var = block_rule()) != null  // block
            (block_var = block_rule()) != null  // block
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, FUNCTION_DEF_RAW_ID, null);
    }

    // func_type_comment:
    //     | NEWLINE TYPE_COMMENT &(NEWLINE INDENT)
    //     | invalid_double_type_comments
    //     | TYPE_COMMENT
    // TODO replacing Token* --> SSTNode[]
    public SSTNode[] func_type_comment_rule() {
    // isLoop: False, isGather: False, type: Token*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: func_type_comment, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, FUNC_TYPE_COMMENT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, FUNC_TYPE_COMMENT_ID);
        }
        // visiting Alt: NEWLINE TYPE_COMMENT &(NEWLINE INDENT)
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // generated call: (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            // node.name: None, call.assigned_variable: newline_var
        // collecting vars: newline_var, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            // node.name: t, call.assigned_variable: type_comment_var
        // collecting vars: type_comment_var, Token
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&(NEWLINE INDENT))
            // generated call: None
        // collecting vars: None, None
        //    vars: {'newline_var': 'Token', 'type_comment_var': 'Token', None: None}
        Token newline_var = null;
        Token type_comment_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: NEWLINE
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // REMOVE result call (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // REMOVE result call (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: &(NEWLINE INDENT)
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&(NEWLINE INDENT))
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&(NEWLINE INDENT))
            // TODO call is not created &(NEWLINE INDENT) -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: invalid_double_type_comments
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_double_type_comments) - should work
            // generated call: (invalid_double_type_comments_var = invalid_double_type_comments_rule()) != null  // invalid_double_type_comments
            // node.name: None, call.assigned_variable: invalid_double_type_comments_var
        // collecting vars: invalid_double_type_comments_var, None
        //    vars: {'invalid_double_type_comments_var': None}
        Object invalid_double_type_comments_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: invalid_double_type_comments
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_double_type_comments)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_double_type_comments) - should work
            // REMOVE result call (invalid_double_type_comments_var = invalid_double_type_comments_rule()) != null  // invalid_double_type_comments
            (invalid_double_type_comments_var = invalid_double_type_comments_rule()) != null  // invalid_double_type_comments
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: TYPE_COMMENT
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            // node.name: None, call.assigned_variable: type_comment_var
        // collecting vars: type_comment_var, Token
        //    vars: {'type_comment_var': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // REMOVE result call (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, FUNC_TYPE_COMMENT_ID, null);
    }

    // params: invalid_parameters | parameters
    // TODO replacing arguments_ty --> SSTNode
    public SSTNode params_rule() {
    // isLoop: False, isGather: False, type: arguments_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: params, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, PARAMS_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, PARAMS_ID);
        }
        // visiting Alt: invalid_parameters
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_parameters) - should work
            // generated call: (invalid_parameters_var = invalid_parameters_rule()) != null  // invalid_parameters
            // node.name: None, call.assigned_variable: invalid_parameters_var
        // collecting vars: invalid_parameters_var, None
        //    vars: {'invalid_parameters_var': None}
        Object invalid_parameters_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: invalid_parameters
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_parameters)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_parameters) - should work
            // REMOVE result call (invalid_parameters_var = invalid_parameters_rule()) != null  // invalid_parameters
            (invalid_parameters_var = invalid_parameters_rule()) != null  // invalid_parameters
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: parameters
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(parameters) - should work
        // TODO replacing arguments_ty --> SSTNode
            // generated call: (parameters_var = parameters_rule()) != null  // parameters
            // node.name: None, call.assigned_variable: parameters_var
        // collecting vars: parameters_var, SSTNode
        //    vars: {'parameters_var': 'SSTNode'}
        SSTNode parameters_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: parameters
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(parameters)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(parameters) - should work
            // TODO replacing arguments_ty --> SSTNode
            // REMOVE result call (parameters_var = parameters_rule()) != null  // parameters
            (parameters_var = parameters_rule()) != null  // parameters
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, PARAMS_ID, null);
    }

    // parameters:
    //     | slash_no_default param_no_default* param_with_default* star_etc?
    //     | slash_with_default param_with_default* star_etc?
    //     | param_no_default+ param_with_default* star_etc?
    //     | param_with_default+ star_etc?
    //     | star_etc
    // TODO replacing arguments_ty --> SSTNode
    public SSTNode parameters_rule() {
    // isLoop: False, isGather: False, type: arguments_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: parameters, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, PARAMETERS_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, PARAMETERS_ID);
        }
        // visiting Alt: slash_no_default param_no_default* param_with_default* star_etc?
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slash_no_default) - should work
        // TODO replacing asdl_arg_seq[] --> SSTNode[]
            // generated call: (slash_no_default_var = slash_no_default_rule()) != null  // slash_no_default
            // node.name: a, call.assigned_variable: slash_no_default_var
        // collecting vars: slash_no_default_var, SSTNode[]
        // TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_no_default*)
            // generated call: (_loop0_80_var = _loop0_80_rule()) != null  // param_no_default*
            // node.name: b, call.assigned_variable: _loop0_80_var
        // collecting vars: _loop0_80_var, asdl_arg_seq*
        // TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_with_default*)
            // generated call: (_loop0_81_var = _loop0_81_rule()) != null  // param_with_default*
            // node.name: c, call.assigned_variable: _loop0_81_var
        // collecting vars: _loop0_81_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_etc?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_etc)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_82_var = _tmp_82_rule()) != null  // star_etc
            // generated call: ((_opt_var = _tmp_82_rule()) != null || _opt_var == null)  // star_etc?
            // node.name: d, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'slash_no_default_var': 'SSTNode[]', '_loop0_80_var': 'asdl_arg_seq*', '_loop0_81_var': 'SSTNode[]', '_opt_var': None}
        // TODO replacing asdl_arg_seq* --> SSTNode[]
        SSTNode[] _loop0_80_var = null;
        SSTNode[] _loop0_81_var = null;
        Object _opt_var = null;
        SSTNode[] slash_no_default_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: slash_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(slash_no_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slash_no_default) - should work
            // TODO replacing asdl_arg_seq[] --> SSTNode[]
            // REMOVE result call (slash_no_default_var = slash_no_default_rule()) != null  // slash_no_default
            (slash_no_default_var = slash_no_default_rule()) != null  // slash_no_default
            &&
            // TODO visiting JavaParserGeneratorNamedItem: param_no_default*
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default*)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_no_default*)
            // REMOVE result call (_loop0_80_var = _loop0_80_rule()) != null  // param_no_default*
            (_loop0_80_var = (SSTNode[])_loop0_80_rule()) != null  // param_no_default*
            &&
            // TODO visiting JavaParserGeneratorNamedItem: param_with_default*
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_with_default*)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_with_default*)
            // REMOVE result call (_loop0_81_var = _loop0_81_rule()) != null  // param_with_default*
            (_loop0_81_var = _loop0_81_rule()) != null  // param_with_default*
            &&
            // TODO visiting JavaParserGeneratorNamedItem: star_etc?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_etc?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_etc?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_etc)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_82_var = _tmp_82_rule()) != null  // star_etc
            // REMOVE result call ((_opt_var = _tmp_82_rule()) != null || _opt_var == null)  // star_etc?
            ((_opt_var = _tmp_82_rule()) != null || _opt_var == null)  // star_etc?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: slash_with_default param_with_default* star_etc?
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slash_with_default) - should work
        // TODO replacing SlashWithDefault[] --> SSTNode[]
            // generated call: (slash_with_default_var = slash_with_default_rule()) != null  // slash_with_default
            // node.name: a, call.assigned_variable: slash_with_default_var
        // collecting vars: slash_with_default_var, SSTNode[]
        // TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_with_default*)
            // generated call: (_loop0_83_var = _loop0_83_rule()) != null  // param_with_default*
            // node.name: b, call.assigned_variable: _loop0_83_var
        // collecting vars: _loop0_83_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_etc?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_etc)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_84_var = _tmp_84_rule()) != null  // star_etc
            // generated call: ((_opt_var = _tmp_84_rule()) != null || _opt_var == null)  // star_etc?
            // node.name: c, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'slash_with_default_var': 'SSTNode[]', '_loop0_83_var': 'SSTNode[]', '_opt_var': None}
        SSTNode[] _loop0_83_var = null;
        SSTNode[] slash_with_default_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: slash_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(slash_with_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slash_with_default) - should work
            // TODO replacing SlashWithDefault[] --> SSTNode[]
            // REMOVE result call (slash_with_default_var = slash_with_default_rule()) != null  // slash_with_default
            (slash_with_default_var = slash_with_default_rule()) != null  // slash_with_default
            &&
            // TODO visiting JavaParserGeneratorNamedItem: param_with_default*
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_with_default*)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_with_default*)
            // REMOVE result call (_loop0_83_var = _loop0_83_rule()) != null  // param_with_default*
            (_loop0_83_var = _loop0_83_rule()) != null  // param_with_default*
            &&
            // TODO visiting JavaParserGeneratorNamedItem: star_etc?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_etc?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_etc?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_etc)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_84_var = _tmp_84_rule()) != null  // star_etc
            // REMOVE result call ((_opt_var = _tmp_84_rule()) != null || _opt_var == null)  // star_etc?
            ((_opt_var = _tmp_84_rule()) != null || _opt_var == null)  // star_etc?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: param_no_default+ param_with_default* star_etc?
        // TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_no_default+)
            // generated call: (_loop1_85_var = _loop1_85_rule()) != null  // param_no_default+
            // node.name: a, call.assigned_variable: _loop1_85_var
        // collecting vars: _loop1_85_var, asdl_arg_seq*
        // TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_with_default*)
            // generated call: (_loop0_86_var = _loop0_86_rule()) != null  // param_with_default*
            // node.name: b, call.assigned_variable: _loop0_86_var
        // collecting vars: _loop0_86_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_etc?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_etc)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_87_var = _tmp_87_rule()) != null  // star_etc
            // generated call: ((_opt_var = _tmp_87_rule()) != null || _opt_var == null)  // star_etc?
            // node.name: c, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'_loop1_85_var': 'asdl_arg_seq*', '_loop0_86_var': 'SSTNode[]', '_opt_var': None}
        SSTNode[] _loop0_86_var = null;
        // TODO replacing asdl_arg_seq* --> SSTNode[]
        SSTNode[] _loop1_85_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: param_no_default+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default+)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_no_default+)
            // REMOVE result call (_loop1_85_var = _loop1_85_rule()) != null  // param_no_default+
            (_loop1_85_var = (SSTNode[])_loop1_85_rule()) != null  // param_no_default+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: param_with_default*
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_with_default*)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_with_default*)
            // REMOVE result call (_loop0_86_var = _loop0_86_rule()) != null  // param_with_default*
            (_loop0_86_var = _loop0_86_rule()) != null  // param_with_default*
            &&
            // TODO visiting JavaParserGeneratorNamedItem: star_etc?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_etc?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_etc?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_etc)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_87_var = _tmp_87_rule()) != null  // star_etc
            // REMOVE result call ((_opt_var = _tmp_87_rule()) != null || _opt_var == null)  // star_etc?
            ((_opt_var = _tmp_87_rule()) != null || _opt_var == null)  // star_etc?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: param_with_default+ star_etc?
        // TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_with_default+)
            // generated call: (_loop1_88_var = _loop1_88_rule()) != null  // param_with_default+
            // node.name: a, call.assigned_variable: _loop1_88_var
        // collecting vars: _loop1_88_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_etc?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_etc)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_89_var = _tmp_89_rule()) != null  // star_etc
            // generated call: ((_opt_var = _tmp_89_rule()) != null || _opt_var == null)  // star_etc?
            // node.name: b, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'_loop1_88_var': 'SSTNode[]', '_opt_var': None}
        SSTNode[] _loop1_88_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: param_with_default+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_with_default+)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_with_default+)
            // REMOVE result call (_loop1_88_var = _loop1_88_rule()) != null  // param_with_default+
            (_loop1_88_var = _loop1_88_rule()) != null  // param_with_default+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: star_etc?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_etc?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_etc?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_etc)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_89_var = _tmp_89_rule()) != null  // star_etc
            // REMOVE result call ((_opt_var = _tmp_89_rule()) != null || _opt_var == null)  // star_etc?
            ((_opt_var = _tmp_89_rule()) != null || _opt_var == null)  // star_etc?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: star_etc
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_etc) - should work
        // TODO replacing StarEtc[] --> SSTNode[]
            // generated call: (star_etc_var = star_etc_rule()) != null  // star_etc
            // node.name: a, call.assigned_variable: star_etc_var
        // collecting vars: star_etc_var, SSTNode[]
        //    vars: {'star_etc_var': 'SSTNode[]'}
        SSTNode[] star_etc_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_etc
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_etc)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_etc) - should work
            // TODO replacing StarEtc[] --> SSTNode[]
            // REMOVE result call (star_etc_var = star_etc_rule()) != null  // star_etc
            (star_etc_var = star_etc_rule()) != null  // star_etc
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, PARAMETERS_ID, null);
    }

    // slash_no_default: param_no_default+ '/' ',' | param_no_default+ '/' &')'
    // TODO replacing asdl_arg_seq* --> SSTNode[]
    public SSTNode[] slash_no_default_rule() {
    // isLoop: False, isGather: False, type: asdl_arg_seq*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: slash_no_default, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, SLASH_NO_DEFAULT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, SLASH_NO_DEFAULT_ID);
        }
        // visiting Alt: param_no_default+ '/' ','
        // TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_no_default+)
            // generated call: (_loop1_90_var = _loop1_90_rule()) != null  // param_no_default+
            // node.name: a, call.assigned_variable: _loop1_90_var
        // collecting vars: _loop1_90_var, asdl_arg_seq*
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
            // generated call: (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_loop1_90_var': 'asdl_arg_seq*', '_literal': 'Token', '_literal_1': 'Token'}
        Token _literal = null;
        Token _literal_1 = null;
        // TODO replacing asdl_arg_seq* --> SSTNode[]
        SSTNode[] _loop1_90_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: param_no_default+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default+)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_no_default+)
            // REMOVE result call (_loop1_90_var = _loop1_90_rule()) != null  // param_no_default+
            (_loop1_90_var = (SSTNode[])_loop1_90_rule()) != null  // param_no_default+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '/'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('/')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
            // REMOVE result call (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal_1 = expect(Token.Kind.COMMA)) != null  // token=','
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: param_no_default+ '/' &')'
        // TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_no_default+)
            // generated call: (_loop1_91_var = _loop1_91_rule()) != null  // param_no_default+
            // node.name: a, call.assigned_variable: _loop1_91_var
        // collecting vars: _loop1_91_var, asdl_arg_seq*
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
            // generated call: (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
            // generated call: None
        // collecting vars: None, None
        //    vars: {'_loop1_91_var': 'asdl_arg_seq*', '_literal': 'Token', None: None}
        // TODO replacing asdl_arg_seq* --> SSTNode[]
        SSTNode[] _loop1_91_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: param_no_default+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default+)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_no_default+)
            // REMOVE result call (_loop1_91_var = _loop1_91_rule()) != null  // param_no_default+
            (_loop1_91_var = (SSTNode[])_loop1_91_rule()) != null  // param_no_default+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '/'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('/')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
            // REMOVE result call (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: &')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&')')
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
            // TODO call is not created &')' -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, SLASH_NO_DEFAULT_ID, null);
    }

    // slash_with_default:
    //     | param_no_default* param_with_default+ '/' ','
    //     | param_no_default* param_with_default+ '/' &')'
    // TODO replacing SlashWithDefault* --> SSTNode[]
    public SSTNode[] slash_with_default_rule() {
    // isLoop: False, isGather: False, type: SlashWithDefault*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: slash_with_default, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, SLASH_WITH_DEFAULT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, SLASH_WITH_DEFAULT_ID);
        }
        // visiting Alt: param_no_default* param_with_default+ '/' ','
        // TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_no_default*)
            // generated call: (_loop0_92_var = _loop0_92_rule()) != null  // param_no_default*
            // node.name: a, call.assigned_variable: _loop0_92_var
        // collecting vars: _loop0_92_var, SSTNode[]
        // TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_with_default+)
            // generated call: (_loop1_93_var = _loop1_93_rule()) != null  // param_with_default+
            // node.name: b, call.assigned_variable: _loop1_93_var
        // collecting vars: _loop1_93_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
            // generated call: (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_loop0_92_var': 'SSTNode[]', '_loop1_93_var': 'SSTNode[]', '_literal': 'Token', '_literal_1': 'Token'}
        Token _literal = null;
        Token _literal_1 = null;
        SSTNode[] _loop0_92_var = null;
        SSTNode[] _loop1_93_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: param_no_default*
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default*)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_no_default*)
            // REMOVE result call (_loop0_92_var = _loop0_92_rule()) != null  // param_no_default*
            (_loop0_92_var = _loop0_92_rule()) != null  // param_no_default*
            &&
            // TODO visiting JavaParserGeneratorNamedItem: param_with_default+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_with_default+)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_with_default+)
            // REMOVE result call (_loop1_93_var = _loop1_93_rule()) != null  // param_with_default+
            (_loop1_93_var = _loop1_93_rule()) != null  // param_with_default+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '/'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('/')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
            // REMOVE result call (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal_1 = expect(Token.Kind.COMMA)) != null  // token=','
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: param_no_default* param_with_default+ '/' &')'
        // TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_no_default*)
            // generated call: (_loop0_94_var = _loop0_94_rule()) != null  // param_no_default*
            // node.name: a, call.assigned_variable: _loop0_94_var
        // collecting vars: _loop0_94_var, SSTNode[]
        // TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_with_default+)
            // generated call: (_loop1_95_var = _loop1_95_rule()) != null  // param_with_default+
            // node.name: b, call.assigned_variable: _loop1_95_var
        // collecting vars: _loop1_95_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
            // generated call: (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
            // generated call: None
        // collecting vars: None, None
        //    vars: {'_loop0_94_var': 'SSTNode[]', '_loop1_95_var': 'SSTNode[]', '_literal': 'Token', None: None}
        SSTNode[] _loop0_94_var = null;
        SSTNode[] _loop1_95_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: param_no_default*
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default*)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_no_default*)
            // REMOVE result call (_loop0_94_var = _loop0_94_rule()) != null  // param_no_default*
            (_loop0_94_var = _loop0_94_rule()) != null  // param_no_default*
            &&
            // TODO visiting JavaParserGeneratorNamedItem: param_with_default+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_with_default+)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_with_default+)
            // REMOVE result call (_loop1_95_var = _loop1_95_rule()) != null  // param_with_default+
            (_loop1_95_var = _loop1_95_rule()) != null  // param_with_default+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '/'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('/')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
            // REMOVE result call (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: &')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&')')
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
            // TODO call is not created &')' -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, SLASH_WITH_DEFAULT_ID, null);
    }

    // star_etc:
    //     | '*' param_no_default param_maybe_default* kwds?
    //     | '*' ',' param_maybe_default+ kwds?
    //     | kwds
    //     | invalid_star_etc
    // TODO replacing StarEtc* --> SSTNode[]
    public SSTNode[] star_etc_rule() {
    // isLoop: False, isGather: False, type: StarEtc*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: star_etc, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, STAR_ETC_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, STAR_ETC_ID);
        }
        // visiting Alt: '*' param_no_default param_maybe_default* kwds?
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            // node.name: a, call.assigned_variable: param_no_default_var
        // collecting vars: param_no_default_var, SSTNode
        // TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_maybe_default*)
            // generated call: (_loop0_96_var = _loop0_96_rule()) != null  // param_maybe_default*
            // node.name: b, call.assigned_variable: _loop0_96_var
        // collecting vars: _loop0_96_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(kwds?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(kwds)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_97_var = _tmp_97_rule()) != null  // kwds
            // generated call: ((_opt_var = _tmp_97_rule()) != null || _opt_var == null)  // kwds?
            // node.name: c, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'_literal': 'Token', 'param_no_default_var': 'SSTNode', '_loop0_96_var': 'SSTNode[]', '_opt_var': None}
        Token _literal = null;
        SSTNode[] _loop0_96_var = null;
        Object _opt_var = null;
        SSTNode param_no_default_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '*'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            &&
            // TODO visiting JavaParserGeneratorNamedItem: param_maybe_default*
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_maybe_default*)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_maybe_default*)
            // REMOVE result call (_loop0_96_var = _loop0_96_rule()) != null  // param_maybe_default*
            (_loop0_96_var = _loop0_96_rule()) != null  // param_maybe_default*
            &&
            // TODO visiting JavaParserGeneratorNamedItem: kwds?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kwds?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(kwds?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(kwds)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_97_var = _tmp_97_rule()) != null  // kwds
            // REMOVE result call ((_opt_var = _tmp_97_rule()) != null || _opt_var == null)  // kwds?
            ((_opt_var = _tmp_97_rule()) != null || _opt_var == null)  // kwds?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '*' ',' param_maybe_default+ kwds?
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        // TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_maybe_default+)
            // generated call: (_loop1_98_var = _loop1_98_rule()) != null  // param_maybe_default+
            // node.name: b, call.assigned_variable: _loop1_98_var
        // collecting vars: _loop1_98_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(kwds?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(kwds)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_99_var = _tmp_99_rule()) != null  // kwds
            // generated call: ((_opt_var = _tmp_99_rule()) != null || _opt_var == null)  // kwds?
            // node.name: c, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'_literal': 'Token', '_literal_1': 'Token', '_loop1_98_var': 'SSTNode[]', '_opt_var': None}
        Token _literal_1 = null;
        SSTNode[] _loop1_98_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '*'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal_1 = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: param_maybe_default+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_maybe_default+)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_maybe_default+)
            // REMOVE result call (_loop1_98_var = _loop1_98_rule()) != null  // param_maybe_default+
            (_loop1_98_var = _loop1_98_rule()) != null  // param_maybe_default+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: kwds?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kwds?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(kwds?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(kwds)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_99_var = _tmp_99_rule()) != null  // kwds
            // REMOVE result call ((_opt_var = _tmp_99_rule()) != null || _opt_var == null)  // kwds?
            ((_opt_var = _tmp_99_rule()) != null || _opt_var == null)  // kwds?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: kwds
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwds) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (kwds_var = kwds_rule()) != null  // kwds
            // node.name: a, call.assigned_variable: kwds_var
        // collecting vars: kwds_var, SSTNode
        //    vars: {'kwds_var': 'SSTNode'}
        SSTNode kwds_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: kwds
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kwds)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwds) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (kwds_var = kwds_rule()) != null  // kwds
            (kwds_var = kwds_rule()) != null  // kwds
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: invalid_star_etc
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_star_etc) - should work
            // generated call: (invalid_star_etc_var = invalid_star_etc_rule()) != null  // invalid_star_etc
            // node.name: None, call.assigned_variable: invalid_star_etc_var
        // collecting vars: invalid_star_etc_var, None
        //    vars: {'invalid_star_etc_var': None}
        Object invalid_star_etc_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: invalid_star_etc
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_star_etc)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_star_etc) - should work
            // REMOVE result call (invalid_star_etc_var = invalid_star_etc_rule()) != null  // invalid_star_etc
            (invalid_star_etc_var = invalid_star_etc_rule()) != null  // invalid_star_etc
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, STAR_ETC_ID, null);
    }

    // kwds: '**' param_no_default
    // TODO replacing arg_ty --> SSTNode
    public SSTNode kwds_rule() {
    // isLoop: False, isGather: False, type: arg_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: kwds, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, KWDS_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, KWDS_ID);
        }
        // visiting Alt: '**' param_no_default
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
            // generated call: (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            // node.name: a, call.assigned_variable: param_no_default_var
        // collecting vars: param_no_default_var, SSTNode
        //    vars: {'_literal': 'Token', 'param_no_default_var': 'SSTNode'}
        Token _literal = null;
        SSTNode param_no_default_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '**'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('**')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
            // REMOVE result call (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            (param_no_default_var = param_no_default_rule()) != null  // param_no_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, KWDS_ID, null);
    }

    // param_no_default: param ',' TYPE_COMMENT? | param TYPE_COMMENT? &')'
    // TODO replacing arg_ty --> SSTNode
    public SSTNode param_no_default_rule() {
    // isLoop: False, isGather: False, type: arg_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: param_no_default, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, PARAM_NO_DEFAULT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, PARAM_NO_DEFAULT_ID);
        }
        // visiting Alt: param ',' TYPE_COMMENT?
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (param_var = param_rule()) != null  // param
            // node.name: a, call.assigned_variable: param_var
        // collecting vars: param_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            // generated call: ((_opt_var = expect(Token.Kind.TYPE_COMMENT)) != null || _opt_var == null)  // TYPE_COMMENT?
            // node.name: tc, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'param_var': 'SSTNode', '_literal': 'Token', '_opt_var': None}
        Token _literal = null;
        Object _opt_var = null;
        SSTNode param_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: param
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (param_var = param_rule()) != null  // param
            (param_var = param_rule()) != null  // param
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
                // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            // REMOVE result call ((_opt_var = expect(Token.Kind.TYPE_COMMENT)) != null || _opt_var == null)  // TYPE_COMMENT?
            ((_opt_var = expect(Token.Kind.TYPE_COMMENT)) != null || _opt_var == null)  // TYPE_COMMENT?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: param TYPE_COMMENT? &')'
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (param_var = param_rule()) != null  // param
            // node.name: a, call.assigned_variable: param_var
        // collecting vars: param_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            // generated call: ((_opt_var = expect(Token.Kind.TYPE_COMMENT)) != null || _opt_var == null)  // TYPE_COMMENT?
            // node.name: tc, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
            // generated call: None
        // collecting vars: None, None
        //    vars: {'param_var': 'SSTNode', '_opt_var': None, None: None}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: param
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (param_var = param_rule()) != null  // param
            (param_var = param_rule()) != null  // param
            &&
            // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
                // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            // REMOVE result call ((_opt_var = expect(Token.Kind.TYPE_COMMENT)) != null || _opt_var == null)  // TYPE_COMMENT?
            ((_opt_var = expect(Token.Kind.TYPE_COMMENT)) != null || _opt_var == null)  // TYPE_COMMENT?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: &')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&')')
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
            // TODO call is not created &')' -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, PARAM_NO_DEFAULT_ID, null);
    }

    // param_with_default:
    //     | param default_param ',' TYPE_COMMENT?
    //     | param default_param TYPE_COMMENT? &')'
    // TODO replacing NameDefaultPair* --> SSTNode[]
    public SSTNode[] param_with_default_rule() {
    // isLoop: False, isGather: False, type: NameDefaultPair*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: param_with_default, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, PARAM_WITH_DEFAULT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, PARAM_WITH_DEFAULT_ID);
        }
        // visiting Alt: param default_param ',' TYPE_COMMENT?
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (param_var = param_rule()) != null  // param
            // node.name: a, call.assigned_variable: param_var
        // collecting vars: param_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
            // generated call: (default_param_var = default_param_rule()) != null  // default_param
            // node.name: c, call.assigned_variable: default_param_var
        // collecting vars: default_param_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            // generated call: ((_opt_var = expect(Token.Kind.TYPE_COMMENT)) != null || _opt_var == null)  // TYPE_COMMENT?
            // node.name: tc, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'param_var': 'SSTNode', 'default_param_var': 'SSTNode', '_literal': 'Token', '_opt_var': None}
        Token _literal = null;
        Object _opt_var = null;
        SSTNode default_param_var = null;
        SSTNode param_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: param
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (param_var = param_rule()) != null  // param
            (param_var = param_rule()) != null  // param
            &&
            // TODO visiting JavaParserGeneratorNamedItem: default_param
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(default_param)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
            // REMOVE result call (default_param_var = default_param_rule()) != null  // default_param
            (default_param_var = default_param_rule()) != null  // default_param
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
                // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            // REMOVE result call ((_opt_var = expect(Token.Kind.TYPE_COMMENT)) != null || _opt_var == null)  // TYPE_COMMENT?
            ((_opt_var = expect(Token.Kind.TYPE_COMMENT)) != null || _opt_var == null)  // TYPE_COMMENT?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: param default_param TYPE_COMMENT? &')'
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (param_var = param_rule()) != null  // param
            // node.name: a, call.assigned_variable: param_var
        // collecting vars: param_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
            // generated call: (default_param_var = default_param_rule()) != null  // default_param
            // node.name: c, call.assigned_variable: default_param_var
        // collecting vars: default_param_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            // generated call: ((_opt_var = expect(Token.Kind.TYPE_COMMENT)) != null || _opt_var == null)  // TYPE_COMMENT?
            // node.name: tc, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
            // generated call: None
        // collecting vars: None, None
        //    vars: {'param_var': 'SSTNode', 'default_param_var': 'SSTNode', '_opt_var': None, None: None}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: param
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (param_var = param_rule()) != null  // param
            (param_var = param_rule()) != null  // param
            &&
            // TODO visiting JavaParserGeneratorNamedItem: default_param
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(default_param)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
            // REMOVE result call (default_param_var = default_param_rule()) != null  // default_param
            (default_param_var = default_param_rule()) != null  // default_param
            &&
            // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
                // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            // REMOVE result call ((_opt_var = expect(Token.Kind.TYPE_COMMENT)) != null || _opt_var == null)  // TYPE_COMMENT?
            ((_opt_var = expect(Token.Kind.TYPE_COMMENT)) != null || _opt_var == null)  // TYPE_COMMENT?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: &')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&')')
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
            // TODO call is not created &')' -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, PARAM_WITH_DEFAULT_ID, null);
    }

    // param_maybe_default:
    //     | param default_param? ',' TYPE_COMMENT?
    //     | param default_param? TYPE_COMMENT? &')'
    // TODO replacing NameDefaultPair* --> SSTNode[]
    public SSTNode[] param_maybe_default_rule() {
    // isLoop: False, isGather: False, type: NameDefaultPair*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: param_maybe_default, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, PARAM_MAYBE_DEFAULT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, PARAM_MAYBE_DEFAULT_ID);
        }
        // visiting Alt: param default_param? ',' TYPE_COMMENT?
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (param_var = param_rule()) != null  // param
            // node.name: a, call.assigned_variable: param_var
        // collecting vars: param_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(default_param?)
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
            // JavaCallMakerVisitor.visit_Opt.generated call: (default_param_var = default_param_rule()) != null  // default_param
            // generated call: ((_opt_var = default_param_rule()) != null || _opt_var == null)  // default_param?
            // node.name: c, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            // generated call: ((_opt_var = expect(Token.Kind.TYPE_COMMENT)) != null || _opt_var == null)  // TYPE_COMMENT?
            // node.name: tc, call.assigned_variable: _opt_var
        // collecting vars: _opt_var_1, None
        //    vars: {'param_var': 'SSTNode', '_opt_var': None, '_literal': 'Token', '_opt_var_1': None}
        Token _literal = null;
        Object _opt_var = null;
        Object _opt_var_1 = null;
        SSTNode param_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: param
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (param_var = param_rule()) != null  // param
            (param_var = param_rule()) != null  // param
            &&
            // TODO visiting JavaParserGeneratorNamedItem: default_param?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(default_param?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(default_param?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
                // JavaCallMakerVisitor.visit_Opt.generated call: (default_param_var = default_param_rule()) != null  // default_param
            // REMOVE result call ((_opt_var = default_param_rule()) != null || _opt_var == null)  // default_param?
            ((_opt_var = default_param_rule()) != null || _opt_var == null)  // default_param?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
                // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            // REMOVE result call ((_opt_var = expect(Token.Kind.TYPE_COMMENT)) != null || _opt_var == null)  // TYPE_COMMENT?
            ((_opt_var_1 = expect(Token.Kind.TYPE_COMMENT)) != null || _opt_var_1 == null)  // TYPE_COMMENT?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: param default_param? TYPE_COMMENT? &')'
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (param_var = param_rule()) != null  // param
            // node.name: a, call.assigned_variable: param_var
        // collecting vars: param_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(default_param?)
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
            // JavaCallMakerVisitor.visit_Opt.generated call: (default_param_var = default_param_rule()) != null  // default_param
            // generated call: ((_opt_var = default_param_rule()) != null || _opt_var == null)  // default_param?
            // node.name: c, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            // generated call: ((_opt_var = expect(Token.Kind.TYPE_COMMENT)) != null || _opt_var == null)  // TYPE_COMMENT?
            // node.name: tc, call.assigned_variable: _opt_var
        // collecting vars: _opt_var_1, None
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
            // generated call: None
        // collecting vars: None, None
        //    vars: {'param_var': 'SSTNode', '_opt_var': None, '_opt_var_1': None, None: None}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: param
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (param_var = param_rule()) != null  // param
            (param_var = param_rule()) != null  // param
            &&
            // TODO visiting JavaParserGeneratorNamedItem: default_param?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(default_param?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(default_param?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
                // JavaCallMakerVisitor.visit_Opt.generated call: (default_param_var = default_param_rule()) != null  // default_param
            // REMOVE result call ((_opt_var = default_param_rule()) != null || _opt_var == null)  // default_param?
            ((_opt_var = default_param_rule()) != null || _opt_var == null)  // default_param?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
                // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            // REMOVE result call ((_opt_var = expect(Token.Kind.TYPE_COMMENT)) != null || _opt_var == null)  // TYPE_COMMENT?
            ((_opt_var_1 = expect(Token.Kind.TYPE_COMMENT)) != null || _opt_var_1 == null)  // TYPE_COMMENT?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: &')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&')')
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
            // TODO call is not created &')' -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, PARAM_MAYBE_DEFAULT_ID, null);
    }

    // param: NAME annotation?
    // TODO replacing arg_ty --> SSTNode
    public SSTNode param_rule() {
    // isLoop: False, isGather: False, type: arg_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: param, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, PARAM_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, PARAM_ID);
        }
        // visiting Alt: NAME annotation?
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: a, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(annotation?)
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(annotation) - should work
            // JavaCallMakerVisitor.visit_Opt.generated call: (annotation_var = annotation_rule()) != null  // annotation
            // generated call: ((_opt_var = annotation_rule()) != null || _opt_var == null)  // annotation?
            // node.name: b, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'name_var': 'Token', '_opt_var': None}
        Object _opt_var = null;
        Token name_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
            &&
            // TODO visiting JavaParserGeneratorNamedItem: annotation?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(annotation?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(annotation?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(annotation) - should work
                // JavaCallMakerVisitor.visit_Opt.generated call: (annotation_var = annotation_rule()) != null  // annotation
            // REMOVE result call ((_opt_var = annotation_rule()) != null || _opt_var == null)  // annotation?
            ((_opt_var = annotation_rule()) != null || _opt_var == null)  // annotation?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, PARAM_ID, null);
    }

    // annotation: ':' expression
    public SSTNode annotation_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: annotation, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, ANNOTATION_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, ANNOTATION_ID);
        }
        // visiting Alt: ':' expression
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: a, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        //    vars: {'_literal': 'Token', 'expression_var': 'SSTNode'}
        Token _literal = null;
        SSTNode expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, ANNOTATION_ID, null);
    }

    // default_param: '=' expression
    public SSTNode default_param_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: default_param, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, DEFAULT_PARAM_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, DEFAULT_PARAM_ID);
        }
        // visiting Alt: '=' expression
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
            // generated call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: a, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        //    vars: {'_literal': 'Token', 'expression_var': 'SSTNode'}
        Token _literal = null;
        SSTNode expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
            // REMOVE result call (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, DEFAULT_PARAM_ID, null);
    }

    // decorators: (('@' named_expression NEWLINE))+
    // TODO replacing asdl_expr_seq* --> SSTNode[]
    public SSTNode[] decorators_rule() {
    // isLoop: False, isGather: False, type: asdl_expr_seq*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: decorators, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, DECORATORS_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, DECORATORS_ID);
        }
        // visiting Alt: (('@' named_expression NEWLINE))+
        // TODO visiting JavaCallMakerVisitor.visit_Repeat1((('@' named_expression NEWLINE))+)
            // generated call: (_loop1_100_var = _loop1_100_rule()) != null  // (('@' named_expression NEWLINE))+
            // node.name: a, call.assigned_variable: _loop1_100_var
        // collecting vars: _loop1_100_var, asdl_expr_seq*
        //    vars: {'_loop1_100_var': 'asdl_expr_seq*'}
        // TODO replacing asdl_expr_seq* --> SSTNode[]
        SSTNode[] _loop1_100_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: (('@' named_expression NEWLINE))+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((('@' named_expression NEWLINE))+)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1((('@' named_expression NEWLINE))+)
            // REMOVE result call (_loop1_100_var = _loop1_100_rule()) != null  // (('@' named_expression NEWLINE))+
            (_loop1_100_var = (SSTNode[])_loop1_100_rule()) != null  // (('@' named_expression NEWLINE))+
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, DECORATORS_ID, null);
    }

    // class_def: decorators class_def_raw | class_def_raw
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode class_def_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: class_def, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, CLASS_DEF_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, CLASS_DEF_ID);
        }
        // visiting Alt: decorators class_def_raw
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(decorators) - should work
        // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // generated call: (decorators_var = decorators_rule()) != null  // decorators
            // node.name: a, call.assigned_variable: decorators_var
        // collecting vars: decorators_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(class_def_raw) - should work
        // TODO replacing stmt_ty --> SSTNode
            // generated call: (class_def_raw_var = class_def_raw_rule()) != null  // class_def_raw
            // node.name: b, call.assigned_variable: class_def_raw_var
        // collecting vars: class_def_raw_var, SSTNode
        //    vars: {'decorators_var': 'SSTNode[]', 'class_def_raw_var': 'SSTNode'}
        SSTNode class_def_raw_var = null;
        SSTNode[] decorators_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: decorators
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(decorators)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(decorators) - should work
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // REMOVE result call (decorators_var = decorators_rule()) != null  // decorators
            (decorators_var = decorators_rule()) != null  // decorators
            &&
            // TODO visiting JavaParserGeneratorNamedItem: class_def_raw
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(class_def_raw)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(class_def_raw) - should work
            // TODO replacing stmt_ty --> SSTNode
            // REMOVE result call (class_def_raw_var = class_def_raw_rule()) != null  // class_def_raw
            (class_def_raw_var = class_def_raw_rule()) != null  // class_def_raw
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: class_def_raw
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(class_def_raw) - should work
        // TODO replacing stmt_ty --> SSTNode
            // generated call: (class_def_raw_var = class_def_raw_rule()) != null  // class_def_raw
            // node.name: None, call.assigned_variable: class_def_raw_var
        // collecting vars: class_def_raw_var, SSTNode
        //    vars: {'class_def_raw_var': 'SSTNode'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: class_def_raw
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(class_def_raw)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(class_def_raw) - should work
            // TODO replacing stmt_ty --> SSTNode
            // REMOVE result call (class_def_raw_var = class_def_raw_rule()) != null  // class_def_raw
            (class_def_raw_var = class_def_raw_rule()) != null  // class_def_raw
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, CLASS_DEF_ID, null);
    }

    // class_def_raw: 'class' NAME ['(' arguments? ')'] &&':' block
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode class_def_raw_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: class_def_raw, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, CLASS_DEF_RAW_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, CLASS_DEF_RAW_ID);
        }
        // visiting Alt: 'class' NAME ['(' arguments? ')'] &&':' block
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('class')
            // generated call: (_keyword = expect(KEYWORD_CLASS)) != null  // token='class'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: a, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['(' arguments? ')'])
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('(' arguments? ')')
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_101_var = _tmp_101_rule()) != null  // '(' arguments? ')'
            // generated call: ((_opt_var = _tmp_101_rule()) != null || _opt_var == null)  // ['(' arguments? ')']
            // node.name: b, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // generated call: (block_var = block_rule()) != null  // block
            // node.name: c, call.assigned_variable: block_var
        // collecting vars: block_var, SSTNode[]
        //    vars: {'_keyword': 'Token', 'name_var': 'Token', '_opt_var': None, None: None, 'block_var': 'SSTNode[]'}
        Token _keyword = null;
        Object _opt_var = null;
        SSTNode[] block_var = null;
        Token name_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'class'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('class')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('class')
            // REMOVE result call (_keyword = expect(KEYWORD_CLASS)) != null  // token='class'
            (_keyword = expect(KEYWORD_CLASS)) != null  // token='class'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ['(' arguments? ')']
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(['(' arguments? ')'])
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['(' arguments? ')'])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('(' arguments? ')')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_101_var = _tmp_101_rule()) != null  // '(' arguments? ')'
            // REMOVE result call ((_opt_var = _tmp_101_rule()) != null || _opt_var == null)  // ['(' arguments? ')']
            ((_opt_var = _tmp_101_rule()) != null || _opt_var == null)  // ['(' arguments? ')']
            &&
            // TODO visiting JavaParserGeneratorNamedItem: &&':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&&':')
            // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
            // TODO call is not created &&':' -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // REMOVE result call (block_var = block_rule()) != null  // block
            (block_var = block_rule()) != null  // block
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, CLASS_DEF_RAW_ID, null);
    }

    // block: NEWLINE INDENT statements DEDENT | simple_stmts | invalid_block
    // TODO replacing SSTNode* --> SSTNode[]
    public SSTNode[] block_rule() {
    // isLoop: False, isGather: False, type: SSTNode*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: block, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, BLOCK_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, BLOCK_ID);
        }
        // visiting Alt: NEWLINE INDENT statements DEDENT
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // generated call: (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            // node.name: None, call.assigned_variable: newline_var
        // collecting vars: newline_var, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(INDENT) - should work
            // generated call: (indent_var = expect(Token.Kind.INDENT)) != null  // token='INDENT'
            // node.name: None, call.assigned_variable: indent_var
        // collecting vars: indent_var, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(statements) - should work
            // generated call: (statements_var = statements_rule()) != null  // statements
            // node.name: a, call.assigned_variable: statements_var
        // collecting vars: statements_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(DEDENT) - should work
            // generated call: (dedent_var = expect(Token.Kind.DEDENT)) != null  // token='DEDENT'
            // node.name: None, call.assigned_variable: dedent_var
        // collecting vars: dedent_var, Token
        //    vars: {'newline_var': 'Token', 'indent_var': 'Token', 'statements_var': 'SSTNode[]', 'dedent_var': 'Token'}
        Token dedent_var = null;
        Token indent_var = null;
        Token newline_var = null;
        SSTNode[] statements_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: NEWLINE
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // REMOVE result call (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: INDENT
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(INDENT)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(INDENT) - should work
            // REMOVE result call (indent_var = expect(Token.Kind.INDENT)) != null  // token='INDENT'
            (indent_var = expect(Token.Kind.INDENT)) != null  // token='INDENT'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: statements
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(statements)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(statements) - should work
            // REMOVE result call (statements_var = statements_rule()) != null  // statements
            (statements_var = statements_rule()) != null  // statements
            &&
            // TODO visiting JavaParserGeneratorNamedItem: DEDENT
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(DEDENT)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(DEDENT) - should work
            // REMOVE result call (dedent_var = expect(Token.Kind.DEDENT)) != null  // token='DEDENT'
            (dedent_var = expect(Token.Kind.DEDENT)) != null  // token='DEDENT'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: simple_stmts
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmts) - should work
            // generated call: (simple_stmts_var = simple_stmts_rule()) != null  // simple_stmts
            // node.name: None, call.assigned_variable: simple_stmts_var
        // collecting vars: simple_stmts_var, SSTNode[]
        //    vars: {'simple_stmts_var': 'SSTNode[]'}
        SSTNode[] simple_stmts_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: simple_stmts
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(simple_stmts)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmts) - should work
            // REMOVE result call (simple_stmts_var = simple_stmts_rule()) != null  // simple_stmts
            (simple_stmts_var = simple_stmts_rule()) != null  // simple_stmts
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: invalid_block
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_block) - should work
            // generated call: (invalid_block_var = invalid_block_rule()) != null  // invalid_block
            // node.name: None, call.assigned_variable: invalid_block_var
        // collecting vars: invalid_block_var, None
        //    vars: {'invalid_block_var': None}
        Object invalid_block_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: invalid_block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_block) - should work
            // REMOVE result call (invalid_block_var = invalid_block_rule()) != null  // invalid_block
            (invalid_block_var = invalid_block_rule()) != null  // invalid_block
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, BLOCK_ID, null);
    }

    // star_expressions:
    //     | star_expression ((',' star_expression))+ ','?
    //     | star_expression ','
    //     | star_expression
    public SSTNode star_expressions_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: star_expressions, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, STAR_EXPRESSIONS_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, STAR_EXPRESSIONS_ID);
        }
        // visiting Alt: star_expression ((',' star_expression))+ ','?
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expression) - should work
            // generated call: (star_expression_var = star_expression_rule()) != null  // star_expression
            // node.name: a, call.assigned_variable: star_expression_var
        // collecting vars: star_expression_var, SSTNode
        // TODO visiting JavaCallMakerVisitor.visit_Repeat1(((',' star_expression))+)
            // generated call: (_loop1_102_var = _loop1_102_rule()) != null  // ((',' star_expression))+
            // node.name: b, call.assigned_variable: _loop1_102_var
        // collecting vars: _loop1_102_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_103_var = _tmp_103_rule()) != null  // ','
            // generated call: ((_opt_var = _tmp_103_rule()) != null || _opt_var == null)  // ','?
            // node.name: None, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'star_expression_var': 'SSTNode', '_loop1_102_var': 'SSTNode[]', '_opt_var': None}
        SSTNode[] _loop1_102_var = null;
        Object _opt_var = null;
        SSTNode star_expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expression) - should work
            // REMOVE result call (star_expression_var = star_expression_rule()) != null  // star_expression
            (star_expression_var = star_expression_rule()) != null  // star_expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ((',' star_expression))+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(((',' star_expression))+)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(((',' star_expression))+)
            // REMOVE result call (_loop1_102_var = _loop1_102_rule()) != null  // ((',' star_expression))+
            (_loop1_102_var = _loop1_102_rule()) != null  // ((',' star_expression))+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_103_var = _tmp_103_rule()) != null  // ','
            // REMOVE result call ((_opt_var = _tmp_103_rule()) != null || _opt_var == null)  // ','?
            ((_opt_var = _tmp_103_rule()) != null || _opt_var == null)  // ','?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: star_expression ','
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expression) - should work
            // generated call: (star_expression_var = star_expression_rule()) != null  // star_expression
            // node.name: a, call.assigned_variable: star_expression_var
        // collecting vars: star_expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'star_expression_var': 'SSTNode', '_literal': 'Token'}
        Token _literal = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expression) - should work
            // REMOVE result call (star_expression_var = star_expression_rule()) != null  // star_expression
            (star_expression_var = star_expression_rule()) != null  // star_expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: star_expression
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expression) - should work
            // generated call: (star_expression_var = star_expression_rule()) != null  // star_expression
            // node.name: None, call.assigned_variable: star_expression_var
        // collecting vars: star_expression_var, SSTNode
        //    vars: {'star_expression_var': 'SSTNode'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expression) - should work
            // REMOVE result call (star_expression_var = star_expression_rule()) != null  // star_expression
            (star_expression_var = star_expression_rule()) != null  // star_expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, STAR_EXPRESSIONS_ID, null);
    }

    // star_expression: '*' bitwise_or | expression
    public SSTNode star_expression_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: star_expression, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, STAR_EXPRESSION_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, STAR_EXPRESSION_ID);
        }
        // visiting Alt: '*' bitwise_or
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // node.name: a, call.assigned_variable: bitwise_or_var
        // collecting vars: bitwise_or_var, SSTNode
        //    vars: {'_literal': 'Token', 'bitwise_or_var': 'SSTNode'}
        Token _literal = null;
        SSTNode bitwise_or_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '*'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: expression
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: None, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        //    vars: {'expression_var': 'SSTNode'}
        SSTNode expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, STAR_EXPRESSION_ID, null);
    }

    // star_named_expressions: ','.star_named_expression+ ','?
    // TODO replacing asdl_expr_seq* --> SSTNode[]
    public SSTNode[] star_named_expressions_rule() {
    // isLoop: False, isGather: False, type: asdl_expr_seq*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: star_named_expressions, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, STAR_NAMED_EXPRESSIONS_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, STAR_NAMED_EXPRESSIONS_ID);
        }
        // visiting Alt: ','.star_named_expression+ ','?
        // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.star_named_expression+)
            // generated call: (_gather_104_var = _gather_104_rule()) != null  // ','.star_named_expression+
            // node.name: a, call.assigned_variable: _gather_104_var
        // collecting vars: _gather_104_var, asdl_expr_seq*
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_106_var = _tmp_106_rule()) != null  // ','
            // generated call: ((_opt_var = _tmp_106_rule()) != null || _opt_var == null)  // ','?
            // node.name: None, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'_gather_104_var': 'asdl_expr_seq*', '_opt_var': None}
        // TODO replacing asdl_expr_seq* --> SSTNode[]
        SSTNode[] _gather_104_var = null;
        Object _opt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','.star_named_expression+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.star_named_expression+)
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.star_named_expression+)
            // REMOVE result call (_gather_104_var = _gather_104_rule()) != null  // ','.star_named_expression+
            (_gather_104_var = (SSTNode[])_gather_104_rule()) != null  // ','.star_named_expression+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_106_var = _tmp_106_rule()) != null  // ','
            // REMOVE result call ((_opt_var = _tmp_106_rule()) != null || _opt_var == null)  // ','?
            ((_opt_var = _tmp_106_rule()) != null || _opt_var == null)  // ','?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, STAR_NAMED_EXPRESSIONS_ID, null);
    }

    // star_named_expression: '*' bitwise_or | named_expression
    public SSTNode star_named_expression_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: star_named_expression, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, STAR_NAMED_EXPRESSION_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, STAR_NAMED_EXPRESSION_ID);
        }
        // visiting Alt: '*' bitwise_or
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // node.name: a, call.assigned_variable: bitwise_or_var
        // collecting vars: bitwise_or_var, SSTNode
        //    vars: {'_literal': 'Token', 'bitwise_or_var': 'SSTNode'}
        Token _literal = null;
        SSTNode bitwise_or_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '*'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: named_expression
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // generated call: (named_expression_var = named_expression_rule()) != null  // named_expression
            // node.name: None, call.assigned_variable: named_expression_var
        // collecting vars: named_expression_var, SSTNode
        //    vars: {'named_expression_var': 'SSTNode'}
        SSTNode named_expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: named_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(named_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // REMOVE result call (named_expression_var = named_expression_rule()) != null  // named_expression
            (named_expression_var = named_expression_rule()) != null  // named_expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, STAR_NAMED_EXPRESSION_ID, null);
    }

    // named_expression: NAME ':=' ~ expression | invalid_named_expression | expression !':='
    public SSTNode named_expression_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: named_expression, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, NAMED_EXPRESSION_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, NAMED_EXPRESSION_ID);
        }
        // visiting Alt: NAME ':=' ~ expression
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: a, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':=')
            // generated call: (_literal = expect(Token.Kind.COLONEQUAL)) != null  // token=':='
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // TODO visiting JavaCallMakerVisitor.visit_Cut(~)
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: b, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        //    vars: {'name_var': 'Token', '_literal': 'Token', None: None, 'expression_var': 'SSTNode'}
        Token _literal = null;
        SSTNode expression_var = null;
        Token name_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ':='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':=')
            // REMOVE result call (_literal = expect(Token.Kind.COLONEQUAL)) != null  // token=':='
            (_literal = expect(Token.Kind.COLONEQUAL)) != null  // token=':='
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ~
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(~)
            // TODO visiting JavaCallMakerVisitor.visit_Cut(~)
            // TODO call is not created ~ -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: invalid_named_expression
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_named_expression) - should work
            // generated call: (invalid_named_expression_var = invalid_named_expression_rule()) != null  // invalid_named_expression
            // node.name: None, call.assigned_variable: invalid_named_expression_var
        // collecting vars: invalid_named_expression_var, None
        //    vars: {'invalid_named_expression_var': None}
        Object invalid_named_expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: invalid_named_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_named_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_named_expression) - should work
            // REMOVE result call (invalid_named_expression_var = invalid_named_expression_rule()) != null  // invalid_named_expression
            (invalid_named_expression_var = invalid_named_expression_rule()) != null  // invalid_named_expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: expression !':='
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: None, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!':=')
            // generated call: None
        // collecting vars: None, None
        //    vars: {'expression_var': 'SSTNode', None: None}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: !':='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!':=')
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!':=')
            // TODO call is not created !':=' -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, NAMED_EXPRESSION_ID, null);
    }

    // direct_named_expression: NAME ':=' ~ expression | expression !':='
    public SSTNode direct_named_expression_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: direct_named_expression, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, DIRECT_NAMED_EXPRESSION_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, DIRECT_NAMED_EXPRESSION_ID);
        }
        // visiting Alt: NAME ':=' ~ expression
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: a, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':=')
            // generated call: (_literal = expect(Token.Kind.COLONEQUAL)) != null  // token=':='
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // TODO visiting JavaCallMakerVisitor.visit_Cut(~)
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: b, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        //    vars: {'name_var': 'Token', '_literal': 'Token', None: None, 'expression_var': 'SSTNode'}
        Token _literal = null;
        SSTNode expression_var = null;
        Token name_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ':='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':=')
            // REMOVE result call (_literal = expect(Token.Kind.COLONEQUAL)) != null  // token=':='
            (_literal = expect(Token.Kind.COLONEQUAL)) != null  // token=':='
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ~
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(~)
            // TODO visiting JavaCallMakerVisitor.visit_Cut(~)
            // TODO call is not created ~ -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: expression !':='
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: None, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!':=')
            // generated call: None
        // collecting vars: None, None
        //    vars: {'expression_var': 'SSTNode', None: None}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: !':='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!':=')
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!':=')
            // TODO call is not created !':=' -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, DIRECT_NAMED_EXPRESSION_ID, null);
    }

    // annotated_rhs: yield_expr | star_expressions
    public SSTNode annotated_rhs_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: annotated_rhs, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, ANNOTATED_RHS_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, ANNOTATED_RHS_ID);
        }
        // visiting Alt: yield_expr
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
            // generated call: (yield_expr_var = yield_expr_rule()) != null  // yield_expr
            // node.name: None, call.assigned_variable: yield_expr_var
        // collecting vars: yield_expr_var, SSTNode
        //    vars: {'yield_expr_var': 'SSTNode'}
        SSTNode yield_expr_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: yield_expr
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(yield_expr)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
            // REMOVE result call (yield_expr_var = yield_expr_rule()) != null  // yield_expr
            (yield_expr_var = yield_expr_rule()) != null  // yield_expr
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: star_expressions
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // generated call: (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            // node.name: None, call.assigned_variable: star_expressions_var
        // collecting vars: star_expressions_var, SSTNode
        //    vars: {'star_expressions_var': 'SSTNode'}
        SSTNode star_expressions_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expressions)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // REMOVE result call (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            (star_expressions_var = star_expressions_rule()) != null  // star_expressions
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, ANNOTATED_RHS_ID, null);
    }

    // expressions: expression ((',' expression))+ ','? | expression ',' | expression
    public SSTNode expressions_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: expressions, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, EXPRESSIONS_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, EXPRESSIONS_ID);
        }
        // visiting Alt: expression ((',' expression))+ ','?
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: a, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // TODO visiting JavaCallMakerVisitor.visit_Repeat1(((',' expression))+)
            // generated call: (_loop1_107_var = _loop1_107_rule()) != null  // ((',' expression))+
            // node.name: b, call.assigned_variable: _loop1_107_var
        // collecting vars: _loop1_107_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_108_var = _tmp_108_rule()) != null  // ','
            // generated call: ((_opt_var = _tmp_108_rule()) != null || _opt_var == null)  // ','?
            // node.name: None, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'expression_var': 'SSTNode', '_loop1_107_var': 'SSTNode[]', '_opt_var': None}
        SSTNode[] _loop1_107_var = null;
        Object _opt_var = null;
        SSTNode expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ((',' expression))+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(((',' expression))+)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(((',' expression))+)
            // REMOVE result call (_loop1_107_var = _loop1_107_rule()) != null  // ((',' expression))+
            (_loop1_107_var = _loop1_107_rule()) != null  // ((',' expression))+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_108_var = _tmp_108_rule()) != null  // ','
            // REMOVE result call ((_opt_var = _tmp_108_rule()) != null || _opt_var == null)  // ','?
            ((_opt_var = _tmp_108_rule()) != null || _opt_var == null)  // ','?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: expression ','
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: a, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'expression_var': 'SSTNode', '_literal': 'Token'}
        Token _literal = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: expression
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: None, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        //    vars: {'expression_var': 'SSTNode'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, EXPRESSIONS_ID, null);
    }

    // expression:
    //     | invalid_expression
    //     | disjunction 'if' disjunction 'else' expression
    //     | disjunction
    //     | lambdef
    public SSTNode expression_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: expression, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, EXPRESSION_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, EXPRESSION_ID);
        }
        // visiting Alt: invalid_expression
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_expression) - should work
            // generated call: (invalid_expression_var = invalid_expression_rule()) != null  // invalid_expression
            // node.name: None, call.assigned_variable: invalid_expression_var
        // collecting vars: invalid_expression_var, None
        //    vars: {'invalid_expression_var': None}
        Object invalid_expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: invalid_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_expression) - should work
            // REMOVE result call (invalid_expression_var = invalid_expression_rule()) != null  // invalid_expression
            (invalid_expression_var = invalid_expression_rule()) != null  // invalid_expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: disjunction 'if' disjunction 'else' expression
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
            // generated call: (disjunction_var = disjunction_rule()) != null  // disjunction
            // node.name: a, call.assigned_variable: disjunction_var
        // collecting vars: disjunction_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
            // generated call: (_keyword = expect(KEYWORD_IF)) != null  // token='if'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
            // generated call: (disjunction_var = disjunction_rule()) != null  // disjunction
            // node.name: b, call.assigned_variable: disjunction_var
        // collecting vars: disjunction_var_1, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('else')
            // generated call: (_keyword = expect(KEYWORD_ELSE)) != null  // token='else'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword_1, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: c, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        //    vars: {'disjunction_var': 'SSTNode', '_keyword': 'Token', 'disjunction_var_1': 'SSTNode', '_keyword_1': 'Token', 'expression_var': 'SSTNode'}
        Token _keyword = null;
        Token _keyword_1 = null;
        SSTNode disjunction_var = null;
        SSTNode disjunction_var_1 = null;
        SSTNode expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: disjunction
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(disjunction)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
            // REMOVE result call (disjunction_var = disjunction_rule()) != null  // disjunction
            (disjunction_var = disjunction_rule()) != null  // disjunction
            &&
            // TODO visiting JavaParserGeneratorNamedItem: 'if'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('if')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
            // REMOVE result call (_keyword = expect(KEYWORD_IF)) != null  // token='if'
            (_keyword = expect(KEYWORD_IF)) != null  // token='if'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: disjunction
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(disjunction)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
            // REMOVE result call (disjunction_var = disjunction_rule()) != null  // disjunction
            (disjunction_var_1 = disjunction_rule()) != null  // disjunction
            &&
            // TODO visiting JavaParserGeneratorNamedItem: 'else'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('else')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('else')
            // REMOVE result call (_keyword = expect(KEYWORD_ELSE)) != null  // token='else'
            (_keyword_1 = expect(KEYWORD_ELSE)) != null  // token='else'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: disjunction
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
            // generated call: (disjunction_var = disjunction_rule()) != null  // disjunction
            // node.name: None, call.assigned_variable: disjunction_var
        // collecting vars: disjunction_var, SSTNode
        //    vars: {'disjunction_var': 'SSTNode'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: disjunction
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(disjunction)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
            // REMOVE result call (disjunction_var = disjunction_rule()) != null  // disjunction
            (disjunction_var = disjunction_rule()) != null  // disjunction
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: lambdef
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambdef) - should work
            // generated call: (lambdef_var = lambdef_rule()) != null  // lambdef
            // node.name: None, call.assigned_variable: lambdef_var
        // collecting vars: lambdef_var, SSTNode
        //    vars: {'lambdef_var': 'SSTNode'}
        SSTNode lambdef_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: lambdef
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambdef)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambdef) - should work
            // REMOVE result call (lambdef_var = lambdef_rule()) != null  // lambdef
            (lambdef_var = lambdef_rule()) != null  // lambdef
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, EXPRESSION_ID, null);
    }

    // lambdef: 'lambda' lambda_params? ':' expression
    public SSTNode lambdef_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: lambdef, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, LAMBDEF_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, LAMBDEF_ID);
        }
        // visiting Alt: 'lambda' lambda_params? ':' expression
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('lambda')
            // generated call: (_keyword = expect(KEYWORD_LAMBDA)) != null  // token='lambda'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_params?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_params)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_109_var = _tmp_109_rule()) != null  // lambda_params
            // generated call: ((_opt_var = _tmp_109_rule()) != null || _opt_var == null)  // lambda_params?
            // node.name: a, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: b, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        //    vars: {'_keyword': 'Token', '_opt_var': None, '_literal': 'Token', 'expression_var': 'SSTNode'}
        Token _keyword = null;
        Token _literal = null;
        Object _opt_var = null;
        SSTNode expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'lambda'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('lambda')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('lambda')
            // REMOVE result call (_keyword = expect(KEYWORD_LAMBDA)) != null  // token='lambda'
            (_keyword = expect(KEYWORD_LAMBDA)) != null  // token='lambda'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: lambda_params?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_params?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_params?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_params)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_109_var = _tmp_109_rule()) != null  // lambda_params
            // REMOVE result call ((_opt_var = _tmp_109_rule()) != null || _opt_var == null)  // lambda_params?
            ((_opt_var = _tmp_109_rule()) != null || _opt_var == null)  // lambda_params?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, LAMBDEF_ID, null);
    }

    // lambda_params: invalid_lambda_parameters | lambda_parameters
    // TODO replacing arguments_ty --> SSTNode
    public SSTNode lambda_params_rule() {
    // isLoop: False, isGather: False, type: arguments_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: lambda_params, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, LAMBDA_PARAMS_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, LAMBDA_PARAMS_ID);
        }
        // visiting Alt: invalid_lambda_parameters
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_lambda_parameters) - should work
            // generated call: (invalid_lambda_parameters_var = invalid_lambda_parameters_rule()) != null  // invalid_lambda_parameters
            // node.name: None, call.assigned_variable: invalid_lambda_parameters_var
        // collecting vars: invalid_lambda_parameters_var, None
        //    vars: {'invalid_lambda_parameters_var': None}
        Object invalid_lambda_parameters_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: invalid_lambda_parameters
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_lambda_parameters)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_lambda_parameters) - should work
            // REMOVE result call (invalid_lambda_parameters_var = invalid_lambda_parameters_rule()) != null  // invalid_lambda_parameters
            (invalid_lambda_parameters_var = invalid_lambda_parameters_rule()) != null  // invalid_lambda_parameters
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: lambda_parameters
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_parameters) - should work
        // TODO replacing arguments_ty --> SSTNode
            // generated call: (lambda_parameters_var = lambda_parameters_rule()) != null  // lambda_parameters
            // node.name: None, call.assigned_variable: lambda_parameters_var
        // collecting vars: lambda_parameters_var, SSTNode
        //    vars: {'lambda_parameters_var': 'SSTNode'}
        SSTNode lambda_parameters_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_parameters
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_parameters)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_parameters) - should work
            // TODO replacing arguments_ty --> SSTNode
            // REMOVE result call (lambda_parameters_var = lambda_parameters_rule()) != null  // lambda_parameters
            (lambda_parameters_var = lambda_parameters_rule()) != null  // lambda_parameters
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, LAMBDA_PARAMS_ID, null);
    }

    // lambda_parameters:
    //     | lambda_slash_no_default lambda_param_no_default* lambda_param_with_default* lambda_star_etc?
    //     | lambda_slash_with_default lambda_param_with_default* lambda_star_etc?
    //     | lambda_param_no_default+ lambda_param_with_default* lambda_star_etc?
    //     | lambda_param_with_default+ lambda_star_etc?
    //     | lambda_star_etc
    // TODO replacing arguments_ty --> SSTNode
    public SSTNode lambda_parameters_rule() {
    // isLoop: False, isGather: False, type: arguments_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: lambda_parameters, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, LAMBDA_PARAMETERS_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, LAMBDA_PARAMETERS_ID);
        }
        // visiting Alt: lambda_slash_no_default lambda_param_no_default* lambda_param_with_default* lambda_star_etc?
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_slash_no_default) - should work
        // TODO replacing asdl_arg_seq[] --> SSTNode[]
            // generated call: (lambda_slash_no_default_var = lambda_slash_no_default_rule()) != null  // lambda_slash_no_default
            // node.name: a, call.assigned_variable: lambda_slash_no_default_var
        // collecting vars: lambda_slash_no_default_var, SSTNode[]
        // TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_no_default*)
            // generated call: (_loop0_110_var = _loop0_110_rule()) != null  // lambda_param_no_default*
            // node.name: b, call.assigned_variable: _loop0_110_var
        // collecting vars: _loop0_110_var, asdl_arg_seq*
        // TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_with_default*)
            // generated call: (_loop0_111_var = _loop0_111_rule()) != null  // lambda_param_with_default*
            // node.name: c, call.assigned_variable: _loop0_111_var
        // collecting vars: _loop0_111_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_star_etc?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_star_etc)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_112_var = _tmp_112_rule()) != null  // lambda_star_etc
            // generated call: ((_opt_var = _tmp_112_rule()) != null || _opt_var == null)  // lambda_star_etc?
            // node.name: d, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'lambda_slash_no_default_var': 'SSTNode[]', '_loop0_110_var': 'asdl_arg_seq*', '_loop0_111_var': 'SSTNode[]', '_opt_var': None}
        // TODO replacing asdl_arg_seq* --> SSTNode[]
        SSTNode[] _loop0_110_var = null;
        SSTNode[] _loop0_111_var = null;
        Object _opt_var = null;
        SSTNode[] lambda_slash_no_default_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_slash_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_slash_no_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_slash_no_default) - should work
            // TODO replacing asdl_arg_seq[] --> SSTNode[]
            // REMOVE result call (lambda_slash_no_default_var = lambda_slash_no_default_rule()) != null  // lambda_slash_no_default
            (lambda_slash_no_default_var = lambda_slash_no_default_rule()) != null  // lambda_slash_no_default
            &&
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default*
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default*)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_no_default*)
            // REMOVE result call (_loop0_110_var = _loop0_110_rule()) != null  // lambda_param_no_default*
            (_loop0_110_var = (SSTNode[])_loop0_110_rule()) != null  // lambda_param_no_default*
            &&
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_with_default*
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_with_default*)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_with_default*)
            // REMOVE result call (_loop0_111_var = _loop0_111_rule()) != null  // lambda_param_with_default*
            (_loop0_111_var = _loop0_111_rule()) != null  // lambda_param_with_default*
            &&
            // TODO visiting JavaParserGeneratorNamedItem: lambda_star_etc?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_star_etc?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_star_etc?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_star_etc)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_112_var = _tmp_112_rule()) != null  // lambda_star_etc
            // REMOVE result call ((_opt_var = _tmp_112_rule()) != null || _opt_var == null)  // lambda_star_etc?
            ((_opt_var = _tmp_112_rule()) != null || _opt_var == null)  // lambda_star_etc?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: lambda_slash_with_default lambda_param_with_default* lambda_star_etc?
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_slash_with_default) - should work
        // TODO replacing SlashWithDefault[] --> SSTNode[]
            // generated call: (lambda_slash_with_default_var = lambda_slash_with_default_rule()) != null  // lambda_slash_with_default
            // node.name: a, call.assigned_variable: lambda_slash_with_default_var
        // collecting vars: lambda_slash_with_default_var, SSTNode[]
        // TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_with_default*)
            // generated call: (_loop0_113_var = _loop0_113_rule()) != null  // lambda_param_with_default*
            // node.name: b, call.assigned_variable: _loop0_113_var
        // collecting vars: _loop0_113_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_star_etc?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_star_etc)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_114_var = _tmp_114_rule()) != null  // lambda_star_etc
            // generated call: ((_opt_var = _tmp_114_rule()) != null || _opt_var == null)  // lambda_star_etc?
            // node.name: c, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'lambda_slash_with_default_var': 'SSTNode[]', '_loop0_113_var': 'SSTNode[]', '_opt_var': None}
        SSTNode[] _loop0_113_var = null;
        SSTNode[] lambda_slash_with_default_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_slash_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_slash_with_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_slash_with_default) - should work
            // TODO replacing SlashWithDefault[] --> SSTNode[]
            // REMOVE result call (lambda_slash_with_default_var = lambda_slash_with_default_rule()) != null  // lambda_slash_with_default
            (lambda_slash_with_default_var = lambda_slash_with_default_rule()) != null  // lambda_slash_with_default
            &&
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_with_default*
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_with_default*)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_with_default*)
            // REMOVE result call (_loop0_113_var = _loop0_113_rule()) != null  // lambda_param_with_default*
            (_loop0_113_var = _loop0_113_rule()) != null  // lambda_param_with_default*
            &&
            // TODO visiting JavaParserGeneratorNamedItem: lambda_star_etc?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_star_etc?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_star_etc?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_star_etc)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_114_var = _tmp_114_rule()) != null  // lambda_star_etc
            // REMOVE result call ((_opt_var = _tmp_114_rule()) != null || _opt_var == null)  // lambda_star_etc?
            ((_opt_var = _tmp_114_rule()) != null || _opt_var == null)  // lambda_star_etc?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: lambda_param_no_default+ lambda_param_with_default* lambda_star_etc?
        // TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_no_default+)
            // generated call: (_loop1_115_var = _loop1_115_rule()) != null  // lambda_param_no_default+
            // node.name: a, call.assigned_variable: _loop1_115_var
        // collecting vars: _loop1_115_var, asdl_arg_seq*
        // TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_with_default*)
            // generated call: (_loop0_116_var = _loop0_116_rule()) != null  // lambda_param_with_default*
            // node.name: b, call.assigned_variable: _loop0_116_var
        // collecting vars: _loop0_116_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_star_etc?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_star_etc)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_117_var = _tmp_117_rule()) != null  // lambda_star_etc
            // generated call: ((_opt_var = _tmp_117_rule()) != null || _opt_var == null)  // lambda_star_etc?
            // node.name: c, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'_loop1_115_var': 'asdl_arg_seq*', '_loop0_116_var': 'SSTNode[]', '_opt_var': None}
        SSTNode[] _loop0_116_var = null;
        // TODO replacing asdl_arg_seq* --> SSTNode[]
        SSTNode[] _loop1_115_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default+)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_no_default+)
            // REMOVE result call (_loop1_115_var = _loop1_115_rule()) != null  // lambda_param_no_default+
            (_loop1_115_var = (SSTNode[])_loop1_115_rule()) != null  // lambda_param_no_default+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_with_default*
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_with_default*)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_with_default*)
            // REMOVE result call (_loop0_116_var = _loop0_116_rule()) != null  // lambda_param_with_default*
            (_loop0_116_var = _loop0_116_rule()) != null  // lambda_param_with_default*
            &&
            // TODO visiting JavaParserGeneratorNamedItem: lambda_star_etc?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_star_etc?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_star_etc?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_star_etc)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_117_var = _tmp_117_rule()) != null  // lambda_star_etc
            // REMOVE result call ((_opt_var = _tmp_117_rule()) != null || _opt_var == null)  // lambda_star_etc?
            ((_opt_var = _tmp_117_rule()) != null || _opt_var == null)  // lambda_star_etc?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: lambda_param_with_default+ lambda_star_etc?
        // TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_with_default+)
            // generated call: (_loop1_118_var = _loop1_118_rule()) != null  // lambda_param_with_default+
            // node.name: a, call.assigned_variable: _loop1_118_var
        // collecting vars: _loop1_118_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_star_etc?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_star_etc)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_119_var = _tmp_119_rule()) != null  // lambda_star_etc
            // generated call: ((_opt_var = _tmp_119_rule()) != null || _opt_var == null)  // lambda_star_etc?
            // node.name: b, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'_loop1_118_var': 'SSTNode[]', '_opt_var': None}
        SSTNode[] _loop1_118_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_with_default+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_with_default+)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_with_default+)
            // REMOVE result call (_loop1_118_var = _loop1_118_rule()) != null  // lambda_param_with_default+
            (_loop1_118_var = _loop1_118_rule()) != null  // lambda_param_with_default+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: lambda_star_etc?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_star_etc?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_star_etc?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_star_etc)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_119_var = _tmp_119_rule()) != null  // lambda_star_etc
            // REMOVE result call ((_opt_var = _tmp_119_rule()) != null || _opt_var == null)  // lambda_star_etc?
            ((_opt_var = _tmp_119_rule()) != null || _opt_var == null)  // lambda_star_etc?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: lambda_star_etc
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_star_etc) - should work
        // TODO replacing StarEtc[] --> SSTNode[]
            // generated call: (lambda_star_etc_var = lambda_star_etc_rule()) != null  // lambda_star_etc
            // node.name: a, call.assigned_variable: lambda_star_etc_var
        // collecting vars: lambda_star_etc_var, SSTNode[]
        //    vars: {'lambda_star_etc_var': 'SSTNode[]'}
        SSTNode[] lambda_star_etc_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_star_etc
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_star_etc)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_star_etc) - should work
            // TODO replacing StarEtc[] --> SSTNode[]
            // REMOVE result call (lambda_star_etc_var = lambda_star_etc_rule()) != null  // lambda_star_etc
            (lambda_star_etc_var = lambda_star_etc_rule()) != null  // lambda_star_etc
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, LAMBDA_PARAMETERS_ID, null);
    }

    // lambda_slash_no_default:
    //     | lambda_param_no_default+ '/' ','
    //     | lambda_param_no_default+ '/' &':'
    // TODO replacing asdl_arg_seq* --> SSTNode[]
    public SSTNode[] lambda_slash_no_default_rule() {
    // isLoop: False, isGather: False, type: asdl_arg_seq*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: lambda_slash_no_default, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, LAMBDA_SLASH_NO_DEFAULT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, LAMBDA_SLASH_NO_DEFAULT_ID);
        }
        // visiting Alt: lambda_param_no_default+ '/' ','
        // TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_no_default+)
            // generated call: (_loop1_120_var = _loop1_120_rule()) != null  // lambda_param_no_default+
            // node.name: a, call.assigned_variable: _loop1_120_var
        // collecting vars: _loop1_120_var, asdl_arg_seq*
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
            // generated call: (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_loop1_120_var': 'asdl_arg_seq*', '_literal': 'Token', '_literal_1': 'Token'}
        Token _literal = null;
        Token _literal_1 = null;
        // TODO replacing asdl_arg_seq* --> SSTNode[]
        SSTNode[] _loop1_120_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default+)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_no_default+)
            // REMOVE result call (_loop1_120_var = _loop1_120_rule()) != null  // lambda_param_no_default+
            (_loop1_120_var = (SSTNode[])_loop1_120_rule()) != null  // lambda_param_no_default+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '/'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('/')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
            // REMOVE result call (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal_1 = expect(Token.Kind.COMMA)) != null  // token=','
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: lambda_param_no_default+ '/' &':'
        // TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_no_default+)
            // generated call: (_loop1_121_var = _loop1_121_rule()) != null  // lambda_param_no_default+
            // node.name: a, call.assigned_variable: _loop1_121_var
        // collecting vars: _loop1_121_var, asdl_arg_seq*
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
            // generated call: (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&':')
            // generated call: None
        // collecting vars: None, None
        //    vars: {'_loop1_121_var': 'asdl_arg_seq*', '_literal': 'Token', None: None}
        // TODO replacing asdl_arg_seq* --> SSTNode[]
        SSTNode[] _loop1_121_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default+)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_no_default+)
            // REMOVE result call (_loop1_121_var = _loop1_121_rule()) != null  // lambda_param_no_default+
            (_loop1_121_var = (SSTNode[])_loop1_121_rule()) != null  // lambda_param_no_default+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '/'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('/')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
            // REMOVE result call (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: &':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&':')
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&':')
            // TODO call is not created &':' -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, LAMBDA_SLASH_NO_DEFAULT_ID, null);
    }

    // lambda_slash_with_default:
    //     | lambda_param_no_default* lambda_param_with_default+ '/' ','
    //     | lambda_param_no_default* lambda_param_with_default+ '/' &':'
    // TODO replacing SlashWithDefault* --> SSTNode[]
    public SSTNode[] lambda_slash_with_default_rule() {
    // isLoop: False, isGather: False, type: SlashWithDefault*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: lambda_slash_with_default, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, LAMBDA_SLASH_WITH_DEFAULT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, LAMBDA_SLASH_WITH_DEFAULT_ID);
        }
        // visiting Alt: lambda_param_no_default* lambda_param_with_default+ '/' ','
        // TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_no_default*)
            // generated call: (_loop0_122_var = _loop0_122_rule()) != null  // lambda_param_no_default*
            // node.name: a, call.assigned_variable: _loop0_122_var
        // collecting vars: _loop0_122_var, SSTNode[]
        // TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_with_default+)
            // generated call: (_loop1_123_var = _loop1_123_rule()) != null  // lambda_param_with_default+
            // node.name: b, call.assigned_variable: _loop1_123_var
        // collecting vars: _loop1_123_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
            // generated call: (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_loop0_122_var': 'SSTNode[]', '_loop1_123_var': 'SSTNode[]', '_literal': 'Token', '_literal_1': 'Token'}
        Token _literal = null;
        Token _literal_1 = null;
        SSTNode[] _loop0_122_var = null;
        SSTNode[] _loop1_123_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default*
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default*)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_no_default*)
            // REMOVE result call (_loop0_122_var = _loop0_122_rule()) != null  // lambda_param_no_default*
            (_loop0_122_var = _loop0_122_rule()) != null  // lambda_param_no_default*
            &&
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_with_default+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_with_default+)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_with_default+)
            // REMOVE result call (_loop1_123_var = _loop1_123_rule()) != null  // lambda_param_with_default+
            (_loop1_123_var = _loop1_123_rule()) != null  // lambda_param_with_default+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '/'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('/')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
            // REMOVE result call (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal_1 = expect(Token.Kind.COMMA)) != null  // token=','
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: lambda_param_no_default* lambda_param_with_default+ '/' &':'
        // TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_no_default*)
            // generated call: (_loop0_124_var = _loop0_124_rule()) != null  // lambda_param_no_default*
            // node.name: a, call.assigned_variable: _loop0_124_var
        // collecting vars: _loop0_124_var, SSTNode[]
        // TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_with_default+)
            // generated call: (_loop1_125_var = _loop1_125_rule()) != null  // lambda_param_with_default+
            // node.name: b, call.assigned_variable: _loop1_125_var
        // collecting vars: _loop1_125_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
            // generated call: (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&':')
            // generated call: None
        // collecting vars: None, None
        //    vars: {'_loop0_124_var': 'SSTNode[]', '_loop1_125_var': 'SSTNode[]', '_literal': 'Token', None: None}
        SSTNode[] _loop0_124_var = null;
        SSTNode[] _loop1_125_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default*
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default*)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_no_default*)
            // REMOVE result call (_loop0_124_var = _loop0_124_rule()) != null  // lambda_param_no_default*
            (_loop0_124_var = _loop0_124_rule()) != null  // lambda_param_no_default*
            &&
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_with_default+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_with_default+)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_with_default+)
            // REMOVE result call (_loop1_125_var = _loop1_125_rule()) != null  // lambda_param_with_default+
            (_loop1_125_var = _loop1_125_rule()) != null  // lambda_param_with_default+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '/'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('/')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
            // REMOVE result call (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: &':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&':')
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&':')
            // TODO call is not created &':' -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, LAMBDA_SLASH_WITH_DEFAULT_ID, null);
    }

    // lambda_star_etc:
    //     | '*' lambda_param_no_default lambda_param_maybe_default* lambda_kwds?
    //     | '*' ',' lambda_param_maybe_default+ lambda_kwds?
    //     | lambda_kwds
    //     | invalid_lambda_star_etc
    // TODO replacing StarEtc* --> SSTNode[]
    public SSTNode[] lambda_star_etc_rule() {
    // isLoop: False, isGather: False, type: StarEtc*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: lambda_star_etc, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, LAMBDA_STAR_ETC_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, LAMBDA_STAR_ETC_ID);
        }
        // visiting Alt: '*' lambda_param_no_default lambda_param_maybe_default* lambda_kwds?
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            // node.name: a, call.assigned_variable: lambda_param_no_default_var
        // collecting vars: lambda_param_no_default_var, SSTNode
        // TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_maybe_default*)
            // generated call: (_loop0_126_var = _loop0_126_rule()) != null  // lambda_param_maybe_default*
            // node.name: b, call.assigned_variable: _loop0_126_var
        // collecting vars: _loop0_126_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_kwds?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_kwds)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_127_var = _tmp_127_rule()) != null  // lambda_kwds
            // generated call: ((_opt_var = _tmp_127_rule()) != null || _opt_var == null)  // lambda_kwds?
            // node.name: c, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'_literal': 'Token', 'lambda_param_no_default_var': 'SSTNode', '_loop0_126_var': 'SSTNode[]', '_opt_var': None}
        Token _literal = null;
        SSTNode[] _loop0_126_var = null;
        Object _opt_var = null;
        SSTNode lambda_param_no_default_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '*'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            &&
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_maybe_default*
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_maybe_default*)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_maybe_default*)
            // REMOVE result call (_loop0_126_var = _loop0_126_rule()) != null  // lambda_param_maybe_default*
            (_loop0_126_var = _loop0_126_rule()) != null  // lambda_param_maybe_default*
            &&
            // TODO visiting JavaParserGeneratorNamedItem: lambda_kwds?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_kwds?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_kwds?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_kwds)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_127_var = _tmp_127_rule()) != null  // lambda_kwds
            // REMOVE result call ((_opt_var = _tmp_127_rule()) != null || _opt_var == null)  // lambda_kwds?
            ((_opt_var = _tmp_127_rule()) != null || _opt_var == null)  // lambda_kwds?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '*' ',' lambda_param_maybe_default+ lambda_kwds?
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        // TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_maybe_default+)
            // generated call: (_loop1_128_var = _loop1_128_rule()) != null  // lambda_param_maybe_default+
            // node.name: b, call.assigned_variable: _loop1_128_var
        // collecting vars: _loop1_128_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_kwds?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_kwds)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_129_var = _tmp_129_rule()) != null  // lambda_kwds
            // generated call: ((_opt_var = _tmp_129_rule()) != null || _opt_var == null)  // lambda_kwds?
            // node.name: c, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'_literal': 'Token', '_literal_1': 'Token', '_loop1_128_var': 'SSTNode[]', '_opt_var': None}
        Token _literal_1 = null;
        SSTNode[] _loop1_128_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '*'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal_1 = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_maybe_default+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_maybe_default+)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_maybe_default+)
            // REMOVE result call (_loop1_128_var = _loop1_128_rule()) != null  // lambda_param_maybe_default+
            (_loop1_128_var = _loop1_128_rule()) != null  // lambda_param_maybe_default+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: lambda_kwds?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_kwds?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_kwds?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_kwds)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_129_var = _tmp_129_rule()) != null  // lambda_kwds
            // REMOVE result call ((_opt_var = _tmp_129_rule()) != null || _opt_var == null)  // lambda_kwds?
            ((_opt_var = _tmp_129_rule()) != null || _opt_var == null)  // lambda_kwds?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: lambda_kwds
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_kwds) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (lambda_kwds_var = lambda_kwds_rule()) != null  // lambda_kwds
            // node.name: a, call.assigned_variable: lambda_kwds_var
        // collecting vars: lambda_kwds_var, SSTNode
        //    vars: {'lambda_kwds_var': 'SSTNode'}
        SSTNode lambda_kwds_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_kwds
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_kwds)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_kwds) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (lambda_kwds_var = lambda_kwds_rule()) != null  // lambda_kwds
            (lambda_kwds_var = lambda_kwds_rule()) != null  // lambda_kwds
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: invalid_lambda_star_etc
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_lambda_star_etc) - should work
            // generated call: (invalid_lambda_star_etc_var = invalid_lambda_star_etc_rule()) != null  // invalid_lambda_star_etc
            // node.name: None, call.assigned_variable: invalid_lambda_star_etc_var
        // collecting vars: invalid_lambda_star_etc_var, None
        //    vars: {'invalid_lambda_star_etc_var': None}
        Object invalid_lambda_star_etc_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: invalid_lambda_star_etc
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_lambda_star_etc)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_lambda_star_etc) - should work
            // REMOVE result call (invalid_lambda_star_etc_var = invalid_lambda_star_etc_rule()) != null  // invalid_lambda_star_etc
            (invalid_lambda_star_etc_var = invalid_lambda_star_etc_rule()) != null  // invalid_lambda_star_etc
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, LAMBDA_STAR_ETC_ID, null);
    }

    // lambda_kwds: '**' lambda_param_no_default
    // TODO replacing arg_ty --> SSTNode
    public SSTNode lambda_kwds_rule() {
    // isLoop: False, isGather: False, type: arg_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: lambda_kwds, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, LAMBDA_KWDS_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, LAMBDA_KWDS_ID);
        }
        // visiting Alt: '**' lambda_param_no_default
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
            // generated call: (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            // node.name: a, call.assigned_variable: lambda_param_no_default_var
        // collecting vars: lambda_param_no_default_var, SSTNode
        //    vars: {'_literal': 'Token', 'lambda_param_no_default_var': 'SSTNode'}
        Token _literal = null;
        SSTNode lambda_param_no_default_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '**'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('**')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
            // REMOVE result call (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, LAMBDA_KWDS_ID, null);
    }

    // lambda_param_no_default: lambda_param ',' | lambda_param &':'
    // TODO replacing arg_ty --> SSTNode
    public SSTNode lambda_param_no_default_rule() {
    // isLoop: False, isGather: False, type: arg_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: lambda_param_no_default, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, LAMBDA_PARAM_NO_DEFAULT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, LAMBDA_PARAM_NO_DEFAULT_ID);
        }
        // visiting Alt: lambda_param ','
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (lambda_param_var = lambda_param_rule()) != null  // lambda_param
            // node.name: a, call.assigned_variable: lambda_param_var
        // collecting vars: lambda_param_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'lambda_param_var': 'SSTNode', '_literal': 'Token'}
        Token _literal = null;
        SSTNode lambda_param_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (lambda_param_var = lambda_param_rule()) != null  // lambda_param
            (lambda_param_var = lambda_param_rule()) != null  // lambda_param
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: lambda_param &':'
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (lambda_param_var = lambda_param_rule()) != null  // lambda_param
            // node.name: a, call.assigned_variable: lambda_param_var
        // collecting vars: lambda_param_var, SSTNode
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&':')
            // generated call: None
        // collecting vars: None, None
        //    vars: {'lambda_param_var': 'SSTNode', None: None}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (lambda_param_var = lambda_param_rule()) != null  // lambda_param
            (lambda_param_var = lambda_param_rule()) != null  // lambda_param
            &&
            // TODO visiting JavaParserGeneratorNamedItem: &':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&':')
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&':')
            // TODO call is not created &':' -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, LAMBDA_PARAM_NO_DEFAULT_ID, null);
    }

    // lambda_param_with_default:
    //     | lambda_param default_param ','
    //     | lambda_param default_param &':'
    // TODO replacing NameDefaultPair* --> SSTNode[]
    public SSTNode[] lambda_param_with_default_rule() {
    // isLoop: False, isGather: False, type: NameDefaultPair*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: lambda_param_with_default, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, LAMBDA_PARAM_WITH_DEFAULT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, LAMBDA_PARAM_WITH_DEFAULT_ID);
        }
        // visiting Alt: lambda_param default_param ','
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (lambda_param_var = lambda_param_rule()) != null  // lambda_param
            // node.name: a, call.assigned_variable: lambda_param_var
        // collecting vars: lambda_param_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
            // generated call: (default_param_var = default_param_rule()) != null  // default_param
            // node.name: c, call.assigned_variable: default_param_var
        // collecting vars: default_param_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'lambda_param_var': 'SSTNode', 'default_param_var': 'SSTNode', '_literal': 'Token'}
        Token _literal = null;
        SSTNode default_param_var = null;
        SSTNode lambda_param_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (lambda_param_var = lambda_param_rule()) != null  // lambda_param
            (lambda_param_var = lambda_param_rule()) != null  // lambda_param
            &&
            // TODO visiting JavaParserGeneratorNamedItem: default_param
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(default_param)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
            // REMOVE result call (default_param_var = default_param_rule()) != null  // default_param
            (default_param_var = default_param_rule()) != null  // default_param
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: lambda_param default_param &':'
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (lambda_param_var = lambda_param_rule()) != null  // lambda_param
            // node.name: a, call.assigned_variable: lambda_param_var
        // collecting vars: lambda_param_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
            // generated call: (default_param_var = default_param_rule()) != null  // default_param
            // node.name: c, call.assigned_variable: default_param_var
        // collecting vars: default_param_var, SSTNode
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&':')
            // generated call: None
        // collecting vars: None, None
        //    vars: {'lambda_param_var': 'SSTNode', 'default_param_var': 'SSTNode', None: None}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (lambda_param_var = lambda_param_rule()) != null  // lambda_param
            (lambda_param_var = lambda_param_rule()) != null  // lambda_param
            &&
            // TODO visiting JavaParserGeneratorNamedItem: default_param
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(default_param)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
            // REMOVE result call (default_param_var = default_param_rule()) != null  // default_param
            (default_param_var = default_param_rule()) != null  // default_param
            &&
            // TODO visiting JavaParserGeneratorNamedItem: &':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&':')
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&':')
            // TODO call is not created &':' -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, LAMBDA_PARAM_WITH_DEFAULT_ID, null);
    }

    // lambda_param_maybe_default:
    //     | lambda_param default_param? ','
    //     | lambda_param default_param? &':'
    // TODO replacing NameDefaultPair* --> SSTNode[]
    public SSTNode[] lambda_param_maybe_default_rule() {
    // isLoop: False, isGather: False, type: NameDefaultPair*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: lambda_param_maybe_default, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, LAMBDA_PARAM_MAYBE_DEFAULT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, LAMBDA_PARAM_MAYBE_DEFAULT_ID);
        }
        // visiting Alt: lambda_param default_param? ','
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (lambda_param_var = lambda_param_rule()) != null  // lambda_param
            // node.name: a, call.assigned_variable: lambda_param_var
        // collecting vars: lambda_param_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(default_param?)
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
            // JavaCallMakerVisitor.visit_Opt.generated call: (default_param_var = default_param_rule()) != null  // default_param
            // generated call: ((_opt_var = default_param_rule()) != null || _opt_var == null)  // default_param?
            // node.name: c, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'lambda_param_var': 'SSTNode', '_opt_var': None, '_literal': 'Token'}
        Token _literal = null;
        Object _opt_var = null;
        SSTNode lambda_param_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (lambda_param_var = lambda_param_rule()) != null  // lambda_param
            (lambda_param_var = lambda_param_rule()) != null  // lambda_param
            &&
            // TODO visiting JavaParserGeneratorNamedItem: default_param?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(default_param?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(default_param?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
                // JavaCallMakerVisitor.visit_Opt.generated call: (default_param_var = default_param_rule()) != null  // default_param
            // REMOVE result call ((_opt_var = default_param_rule()) != null || _opt_var == null)  // default_param?
            ((_opt_var = default_param_rule()) != null || _opt_var == null)  // default_param?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: lambda_param default_param? &':'
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (lambda_param_var = lambda_param_rule()) != null  // lambda_param
            // node.name: a, call.assigned_variable: lambda_param_var
        // collecting vars: lambda_param_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(default_param?)
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
            // JavaCallMakerVisitor.visit_Opt.generated call: (default_param_var = default_param_rule()) != null  // default_param
            // generated call: ((_opt_var = default_param_rule()) != null || _opt_var == null)  // default_param?
            // node.name: c, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&':')
            // generated call: None
        // collecting vars: None, None
        //    vars: {'lambda_param_var': 'SSTNode', '_opt_var': None, None: None}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (lambda_param_var = lambda_param_rule()) != null  // lambda_param
            (lambda_param_var = lambda_param_rule()) != null  // lambda_param
            &&
            // TODO visiting JavaParserGeneratorNamedItem: default_param?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(default_param?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(default_param?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
                // JavaCallMakerVisitor.visit_Opt.generated call: (default_param_var = default_param_rule()) != null  // default_param
            // REMOVE result call ((_opt_var = default_param_rule()) != null || _opt_var == null)  // default_param?
            ((_opt_var = default_param_rule()) != null || _opt_var == null)  // default_param?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: &':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&':')
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&':')
            // TODO call is not created &':' -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, LAMBDA_PARAM_MAYBE_DEFAULT_ID, null);
    }

    // lambda_param: NAME
    // TODO replacing arg_ty --> SSTNode
    public SSTNode lambda_param_rule() {
    // isLoop: False, isGather: False, type: arg_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: lambda_param, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, LAMBDA_PARAM_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, LAMBDA_PARAM_ID);
        }
        // visiting Alt: NAME
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: a, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        //    vars: {'name_var': 'Token'}
        Token name_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, LAMBDA_PARAM_ID, null);
    }

    // disjunction: conjunction (('or' conjunction))+ | conjunction
    public SSTNode disjunction_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: disjunction, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, DISJUNCTION_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, DISJUNCTION_ID);
        }
        // visiting Alt: conjunction (('or' conjunction))+
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(conjunction) - should work
            // generated call: (conjunction_var = conjunction_rule()) != null  // conjunction
            // node.name: a, call.assigned_variable: conjunction_var
        // collecting vars: conjunction_var, SSTNode
        // TODO visiting JavaCallMakerVisitor.visit_Repeat1((('or' conjunction))+)
            // generated call: (_loop1_130_var = _loop1_130_rule()) != null  // (('or' conjunction))+
            // node.name: b, call.assigned_variable: _loop1_130_var
        // collecting vars: _loop1_130_var, SSTNode[]
        //    vars: {'conjunction_var': 'SSTNode', '_loop1_130_var': 'SSTNode[]'}
        SSTNode[] _loop1_130_var = null;
        SSTNode conjunction_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: conjunction
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(conjunction)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(conjunction) - should work
            // REMOVE result call (conjunction_var = conjunction_rule()) != null  // conjunction
            (conjunction_var = conjunction_rule()) != null  // conjunction
            &&
            // TODO visiting JavaParserGeneratorNamedItem: (('or' conjunction))+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((('or' conjunction))+)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1((('or' conjunction))+)
            // REMOVE result call (_loop1_130_var = _loop1_130_rule()) != null  // (('or' conjunction))+
            (_loop1_130_var = _loop1_130_rule()) != null  // (('or' conjunction))+
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: conjunction
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(conjunction) - should work
            // generated call: (conjunction_var = conjunction_rule()) != null  // conjunction
            // node.name: None, call.assigned_variable: conjunction_var
        // collecting vars: conjunction_var, SSTNode
        //    vars: {'conjunction_var': 'SSTNode'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: conjunction
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(conjunction)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(conjunction) - should work
            // REMOVE result call (conjunction_var = conjunction_rule()) != null  // conjunction
            (conjunction_var = conjunction_rule()) != null  // conjunction
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, DISJUNCTION_ID, null);
    }

    // conjunction: inversion (('and' inversion))+ | inversion
    public SSTNode conjunction_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: conjunction, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, CONJUNCTION_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, CONJUNCTION_ID);
        }
        // visiting Alt: inversion (('and' inversion))+
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(inversion) - should work
            // generated call: (inversion_var = inversion_rule()) != null  // inversion
            // node.name: a, call.assigned_variable: inversion_var
        // collecting vars: inversion_var, SSTNode
        // TODO visiting JavaCallMakerVisitor.visit_Repeat1((('and' inversion))+)
            // generated call: (_loop1_131_var = _loop1_131_rule()) != null  // (('and' inversion))+
            // node.name: b, call.assigned_variable: _loop1_131_var
        // collecting vars: _loop1_131_var, SSTNode[]
        //    vars: {'inversion_var': 'SSTNode', '_loop1_131_var': 'SSTNode[]'}
        SSTNode[] _loop1_131_var = null;
        SSTNode inversion_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: inversion
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(inversion)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(inversion) - should work
            // REMOVE result call (inversion_var = inversion_rule()) != null  // inversion
            (inversion_var = inversion_rule()) != null  // inversion
            &&
            // TODO visiting JavaParserGeneratorNamedItem: (('and' inversion))+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((('and' inversion))+)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1((('and' inversion))+)
            // REMOVE result call (_loop1_131_var = _loop1_131_rule()) != null  // (('and' inversion))+
            (_loop1_131_var = _loop1_131_rule()) != null  // (('and' inversion))+
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: inversion
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(inversion) - should work
            // generated call: (inversion_var = inversion_rule()) != null  // inversion
            // node.name: None, call.assigned_variable: inversion_var
        // collecting vars: inversion_var, SSTNode
        //    vars: {'inversion_var': 'SSTNode'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: inversion
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(inversion)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(inversion) - should work
            // REMOVE result call (inversion_var = inversion_rule()) != null  // inversion
            (inversion_var = inversion_rule()) != null  // inversion
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, CONJUNCTION_ID, null);
    }

    // inversion: 'not' inversion | comparison
    public SSTNode inversion_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: inversion, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, INVERSION_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, INVERSION_ID);
        }
        // visiting Alt: 'not' inversion
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('not')
            // generated call: (_keyword = expect(KEYWORD_NOT)) != null  // token='not'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(inversion) - should work
            // generated call: (inversion_var = inversion_rule()) != null  // inversion
            // node.name: a, call.assigned_variable: inversion_var
        // collecting vars: inversion_var, SSTNode
        //    vars: {'_keyword': 'Token', 'inversion_var': 'SSTNode'}
        Token _keyword = null;
        SSTNode inversion_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'not'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('not')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('not')
            // REMOVE result call (_keyword = expect(KEYWORD_NOT)) != null  // token='not'
            (_keyword = expect(KEYWORD_NOT)) != null  // token='not'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: inversion
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(inversion)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(inversion) - should work
            // REMOVE result call (inversion_var = inversion_rule()) != null  // inversion
            (inversion_var = inversion_rule()) != null  // inversion
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: comparison
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(comparison) - should work
            // generated call: (comparison_var = comparison_rule()) != null  // comparison
            // node.name: None, call.assigned_variable: comparison_var
        // collecting vars: comparison_var, SSTNode
        //    vars: {'comparison_var': 'SSTNode'}
        SSTNode comparison_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: comparison
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(comparison)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(comparison) - should work
            // REMOVE result call (comparison_var = comparison_rule()) != null  // comparison
            (comparison_var = comparison_rule()) != null  // comparison
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, INVERSION_ID, null);
    }

    // comparison: bitwise_or compare_op_bitwise_or_pair+ | bitwise_or
    public SSTNode comparison_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: comparison, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, COMPARISON_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, COMPARISON_ID);
        }
        // visiting Alt: bitwise_or compare_op_bitwise_or_pair+
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // node.name: a, call.assigned_variable: bitwise_or_var
        // collecting vars: bitwise_or_var, SSTNode
        // TODO visiting JavaCallMakerVisitor.visit_Repeat1(compare_op_bitwise_or_pair+)
            // generated call: (_loop1_132_var = _loop1_132_rule()) != null  // compare_op_bitwise_or_pair+
            // node.name: b, call.assigned_variable: _loop1_132_var
        // collecting vars: _loop1_132_var, SSTNode[]
        //    vars: {'bitwise_or_var': 'SSTNode', '_loop1_132_var': 'SSTNode[]'}
        SSTNode[] _loop1_132_var = null;
        SSTNode bitwise_or_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            &&
            // TODO visiting JavaParserGeneratorNamedItem: compare_op_bitwise_or_pair+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(compare_op_bitwise_or_pair+)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(compare_op_bitwise_or_pair+)
            // REMOVE result call (_loop1_132_var = _loop1_132_rule()) != null  // compare_op_bitwise_or_pair+
            (_loop1_132_var = _loop1_132_rule()) != null  // compare_op_bitwise_or_pair+
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: bitwise_or
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // node.name: None, call.assigned_variable: bitwise_or_var
        // collecting vars: bitwise_or_var, SSTNode
        //    vars: {'bitwise_or_var': 'SSTNode'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, COMPARISON_ID, null);
    }

    // compare_op_bitwise_or_pair:
    //     | eq_bitwise_or
    //     | noteq_bitwise_or
    //     | lte_bitwise_or
    //     | lt_bitwise_or
    //     | gte_bitwise_or
    //     | gt_bitwise_or
    //     | notin_bitwise_or
    //     | in_bitwise_or
    //     | isnot_bitwise_or
    //     | is_bitwise_or
    // TODO replacing CmpopExprPair* --> SSTNode[]
    public SSTNode[] compare_op_bitwise_or_pair_rule() {
    // isLoop: False, isGather: False, type: CmpopExprPair*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: compare_op_bitwise_or_pair, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, COMPARE_OP_BITWISE_OR_PAIR_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, COMPARE_OP_BITWISE_OR_PAIR_ID);
        }
        // visiting Alt: eq_bitwise_or
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(eq_bitwise_or) - should work
        // TODO replacing CmpopExprPair[] --> SSTNode[]
            // generated call: (eq_bitwise_or_var = eq_bitwise_or_rule()) != null  // eq_bitwise_or
            // node.name: None, call.assigned_variable: eq_bitwise_or_var
        // collecting vars: eq_bitwise_or_var, SSTNode[]
        //    vars: {'eq_bitwise_or_var': 'SSTNode[]'}
        SSTNode[] eq_bitwise_or_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: eq_bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(eq_bitwise_or)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(eq_bitwise_or) - should work
            // TODO replacing CmpopExprPair[] --> SSTNode[]
            // REMOVE result call (eq_bitwise_or_var = eq_bitwise_or_rule()) != null  // eq_bitwise_or
            (eq_bitwise_or_var = eq_bitwise_or_rule()) != null  // eq_bitwise_or
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: noteq_bitwise_or
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(noteq_bitwise_or) - should work
        // TODO replacing CmpopExprPair[] --> SSTNode[]
            // generated call: (noteq_bitwise_or_var = noteq_bitwise_or_rule()) != null  // noteq_bitwise_or
            // node.name: None, call.assigned_variable: noteq_bitwise_or_var
        // collecting vars: noteq_bitwise_or_var, SSTNode[]
        //    vars: {'noteq_bitwise_or_var': 'SSTNode[]'}
        SSTNode[] noteq_bitwise_or_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: noteq_bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(noteq_bitwise_or)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(noteq_bitwise_or) - should work
            // TODO replacing CmpopExprPair[] --> SSTNode[]
            // REMOVE result call (noteq_bitwise_or_var = noteq_bitwise_or_rule()) != null  // noteq_bitwise_or
            (noteq_bitwise_or_var = noteq_bitwise_or_rule()) != null  // noteq_bitwise_or
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: lte_bitwise_or
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lte_bitwise_or) - should work
        // TODO replacing CmpopExprPair[] --> SSTNode[]
            // generated call: (lte_bitwise_or_var = lte_bitwise_or_rule()) != null  // lte_bitwise_or
            // node.name: None, call.assigned_variable: lte_bitwise_or_var
        // collecting vars: lte_bitwise_or_var, SSTNode[]
        //    vars: {'lte_bitwise_or_var': 'SSTNode[]'}
        SSTNode[] lte_bitwise_or_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: lte_bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lte_bitwise_or)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lte_bitwise_or) - should work
            // TODO replacing CmpopExprPair[] --> SSTNode[]
            // REMOVE result call (lte_bitwise_or_var = lte_bitwise_or_rule()) != null  // lte_bitwise_or
            (lte_bitwise_or_var = lte_bitwise_or_rule()) != null  // lte_bitwise_or
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: lt_bitwise_or
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lt_bitwise_or) - should work
        // TODO replacing CmpopExprPair[] --> SSTNode[]
            // generated call: (lt_bitwise_or_var = lt_bitwise_or_rule()) != null  // lt_bitwise_or
            // node.name: None, call.assigned_variable: lt_bitwise_or_var
        // collecting vars: lt_bitwise_or_var, SSTNode[]
        //    vars: {'lt_bitwise_or_var': 'SSTNode[]'}
        SSTNode[] lt_bitwise_or_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: lt_bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lt_bitwise_or)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lt_bitwise_or) - should work
            // TODO replacing CmpopExprPair[] --> SSTNode[]
            // REMOVE result call (lt_bitwise_or_var = lt_bitwise_or_rule()) != null  // lt_bitwise_or
            (lt_bitwise_or_var = lt_bitwise_or_rule()) != null  // lt_bitwise_or
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: gte_bitwise_or
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(gte_bitwise_or) - should work
        // TODO replacing CmpopExprPair[] --> SSTNode[]
            // generated call: (gte_bitwise_or_var = gte_bitwise_or_rule()) != null  // gte_bitwise_or
            // node.name: None, call.assigned_variable: gte_bitwise_or_var
        // collecting vars: gte_bitwise_or_var, SSTNode[]
        //    vars: {'gte_bitwise_or_var': 'SSTNode[]'}
        SSTNode[] gte_bitwise_or_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: gte_bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(gte_bitwise_or)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(gte_bitwise_or) - should work
            // TODO replacing CmpopExprPair[] --> SSTNode[]
            // REMOVE result call (gte_bitwise_or_var = gte_bitwise_or_rule()) != null  // gte_bitwise_or
            (gte_bitwise_or_var = gte_bitwise_or_rule()) != null  // gte_bitwise_or
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: gt_bitwise_or
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(gt_bitwise_or) - should work
        // TODO replacing CmpopExprPair[] --> SSTNode[]
            // generated call: (gt_bitwise_or_var = gt_bitwise_or_rule()) != null  // gt_bitwise_or
            // node.name: None, call.assigned_variable: gt_bitwise_or_var
        // collecting vars: gt_bitwise_or_var, SSTNode[]
        //    vars: {'gt_bitwise_or_var': 'SSTNode[]'}
        SSTNode[] gt_bitwise_or_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: gt_bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(gt_bitwise_or)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(gt_bitwise_or) - should work
            // TODO replacing CmpopExprPair[] --> SSTNode[]
            // REMOVE result call (gt_bitwise_or_var = gt_bitwise_or_rule()) != null  // gt_bitwise_or
            (gt_bitwise_or_var = gt_bitwise_or_rule()) != null  // gt_bitwise_or
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: notin_bitwise_or
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(notin_bitwise_or) - should work
        // TODO replacing CmpopExprPair[] --> SSTNode[]
            // generated call: (notin_bitwise_or_var = notin_bitwise_or_rule()) != null  // notin_bitwise_or
            // node.name: None, call.assigned_variable: notin_bitwise_or_var
        // collecting vars: notin_bitwise_or_var, SSTNode[]
        //    vars: {'notin_bitwise_or_var': 'SSTNode[]'}
        SSTNode[] notin_bitwise_or_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: notin_bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(notin_bitwise_or)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(notin_bitwise_or) - should work
            // TODO replacing CmpopExprPair[] --> SSTNode[]
            // REMOVE result call (notin_bitwise_or_var = notin_bitwise_or_rule()) != null  // notin_bitwise_or
            (notin_bitwise_or_var = notin_bitwise_or_rule()) != null  // notin_bitwise_or
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: in_bitwise_or
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(in_bitwise_or) - should work
        // TODO replacing CmpopExprPair[] --> SSTNode[]
            // generated call: (in_bitwise_or_var = in_bitwise_or_rule()) != null  // in_bitwise_or
            // node.name: None, call.assigned_variable: in_bitwise_or_var
        // collecting vars: in_bitwise_or_var, SSTNode[]
        //    vars: {'in_bitwise_or_var': 'SSTNode[]'}
        SSTNode[] in_bitwise_or_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: in_bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(in_bitwise_or)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(in_bitwise_or) - should work
            // TODO replacing CmpopExprPair[] --> SSTNode[]
            // REMOVE result call (in_bitwise_or_var = in_bitwise_or_rule()) != null  // in_bitwise_or
            (in_bitwise_or_var = in_bitwise_or_rule()) != null  // in_bitwise_or
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: isnot_bitwise_or
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(isnot_bitwise_or) - should work
        // TODO replacing CmpopExprPair[] --> SSTNode[]
            // generated call: (isnot_bitwise_or_var = isnot_bitwise_or_rule()) != null  // isnot_bitwise_or
            // node.name: None, call.assigned_variable: isnot_bitwise_or_var
        // collecting vars: isnot_bitwise_or_var, SSTNode[]
        //    vars: {'isnot_bitwise_or_var': 'SSTNode[]'}
        SSTNode[] isnot_bitwise_or_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: isnot_bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(isnot_bitwise_or)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(isnot_bitwise_or) - should work
            // TODO replacing CmpopExprPair[] --> SSTNode[]
            // REMOVE result call (isnot_bitwise_or_var = isnot_bitwise_or_rule()) != null  // isnot_bitwise_or
            (isnot_bitwise_or_var = isnot_bitwise_or_rule()) != null  // isnot_bitwise_or
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: is_bitwise_or
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(is_bitwise_or) - should work
        // TODO replacing CmpopExprPair[] --> SSTNode[]
            // generated call: (is_bitwise_or_var = is_bitwise_or_rule()) != null  // is_bitwise_or
            // node.name: None, call.assigned_variable: is_bitwise_or_var
        // collecting vars: is_bitwise_or_var, SSTNode[]
        //    vars: {'is_bitwise_or_var': 'SSTNode[]'}
        SSTNode[] is_bitwise_or_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: is_bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(is_bitwise_or)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(is_bitwise_or) - should work
            // TODO replacing CmpopExprPair[] --> SSTNode[]
            // REMOVE result call (is_bitwise_or_var = is_bitwise_or_rule()) != null  // is_bitwise_or
            (is_bitwise_or_var = is_bitwise_or_rule()) != null  // is_bitwise_or
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, COMPARE_OP_BITWISE_OR_PAIR_ID, null);
    }

    // eq_bitwise_or: '==' bitwise_or
    // TODO replacing CmpopExprPair* --> SSTNode[]
    public SSTNode[] eq_bitwise_or_rule() {
    // isLoop: False, isGather: False, type: CmpopExprPair*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: eq_bitwise_or, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, EQ_BITWISE_OR_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, EQ_BITWISE_OR_ID);
        }
        // visiting Alt: '==' bitwise_or
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('==')
            // generated call: (_literal = expect(Token.Kind.EQEQUAL)) != null  // token='=='
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // node.name: a, call.assigned_variable: bitwise_or_var
        // collecting vars: bitwise_or_var, SSTNode
        //    vars: {'_literal': 'Token', 'bitwise_or_var': 'SSTNode'}
        Token _literal = null;
        SSTNode bitwise_or_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '=='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('==')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('==')
            // REMOVE result call (_literal = expect(Token.Kind.EQEQUAL)) != null  // token='=='
            (_literal = expect(Token.Kind.EQEQUAL)) != null  // token='=='
            &&
            // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, EQ_BITWISE_OR_ID, null);
    }

    // noteq_bitwise_or: ('!=') bitwise_or
    // TODO replacing CmpopExprPair* --> SSTNode[]
    public SSTNode[] noteq_bitwise_or_rule() {
    // isLoop: False, isGather: False, type: CmpopExprPair*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: noteq_bitwise_or, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, NOTEQ_BITWISE_OR_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, NOTEQ_BITWISE_OR_ID);
        }
        // visiting Alt: ('!=') bitwise_or
        // TODO visiting JavaCallMakerVisitor.visit_Group(('!='))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('!=')
            // generated call: (_tmp_133_var = _tmp_133_rule()) != null  // '!='
            // node.name: None, call.assigned_variable: _tmp_133_var
        // collecting vars: _tmp_133_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // node.name: a, call.assigned_variable: bitwise_or_var
        // collecting vars: bitwise_or_var, SSTNode
        //    vars: {'_tmp_133_var': None, 'bitwise_or_var': 'SSTNode'}
        Object _tmp_133_var = null;
        SSTNode bitwise_or_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ('!=')
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(('!='))
            // TODO visiting JavaCallMakerVisitor.visit_Group(('!='))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('!=')
            // REMOVE result call (_tmp_133_var = _tmp_133_rule()) != null  // '!='
            (_tmp_133_var = _tmp_133_rule()) != null  // '!='
            &&
            // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, NOTEQ_BITWISE_OR_ID, null);
    }

    // lte_bitwise_or: '<=' bitwise_or
    // TODO replacing CmpopExprPair* --> SSTNode[]
    public SSTNode[] lte_bitwise_or_rule() {
    // isLoop: False, isGather: False, type: CmpopExprPair*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: lte_bitwise_or, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, LTE_BITWISE_OR_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, LTE_BITWISE_OR_ID);
        }
        // visiting Alt: '<=' bitwise_or
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('<=')
            // generated call: (_literal = expect(Token.Kind.LESSEQUAL)) != null  // token='<='
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // node.name: a, call.assigned_variable: bitwise_or_var
        // collecting vars: bitwise_or_var, SSTNode
        //    vars: {'_literal': 'Token', 'bitwise_or_var': 'SSTNode'}
        Token _literal = null;
        SSTNode bitwise_or_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '<='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('<=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('<=')
            // REMOVE result call (_literal = expect(Token.Kind.LESSEQUAL)) != null  // token='<='
            (_literal = expect(Token.Kind.LESSEQUAL)) != null  // token='<='
            &&
            // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, LTE_BITWISE_OR_ID, null);
    }

    // lt_bitwise_or: '<' bitwise_or
    // TODO replacing CmpopExprPair* --> SSTNode[]
    public SSTNode[] lt_bitwise_or_rule() {
    // isLoop: False, isGather: False, type: CmpopExprPair*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: lt_bitwise_or, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, LT_BITWISE_OR_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, LT_BITWISE_OR_ID);
        }
        // visiting Alt: '<' bitwise_or
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('<')
            // generated call: (_literal = expect(Token.Kind.LESS)) != null  // token='<'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // node.name: a, call.assigned_variable: bitwise_or_var
        // collecting vars: bitwise_or_var, SSTNode
        //    vars: {'_literal': 'Token', 'bitwise_or_var': 'SSTNode'}
        Token _literal = null;
        SSTNode bitwise_or_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '<'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('<')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('<')
            // REMOVE result call (_literal = expect(Token.Kind.LESS)) != null  // token='<'
            (_literal = expect(Token.Kind.LESS)) != null  // token='<'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, LT_BITWISE_OR_ID, null);
    }

    // gte_bitwise_or: '>=' bitwise_or
    // TODO replacing CmpopExprPair* --> SSTNode[]
    public SSTNode[] gte_bitwise_or_rule() {
    // isLoop: False, isGather: False, type: CmpopExprPair*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: gte_bitwise_or, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, GTE_BITWISE_OR_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, GTE_BITWISE_OR_ID);
        }
        // visiting Alt: '>=' bitwise_or
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('>=')
            // generated call: (_literal = expect(Token.Kind.GREATEREQUAL)) != null  // token='>='
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // node.name: a, call.assigned_variable: bitwise_or_var
        // collecting vars: bitwise_or_var, SSTNode
        //    vars: {'_literal': 'Token', 'bitwise_or_var': 'SSTNode'}
        Token _literal = null;
        SSTNode bitwise_or_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '>='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('>=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('>=')
            // REMOVE result call (_literal = expect(Token.Kind.GREATEREQUAL)) != null  // token='>='
            (_literal = expect(Token.Kind.GREATEREQUAL)) != null  // token='>='
            &&
            // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, GTE_BITWISE_OR_ID, null);
    }

    // gt_bitwise_or: '>' bitwise_or
    // TODO replacing CmpopExprPair* --> SSTNode[]
    public SSTNode[] gt_bitwise_or_rule() {
    // isLoop: False, isGather: False, type: CmpopExprPair*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: gt_bitwise_or, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, GT_BITWISE_OR_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, GT_BITWISE_OR_ID);
        }
        // visiting Alt: '>' bitwise_or
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('>')
            // generated call: (_literal = expect(Token.Kind.GREATER)) != null  // token='>'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // node.name: a, call.assigned_variable: bitwise_or_var
        // collecting vars: bitwise_or_var, SSTNode
        //    vars: {'_literal': 'Token', 'bitwise_or_var': 'SSTNode'}
        Token _literal = null;
        SSTNode bitwise_or_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '>'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('>')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('>')
            // REMOVE result call (_literal = expect(Token.Kind.GREATER)) != null  // token='>'
            (_literal = expect(Token.Kind.GREATER)) != null  // token='>'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, GT_BITWISE_OR_ID, null);
    }

    // notin_bitwise_or: 'not' 'in' bitwise_or
    // TODO replacing CmpopExprPair* --> SSTNode[]
    public SSTNode[] notin_bitwise_or_rule() {
    // isLoop: False, isGather: False, type: CmpopExprPair*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: notin_bitwise_or, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, NOTIN_BITWISE_OR_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, NOTIN_BITWISE_OR_ID);
        }
        // visiting Alt: 'not' 'in' bitwise_or
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('not')
            // generated call: (_keyword = expect(KEYWORD_NOT)) != null  // token='not'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
            // generated call: (_keyword = expect(KEYWORD_IN)) != null  // token='in'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword_1, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // node.name: a, call.assigned_variable: bitwise_or_var
        // collecting vars: bitwise_or_var, SSTNode
        //    vars: {'_keyword': 'Token', '_keyword_1': 'Token', 'bitwise_or_var': 'SSTNode'}
        Token _keyword = null;
        Token _keyword_1 = null;
        SSTNode bitwise_or_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'not'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('not')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('not')
            // REMOVE result call (_keyword = expect(KEYWORD_NOT)) != null  // token='not'
            (_keyword = expect(KEYWORD_NOT)) != null  // token='not'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: 'in'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('in')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
            // REMOVE result call (_keyword = expect(KEYWORD_IN)) != null  // token='in'
            (_keyword_1 = expect(KEYWORD_IN)) != null  // token='in'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, NOTIN_BITWISE_OR_ID, null);
    }

    // in_bitwise_or: 'in' bitwise_or
    // TODO replacing CmpopExprPair* --> SSTNode[]
    public SSTNode[] in_bitwise_or_rule() {
    // isLoop: False, isGather: False, type: CmpopExprPair*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: in_bitwise_or, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, IN_BITWISE_OR_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, IN_BITWISE_OR_ID);
        }
        // visiting Alt: 'in' bitwise_or
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
            // generated call: (_keyword = expect(KEYWORD_IN)) != null  // token='in'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // node.name: a, call.assigned_variable: bitwise_or_var
        // collecting vars: bitwise_or_var, SSTNode
        //    vars: {'_keyword': 'Token', 'bitwise_or_var': 'SSTNode'}
        Token _keyword = null;
        SSTNode bitwise_or_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'in'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('in')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
            // REMOVE result call (_keyword = expect(KEYWORD_IN)) != null  // token='in'
            (_keyword = expect(KEYWORD_IN)) != null  // token='in'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, IN_BITWISE_OR_ID, null);
    }

    // isnot_bitwise_or: 'is' 'not' bitwise_or
    // TODO replacing CmpopExprPair* --> SSTNode[]
    public SSTNode[] isnot_bitwise_or_rule() {
    // isLoop: False, isGather: False, type: CmpopExprPair*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: isnot_bitwise_or, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, ISNOT_BITWISE_OR_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, ISNOT_BITWISE_OR_ID);
        }
        // visiting Alt: 'is' 'not' bitwise_or
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('is')
            // generated call: (_keyword = expect(KEYWORD_IS)) != null  // token='is'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('not')
            // generated call: (_keyword = expect(KEYWORD_NOT)) != null  // token='not'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword_1, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // node.name: a, call.assigned_variable: bitwise_or_var
        // collecting vars: bitwise_or_var, SSTNode
        //    vars: {'_keyword': 'Token', '_keyword_1': 'Token', 'bitwise_or_var': 'SSTNode'}
        Token _keyword = null;
        Token _keyword_1 = null;
        SSTNode bitwise_or_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'is'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('is')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('is')
            // REMOVE result call (_keyword = expect(KEYWORD_IS)) != null  // token='is'
            (_keyword = expect(KEYWORD_IS)) != null  // token='is'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: 'not'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('not')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('not')
            // REMOVE result call (_keyword = expect(KEYWORD_NOT)) != null  // token='not'
            (_keyword_1 = expect(KEYWORD_NOT)) != null  // token='not'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, ISNOT_BITWISE_OR_ID, null);
    }

    // is_bitwise_or: 'is' bitwise_or
    // TODO replacing CmpopExprPair* --> SSTNode[]
    public SSTNode[] is_bitwise_or_rule() {
    // isLoop: False, isGather: False, type: CmpopExprPair*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: is_bitwise_or, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, IS_BITWISE_OR_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, IS_BITWISE_OR_ID);
        }
        // visiting Alt: 'is' bitwise_or
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('is')
            // generated call: (_keyword = expect(KEYWORD_IS)) != null  // token='is'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // node.name: a, call.assigned_variable: bitwise_or_var
        // collecting vars: bitwise_or_var, SSTNode
        //    vars: {'_keyword': 'Token', 'bitwise_or_var': 'SSTNode'}
        Token _keyword = null;
        SSTNode bitwise_or_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'is'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('is')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('is')
            // REMOVE result call (_keyword = expect(KEYWORD_IS)) != null  // token='is'
            (_keyword = expect(KEYWORD_IS)) != null  // token='is'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, IS_BITWISE_OR_ID, null);
    }

    // Left-recursive
    // bitwise_or: bitwise_or '|' bitwise_xor | bitwise_xor
    public SSTNode bitwise_or_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // left recursion--
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Left Recursion Rule: bitwise_or, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, BITWISE_OR_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, BITWISE_OR_ID);
        }
        int lastPos = pos;
        int endPos;
        SSTNode lastResult = null;
        cache.putResult(pos, BITWISE_OR_ID, null);
        while(true) {
            reset(pos);
            SSTNode result = bitwise_or_rule_body();
            endPos = mark();
            if (endPos <= lastPos) {
                break;
            }
            lastResult = result;
            lastPos = endPos;
            cache.putResult(pos, BITWISE_OR_ID, result);
        }
        reset(lastPos);
        if (DEBUG) {
            debugMessageln("Result: " + lastResult);
            this.level--;
        }
        return lastResult;
    }

    // left-rersive rule body
    public SSTNode bitwise_or_rule_body() {
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: bitwise_or, pos: " + pos);
            this.level++;
        }
        // visiting Alt: bitwise_or '|' bitwise_xor
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // node.name: a, call.assigned_variable: bitwise_or_var
        // collecting vars: bitwise_or_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('|')
            // generated call: (_literal = expect(Token.Kind.VBAR)) != null  // token='|'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_xor) - should work
            // generated call: (bitwise_xor_var = bitwise_xor_rule()) != null  // bitwise_xor
            // node.name: b, call.assigned_variable: bitwise_xor_var
        // collecting vars: bitwise_xor_var, SSTNode
        //    vars: {'bitwise_or_var': 'SSTNode', '_literal': 'Token', 'bitwise_xor_var': 'SSTNode'}
        Token _literal = null;
        SSTNode bitwise_or_var = null;
        SSTNode bitwise_xor_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '|'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('|')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('|')
            // REMOVE result call (_literal = expect(Token.Kind.VBAR)) != null  // token='|'
            (_literal = expect(Token.Kind.VBAR)) != null  // token='|'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: bitwise_xor
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_xor)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_xor) - should work
            // REMOVE result call (bitwise_xor_var = bitwise_xor_rule()) != null  // bitwise_xor
            (bitwise_xor_var = bitwise_xor_rule()) != null  // bitwise_xor
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: bitwise_xor
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_xor) - should work
            // generated call: (bitwise_xor_var = bitwise_xor_rule()) != null  // bitwise_xor
            // node.name: None, call.assigned_variable: bitwise_xor_var
        // collecting vars: bitwise_xor_var, SSTNode
        //    vars: {'bitwise_xor_var': 'SSTNode'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: bitwise_xor
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_xor)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_xor) - should work
            // REMOVE result call (bitwise_xor_var = bitwise_xor_rule()) != null  // bitwise_xor
            (bitwise_xor_var = bitwise_xor_rule()) != null  // bitwise_xor
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, BITWISE_OR_ID, null);
    }

    // Left-recursive
    // bitwise_xor: bitwise_xor '^' bitwise_and | bitwise_and
    public SSTNode bitwise_xor_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // left recursion--
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Left Recursion Rule: bitwise_xor, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, BITWISE_XOR_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, BITWISE_XOR_ID);
        }
        int lastPos = pos;
        int endPos;
        SSTNode lastResult = null;
        cache.putResult(pos, BITWISE_XOR_ID, null);
        while(true) {
            reset(pos);
            SSTNode result = bitwise_xor_rule_body();
            endPos = mark();
            if (endPos <= lastPos) {
                break;
            }
            lastResult = result;
            lastPos = endPos;
            cache.putResult(pos, BITWISE_XOR_ID, result);
        }
        reset(lastPos);
        if (DEBUG) {
            debugMessageln("Result: " + lastResult);
            this.level--;
        }
        return lastResult;
    }

    // left-rersive rule body
    public SSTNode bitwise_xor_rule_body() {
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: bitwise_xor, pos: " + pos);
            this.level++;
        }
        // visiting Alt: bitwise_xor '^' bitwise_and
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_xor) - should work
            // generated call: (bitwise_xor_var = bitwise_xor_rule()) != null  // bitwise_xor
            // node.name: a, call.assigned_variable: bitwise_xor_var
        // collecting vars: bitwise_xor_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('^')
            // generated call: (_literal = expect(Token.Kind.CIRCUMFLEX)) != null  // token='^'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_and) - should work
            // generated call: (bitwise_and_var = bitwise_and_rule()) != null  // bitwise_and
            // node.name: b, call.assigned_variable: bitwise_and_var
        // collecting vars: bitwise_and_var, SSTNode
        //    vars: {'bitwise_xor_var': 'SSTNode', '_literal': 'Token', 'bitwise_and_var': 'SSTNode'}
        Token _literal = null;
        SSTNode bitwise_and_var = null;
        SSTNode bitwise_xor_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: bitwise_xor
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_xor)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_xor) - should work
            // REMOVE result call (bitwise_xor_var = bitwise_xor_rule()) != null  // bitwise_xor
            (bitwise_xor_var = bitwise_xor_rule()) != null  // bitwise_xor
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '^'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('^')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('^')
            // REMOVE result call (_literal = expect(Token.Kind.CIRCUMFLEX)) != null  // token='^'
            (_literal = expect(Token.Kind.CIRCUMFLEX)) != null  // token='^'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: bitwise_and
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_and)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_and) - should work
            // REMOVE result call (bitwise_and_var = bitwise_and_rule()) != null  // bitwise_and
            (bitwise_and_var = bitwise_and_rule()) != null  // bitwise_and
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: bitwise_and
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_and) - should work
            // generated call: (bitwise_and_var = bitwise_and_rule()) != null  // bitwise_and
            // node.name: None, call.assigned_variable: bitwise_and_var
        // collecting vars: bitwise_and_var, SSTNode
        //    vars: {'bitwise_and_var': 'SSTNode'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: bitwise_and
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_and)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_and) - should work
            // REMOVE result call (bitwise_and_var = bitwise_and_rule()) != null  // bitwise_and
            (bitwise_and_var = bitwise_and_rule()) != null  // bitwise_and
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, BITWISE_XOR_ID, null);
    }

    // Left-recursive
    // bitwise_and: bitwise_and '&' shift_expr | shift_expr
    public SSTNode bitwise_and_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // left recursion--
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Left Recursion Rule: bitwise_and, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, BITWISE_AND_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, BITWISE_AND_ID);
        }
        int lastPos = pos;
        int endPos;
        SSTNode lastResult = null;
        cache.putResult(pos, BITWISE_AND_ID, null);
        while(true) {
            reset(pos);
            SSTNode result = bitwise_and_rule_body();
            endPos = mark();
            if (endPos <= lastPos) {
                break;
            }
            lastResult = result;
            lastPos = endPos;
            cache.putResult(pos, BITWISE_AND_ID, result);
        }
        reset(lastPos);
        if (DEBUG) {
            debugMessageln("Result: " + lastResult);
            this.level--;
        }
        return lastResult;
    }

    // left-rersive rule body
    public SSTNode bitwise_and_rule_body() {
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: bitwise_and, pos: " + pos);
            this.level++;
        }
        // visiting Alt: bitwise_and '&' shift_expr
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_and) - should work
            // generated call: (bitwise_and_var = bitwise_and_rule()) != null  // bitwise_and
            // node.name: a, call.assigned_variable: bitwise_and_var
        // collecting vars: bitwise_and_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('&')
            // generated call: (_literal = expect(Token.Kind.AMPER)) != null  // token='&'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(shift_expr) - should work
            // generated call: (shift_expr_var = shift_expr_rule()) != null  // shift_expr
            // node.name: b, call.assigned_variable: shift_expr_var
        // collecting vars: shift_expr_var, SSTNode
        //    vars: {'bitwise_and_var': 'SSTNode', '_literal': 'Token', 'shift_expr_var': 'SSTNode'}
        Token _literal = null;
        SSTNode bitwise_and_var = null;
        SSTNode shift_expr_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: bitwise_and
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_and)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_and) - should work
            // REMOVE result call (bitwise_and_var = bitwise_and_rule()) != null  // bitwise_and
            (bitwise_and_var = bitwise_and_rule()) != null  // bitwise_and
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '&'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('&')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('&')
            // REMOVE result call (_literal = expect(Token.Kind.AMPER)) != null  // token='&'
            (_literal = expect(Token.Kind.AMPER)) != null  // token='&'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: shift_expr
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(shift_expr)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(shift_expr) - should work
            // REMOVE result call (shift_expr_var = shift_expr_rule()) != null  // shift_expr
            (shift_expr_var = shift_expr_rule()) != null  // shift_expr
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: shift_expr
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(shift_expr) - should work
            // generated call: (shift_expr_var = shift_expr_rule()) != null  // shift_expr
            // node.name: None, call.assigned_variable: shift_expr_var
        // collecting vars: shift_expr_var, SSTNode
        //    vars: {'shift_expr_var': 'SSTNode'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: shift_expr
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(shift_expr)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(shift_expr) - should work
            // REMOVE result call (shift_expr_var = shift_expr_rule()) != null  // shift_expr
            (shift_expr_var = shift_expr_rule()) != null  // shift_expr
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, BITWISE_AND_ID, null);
    }

    // Left-recursive
    // shift_expr: shift_expr '<<' sum | shift_expr '>>' sum | sum
    public SSTNode shift_expr_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // left recursion--
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Left Recursion Rule: shift_expr, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, SHIFT_EXPR_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, SHIFT_EXPR_ID);
        }
        int lastPos = pos;
        int endPos;
        SSTNode lastResult = null;
        cache.putResult(pos, SHIFT_EXPR_ID, null);
        while(true) {
            reset(pos);
            SSTNode result = shift_expr_rule_body();
            endPos = mark();
            if (endPos <= lastPos) {
                break;
            }
            lastResult = result;
            lastPos = endPos;
            cache.putResult(pos, SHIFT_EXPR_ID, result);
        }
        reset(lastPos);
        if (DEBUG) {
            debugMessageln("Result: " + lastResult);
            this.level--;
        }
        return lastResult;
    }

    // left-rersive rule body
    public SSTNode shift_expr_rule_body() {
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: shift_expr, pos: " + pos);
            this.level++;
        }
        // visiting Alt: shift_expr '<<' sum
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(shift_expr) - should work
            // generated call: (shift_expr_var = shift_expr_rule()) != null  // shift_expr
            // node.name: a, call.assigned_variable: shift_expr_var
        // collecting vars: shift_expr_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('<<')
            // generated call: (_literal = expect(Token.Kind.LEFTSHIFT)) != null  // token='<<'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sum) - should work
            // generated call: (sum_var = sum_rule()) != null  // sum
            // node.name: b, call.assigned_variable: sum_var
        // collecting vars: sum_var, SSTNode
        //    vars: {'shift_expr_var': 'SSTNode', '_literal': 'Token', 'sum_var': 'SSTNode'}
        Token _literal = null;
        SSTNode shift_expr_var = null;
        SSTNode sum_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: shift_expr
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(shift_expr)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(shift_expr) - should work
            // REMOVE result call (shift_expr_var = shift_expr_rule()) != null  // shift_expr
            (shift_expr_var = shift_expr_rule()) != null  // shift_expr
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '<<'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('<<')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('<<')
            // REMOVE result call (_literal = expect(Token.Kind.LEFTSHIFT)) != null  // token='<<'
            (_literal = expect(Token.Kind.LEFTSHIFT)) != null  // token='<<'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: sum
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(sum)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sum) - should work
            // REMOVE result call (sum_var = sum_rule()) != null  // sum
            (sum_var = sum_rule()) != null  // sum
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: shift_expr '>>' sum
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(shift_expr) - should work
            // generated call: (shift_expr_var = shift_expr_rule()) != null  // shift_expr
            // node.name: a, call.assigned_variable: shift_expr_var
        // collecting vars: shift_expr_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('>>')
            // generated call: (_literal = expect(Token.Kind.RIGHTSHIFT)) != null  // token='>>'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sum) - should work
            // generated call: (sum_var = sum_rule()) != null  // sum
            // node.name: b, call.assigned_variable: sum_var
        // collecting vars: sum_var, SSTNode
        //    vars: {'shift_expr_var': 'SSTNode', '_literal': 'Token', 'sum_var': 'SSTNode'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: shift_expr
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(shift_expr)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(shift_expr) - should work
            // REMOVE result call (shift_expr_var = shift_expr_rule()) != null  // shift_expr
            (shift_expr_var = shift_expr_rule()) != null  // shift_expr
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '>>'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('>>')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('>>')
            // REMOVE result call (_literal = expect(Token.Kind.RIGHTSHIFT)) != null  // token='>>'
            (_literal = expect(Token.Kind.RIGHTSHIFT)) != null  // token='>>'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: sum
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(sum)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sum) - should work
            // REMOVE result call (sum_var = sum_rule()) != null  // sum
            (sum_var = sum_rule()) != null  // sum
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: sum
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sum) - should work
            // generated call: (sum_var = sum_rule()) != null  // sum
            // node.name: None, call.assigned_variable: sum_var
        // collecting vars: sum_var, SSTNode
        //    vars: {'sum_var': 'SSTNode'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: sum
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(sum)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sum) - should work
            // REMOVE result call (sum_var = sum_rule()) != null  // sum
            (sum_var = sum_rule()) != null  // sum
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, SHIFT_EXPR_ID, null);
    }

    // Left-recursive
    // sum: sum '+' term | sum '-' term | term
    public SSTNode sum_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // left recursion--
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Left Recursion Rule: sum, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, SUM_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, SUM_ID);
        }
        int lastPos = pos;
        int endPos;
        SSTNode lastResult = null;
        cache.putResult(pos, SUM_ID, null);
        while(true) {
            reset(pos);
            SSTNode result = sum_rule_body();
            endPos = mark();
            if (endPos <= lastPos) {
                break;
            }
            lastResult = result;
            lastPos = endPos;
            cache.putResult(pos, SUM_ID, result);
        }
        reset(lastPos);
        if (DEBUG) {
            debugMessageln("Result: " + lastResult);
            this.level--;
        }
        return lastResult;
    }

    // left-rersive rule body
    public SSTNode sum_rule_body() {
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: sum, pos: " + pos);
            this.level++;
        }
        // visiting Alt: sum '+' term
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sum) - should work
            // generated call: (sum_var = sum_rule()) != null  // sum
            // node.name: a, call.assigned_variable: sum_var
        // collecting vars: sum_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('+')
            // generated call: (_literal = expect(Token.Kind.PLUS)) != null  // token='+'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
            // generated call: (term_var = term_rule()) != null  // term
            // node.name: b, call.assigned_variable: term_var
        // collecting vars: term_var, SSTNode
        //    vars: {'sum_var': 'SSTNode', '_literal': 'Token', 'term_var': 'SSTNode'}
        Token _literal = null;
        SSTNode sum_var = null;
        SSTNode term_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: sum
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(sum)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sum) - should work
            // REMOVE result call (sum_var = sum_rule()) != null  // sum
            (sum_var = sum_rule()) != null  // sum
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '+'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('+')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('+')
            // REMOVE result call (_literal = expect(Token.Kind.PLUS)) != null  // token='+'
            (_literal = expect(Token.Kind.PLUS)) != null  // token='+'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: term
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(term)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
            // REMOVE result call (term_var = term_rule()) != null  // term
            (term_var = term_rule()) != null  // term
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: sum '-' term
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sum) - should work
            // generated call: (sum_var = sum_rule()) != null  // sum
            // node.name: a, call.assigned_variable: sum_var
        // collecting vars: sum_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('-')
            // generated call: (_literal = expect(Token.Kind.MINUS)) != null  // token='-'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
            // generated call: (term_var = term_rule()) != null  // term
            // node.name: b, call.assigned_variable: term_var
        // collecting vars: term_var, SSTNode
        //    vars: {'sum_var': 'SSTNode', '_literal': 'Token', 'term_var': 'SSTNode'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: sum
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(sum)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sum) - should work
            // REMOVE result call (sum_var = sum_rule()) != null  // sum
            (sum_var = sum_rule()) != null  // sum
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '-'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('-')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('-')
            // REMOVE result call (_literal = expect(Token.Kind.MINUS)) != null  // token='-'
            (_literal = expect(Token.Kind.MINUS)) != null  // token='-'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: term
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(term)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
            // REMOVE result call (term_var = term_rule()) != null  // term
            (term_var = term_rule()) != null  // term
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: term
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
            // generated call: (term_var = term_rule()) != null  // term
            // node.name: None, call.assigned_variable: term_var
        // collecting vars: term_var, SSTNode
        //    vars: {'term_var': 'SSTNode'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: term
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(term)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
            // REMOVE result call (term_var = term_rule()) != null  // term
            (term_var = term_rule()) != null  // term
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, SUM_ID, null);
    }

    // Left-recursive
    // term:
    //     | term '*' factor
    //     | term '/' factor
    //     | term '//' factor
    //     | term '%' factor
    //     | term '@' factor
    //     | factor
    public SSTNode term_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // left recursion--
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Left Recursion Rule: term, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, TERM_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, TERM_ID);
        }
        int lastPos = pos;
        int endPos;
        SSTNode lastResult = null;
        cache.putResult(pos, TERM_ID, null);
        while(true) {
            reset(pos);
            SSTNode result = term_rule_body();
            endPos = mark();
            if (endPos <= lastPos) {
                break;
            }
            lastResult = result;
            lastPos = endPos;
            cache.putResult(pos, TERM_ID, result);
        }
        reset(lastPos);
        if (DEBUG) {
            debugMessageln("Result: " + lastResult);
            this.level--;
        }
        return lastResult;
    }

    // left-rersive rule body
    public SSTNode term_rule_body() {
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: term, pos: " + pos);
            this.level++;
        }
        // visiting Alt: term '*' factor
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
            // generated call: (term_var = term_rule()) != null  // term
            // node.name: a, call.assigned_variable: term_var
        // collecting vars: term_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
            // generated call: (factor_var = factor_rule()) != null  // factor
            // node.name: b, call.assigned_variable: factor_var
        // collecting vars: factor_var, SSTNode
        //    vars: {'term_var': 'SSTNode', '_literal': 'Token', 'factor_var': 'SSTNode'}
        Token _literal = null;
        SSTNode factor_var = null;
        SSTNode term_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: term
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(term)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
            // REMOVE result call (term_var = term_rule()) != null  // term
            (term_var = term_rule()) != null  // term
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '*'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: factor
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(factor)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
            // REMOVE result call (factor_var = factor_rule()) != null  // factor
            (factor_var = factor_rule()) != null  // factor
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: term '/' factor
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
            // generated call: (term_var = term_rule()) != null  // term
            // node.name: a, call.assigned_variable: term_var
        // collecting vars: term_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
            // generated call: (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
            // generated call: (factor_var = factor_rule()) != null  // factor
            // node.name: b, call.assigned_variable: factor_var
        // collecting vars: factor_var, SSTNode
        //    vars: {'term_var': 'SSTNode', '_literal': 'Token', 'factor_var': 'SSTNode'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: term
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(term)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
            // REMOVE result call (term_var = term_rule()) != null  // term
            (term_var = term_rule()) != null  // term
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '/'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('/')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
            // REMOVE result call (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: factor
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(factor)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
            // REMOVE result call (factor_var = factor_rule()) != null  // factor
            (factor_var = factor_rule()) != null  // factor
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: term '//' factor
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
            // generated call: (term_var = term_rule()) != null  // term
            // node.name: a, call.assigned_variable: term_var
        // collecting vars: term_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('//')
            // generated call: (_literal = expect(Token.Kind.DOUBLESLASH)) != null  // token='//'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
            // generated call: (factor_var = factor_rule()) != null  // factor
            // node.name: b, call.assigned_variable: factor_var
        // collecting vars: factor_var, SSTNode
        //    vars: {'term_var': 'SSTNode', '_literal': 'Token', 'factor_var': 'SSTNode'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: term
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(term)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
            // REMOVE result call (term_var = term_rule()) != null  // term
            (term_var = term_rule()) != null  // term
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '//'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('//')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('//')
            // REMOVE result call (_literal = expect(Token.Kind.DOUBLESLASH)) != null  // token='//'
            (_literal = expect(Token.Kind.DOUBLESLASH)) != null  // token='//'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: factor
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(factor)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
            // REMOVE result call (factor_var = factor_rule()) != null  // factor
            (factor_var = factor_rule()) != null  // factor
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: term '%' factor
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
            // generated call: (term_var = term_rule()) != null  // term
            // node.name: a, call.assigned_variable: term_var
        // collecting vars: term_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('%')
            // generated call: (_literal = expect(Token.Kind.PERCENT)) != null  // token='%'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
            // generated call: (factor_var = factor_rule()) != null  // factor
            // node.name: b, call.assigned_variable: factor_var
        // collecting vars: factor_var, SSTNode
        //    vars: {'term_var': 'SSTNode', '_literal': 'Token', 'factor_var': 'SSTNode'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: term
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(term)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
            // REMOVE result call (term_var = term_rule()) != null  // term
            (term_var = term_rule()) != null  // term
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '%'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('%')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('%')
            // REMOVE result call (_literal = expect(Token.Kind.PERCENT)) != null  // token='%'
            (_literal = expect(Token.Kind.PERCENT)) != null  // token='%'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: factor
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(factor)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
            // REMOVE result call (factor_var = factor_rule()) != null  // factor
            (factor_var = factor_rule()) != null  // factor
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: term '@' factor
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
            // generated call: (term_var = term_rule()) != null  // term
            // node.name: a, call.assigned_variable: term_var
        // collecting vars: term_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('@')
            // generated call: (_literal = expect(Token.Kind.AT)) != null  // token='@'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
            // generated call: (factor_var = factor_rule()) != null  // factor
            // node.name: b, call.assigned_variable: factor_var
        // collecting vars: factor_var, SSTNode
        //    vars: {'term_var': 'SSTNode', '_literal': 'Token', 'factor_var': 'SSTNode'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: term
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(term)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
            // REMOVE result call (term_var = term_rule()) != null  // term
            (term_var = term_rule()) != null  // term
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '@'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('@')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('@')
            // REMOVE result call (_literal = expect(Token.Kind.AT)) != null  // token='@'
            (_literal = expect(Token.Kind.AT)) != null  // token='@'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: factor
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(factor)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
            // REMOVE result call (factor_var = factor_rule()) != null  // factor
            (factor_var = factor_rule()) != null  // factor
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: factor
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
            // generated call: (factor_var = factor_rule()) != null  // factor
            // node.name: None, call.assigned_variable: factor_var
        // collecting vars: factor_var, SSTNode
        //    vars: {'factor_var': 'SSTNode'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: factor
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(factor)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
            // REMOVE result call (factor_var = factor_rule()) != null  // factor
            (factor_var = factor_rule()) != null  // factor
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, TERM_ID, null);
    }

    // factor: '+' factor | '-' factor | '~' factor | power
    public SSTNode factor_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: factor, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, FACTOR_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, FACTOR_ID);
        }
        // visiting Alt: '+' factor
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('+')
            // generated call: (_literal = expect(Token.Kind.PLUS)) != null  // token='+'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
            // generated call: (factor_var = factor_rule()) != null  // factor
            // node.name: a, call.assigned_variable: factor_var
        // collecting vars: factor_var, SSTNode
        //    vars: {'_literal': 'Token', 'factor_var': 'SSTNode'}
        Token _literal = null;
        SSTNode factor_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '+'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('+')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('+')
            // REMOVE result call (_literal = expect(Token.Kind.PLUS)) != null  // token='+'
            (_literal = expect(Token.Kind.PLUS)) != null  // token='+'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: factor
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(factor)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
            // REMOVE result call (factor_var = factor_rule()) != null  // factor
            (factor_var = factor_rule()) != null  // factor
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '-' factor
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('-')
            // generated call: (_literal = expect(Token.Kind.MINUS)) != null  // token='-'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
            // generated call: (factor_var = factor_rule()) != null  // factor
            // node.name: a, call.assigned_variable: factor_var
        // collecting vars: factor_var, SSTNode
        //    vars: {'_literal': 'Token', 'factor_var': 'SSTNode'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '-'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('-')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('-')
            // REMOVE result call (_literal = expect(Token.Kind.MINUS)) != null  // token='-'
            (_literal = expect(Token.Kind.MINUS)) != null  // token='-'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: factor
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(factor)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
            // REMOVE result call (factor_var = factor_rule()) != null  // factor
            (factor_var = factor_rule()) != null  // factor
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '~' factor
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('~')
            // generated call: (_literal = expect(Token.Kind.TILDE)) != null  // token='~'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
            // generated call: (factor_var = factor_rule()) != null  // factor
            // node.name: a, call.assigned_variable: factor_var
        // collecting vars: factor_var, SSTNode
        //    vars: {'_literal': 'Token', 'factor_var': 'SSTNode'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '~'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('~')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('~')
            // REMOVE result call (_literal = expect(Token.Kind.TILDE)) != null  // token='~'
            (_literal = expect(Token.Kind.TILDE)) != null  // token='~'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: factor
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(factor)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
            // REMOVE result call (factor_var = factor_rule()) != null  // factor
            (factor_var = factor_rule()) != null  // factor
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: power
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(power) - should work
            // generated call: (power_var = power_rule()) != null  // power
            // node.name: None, call.assigned_variable: power_var
        // collecting vars: power_var, SSTNode
        //    vars: {'power_var': 'SSTNode'}
        SSTNode power_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: power
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(power)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(power) - should work
            // REMOVE result call (power_var = power_rule()) != null  // power
            (power_var = power_rule()) != null  // power
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, FACTOR_ID, null);
    }

    // power: await_primary '**' factor | await_primary
    public SSTNode power_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: power, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, POWER_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, POWER_ID);
        }
        // visiting Alt: await_primary '**' factor
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(await_primary) - should work
            // generated call: (await_primary_var = await_primary_rule()) != null  // await_primary
            // node.name: a, call.assigned_variable: await_primary_var
        // collecting vars: await_primary_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
            // generated call: (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
            // generated call: (factor_var = factor_rule()) != null  // factor
            // node.name: b, call.assigned_variable: factor_var
        // collecting vars: factor_var, SSTNode
        //    vars: {'await_primary_var': 'SSTNode', '_literal': 'Token', 'factor_var': 'SSTNode'}
        Token _literal = null;
        SSTNode await_primary_var = null;
        SSTNode factor_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: await_primary
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(await_primary)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(await_primary) - should work
            // REMOVE result call (await_primary_var = await_primary_rule()) != null  // await_primary
            (await_primary_var = await_primary_rule()) != null  // await_primary
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '**'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('**')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
            // REMOVE result call (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: factor
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(factor)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
            // REMOVE result call (factor_var = factor_rule()) != null  // factor
            (factor_var = factor_rule()) != null  // factor
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: await_primary
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(await_primary) - should work
            // generated call: (await_primary_var = await_primary_rule()) != null  // await_primary
            // node.name: None, call.assigned_variable: await_primary_var
        // collecting vars: await_primary_var, SSTNode
        //    vars: {'await_primary_var': 'SSTNode'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: await_primary
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(await_primary)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(await_primary) - should work
            // REMOVE result call (await_primary_var = await_primary_rule()) != null  // await_primary
            (await_primary_var = await_primary_rule()) != null  // await_primary
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, POWER_ID, null);
    }

    // await_primary: AWAIT primary | primary
    public SSTNode await_primary_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: await_primary, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, AWAIT_PRIMARY_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, AWAIT_PRIMARY_ID);
        }
        // visiting Alt: AWAIT primary
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(AWAIT) - should work
            // generated call: (await_var = expect(Token.Kind.AWAIT)) != null  // token='AWAIT'
            // node.name: None, call.assigned_variable: await_var
        // collecting vars: await_var, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
            // generated call: (primary_var = primary_rule()) != null  // primary
            // node.name: a, call.assigned_variable: primary_var
        // collecting vars: primary_var, SSTNode
        //    vars: {'await_var': 'Token', 'primary_var': 'SSTNode'}
        Token await_var = null;
        SSTNode primary_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: AWAIT
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(AWAIT)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(AWAIT) - should work
            // REMOVE result call (await_var = expect(Token.Kind.AWAIT)) != null  // token='AWAIT'
            (await_var = expect(Token.Kind.AWAIT)) != null  // token='AWAIT'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: primary
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(primary)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
            // REMOVE result call (primary_var = primary_rule()) != null  // primary
            (primary_var = primary_rule()) != null  // primary
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: primary
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
            // generated call: (primary_var = primary_rule()) != null  // primary
            // node.name: None, call.assigned_variable: primary_var
        // collecting vars: primary_var, SSTNode
        //    vars: {'primary_var': 'SSTNode'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: primary
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(primary)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
            // REMOVE result call (primary_var = primary_rule()) != null  // primary
            (primary_var = primary_rule()) != null  // primary
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, AWAIT_PRIMARY_ID, null);
    }

    // Left-recursive
    // primary:
    //     | invalid_primary
    //     | primary '.' NAME
    //     | primary genexp
    //     | primary '(' arguments? ')'
    //     | primary '[' slices ']'
    //     | atom
    public SSTNode primary_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // left recursion--
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Left Recursion Rule: primary, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, PRIMARY_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, PRIMARY_ID);
        }
        int lastPos = pos;
        int endPos;
        SSTNode lastResult = null;
        cache.putResult(pos, PRIMARY_ID, null);
        while(true) {
            reset(pos);
            SSTNode result = primary_rule_body();
            endPos = mark();
            if (endPos <= lastPos) {
                break;
            }
            lastResult = result;
            lastPos = endPos;
            cache.putResult(pos, PRIMARY_ID, result);
        }
        reset(lastPos);
        if (DEBUG) {
            debugMessageln("Result: " + lastResult);
            this.level--;
        }
        return lastResult;
    }

    // left-rersive rule body
    public SSTNode primary_rule_body() {
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: primary, pos: " + pos);
            this.level++;
        }
        // visiting Alt: invalid_primary
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_primary) - should work
            // generated call: (invalid_primary_var = invalid_primary_rule()) != null  // invalid_primary
            // node.name: None, call.assigned_variable: invalid_primary_var
        // collecting vars: invalid_primary_var, None
        //    vars: {'invalid_primary_var': None}
        Object invalid_primary_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: invalid_primary
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_primary)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_primary) - should work
            // REMOVE result call (invalid_primary_var = invalid_primary_rule()) != null  // invalid_primary
            (invalid_primary_var = invalid_primary_rule()) != null  // invalid_primary
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: primary '.' NAME
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
            // generated call: (primary_var = primary_rule()) != null  // primary
            // node.name: a, call.assigned_variable: primary_var
        // collecting vars: primary_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
            // generated call: (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: b, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        //    vars: {'primary_var': 'SSTNode', '_literal': 'Token', 'name_var': 'Token'}
        Token _literal = null;
        Token name_var = null;
        SSTNode primary_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: primary
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(primary)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
            // REMOVE result call (primary_var = primary_rule()) != null  // primary
            (primary_var = primary_rule()) != null  // primary
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '.'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('.')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
            // REMOVE result call (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: primary genexp
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
            // generated call: (primary_var = primary_rule()) != null  // primary
            // node.name: a, call.assigned_variable: primary_var
        // collecting vars: primary_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(genexp) - should work
            // generated call: (genexp_var = genexp_rule()) != null  // genexp
            // node.name: b, call.assigned_variable: genexp_var
        // collecting vars: genexp_var, SSTNode
        //    vars: {'primary_var': 'SSTNode', 'genexp_var': 'SSTNode'}
        SSTNode genexp_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: primary
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(primary)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
            // REMOVE result call (primary_var = primary_rule()) != null  // primary
            (primary_var = primary_rule()) != null  // primary
            &&
            // TODO visiting JavaParserGeneratorNamedItem: genexp
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(genexp)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(genexp) - should work
            // REMOVE result call (genexp_var = genexp_rule()) != null  // genexp
            (genexp_var = genexp_rule()) != null  // genexp
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: primary '(' arguments? ')'
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
            // generated call: (primary_var = primary_rule()) != null  // primary
            // node.name: a, call.assigned_variable: primary_var
        // collecting vars: primary_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(arguments?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(arguments)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_134_var = _tmp_134_rule()) != null  // arguments
            // generated call: ((_opt_var = _tmp_134_rule()) != null || _opt_var == null)  // arguments?
            // node.name: b, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'primary_var': 'SSTNode', '_literal': 'Token', '_opt_var': None, '_literal_1': 'Token'}
        Token _literal_1 = null;
        Object _opt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: primary
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(primary)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
            // REMOVE result call (primary_var = primary_rule()) != null  // primary
            (primary_var = primary_rule()) != null  // primary
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            &&
            // TODO visiting JavaParserGeneratorNamedItem: arguments?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(arguments?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(arguments?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(arguments)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_134_var = _tmp_134_rule()) != null  // arguments
            // REMOVE result call ((_opt_var = _tmp_134_rule()) != null || _opt_var == null)  // arguments?
            ((_opt_var = _tmp_134_rule()) != null || _opt_var == null)  // arguments?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: primary '[' slices ']'
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
            // generated call: (primary_var = primary_rule()) != null  // primary
            // node.name: a, call.assigned_variable: primary_var
        // collecting vars: primary_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
            // generated call: (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
            // generated call: (slices_var = slices_rule()) != null  // slices
            // node.name: b, call.assigned_variable: slices_var
        // collecting vars: slices_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
            // generated call: (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'primary_var': 'SSTNode', '_literal': 'Token', 'slices_var': 'SSTNode', '_literal_1': 'Token'}
        SSTNode slices_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: primary
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(primary)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
            // REMOVE result call (primary_var = primary_rule()) != null  // primary
            (primary_var = primary_rule()) != null  // primary
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '['
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('[')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
            // REMOVE result call (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            &&
            // TODO visiting JavaParserGeneratorNamedItem: slices
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(slices)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
            // REMOVE result call (slices_var = slices_rule()) != null  // slices
            (slices_var = slices_rule()) != null  // slices
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ']'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(']')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
            // REMOVE result call (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            (_literal_1 = expect(Token.Kind.RSQB)) != null  // token=']'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: atom
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(atom) - should work
            // generated call: (atom_var = atom_rule()) != null  // atom
            // node.name: None, call.assigned_variable: atom_var
        // collecting vars: atom_var, SSTNode
        //    vars: {'atom_var': 'SSTNode'}
        SSTNode atom_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: atom
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(atom)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(atom) - should work
            // REMOVE result call (atom_var = atom_rule()) != null  // atom
            (atom_var = atom_rule()) != null  // atom
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, PRIMARY_ID, null);
    }

    // slices: slice !',' | ','.slice+ ','?
    public SSTNode slices_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: slices, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, SLICES_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, SLICES_ID);
        }
        // visiting Alt: slice !','
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slice) - should work
            // generated call: (slice_var = slice_rule()) != null  // slice
            // node.name: a, call.assigned_variable: slice_var
        // collecting vars: slice_var, SSTNode
        // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!',')
            // generated call: None
        // collecting vars: None, None
        //    vars: {'slice_var': 'SSTNode', None: None}
        SSTNode slice_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: slice
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(slice)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slice) - should work
            // REMOVE result call (slice_var = slice_rule()) != null  // slice
            (slice_var = slice_rule()) != null  // slice
            &&
            // TODO visiting JavaParserGeneratorNamedItem: !','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!',')
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!',')
            // TODO call is not created !',' -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: ','.slice+ ','?
        // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.slice+)
            // generated call: (_gather_135_var = _gather_135_rule()) != null  // ','.slice+
            // node.name: a, call.assigned_variable: _gather_135_var
        // collecting vars: _gather_135_var, asdl_expr_seq*
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_137_var = _tmp_137_rule()) != null  // ','
            // generated call: ((_opt_var = _tmp_137_rule()) != null || _opt_var == null)  // ','?
            // node.name: None, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'_gather_135_var': 'asdl_expr_seq*', '_opt_var': None}
        // TODO replacing asdl_expr_seq* --> SSTNode[]
        SSTNode[] _gather_135_var = null;
        Object _opt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','.slice+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.slice+)
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.slice+)
            // REMOVE result call (_gather_135_var = _gather_135_rule()) != null  // ','.slice+
            (_gather_135_var = (SSTNode[])_gather_135_rule()) != null  // ','.slice+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_137_var = _tmp_137_rule()) != null  // ','
            // REMOVE result call ((_opt_var = _tmp_137_rule()) != null || _opt_var == null)  // ','?
            ((_opt_var = _tmp_137_rule()) != null || _opt_var == null)  // ','?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, SLICES_ID, null);
    }

    // slice: expression? ':' expression? [':' expression?] | named_expression
    public SSTNode slice_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: slice, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, SLICE_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, SLICE_ID);
        }
        // visiting Alt: expression? ':' expression? [':' expression?]
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(expression?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expression)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_138_var = _tmp_138_rule()) != null  // expression
            // generated call: ((_opt_var = _tmp_138_rule()) != null || _opt_var == null)  // expression?
            // node.name: a, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(expression?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expression)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_139_var = _tmp_139_rule()) != null  // expression
            // generated call: ((_opt_var = _tmp_139_rule()) != null || _opt_var == null)  // expression?
            // node.name: b, call.assigned_variable: _opt_var
        // collecting vars: _opt_var_1, None
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt([':' expression?])
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(':' expression?)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_140_var = _tmp_140_rule()) != null  // ':' expression?
            // generated call: ((_opt_var = _tmp_140_rule()) != null || _opt_var == null)  // [':' expression?]
            // node.name: c, call.assigned_variable: _opt_var
        // collecting vars: _opt_var_2, None
        //    vars: {'_opt_var': None, '_literal': 'Token', '_opt_var_1': None, '_opt_var_2': None}
        Token _literal = null;
        Object _opt_var = null;
        Object _opt_var_1 = null;
        Object _opt_var_2 = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: expression?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(expression?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expression)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_138_var = _tmp_138_rule()) != null  // expression
            // REMOVE result call ((_opt_var = _tmp_138_rule()) != null || _opt_var == null)  // expression?
            ((_opt_var = _tmp_138_rule()) != null || _opt_var == null)  // expression?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(expression?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expression)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_139_var = _tmp_139_rule()) != null  // expression
            // REMOVE result call ((_opt_var = _tmp_139_rule()) != null || _opt_var == null)  // expression?
            ((_opt_var_1 = _tmp_139_rule()) != null || _opt_var_1 == null)  // expression?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: [':' expression?]
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem([':' expression?])
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt([':' expression?])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(':' expression?)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_140_var = _tmp_140_rule()) != null  // ':' expression?
            // REMOVE result call ((_opt_var = _tmp_140_rule()) != null || _opt_var == null)  // [':' expression?]
            ((_opt_var_2 = _tmp_140_rule()) != null || _opt_var_2 == null)  // [':' expression?]
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: named_expression
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // generated call: (named_expression_var = named_expression_rule()) != null  // named_expression
            // node.name: a, call.assigned_variable: named_expression_var
        // collecting vars: named_expression_var, SSTNode
        //    vars: {'named_expression_var': 'SSTNode'}
        SSTNode named_expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: named_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(named_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // REMOVE result call (named_expression_var = named_expression_rule()) != null  // named_expression
            (named_expression_var = named_expression_rule()) != null  // named_expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, SLICE_ID, null);
    }

    // atom:
    //     | NAME
    //     | 'True'
    //     | 'False'
    //     | 'None'
    //     | &STRING strings
    //     | NUMBER
    //     | &'(' (tuple | group | genexp)
    //     | &'[' (list | listcomp)
    //     | &'{' (dict | set | dictcomp | setcomp)
    //     | '...'
    public SSTNode atom_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: atom, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, ATOM_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, ATOM_ID);
        }
        // visiting Alt: NAME
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: None, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        //    vars: {'name_var': 'Token'}
        Token name_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: 'True'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('True')
            // generated call: (_keyword = expect(KEYWORD_TRUE)) != null  // token='True'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        //    vars: {'_keyword': 'Token'}
        Token _keyword = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'True'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('True')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('True')
            // REMOVE result call (_keyword = expect(KEYWORD_TRUE)) != null  // token='True'
            (_keyword = expect(KEYWORD_TRUE)) != null  // token='True'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: 'False'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('False')
            // generated call: (_keyword = expect(KEYWORD_FALSE)) != null  // token='False'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        //    vars: {'_keyword': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'False'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('False')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('False')
            // REMOVE result call (_keyword = expect(KEYWORD_FALSE)) != null  // token='False'
            (_keyword = expect(KEYWORD_FALSE)) != null  // token='False'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: 'None'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('None')
            // generated call: (_keyword = expect(KEYWORD_NONE)) != null  // token='None'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        //    vars: {'_keyword': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'None'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('None')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('None')
            // REMOVE result call (_keyword = expect(KEYWORD_NONE)) != null  // token='None'
            (_keyword = expect(KEYWORD_NONE)) != null  // token='None'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: &STRING strings
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&STRING)
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(strings) - should work
            // generated call: (strings_var = strings_rule()) != null  // strings
            // node.name: None, call.assigned_variable: strings_var
        // collecting vars: strings_var, SSTNode
        //    vars: {None: None, 'strings_var': 'SSTNode'}
        SSTNode strings_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: &STRING
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&STRING)
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&STRING)
            // TODO call is not created &STRING -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: strings
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(strings)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(strings) - should work
            // REMOVE result call (strings_var = strings_rule()) != null  // strings
            (strings_var = strings_rule()) != null  // strings
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: NUMBER
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NUMBER) - should work
            // generated call: (number_var = expect(Token.Kind.NUMBER)) != null  // NUMBER
            // node.name: None, call.assigned_variable: number_var
        // collecting vars: number_var, Token
        //    vars: {'number_var': 'Token'}
        Token number_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: NUMBER
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NUMBER)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NUMBER) - should work
            // REMOVE result call (number_var = expect(Token.Kind.NUMBER)) != null  // NUMBER
            (number_var = expect(Token.Kind.NUMBER)) != null  // NUMBER
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: &'(' (tuple | group | genexp)
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'(')
            // generated call: None
        // collecting vars: None, None
        // TODO visiting JavaCallMakerVisitor.visit_Group((tuple | group | genexp))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(tuple | group | genexp)
            // generated call: (_tmp_141_var = _tmp_141_rule()) != null  // tuple | group | genexp
            // node.name: None, call.assigned_variable: _tmp_141_var
        // collecting vars: _tmp_141_var, None
        //    vars: {None: None, '_tmp_141_var': None}
        Object _tmp_141_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: &'('
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&'(')
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'(')
            // TODO call is not created &'(' -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: (tuple | group | genexp)
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((tuple | group | genexp))
            // TODO visiting JavaCallMakerVisitor.visit_Group((tuple | group | genexp))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(tuple | group | genexp)
            // REMOVE result call (_tmp_141_var = _tmp_141_rule()) != null  // tuple | group | genexp
            (_tmp_141_var = _tmp_141_rule()) != null  // tuple | group | genexp
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: &'[' (list | listcomp)
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'[')
            // generated call: None
        // collecting vars: None, None
        // TODO visiting JavaCallMakerVisitor.visit_Group((list | listcomp))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(list | listcomp)
            // generated call: (_tmp_142_var = _tmp_142_rule()) != null  // list | listcomp
            // node.name: None, call.assigned_variable: _tmp_142_var
        // collecting vars: _tmp_142_var, None
        //    vars: {None: None, '_tmp_142_var': None}
        Object _tmp_142_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: &'['
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&'[')
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'[')
            // TODO call is not created &'[' -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: (list | listcomp)
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((list | listcomp))
            // TODO visiting JavaCallMakerVisitor.visit_Group((list | listcomp))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(list | listcomp)
            // REMOVE result call (_tmp_142_var = _tmp_142_rule()) != null  // list | listcomp
            (_tmp_142_var = _tmp_142_rule()) != null  // list | listcomp
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: &'{' (dict | set | dictcomp | setcomp)
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'{')
            // generated call: None
        // collecting vars: None, None
        // TODO visiting JavaCallMakerVisitor.visit_Group((dict | set | dictcomp | setcomp))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(dict | set | dictcomp | setcomp)
            // generated call: (_tmp_143_var = _tmp_143_rule()) != null  // dict | set | dictcomp | setcomp
            // node.name: None, call.assigned_variable: _tmp_143_var
        // collecting vars: _tmp_143_var, None
        //    vars: {None: None, '_tmp_143_var': None}
        Object _tmp_143_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: &'{'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&'{')
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'{')
            // TODO call is not created &'{' -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: (dict | set | dictcomp | setcomp)
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((dict | set | dictcomp | setcomp))
            // TODO visiting JavaCallMakerVisitor.visit_Group((dict | set | dictcomp | setcomp))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(dict | set | dictcomp | setcomp)
            // REMOVE result call (_tmp_143_var = _tmp_143_rule()) != null  // dict | set | dictcomp | setcomp
            (_tmp_143_var = _tmp_143_rule()) != null  // dict | set | dictcomp | setcomp
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '...'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('...')
            // generated call: (_literal = expect(Token.Kind.ELLIPSIS)) != null  // token='...'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        Token _literal = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '...'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('...')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('...')
            // REMOVE result call (_literal = expect(Token.Kind.ELLIPSIS)) != null  // token='...'
            (_literal = expect(Token.Kind.ELLIPSIS)) != null  // token='...'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, ATOM_ID, null);
    }

    // strings: STRING+
    public SSTNode strings_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: strings, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, STRINGS_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, STRINGS_ID);
        }
        // visiting Alt: STRING+
        // TODO visiting JavaCallMakerVisitor.visit_Repeat1(STRING+)
            // generated call: (_loop1_144_var = _loop1_144_rule()) != null  // STRING+
            // node.name: a, call.assigned_variable: _loop1_144_var
        // collecting vars: _loop1_144_var, SSTNode[]
        //    vars: {'_loop1_144_var': 'SSTNode[]'}
        SSTNode[] _loop1_144_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: STRING+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(STRING+)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(STRING+)
            // REMOVE result call (_loop1_144_var = _loop1_144_rule()) != null  // STRING+
            (_loop1_144_var = _loop1_144_rule()) != null  // STRING+
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, STRINGS_ID, null);
    }

    // list: '[' star_named_expressions? ']'
    public SSTNode list_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: list, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, LIST_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, LIST_ID);
        }
        // visiting Alt: '[' star_named_expressions? ']'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
            // generated call: (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_named_expressions?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_named_expressions)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_145_var = _tmp_145_rule()) != null  // star_named_expressions
            // generated call: ((_opt_var = _tmp_145_rule()) != null || _opt_var == null)  // star_named_expressions?
            // node.name: a, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
            // generated call: (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_literal': 'Token', '_opt_var': None, '_literal_1': 'Token'}
        Token _literal = null;
        Token _literal_1 = null;
        Object _opt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '['
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('[')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
            // REMOVE result call (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            &&
            // TODO visiting JavaParserGeneratorNamedItem: star_named_expressions?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_named_expressions?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_named_expressions?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_named_expressions)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_145_var = _tmp_145_rule()) != null  // star_named_expressions
            // REMOVE result call ((_opt_var = _tmp_145_rule()) != null || _opt_var == null)  // star_named_expressions?
            ((_opt_var = _tmp_145_rule()) != null || _opt_var == null)  // star_named_expressions?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ']'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(']')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
            // REMOVE result call (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            (_literal_1 = expect(Token.Kind.RSQB)) != null  // token=']'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, LIST_ID, null);
    }

    // listcomp: '[' named_expression for_if_clauses ']' | invalid_comprehension
    public SSTNode listcomp_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: listcomp, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, LISTCOMP_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, LISTCOMP_ID);
        }
        // visiting Alt: '[' named_expression for_if_clauses ']'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
            // generated call: (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // generated call: (named_expression_var = named_expression_rule()) != null  // named_expression
            // node.name: a, call.assigned_variable: named_expression_var
        // collecting vars: named_expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
        // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
            // generated call: (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            // node.name: b, call.assigned_variable: for_if_clauses_var
        // collecting vars: for_if_clauses_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
            // generated call: (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_literal': 'Token', 'named_expression_var': 'SSTNode', 'for_if_clauses_var': 'SSTNode[]', '_literal_1': 'Token'}
        Token _literal = null;
        Token _literal_1 = null;
        SSTNode[] for_if_clauses_var = null;
        SSTNode named_expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '['
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('[')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
            // REMOVE result call (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            &&
            // TODO visiting JavaParserGeneratorNamedItem: named_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(named_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // REMOVE result call (named_expression_var = named_expression_rule()) != null  // named_expression
            (named_expression_var = named_expression_rule()) != null  // named_expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: for_if_clauses
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(for_if_clauses)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
            // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
            // REMOVE result call (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ']'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(']')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
            // REMOVE result call (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            (_literal_1 = expect(Token.Kind.RSQB)) != null  // token=']'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: invalid_comprehension
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_comprehension) - should work
            // generated call: (invalid_comprehension_var = invalid_comprehension_rule()) != null  // invalid_comprehension
            // node.name: None, call.assigned_variable: invalid_comprehension_var
        // collecting vars: invalid_comprehension_var, None
        //    vars: {'invalid_comprehension_var': None}
        Object invalid_comprehension_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: invalid_comprehension
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_comprehension)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_comprehension) - should work
            // REMOVE result call (invalid_comprehension_var = invalid_comprehension_rule()) != null  // invalid_comprehension
            (invalid_comprehension_var = invalid_comprehension_rule()) != null  // invalid_comprehension
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, LISTCOMP_ID, null);
    }

    // tuple: '(' [star_named_expression ',' star_named_expressions?] ')'
    public SSTNode tuple_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: tuple, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, TUPLE_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, TUPLE_ID);
        }
        // visiting Alt: '(' [star_named_expression ',' star_named_expressions?] ')'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt([star_named_expression ',' star_named_expressions?])
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_named_expression ',' star_named_expressions?)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_146_var = _tmp_146_rule()) != null  // star_named_expression ',' star_named_expressions?
            // generated call: ((_opt_var = _tmp_146_rule()) != null || _opt_var == null)  // [star_named_expression ',' star_named_expressions?]
            // node.name: a, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_literal': 'Token', '_opt_var': None, '_literal_1': 'Token'}
        Token _literal = null;
        Token _literal_1 = null;
        Object _opt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            &&
            // TODO visiting JavaParserGeneratorNamedItem: [star_named_expression ',' star_named_expressions?]
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem([star_named_expression ',' star_named_expressions?])
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt([star_named_expression ',' star_named_expressions?])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_named_expression ',' star_named_expressions?)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_146_var = _tmp_146_rule()) != null  // star_named_expression ',' star_named_expressions?
            // REMOVE result call ((_opt_var = _tmp_146_rule()) != null || _opt_var == null)  // [star_named_expression ',' star_named_expressions?]
            ((_opt_var = _tmp_146_rule()) != null || _opt_var == null)  // [star_named_expression ',' star_named_expressions?]
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, TUPLE_ID, null);
    }

    // group: '(' (yield_expr | named_expression) ')' | invalid_group
    public SSTNode group_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: group, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, GROUP_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, GROUP_ID);
        }
        // visiting Alt: '(' (yield_expr | named_expression) ')'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // TODO visiting JavaCallMakerVisitor.visit_Group((yield_expr | named_expression))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(yield_expr | named_expression)
            // generated call: (_tmp_147_var = _tmp_147_rule()) != null  // yield_expr | named_expression
            // node.name: a, call.assigned_variable: _tmp_147_var
        // collecting vars: _tmp_147_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_literal': 'Token', '_tmp_147_var': None, '_literal_1': 'Token'}
        Token _literal = null;
        Token _literal_1 = null;
        Object _tmp_147_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            &&
            // TODO visiting JavaParserGeneratorNamedItem: (yield_expr | named_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((yield_expr | named_expression))
            // TODO visiting JavaCallMakerVisitor.visit_Group((yield_expr | named_expression))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(yield_expr | named_expression)
            // REMOVE result call (_tmp_147_var = _tmp_147_rule()) != null  // yield_expr | named_expression
            (_tmp_147_var = _tmp_147_rule()) != null  // yield_expr | named_expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: invalid_group
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_group) - should work
            // generated call: (invalid_group_var = invalid_group_rule()) != null  // invalid_group
            // node.name: None, call.assigned_variable: invalid_group_var
        // collecting vars: invalid_group_var, None
        //    vars: {'invalid_group_var': None}
        Object invalid_group_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: invalid_group
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_group)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_group) - should work
            // REMOVE result call (invalid_group_var = invalid_group_rule()) != null  // invalid_group
            (invalid_group_var = invalid_group_rule()) != null  // invalid_group
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, GROUP_ID, null);
    }

    // genexp: '(' direct_named_expression for_if_clauses ')' | invalid_comprehension
    public SSTNode genexp_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: genexp, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, GENEXP_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, GENEXP_ID);
        }
        // visiting Alt: '(' direct_named_expression for_if_clauses ')'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(direct_named_expression) - should work
            // generated call: (direct_named_expression_var = direct_named_expression_rule()) != null  // direct_named_expression
            // node.name: a, call.assigned_variable: direct_named_expression_var
        // collecting vars: direct_named_expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
        // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
            // generated call: (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            // node.name: b, call.assigned_variable: for_if_clauses_var
        // collecting vars: for_if_clauses_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_literal': 'Token', 'direct_named_expression_var': 'SSTNode', 'for_if_clauses_var': 'SSTNode[]', '_literal_1': 'Token'}
        Token _literal = null;
        Token _literal_1 = null;
        SSTNode direct_named_expression_var = null;
        SSTNode[] for_if_clauses_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            &&
            // TODO visiting JavaParserGeneratorNamedItem: direct_named_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(direct_named_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(direct_named_expression) - should work
            // REMOVE result call (direct_named_expression_var = direct_named_expression_rule()) != null  // direct_named_expression
            (direct_named_expression_var = direct_named_expression_rule()) != null  // direct_named_expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: for_if_clauses
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(for_if_clauses)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
            // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
            // REMOVE result call (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: invalid_comprehension
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_comprehension) - should work
            // generated call: (invalid_comprehension_var = invalid_comprehension_rule()) != null  // invalid_comprehension
            // node.name: None, call.assigned_variable: invalid_comprehension_var
        // collecting vars: invalid_comprehension_var, None
        //    vars: {'invalid_comprehension_var': None}
        Object invalid_comprehension_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: invalid_comprehension
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_comprehension)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_comprehension) - should work
            // REMOVE result call (invalid_comprehension_var = invalid_comprehension_rule()) != null  // invalid_comprehension
            (invalid_comprehension_var = invalid_comprehension_rule()) != null  // invalid_comprehension
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, GENEXP_ID, null);
    }

    // set: '{' star_named_expressions '}'
    public SSTNode set_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: set, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, SET_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, SET_ID);
        }
        // visiting Alt: '{' star_named_expressions '}'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
            // generated call: (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
        // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // generated call: (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
            // node.name: a, call.assigned_variable: star_named_expressions_var
        // collecting vars: star_named_expressions_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
            // generated call: (_literal = expect(Token.Kind.RBRACE)) != null  // token='}'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_literal': 'Token', 'star_named_expressions_var': 'SSTNode[]', '_literal_1': 'Token'}
        Token _literal = null;
        Token _literal_1 = null;
        SSTNode[] star_named_expressions_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '{'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('{')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
            // REMOVE result call (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: star_named_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_named_expressions)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // REMOVE result call (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
            (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '}'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('}')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
            // REMOVE result call (_literal = expect(Token.Kind.RBRACE)) != null  // token='}'
            (_literal_1 = expect(Token.Kind.RBRACE)) != null  // token='}'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, SET_ID, null);
    }

    // setcomp: '{' named_expression for_if_clauses '}' | invalid_comprehension
    public SSTNode setcomp_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: setcomp, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, SETCOMP_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, SETCOMP_ID);
        }
        // visiting Alt: '{' named_expression for_if_clauses '}'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
            // generated call: (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // generated call: (named_expression_var = named_expression_rule()) != null  // named_expression
            // node.name: a, call.assigned_variable: named_expression_var
        // collecting vars: named_expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
        // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
            // generated call: (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            // node.name: b, call.assigned_variable: for_if_clauses_var
        // collecting vars: for_if_clauses_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
            // generated call: (_literal = expect(Token.Kind.RBRACE)) != null  // token='}'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_literal': 'Token', 'named_expression_var': 'SSTNode', 'for_if_clauses_var': 'SSTNode[]', '_literal_1': 'Token'}
        Token _literal = null;
        Token _literal_1 = null;
        SSTNode[] for_if_clauses_var = null;
        SSTNode named_expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '{'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('{')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
            // REMOVE result call (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: named_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(named_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // REMOVE result call (named_expression_var = named_expression_rule()) != null  // named_expression
            (named_expression_var = named_expression_rule()) != null  // named_expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: for_if_clauses
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(for_if_clauses)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
            // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
            // REMOVE result call (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '}'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('}')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
            // REMOVE result call (_literal = expect(Token.Kind.RBRACE)) != null  // token='}'
            (_literal_1 = expect(Token.Kind.RBRACE)) != null  // token='}'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: invalid_comprehension
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_comprehension) - should work
            // generated call: (invalid_comprehension_var = invalid_comprehension_rule()) != null  // invalid_comprehension
            // node.name: None, call.assigned_variable: invalid_comprehension_var
        // collecting vars: invalid_comprehension_var, None
        //    vars: {'invalid_comprehension_var': None}
        Object invalid_comprehension_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: invalid_comprehension
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_comprehension)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_comprehension) - should work
            // REMOVE result call (invalid_comprehension_var = invalid_comprehension_rule()) != null  // invalid_comprehension
            (invalid_comprehension_var = invalid_comprehension_rule()) != null  // invalid_comprehension
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, SETCOMP_ID, null);
    }

    // dict: '{' double_starred_kvpairs? '}' | '{' invalid_double_starred_kvpairs '}'
    public SSTNode dict_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: dict, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, DICT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, DICT_ID);
        }
        // visiting Alt: '{' double_starred_kvpairs? '}'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
            // generated call: (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(double_starred_kvpairs?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(double_starred_kvpairs)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_148_var = _tmp_148_rule()) != null  // double_starred_kvpairs
            // generated call: ((_opt_var = _tmp_148_rule()) != null || _opt_var == null)  // double_starred_kvpairs?
            // node.name: a, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
            // generated call: (_literal = expect(Token.Kind.RBRACE)) != null  // token='}'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_literal': 'Token', '_opt_var': None, '_literal_1': 'Token'}
        Token _literal = null;
        Token _literal_1 = null;
        Object _opt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '{'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('{')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
            // REMOVE result call (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: double_starred_kvpairs?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(double_starred_kvpairs?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(double_starred_kvpairs?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(double_starred_kvpairs)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_148_var = _tmp_148_rule()) != null  // double_starred_kvpairs
            // REMOVE result call ((_opt_var = _tmp_148_rule()) != null || _opt_var == null)  // double_starred_kvpairs?
            ((_opt_var = _tmp_148_rule()) != null || _opt_var == null)  // double_starred_kvpairs?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '}'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('}')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
            // REMOVE result call (_literal = expect(Token.Kind.RBRACE)) != null  // token='}'
            (_literal_1 = expect(Token.Kind.RBRACE)) != null  // token='}'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '{' invalid_double_starred_kvpairs '}'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
            // generated call: (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_double_starred_kvpairs) - should work
            // generated call: (invalid_double_starred_kvpairs_var = invalid_double_starred_kvpairs_rule()) != null  // invalid_double_starred_kvpairs
            // node.name: None, call.assigned_variable: invalid_double_starred_kvpairs_var
        // collecting vars: invalid_double_starred_kvpairs_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
            // generated call: (_literal = expect(Token.Kind.RBRACE)) != null  // token='}'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_literal': 'Token', 'invalid_double_starred_kvpairs_var': None, '_literal_1': 'Token'}
        Object invalid_double_starred_kvpairs_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '{'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('{')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
            // REMOVE result call (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: invalid_double_starred_kvpairs
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_double_starred_kvpairs)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_double_starred_kvpairs) - should work
            // REMOVE result call (invalid_double_starred_kvpairs_var = invalid_double_starred_kvpairs_rule()) != null  // invalid_double_starred_kvpairs
            (invalid_double_starred_kvpairs_var = invalid_double_starred_kvpairs_rule()) != null  // invalid_double_starred_kvpairs
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '}'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('}')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
            // REMOVE result call (_literal = expect(Token.Kind.RBRACE)) != null  // token='}'
            (_literal_1 = expect(Token.Kind.RBRACE)) != null  // token='}'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, DICT_ID, null);
    }

    // dictcomp: '{' kvpair for_if_clauses '}' | invalid_dict_comprehension
    public SSTNode dictcomp_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: dictcomp, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, DICTCOMP_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, DICTCOMP_ID);
        }
        // visiting Alt: '{' kvpair for_if_clauses '}'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
            // generated call: (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kvpair) - should work
        // TODO replacing KeyValuePair[] --> SSTNode[]
            // generated call: (kvpair_var = kvpair_rule()) != null  // kvpair
            // node.name: a, call.assigned_variable: kvpair_var
        // collecting vars: kvpair_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
        // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
            // generated call: (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            // node.name: b, call.assigned_variable: for_if_clauses_var
        // collecting vars: for_if_clauses_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
            // generated call: (_literal = expect(Token.Kind.RBRACE)) != null  // token='}'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_literal': 'Token', 'kvpair_var': 'SSTNode[]', 'for_if_clauses_var': 'SSTNode[]', '_literal_1': 'Token'}
        Token _literal = null;
        Token _literal_1 = null;
        SSTNode[] for_if_clauses_var = null;
        SSTNode[] kvpair_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '{'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('{')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
            // REMOVE result call (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: kvpair
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kvpair)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kvpair) - should work
            // TODO replacing KeyValuePair[] --> SSTNode[]
            // REMOVE result call (kvpair_var = kvpair_rule()) != null  // kvpair
            (kvpair_var = kvpair_rule()) != null  // kvpair
            &&
            // TODO visiting JavaParserGeneratorNamedItem: for_if_clauses
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(for_if_clauses)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
            // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
            // REMOVE result call (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '}'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('}')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
            // REMOVE result call (_literal = expect(Token.Kind.RBRACE)) != null  // token='}'
            (_literal_1 = expect(Token.Kind.RBRACE)) != null  // token='}'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: invalid_dict_comprehension
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_dict_comprehension) - should work
            // generated call: (invalid_dict_comprehension_var = invalid_dict_comprehension_rule()) != null  // invalid_dict_comprehension
            // node.name: None, call.assigned_variable: invalid_dict_comprehension_var
        // collecting vars: invalid_dict_comprehension_var, None
        //    vars: {'invalid_dict_comprehension_var': None}
        Object invalid_dict_comprehension_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: invalid_dict_comprehension
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_dict_comprehension)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_dict_comprehension) - should work
            // REMOVE result call (invalid_dict_comprehension_var = invalid_dict_comprehension_rule()) != null  // invalid_dict_comprehension
            (invalid_dict_comprehension_var = invalid_dict_comprehension_rule()) != null  // invalid_dict_comprehension
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, DICTCOMP_ID, null);
    }

    // double_starred_kvpairs: ','.double_starred_kvpair+ ','?
    // TODO replacing asdl_seq* --> SSTNode[]
    public SSTNode[] double_starred_kvpairs_rule() {
    // isLoop: False, isGather: False, type: asdl_seq*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: double_starred_kvpairs, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, DOUBLE_STARRED_KVPAIRS_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, DOUBLE_STARRED_KVPAIRS_ID);
        }
        // visiting Alt: ','.double_starred_kvpair+ ','?
        // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.double_starred_kvpair+)
            // generated call: (_gather_149_var = _gather_149_rule()) != null  // ','.double_starred_kvpair+
            // node.name: a, call.assigned_variable: _gather_149_var
        // collecting vars: _gather_149_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_151_var = _tmp_151_rule()) != null  // ','
            // generated call: ((_opt_var = _tmp_151_rule()) != null || _opt_var == null)  // ','?
            // node.name: None, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'_gather_149_var': 'SSTNode[]', '_opt_var': None}
        SSTNode[] _gather_149_var = null;
        Object _opt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','.double_starred_kvpair+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.double_starred_kvpair+)
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.double_starred_kvpair+)
            // REMOVE result call (_gather_149_var = _gather_149_rule()) != null  // ','.double_starred_kvpair+
            (_gather_149_var = _gather_149_rule()) != null  // ','.double_starred_kvpair+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_151_var = _tmp_151_rule()) != null  // ','
            // REMOVE result call ((_opt_var = _tmp_151_rule()) != null || _opt_var == null)  // ','?
            ((_opt_var = _tmp_151_rule()) != null || _opt_var == null)  // ','?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, DOUBLE_STARRED_KVPAIRS_ID, null);
    }

    // double_starred_kvpair: '**' bitwise_or | kvpair
    // TODO replacing KeyValuePair* --> SSTNode[]
    public SSTNode[] double_starred_kvpair_rule() {
    // isLoop: False, isGather: False, type: KeyValuePair*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: double_starred_kvpair, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, DOUBLE_STARRED_KVPAIR_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, DOUBLE_STARRED_KVPAIR_ID);
        }
        // visiting Alt: '**' bitwise_or
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
            // generated call: (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // node.name: a, call.assigned_variable: bitwise_or_var
        // collecting vars: bitwise_or_var, SSTNode
        //    vars: {'_literal': 'Token', 'bitwise_or_var': 'SSTNode'}
        Token _literal = null;
        SSTNode bitwise_or_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '**'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('**')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
            // REMOVE result call (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: kvpair
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kvpair) - should work
        // TODO replacing KeyValuePair[] --> SSTNode[]
            // generated call: (kvpair_var = kvpair_rule()) != null  // kvpair
            // node.name: None, call.assigned_variable: kvpair_var
        // collecting vars: kvpair_var, SSTNode[]
        //    vars: {'kvpair_var': 'SSTNode[]'}
        SSTNode[] kvpair_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: kvpair
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kvpair)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kvpair) - should work
            // TODO replacing KeyValuePair[] --> SSTNode[]
            // REMOVE result call (kvpair_var = kvpair_rule()) != null  // kvpair
            (kvpair_var = kvpair_rule()) != null  // kvpair
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, DOUBLE_STARRED_KVPAIR_ID, null);
    }

    // kvpair: expression ':' expression
    // TODO replacing KeyValuePair* --> SSTNode[]
    public SSTNode[] kvpair_rule() {
    // isLoop: False, isGather: False, type: KeyValuePair*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: kvpair, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, KVPAIR_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, KVPAIR_ID);
        }
        // visiting Alt: expression ':' expression
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: a, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: b, call.assigned_variable: expression_var
        // collecting vars: expression_var_1, SSTNode
        //    vars: {'expression_var': 'SSTNode', '_literal': 'Token', 'expression_var_1': 'SSTNode'}
        Token _literal = null;
        SSTNode expression_var = null;
        SSTNode expression_var_1 = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var_1 = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, KVPAIR_ID, null);
    }

    // for_if_clauses: for_if_clause+
    // TODO replacing asdl_comprehension_seq* --> SSTNode[]
    public SSTNode[] for_if_clauses_rule() {
    // isLoop: False, isGather: False, type: asdl_comprehension_seq*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: for_if_clauses, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, FOR_IF_CLAUSES_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, FOR_IF_CLAUSES_ID);
        }
        // visiting Alt: for_if_clause+
        // TODO visiting JavaCallMakerVisitor.visit_Repeat1(for_if_clause+)
            // generated call: (_loop1_152_var = _loop1_152_rule()) != null  // for_if_clause+
            // node.name: a, call.assigned_variable: _loop1_152_var
        // collecting vars: _loop1_152_var, asdl_comprehension_seq*
        //    vars: {'_loop1_152_var': 'asdl_comprehension_seq*'}
        // TODO replacing asdl_comprehension_seq* --> SSTNode[]
        SSTNode[] _loop1_152_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: for_if_clause+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(for_if_clause+)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(for_if_clause+)
            // REMOVE result call (_loop1_152_var = _loop1_152_rule()) != null  // for_if_clause+
            (_loop1_152_var = (SSTNode[])_loop1_152_rule()) != null  // for_if_clause+
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, FOR_IF_CLAUSES_ID, null);
    }

    // for_if_clause:
    //     | ASYNC 'for' star_targets 'in' ~ disjunction (('if' disjunction))*
    //     | 'for' star_targets 'in' ~ disjunction (('if' disjunction))*
    //     | invalid_for_target
    // TODO replacing comprehension_ty --> SSTNode
    public SSTNode for_if_clause_rule() {
    // isLoop: False, isGather: False, type: comprehension_ty)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: for_if_clause, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, FOR_IF_CLAUSE_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, FOR_IF_CLAUSE_ID);
        }
        // visiting Alt: ASYNC 'for' star_targets 'in' ~ disjunction (('if' disjunction))*
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
            // generated call: (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            // node.name: None, call.assigned_variable: async_var
        // collecting vars: async_var, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('for')
            // generated call: (_keyword = expect(KEYWORD_FOR)) != null  // token='for'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
            // generated call: (star_targets_var = star_targets_rule()) != null  // star_targets
            // node.name: a, call.assigned_variable: star_targets_var
        // collecting vars: star_targets_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
            // generated call: (_keyword = expect(KEYWORD_IN)) != null  // token='in'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword_1, Token
        // TODO visiting JavaCallMakerVisitor.visit_Cut(~)
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
            // generated call: (disjunction_var = disjunction_rule()) != null  // disjunction
            // node.name: b, call.assigned_variable: disjunction_var
        // collecting vars: disjunction_var, SSTNode
        // TODO visiting JavaCallMakerVisitor.visit_Repeat0((('if' disjunction))*)
            // generated call: (_loop0_153_var = _loop0_153_rule()) != null  // (('if' disjunction))*
            // node.name: c, call.assigned_variable: _loop0_153_var
        // collecting vars: _loop0_153_var, asdl_expr_seq*
        //    vars: {'async_var': 'Token', '_keyword': 'Token', 'star_targets_var': 'SSTNode', '_keyword_1': 'Token', None: None, 'disjunction_var': 'SSTNode', '_loop0_153_var': 'asdl_expr_seq*'}
        Token _keyword = null;
        Token _keyword_1 = null;
        // TODO replacing asdl_expr_seq* --> SSTNode[]
        SSTNode[] _loop0_153_var = null;
        Token async_var = null;
        SSTNode disjunction_var = null;
        SSTNode star_targets_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ASYNC
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(ASYNC)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
            // REMOVE result call (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: 'for'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('for')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('for')
            // REMOVE result call (_keyword = expect(KEYWORD_FOR)) != null  // token='for'
            (_keyword = expect(KEYWORD_FOR)) != null  // token='for'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: star_targets
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_targets)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
            // REMOVE result call (star_targets_var = star_targets_rule()) != null  // star_targets
            (star_targets_var = star_targets_rule()) != null  // star_targets
            &&
            // TODO visiting JavaParserGeneratorNamedItem: 'in'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('in')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
            // REMOVE result call (_keyword = expect(KEYWORD_IN)) != null  // token='in'
            (_keyword_1 = expect(KEYWORD_IN)) != null  // token='in'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ~
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(~)
            // TODO visiting JavaCallMakerVisitor.visit_Cut(~)
            // TODO call is not created ~ -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: disjunction
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(disjunction)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
            // REMOVE result call (disjunction_var = disjunction_rule()) != null  // disjunction
            (disjunction_var = disjunction_rule()) != null  // disjunction
            &&
            // TODO visiting JavaParserGeneratorNamedItem: (('if' disjunction))*
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((('if' disjunction))*)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0((('if' disjunction))*)
            // REMOVE result call (_loop0_153_var = _loop0_153_rule()) != null  // (('if' disjunction))*
            (_loop0_153_var = (SSTNode[])_loop0_153_rule()) != null  // (('if' disjunction))*
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: 'for' star_targets 'in' ~ disjunction (('if' disjunction))*
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('for')
            // generated call: (_keyword = expect(KEYWORD_FOR)) != null  // token='for'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
            // generated call: (star_targets_var = star_targets_rule()) != null  // star_targets
            // node.name: a, call.assigned_variable: star_targets_var
        // collecting vars: star_targets_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
            // generated call: (_keyword = expect(KEYWORD_IN)) != null  // token='in'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword_1, Token
        // TODO visiting JavaCallMakerVisitor.visit_Cut(~)
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
            // generated call: (disjunction_var = disjunction_rule()) != null  // disjunction
            // node.name: b, call.assigned_variable: disjunction_var
        // collecting vars: disjunction_var, SSTNode
        // TODO visiting JavaCallMakerVisitor.visit_Repeat0((('if' disjunction))*)
            // generated call: (_loop0_154_var = _loop0_154_rule()) != null  // (('if' disjunction))*
            // node.name: c, call.assigned_variable: _loop0_154_var
        // collecting vars: _loop0_154_var, asdl_expr_seq*
        //    vars: {'_keyword': 'Token', 'star_targets_var': 'SSTNode', '_keyword_1': 'Token', None: None, 'disjunction_var': 'SSTNode', '_loop0_154_var': 'asdl_expr_seq*'}
        // TODO replacing asdl_expr_seq* --> SSTNode[]
        SSTNode[] _loop0_154_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'for'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('for')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('for')
            // REMOVE result call (_keyword = expect(KEYWORD_FOR)) != null  // token='for'
            (_keyword = expect(KEYWORD_FOR)) != null  // token='for'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: star_targets
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_targets)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
            // REMOVE result call (star_targets_var = star_targets_rule()) != null  // star_targets
            (star_targets_var = star_targets_rule()) != null  // star_targets
            &&
            // TODO visiting JavaParserGeneratorNamedItem: 'in'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('in')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
            // REMOVE result call (_keyword = expect(KEYWORD_IN)) != null  // token='in'
            (_keyword_1 = expect(KEYWORD_IN)) != null  // token='in'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ~
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(~)
            // TODO visiting JavaCallMakerVisitor.visit_Cut(~)
            // TODO call is not created ~ -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: disjunction
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(disjunction)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
            // REMOVE result call (disjunction_var = disjunction_rule()) != null  // disjunction
            (disjunction_var = disjunction_rule()) != null  // disjunction
            &&
            // TODO visiting JavaParserGeneratorNamedItem: (('if' disjunction))*
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((('if' disjunction))*)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0((('if' disjunction))*)
            // REMOVE result call (_loop0_154_var = _loop0_154_rule()) != null  // (('if' disjunction))*
            (_loop0_154_var = (SSTNode[])_loop0_154_rule()) != null  // (('if' disjunction))*
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: invalid_for_target
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_for_target) - should work
            // generated call: (invalid_for_target_var = invalid_for_target_rule()) != null  // invalid_for_target
            // node.name: None, call.assigned_variable: invalid_for_target_var
        // collecting vars: invalid_for_target_var, None
        //    vars: {'invalid_for_target_var': None}
        Object invalid_for_target_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: invalid_for_target
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_for_target)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_for_target) - should work
            // REMOVE result call (invalid_for_target_var = invalid_for_target_rule()) != null  // invalid_for_target
            (invalid_for_target_var = invalid_for_target_rule()) != null  // invalid_for_target
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, FOR_IF_CLAUSE_ID, null);
    }

    // yield_expr: 'yield' 'from' expression | 'yield' star_expressions?
    public SSTNode yield_expr_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: yield_expr, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, YIELD_EXPR_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, YIELD_EXPR_ID);
        }
        // visiting Alt: 'yield' 'from' expression
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('yield')
            // generated call: (_keyword = expect(KEYWORD_YIELD)) != null  // token='yield'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('from')
            // generated call: (_keyword = expect(KEYWORD_FROM)) != null  // token='from'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword_1, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: a, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        //    vars: {'_keyword': 'Token', '_keyword_1': 'Token', 'expression_var': 'SSTNode'}
        Token _keyword = null;
        Token _keyword_1 = null;
        SSTNode expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'yield'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('yield')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('yield')
            // REMOVE result call (_keyword = expect(KEYWORD_YIELD)) != null  // token='yield'
            (_keyword = expect(KEYWORD_YIELD)) != null  // token='yield'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: 'from'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('from')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('from')
            // REMOVE result call (_keyword = expect(KEYWORD_FROM)) != null  // token='from'
            (_keyword_1 = expect(KEYWORD_FROM)) != null  // token='from'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: 'yield' star_expressions?
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('yield')
            // generated call: (_keyword = expect(KEYWORD_YIELD)) != null  // token='yield'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_expressions?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_expressions)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_155_var = _tmp_155_rule()) != null  // star_expressions
            // generated call: ((_opt_var = _tmp_155_rule()) != null || _opt_var == null)  // star_expressions?
            // node.name: a, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'_keyword': 'Token', '_opt_var': None}
        Object _opt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'yield'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('yield')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('yield')
            // REMOVE result call (_keyword = expect(KEYWORD_YIELD)) != null  // token='yield'
            (_keyword = expect(KEYWORD_YIELD)) != null  // token='yield'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: star_expressions?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expressions?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_expressions?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_expressions)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_155_var = _tmp_155_rule()) != null  // star_expressions
            // REMOVE result call ((_opt_var = _tmp_155_rule()) != null || _opt_var == null)  // star_expressions?
            ((_opt_var = _tmp_155_rule()) != null || _opt_var == null)  // star_expressions?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, YIELD_EXPR_ID, null);
    }

    // arguments: args ','? &')' | invalid_arguments
    public SSTNode arguments_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: arguments, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, ARGUMENTS_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, ARGUMENTS_ID);
        }
        // visiting Alt: args ','? &')'
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
            // generated call: (args_var = args_rule()) != null  // args
            // node.name: a, call.assigned_variable: args_var
        // collecting vars: args_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_156_var = _tmp_156_rule()) != null  // ','
            // generated call: ((_opt_var = _tmp_156_rule()) != null || _opt_var == null)  // ','?
            // node.name: None, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
            // generated call: None
        // collecting vars: None, None
        //    vars: {'args_var': 'SSTNode', '_opt_var': None, None: None}
        Object _opt_var = null;
        SSTNode args_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: args
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(args)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
            // REMOVE result call (args_var = args_rule()) != null  // args
            (args_var = args_rule()) != null  // args
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_156_var = _tmp_156_rule()) != null  // ','
            // REMOVE result call ((_opt_var = _tmp_156_rule()) != null || _opt_var == null)  // ','?
            ((_opt_var = _tmp_156_rule()) != null || _opt_var == null)  // ','?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: &')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&')')
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
            // TODO call is not created &')' -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: invalid_arguments
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_arguments) - should work
            // generated call: (invalid_arguments_var = invalid_arguments_rule()) != null  // invalid_arguments
            // node.name: None, call.assigned_variable: invalid_arguments_var
        // collecting vars: invalid_arguments_var, None
        //    vars: {'invalid_arguments_var': None}
        Object invalid_arguments_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: invalid_arguments
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_arguments)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_arguments) - should work
            // REMOVE result call (invalid_arguments_var = invalid_arguments_rule()) != null  // invalid_arguments
            (invalid_arguments_var = invalid_arguments_rule()) != null  // invalid_arguments
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, ARGUMENTS_ID, null);
    }

    // args: ','.(starred_expression | direct_named_expression !'=')+ [',' kwargs] | kwargs
    public SSTNode args_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: args, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, ARGS_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, ARGS_ID);
        }
        // visiting Alt: ','.(starred_expression | direct_named_expression !'=')+ [',' kwargs]
        // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.(starred_expression | direct_named_expression !'=')+)
            // generated call: (_gather_157_var = _gather_157_rule()) != null  // ','.(starred_expression | direct_named_expression !'=')+
            // node.name: a, call.assigned_variable: _gather_157_var
        // collecting vars: _gather_157_var, asdl_expr_seq*
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt([',' kwargs])
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' kwargs)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_159_var = _tmp_159_rule()) != null  // ',' kwargs
            // generated call: ((_opt_var = _tmp_159_rule()) != null || _opt_var == null)  // [',' kwargs]
            // node.name: b, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'_gather_157_var': 'asdl_expr_seq*', '_opt_var': None}
        // TODO replacing asdl_expr_seq* --> SSTNode[]
        SSTNode[] _gather_157_var = null;
        Object _opt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','.(starred_expression | direct_named_expression !'=')+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.(starred_expression | direct_named_expression !'=')+)
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.(starred_expression | direct_named_expression !'=')+)
            // REMOVE result call (_gather_157_var = _gather_157_rule()) != null  // ','.(starred_expression | direct_named_expression !'=')+
            (_gather_157_var = (SSTNode[])_gather_157_rule()) != null  // ','.(starred_expression | direct_named_expression !'=')+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: [',' kwargs]
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem([',' kwargs])
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt([',' kwargs])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' kwargs)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_159_var = _tmp_159_rule()) != null  // ',' kwargs
            // REMOVE result call ((_opt_var = _tmp_159_rule()) != null || _opt_var == null)  // [',' kwargs]
            ((_opt_var = _tmp_159_rule()) != null || _opt_var == null)  // [',' kwargs]
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: kwargs
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwargs) - should work
        // TODO replacing asdl_seq[] --> SSTNode[]
            // generated call: (kwargs_var = kwargs_rule()) != null  // kwargs
            // node.name: a, call.assigned_variable: kwargs_var
        // collecting vars: kwargs_var, SSTNode[]
        //    vars: {'kwargs_var': 'SSTNode[]'}
        SSTNode[] kwargs_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: kwargs
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kwargs)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwargs) - should work
            // TODO replacing asdl_seq[] --> SSTNode[]
            // REMOVE result call (kwargs_var = kwargs_rule()) != null  // kwargs
            (kwargs_var = kwargs_rule()) != null  // kwargs
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, ARGS_ID, null);
    }

    // kwargs:
    //     | ','.kwarg_or_starred+ ',' ','.kwarg_or_double_starred+
    //     | ','.kwarg_or_starred+
    //     | ','.kwarg_or_double_starred+
    // TODO replacing asdl_seq* --> SSTNode[]
    public SSTNode[] kwargs_rule() {
    // isLoop: False, isGather: False, type: asdl_seq*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: kwargs, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, KWARGS_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, KWARGS_ID);
        }
        // visiting Alt: ','.kwarg_or_starred+ ',' ','.kwarg_or_double_starred+
        // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.kwarg_or_starred+)
            // generated call: (_gather_160_var = _gather_160_rule()) != null  // ','.kwarg_or_starred+
            // node.name: a, call.assigned_variable: _gather_160_var
        // collecting vars: _gather_160_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.kwarg_or_double_starred+)
            // generated call: (_gather_162_var = _gather_162_rule()) != null  // ','.kwarg_or_double_starred+
            // node.name: b, call.assigned_variable: _gather_162_var
        // collecting vars: _gather_162_var, SSTNode[]
        //    vars: {'_gather_160_var': 'SSTNode[]', '_literal': 'Token', '_gather_162_var': 'SSTNode[]'}
        SSTNode[] _gather_160_var = null;
        SSTNode[] _gather_162_var = null;
        Token _literal = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','.kwarg_or_starred+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.kwarg_or_starred+)
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.kwarg_or_starred+)
            // REMOVE result call (_gather_160_var = _gather_160_rule()) != null  // ','.kwarg_or_starred+
            (_gather_160_var = _gather_160_rule()) != null  // ','.kwarg_or_starred+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','.kwarg_or_double_starred+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.kwarg_or_double_starred+)
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.kwarg_or_double_starred+)
            // REMOVE result call (_gather_162_var = _gather_162_rule()) != null  // ','.kwarg_or_double_starred+
            (_gather_162_var = _gather_162_rule()) != null  // ','.kwarg_or_double_starred+
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: ','.kwarg_or_starred+
        // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.kwarg_or_starred+)
            // generated call: (_gather_164_var = _gather_164_rule()) != null  // ','.kwarg_or_starred+
            // node.name: None, call.assigned_variable: _gather_164_var
        // collecting vars: _gather_164_var, SSTNode[]
        //    vars: {'_gather_164_var': 'SSTNode[]'}
        SSTNode[] _gather_164_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','.kwarg_or_starred+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.kwarg_or_starred+)
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.kwarg_or_starred+)
            // REMOVE result call (_gather_164_var = _gather_164_rule()) != null  // ','.kwarg_or_starred+
            (_gather_164_var = _gather_164_rule()) != null  // ','.kwarg_or_starred+
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: ','.kwarg_or_double_starred+
        // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.kwarg_or_double_starred+)
            // generated call: (_gather_166_var = _gather_166_rule()) != null  // ','.kwarg_or_double_starred+
            // node.name: None, call.assigned_variable: _gather_166_var
        // collecting vars: _gather_166_var, SSTNode[]
        //    vars: {'_gather_166_var': 'SSTNode[]'}
        SSTNode[] _gather_166_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','.kwarg_or_double_starred+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.kwarg_or_double_starred+)
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.kwarg_or_double_starred+)
            // REMOVE result call (_gather_166_var = _gather_166_rule()) != null  // ','.kwarg_or_double_starred+
            (_gather_166_var = _gather_166_rule()) != null  // ','.kwarg_or_double_starred+
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, KWARGS_ID, null);
    }

    // starred_expression: '*' expression
    public SSTNode starred_expression_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: starred_expression, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, STARRED_EXPRESSION_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, STARRED_EXPRESSION_ID);
        }
        // visiting Alt: '*' expression
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: a, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        //    vars: {'_literal': 'Token', 'expression_var': 'SSTNode'}
        Token _literal = null;
        SSTNode expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '*'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, STARRED_EXPRESSION_ID, null);
    }

    // kwarg_or_starred: NAME '=' expression | starred_expression | invalid_kwarg
    // TODO replacing KeywordOrStarred* --> SSTNode[]
    public SSTNode[] kwarg_or_starred_rule() {
    // isLoop: False, isGather: False, type: KeywordOrStarred*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: kwarg_or_starred, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, KWARG_OR_STARRED_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, KWARG_OR_STARRED_ID);
        }
        // visiting Alt: NAME '=' expression
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: a, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
            // generated call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: b, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        //    vars: {'name_var': 'Token', '_literal': 'Token', 'expression_var': 'SSTNode'}
        Token _literal = null;
        SSTNode expression_var = null;
        Token name_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
            // REMOVE result call (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: starred_expression
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(starred_expression) - should work
            // generated call: (starred_expression_var = starred_expression_rule()) != null  // starred_expression
            // node.name: a, call.assigned_variable: starred_expression_var
        // collecting vars: starred_expression_var, SSTNode
        //    vars: {'starred_expression_var': 'SSTNode'}
        SSTNode starred_expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: starred_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(starred_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(starred_expression) - should work
            // REMOVE result call (starred_expression_var = starred_expression_rule()) != null  // starred_expression
            (starred_expression_var = starred_expression_rule()) != null  // starred_expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: invalid_kwarg
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_kwarg) - should work
            // generated call: (invalid_kwarg_var = invalid_kwarg_rule()) != null  // invalid_kwarg
            // node.name: None, call.assigned_variable: invalid_kwarg_var
        // collecting vars: invalid_kwarg_var, None
        //    vars: {'invalid_kwarg_var': None}
        Object invalid_kwarg_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: invalid_kwarg
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_kwarg)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_kwarg) - should work
            // REMOVE result call (invalid_kwarg_var = invalid_kwarg_rule()) != null  // invalid_kwarg
            (invalid_kwarg_var = invalid_kwarg_rule()) != null  // invalid_kwarg
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, KWARG_OR_STARRED_ID, null);
    }

    // kwarg_or_double_starred: NAME '=' expression | '**' expression | invalid_kwarg
    // TODO replacing KeywordOrStarred* --> SSTNode[]
    public SSTNode[] kwarg_or_double_starred_rule() {
    // isLoop: False, isGather: False, type: KeywordOrStarred*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: kwarg_or_double_starred, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, KWARG_OR_DOUBLE_STARRED_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, KWARG_OR_DOUBLE_STARRED_ID);
        }
        // visiting Alt: NAME '=' expression
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: a, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
            // generated call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: b, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        //    vars: {'name_var': 'Token', '_literal': 'Token', 'expression_var': 'SSTNode'}
        Token _literal = null;
        SSTNode expression_var = null;
        Token name_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
            // REMOVE result call (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '**' expression
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
            // generated call: (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: a, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        //    vars: {'_literal': 'Token', 'expression_var': 'SSTNode'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '**'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('**')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
            // REMOVE result call (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: invalid_kwarg
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_kwarg) - should work
            // generated call: (invalid_kwarg_var = invalid_kwarg_rule()) != null  // invalid_kwarg
            // node.name: None, call.assigned_variable: invalid_kwarg_var
        // collecting vars: invalid_kwarg_var, None
        //    vars: {'invalid_kwarg_var': None}
        Object invalid_kwarg_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: invalid_kwarg
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_kwarg)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_kwarg) - should work
            // REMOVE result call (invalid_kwarg_var = invalid_kwarg_rule()) != null  // invalid_kwarg
            (invalid_kwarg_var = invalid_kwarg_rule()) != null  // invalid_kwarg
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, KWARG_OR_DOUBLE_STARRED_ID, null);
    }

    // star_targets: star_target !',' | star_target ((',' star_target))* ','?
    public SSTNode star_targets_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: star_targets, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, STAR_TARGETS_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, STAR_TARGETS_ID);
        }
        // visiting Alt: star_target !','
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // generated call: (star_target_var = star_target_rule()) != null  // star_target
            // node.name: a, call.assigned_variable: star_target_var
        // collecting vars: star_target_var, SSTNode
        // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!',')
            // generated call: None
        // collecting vars: None, None
        //    vars: {'star_target_var': 'SSTNode', None: None}
        SSTNode star_target_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_target
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_target)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // REMOVE result call (star_target_var = star_target_rule()) != null  // star_target
            (star_target_var = star_target_rule()) != null  // star_target
            &&
            // TODO visiting JavaParserGeneratorNamedItem: !','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!',')
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!',')
            // TODO call is not created !',' -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: star_target ((',' star_target))* ','?
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // generated call: (star_target_var = star_target_rule()) != null  // star_target
            // node.name: a, call.assigned_variable: star_target_var
        // collecting vars: star_target_var, SSTNode
        // TODO visiting JavaCallMakerVisitor.visit_Repeat0(((',' star_target))*)
            // generated call: (_loop0_168_var = _loop0_168_rule()) != null  // ((',' star_target))*
            // node.name: b, call.assigned_variable: _loop0_168_var
        // collecting vars: _loop0_168_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_169_var = _tmp_169_rule()) != null  // ','
            // generated call: ((_opt_var = _tmp_169_rule()) != null || _opt_var == null)  // ','?
            // node.name: None, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'star_target_var': 'SSTNode', '_loop0_168_var': 'SSTNode[]', '_opt_var': None}
        SSTNode[] _loop0_168_var = null;
        Object _opt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_target
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_target)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // REMOVE result call (star_target_var = star_target_rule()) != null  // star_target
            (star_target_var = star_target_rule()) != null  // star_target
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ((',' star_target))*
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(((',' star_target))*)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(((',' star_target))*)
            // REMOVE result call (_loop0_168_var = _loop0_168_rule()) != null  // ((',' star_target))*
            (_loop0_168_var = _loop0_168_rule()) != null  // ((',' star_target))*
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_169_var = _tmp_169_rule()) != null  // ','
            // REMOVE result call ((_opt_var = _tmp_169_rule()) != null || _opt_var == null)  // ','?
            ((_opt_var = _tmp_169_rule()) != null || _opt_var == null)  // ','?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, STAR_TARGETS_ID, null);
    }

    // star_targets_list_seq: ','.star_target+ ','?
    // TODO replacing asdl_expr_seq* --> SSTNode[]
    public SSTNode[] star_targets_list_seq_rule() {
    // isLoop: False, isGather: False, type: asdl_expr_seq*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: star_targets_list_seq, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, STAR_TARGETS_LIST_SEQ_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, STAR_TARGETS_LIST_SEQ_ID);
        }
        // visiting Alt: ','.star_target+ ','?
        // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.star_target+)
            // generated call: (_gather_170_var = _gather_170_rule()) != null  // ','.star_target+
            // node.name: a, call.assigned_variable: _gather_170_var
        // collecting vars: _gather_170_var, asdl_expr_seq*
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_172_var = _tmp_172_rule()) != null  // ','
            // generated call: ((_opt_var = _tmp_172_rule()) != null || _opt_var == null)  // ','?
            // node.name: None, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'_gather_170_var': 'asdl_expr_seq*', '_opt_var': None}
        // TODO replacing asdl_expr_seq* --> SSTNode[]
        SSTNode[] _gather_170_var = null;
        Object _opt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','.star_target+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.star_target+)
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.star_target+)
            // REMOVE result call (_gather_170_var = _gather_170_rule()) != null  // ','.star_target+
            (_gather_170_var = (SSTNode[])_gather_170_rule()) != null  // ','.star_target+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_172_var = _tmp_172_rule()) != null  // ','
            // REMOVE result call ((_opt_var = _tmp_172_rule()) != null || _opt_var == null)  // ','?
            ((_opt_var = _tmp_172_rule()) != null || _opt_var == null)  // ','?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, STAR_TARGETS_LIST_SEQ_ID, null);
    }

    // star_targets_tuple_seq: star_target ((',' star_target))+ ','? | star_target ','
    // TODO replacing asdl_expr_seq* --> SSTNode[]
    public SSTNode[] star_targets_tuple_seq_rule() {
    // isLoop: False, isGather: False, type: asdl_expr_seq*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: star_targets_tuple_seq, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, STAR_TARGETS_TUPLE_SEQ_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, STAR_TARGETS_TUPLE_SEQ_ID);
        }
        // visiting Alt: star_target ((',' star_target))+ ','?
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // generated call: (star_target_var = star_target_rule()) != null  // star_target
            // node.name: a, call.assigned_variable: star_target_var
        // collecting vars: star_target_var, SSTNode
        // TODO visiting JavaCallMakerVisitor.visit_Repeat1(((',' star_target))+)
            // generated call: (_loop1_173_var = _loop1_173_rule()) != null  // ((',' star_target))+
            // node.name: b, call.assigned_variable: _loop1_173_var
        // collecting vars: _loop1_173_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_174_var = _tmp_174_rule()) != null  // ','
            // generated call: ((_opt_var = _tmp_174_rule()) != null || _opt_var == null)  // ','?
            // node.name: None, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'star_target_var': 'SSTNode', '_loop1_173_var': 'SSTNode[]', '_opt_var': None}
        SSTNode[] _loop1_173_var = null;
        Object _opt_var = null;
        SSTNode star_target_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_target
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_target)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // REMOVE result call (star_target_var = star_target_rule()) != null  // star_target
            (star_target_var = star_target_rule()) != null  // star_target
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ((',' star_target))+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(((',' star_target))+)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(((',' star_target))+)
            // REMOVE result call (_loop1_173_var = _loop1_173_rule()) != null  // ((',' star_target))+
            (_loop1_173_var = _loop1_173_rule()) != null  // ((',' star_target))+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_174_var = _tmp_174_rule()) != null  // ','
            // REMOVE result call ((_opt_var = _tmp_174_rule()) != null || _opt_var == null)  // ','?
            ((_opt_var = _tmp_174_rule()) != null || _opt_var == null)  // ','?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: star_target ','
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // generated call: (star_target_var = star_target_rule()) != null  // star_target
            // node.name: a, call.assigned_variable: star_target_var
        // collecting vars: star_target_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'star_target_var': 'SSTNode', '_literal': 'Token'}
        Token _literal = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_target
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_target)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // REMOVE result call (star_target_var = star_target_rule()) != null  // star_target
            (star_target_var = star_target_rule()) != null  // star_target
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, STAR_TARGETS_TUPLE_SEQ_ID, null);
    }

    // star_target: '*' (!'*' star_target) | target_with_star_atom
    public SSTNode star_target_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: star_target, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, STAR_TARGET_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, STAR_TARGET_ID);
        }
        // visiting Alt: '*' (!'*' star_target)
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // TODO visiting JavaCallMakerVisitor.visit_Group((!'*' star_target))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(!'*' star_target)
            // generated call: (_tmp_175_var = _tmp_175_rule()) != null  // !'*' star_target
            // node.name: a, call.assigned_variable: _tmp_175_var
        // collecting vars: _tmp_175_var, None
        //    vars: {'_literal': 'Token', '_tmp_175_var': None}
        Token _literal = null;
        Object _tmp_175_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '*'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: (!'*' star_target)
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((!'*' star_target))
            // TODO visiting JavaCallMakerVisitor.visit_Group((!'*' star_target))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(!'*' star_target)
            // REMOVE result call (_tmp_175_var = _tmp_175_rule()) != null  // !'*' star_target
            (_tmp_175_var = _tmp_175_rule()) != null  // !'*' star_target
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: target_with_star_atom
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(target_with_star_atom) - should work
            // generated call: (target_with_star_atom_var = target_with_star_atom_rule()) != null  // target_with_star_atom
            // node.name: None, call.assigned_variable: target_with_star_atom_var
        // collecting vars: target_with_star_atom_var, SSTNode
        //    vars: {'target_with_star_atom_var': 'SSTNode'}
        SSTNode target_with_star_atom_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: target_with_star_atom
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(target_with_star_atom)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(target_with_star_atom) - should work
            // REMOVE result call (target_with_star_atom_var = target_with_star_atom_rule()) != null  // target_with_star_atom
            (target_with_star_atom_var = target_with_star_atom_rule()) != null  // target_with_star_atom
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, STAR_TARGET_ID, null);
    }

    // target_with_star_atom:
    //     | t_primary '.' NAME !t_lookahead
    //     | t_primary '[' slices ']' !t_lookahead
    //     | star_atom
    public SSTNode target_with_star_atom_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: target_with_star_atom, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, TARGET_WITH_STAR_ATOM_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, TARGET_WITH_STAR_ATOM_ID);
        }
        // visiting Alt: t_primary '.' NAME !t_lookahead
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // generated call: (t_primary_var = t_primary_rule()) != null  // t_primary
            // node.name: a, call.assigned_variable: t_primary_var
        // collecting vars: t_primary_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
            // generated call: (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: b, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
            // generated call: None
        // collecting vars: None, None
        //    vars: {'t_primary_var': 'SSTNode', '_literal': 'Token', 'name_var': 'Token', None: None}
        Token _literal = null;
        Token name_var = null;
        SSTNode t_primary_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: t_primary
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(t_primary)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // REMOVE result call (t_primary_var = t_primary_rule()) != null  // t_primary
            (t_primary_var = t_primary_rule()) != null  // t_primary
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '.'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('.')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
            // REMOVE result call (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
            &&
            // TODO visiting JavaParserGeneratorNamedItem: !t_lookahead
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!t_lookahead)
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
            // TODO call is not created !t_lookahead -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: t_primary '[' slices ']' !t_lookahead
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // generated call: (t_primary_var = t_primary_rule()) != null  // t_primary
            // node.name: a, call.assigned_variable: t_primary_var
        // collecting vars: t_primary_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
            // generated call: (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
            // generated call: (slices_var = slices_rule()) != null  // slices
            // node.name: b, call.assigned_variable: slices_var
        // collecting vars: slices_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
            // generated call: (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
            // generated call: None
        // collecting vars: None, None
        //    vars: {'t_primary_var': 'SSTNode', '_literal': 'Token', 'slices_var': 'SSTNode', '_literal_1': 'Token', None: None}
        Token _literal_1 = null;
        SSTNode slices_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: t_primary
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(t_primary)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // REMOVE result call (t_primary_var = t_primary_rule()) != null  // t_primary
            (t_primary_var = t_primary_rule()) != null  // t_primary
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '['
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('[')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
            // REMOVE result call (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            &&
            // TODO visiting JavaParserGeneratorNamedItem: slices
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(slices)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
            // REMOVE result call (slices_var = slices_rule()) != null  // slices
            (slices_var = slices_rule()) != null  // slices
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ']'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(']')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
            // REMOVE result call (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            (_literal_1 = expect(Token.Kind.RSQB)) != null  // token=']'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: !t_lookahead
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!t_lookahead)
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
            // TODO call is not created !t_lookahead -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: star_atom
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_atom) - should work
            // generated call: (star_atom_var = star_atom_rule()) != null  // star_atom
            // node.name: None, call.assigned_variable: star_atom_var
        // collecting vars: star_atom_var, SSTNode
        //    vars: {'star_atom_var': 'SSTNode'}
        SSTNode star_atom_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_atom
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_atom)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_atom) - should work
            // REMOVE result call (star_atom_var = star_atom_rule()) != null  // star_atom
            (star_atom_var = star_atom_rule()) != null  // star_atom
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, TARGET_WITH_STAR_ATOM_ID, null);
    }

    // star_atom:
    //     | NAME
    //     | '(' target_with_star_atom ')'
    //     | '(' star_targets_tuple_seq? ')'
    //     | '[' star_targets_list_seq? ']'
    public SSTNode star_atom_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: star_atom, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, STAR_ATOM_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, STAR_ATOM_ID);
        }
        // visiting Alt: NAME
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: a, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        //    vars: {'name_var': 'Token'}
        Token name_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '(' target_with_star_atom ')'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(target_with_star_atom) - should work
            // generated call: (target_with_star_atom_var = target_with_star_atom_rule()) != null  // target_with_star_atom
            // node.name: a, call.assigned_variable: target_with_star_atom_var
        // collecting vars: target_with_star_atom_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_literal': 'Token', 'target_with_star_atom_var': 'SSTNode', '_literal_1': 'Token'}
        Token _literal = null;
        Token _literal_1 = null;
        SSTNode target_with_star_atom_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            &&
            // TODO visiting JavaParserGeneratorNamedItem: target_with_star_atom
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(target_with_star_atom)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(target_with_star_atom) - should work
            // REMOVE result call (target_with_star_atom_var = target_with_star_atom_rule()) != null  // target_with_star_atom
            (target_with_star_atom_var = target_with_star_atom_rule()) != null  // target_with_star_atom
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '(' star_targets_tuple_seq? ')'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_targets_tuple_seq?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_targets_tuple_seq)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_176_var = _tmp_176_rule()) != null  // star_targets_tuple_seq
            // generated call: ((_opt_var = _tmp_176_rule()) != null || _opt_var == null)  // star_targets_tuple_seq?
            // node.name: a, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_literal': 'Token', '_opt_var': None, '_literal_1': 'Token'}
        Object _opt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            &&
            // TODO visiting JavaParserGeneratorNamedItem: star_targets_tuple_seq?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_targets_tuple_seq?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_targets_tuple_seq?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_targets_tuple_seq)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_176_var = _tmp_176_rule()) != null  // star_targets_tuple_seq
            // REMOVE result call ((_opt_var = _tmp_176_rule()) != null || _opt_var == null)  // star_targets_tuple_seq?
            ((_opt_var = _tmp_176_rule()) != null || _opt_var == null)  // star_targets_tuple_seq?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '[' star_targets_list_seq? ']'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
            // generated call: (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_targets_list_seq?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_targets_list_seq)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_177_var = _tmp_177_rule()) != null  // star_targets_list_seq
            // generated call: ((_opt_var = _tmp_177_rule()) != null || _opt_var == null)  // star_targets_list_seq?
            // node.name: a, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
            // generated call: (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_literal': 'Token', '_opt_var': None, '_literal_1': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '['
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('[')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
            // REMOVE result call (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            &&
            // TODO visiting JavaParserGeneratorNamedItem: star_targets_list_seq?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_targets_list_seq?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_targets_list_seq?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_targets_list_seq)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_177_var = _tmp_177_rule()) != null  // star_targets_list_seq
            // REMOVE result call ((_opt_var = _tmp_177_rule()) != null || _opt_var == null)  // star_targets_list_seq?
            ((_opt_var = _tmp_177_rule()) != null || _opt_var == null)  // star_targets_list_seq?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ']'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(']')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
            // REMOVE result call (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            (_literal_1 = expect(Token.Kind.RSQB)) != null  // token=']'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, STAR_ATOM_ID, null);
    }

    // single_target: single_subscript_attribute_target | NAME | '(' single_target ')'
    public SSTNode single_target_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: single_target, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, SINGLE_TARGET_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, SINGLE_TARGET_ID);
        }
        // visiting Alt: single_subscript_attribute_target
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(single_subscript_attribute_target) - should work
            // generated call: (single_subscript_attribute_target_var = single_subscript_attribute_target_rule()) != null  // single_subscript_attribute_target
            // node.name: None, call.assigned_variable: single_subscript_attribute_target_var
        // collecting vars: single_subscript_attribute_target_var, SSTNode
        //    vars: {'single_subscript_attribute_target_var': 'SSTNode'}
        SSTNode single_subscript_attribute_target_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: single_subscript_attribute_target
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(single_subscript_attribute_target)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(single_subscript_attribute_target) - should work
            // REMOVE result call (single_subscript_attribute_target_var = single_subscript_attribute_target_rule()) != null  // single_subscript_attribute_target
            (single_subscript_attribute_target_var = single_subscript_attribute_target_rule()) != null  // single_subscript_attribute_target
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: NAME
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: a, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        //    vars: {'name_var': 'Token'}
        Token name_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '(' single_target ')'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(single_target) - should work
            // generated call: (single_target_var = single_target_rule()) != null  // single_target
            // node.name: a, call.assigned_variable: single_target_var
        // collecting vars: single_target_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_literal': 'Token', 'single_target_var': 'SSTNode', '_literal_1': 'Token'}
        Token _literal = null;
        Token _literal_1 = null;
        SSTNode single_target_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            &&
            // TODO visiting JavaParserGeneratorNamedItem: single_target
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(single_target)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(single_target) - should work
            // REMOVE result call (single_target_var = single_target_rule()) != null  // single_target
            (single_target_var = single_target_rule()) != null  // single_target
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, SINGLE_TARGET_ID, null);
    }

    // single_subscript_attribute_target:
    //     | t_primary '.' NAME !t_lookahead
    //     | t_primary '[' slices ']' !t_lookahead
    public SSTNode single_subscript_attribute_target_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: single_subscript_attribute_target, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, SINGLE_SUBSCRIPT_ATTRIBUTE_TARGET_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, SINGLE_SUBSCRIPT_ATTRIBUTE_TARGET_ID);
        }
        // visiting Alt: t_primary '.' NAME !t_lookahead
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // generated call: (t_primary_var = t_primary_rule()) != null  // t_primary
            // node.name: a, call.assigned_variable: t_primary_var
        // collecting vars: t_primary_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
            // generated call: (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: b, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
            // generated call: None
        // collecting vars: None, None
        //    vars: {'t_primary_var': 'SSTNode', '_literal': 'Token', 'name_var': 'Token', None: None}
        Token _literal = null;
        Token name_var = null;
        SSTNode t_primary_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: t_primary
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(t_primary)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // REMOVE result call (t_primary_var = t_primary_rule()) != null  // t_primary
            (t_primary_var = t_primary_rule()) != null  // t_primary
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '.'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('.')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
            // REMOVE result call (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
            &&
            // TODO visiting JavaParserGeneratorNamedItem: !t_lookahead
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!t_lookahead)
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
            // TODO call is not created !t_lookahead -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: t_primary '[' slices ']' !t_lookahead
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // generated call: (t_primary_var = t_primary_rule()) != null  // t_primary
            // node.name: a, call.assigned_variable: t_primary_var
        // collecting vars: t_primary_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
            // generated call: (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
            // generated call: (slices_var = slices_rule()) != null  // slices
            // node.name: b, call.assigned_variable: slices_var
        // collecting vars: slices_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
            // generated call: (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
            // generated call: None
        // collecting vars: None, None
        //    vars: {'t_primary_var': 'SSTNode', '_literal': 'Token', 'slices_var': 'SSTNode', '_literal_1': 'Token', None: None}
        Token _literal_1 = null;
        SSTNode slices_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: t_primary
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(t_primary)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // REMOVE result call (t_primary_var = t_primary_rule()) != null  // t_primary
            (t_primary_var = t_primary_rule()) != null  // t_primary
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '['
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('[')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
            // REMOVE result call (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            &&
            // TODO visiting JavaParserGeneratorNamedItem: slices
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(slices)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
            // REMOVE result call (slices_var = slices_rule()) != null  // slices
            (slices_var = slices_rule()) != null  // slices
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ']'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(']')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
            // REMOVE result call (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            (_literal_1 = expect(Token.Kind.RSQB)) != null  // token=']'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: !t_lookahead
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!t_lookahead)
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
            // TODO call is not created !t_lookahead -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, SINGLE_SUBSCRIPT_ATTRIBUTE_TARGET_ID, null);
    }

    // del_targets: ','.del_target+ ','?
    // TODO replacing asdl_expr_seq* --> SSTNode[]
    public SSTNode[] del_targets_rule() {
    // isLoop: False, isGather: False, type: asdl_expr_seq*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: del_targets, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, DEL_TARGETS_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, DEL_TARGETS_ID);
        }
        // visiting Alt: ','.del_target+ ','?
        // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.del_target+)
            // generated call: (_gather_178_var = _gather_178_rule()) != null  // ','.del_target+
            // node.name: a, call.assigned_variable: _gather_178_var
        // collecting vars: _gather_178_var, asdl_expr_seq*
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_180_var = _tmp_180_rule()) != null  // ','
            // generated call: ((_opt_var = _tmp_180_rule()) != null || _opt_var == null)  // ','?
            // node.name: None, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'_gather_178_var': 'asdl_expr_seq*', '_opt_var': None}
        // TODO replacing asdl_expr_seq* --> SSTNode[]
        SSTNode[] _gather_178_var = null;
        Object _opt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','.del_target+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.del_target+)
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.del_target+)
            // REMOVE result call (_gather_178_var = _gather_178_rule()) != null  // ','.del_target+
            (_gather_178_var = (SSTNode[])_gather_178_rule()) != null  // ','.del_target+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_180_var = _tmp_180_rule()) != null  // ','
            // REMOVE result call ((_opt_var = _tmp_180_rule()) != null || _opt_var == null)  // ','?
            ((_opt_var = _tmp_180_rule()) != null || _opt_var == null)  // ','?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, DEL_TARGETS_ID, null);
    }

    // del_target:
    //     | t_primary '.' NAME !t_lookahead
    //     | t_primary '[' slices ']' !t_lookahead
    //     | del_t_atom
    public SSTNode del_target_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: del_target, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, DEL_TARGET_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, DEL_TARGET_ID);
        }
        // visiting Alt: t_primary '.' NAME !t_lookahead
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // generated call: (t_primary_var = t_primary_rule()) != null  // t_primary
            // node.name: a, call.assigned_variable: t_primary_var
        // collecting vars: t_primary_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
            // generated call: (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: b, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
            // generated call: None
        // collecting vars: None, None
        //    vars: {'t_primary_var': 'SSTNode', '_literal': 'Token', 'name_var': 'Token', None: None}
        Token _literal = null;
        Token name_var = null;
        SSTNode t_primary_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: t_primary
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(t_primary)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // REMOVE result call (t_primary_var = t_primary_rule()) != null  // t_primary
            (t_primary_var = t_primary_rule()) != null  // t_primary
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '.'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('.')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
            // REMOVE result call (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
            &&
            // TODO visiting JavaParserGeneratorNamedItem: !t_lookahead
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!t_lookahead)
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
            // TODO call is not created !t_lookahead -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: t_primary '[' slices ']' !t_lookahead
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // generated call: (t_primary_var = t_primary_rule()) != null  // t_primary
            // node.name: a, call.assigned_variable: t_primary_var
        // collecting vars: t_primary_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
            // generated call: (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
            // generated call: (slices_var = slices_rule()) != null  // slices
            // node.name: b, call.assigned_variable: slices_var
        // collecting vars: slices_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
            // generated call: (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
            // generated call: None
        // collecting vars: None, None
        //    vars: {'t_primary_var': 'SSTNode', '_literal': 'Token', 'slices_var': 'SSTNode', '_literal_1': 'Token', None: None}
        Token _literal_1 = null;
        SSTNode slices_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: t_primary
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(t_primary)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // REMOVE result call (t_primary_var = t_primary_rule()) != null  // t_primary
            (t_primary_var = t_primary_rule()) != null  // t_primary
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '['
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('[')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
            // REMOVE result call (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            &&
            // TODO visiting JavaParserGeneratorNamedItem: slices
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(slices)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
            // REMOVE result call (slices_var = slices_rule()) != null  // slices
            (slices_var = slices_rule()) != null  // slices
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ']'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(']')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
            // REMOVE result call (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            (_literal_1 = expect(Token.Kind.RSQB)) != null  // token=']'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: !t_lookahead
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!t_lookahead)
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
            // TODO call is not created !t_lookahead -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: del_t_atom
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_t_atom) - should work
            // generated call: (del_t_atom_var = del_t_atom_rule()) != null  // del_t_atom
            // node.name: None, call.assigned_variable: del_t_atom_var
        // collecting vars: del_t_atom_var, SSTNode
        //    vars: {'del_t_atom_var': 'SSTNode'}
        SSTNode del_t_atom_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: del_t_atom
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(del_t_atom)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_t_atom) - should work
            // REMOVE result call (del_t_atom_var = del_t_atom_rule()) != null  // del_t_atom
            (del_t_atom_var = del_t_atom_rule()) != null  // del_t_atom
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, DEL_TARGET_ID, null);
    }

    // del_t_atom: NAME | '(' del_target ')' | '(' del_targets? ')' | '[' del_targets? ']'
    public SSTNode del_t_atom_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: del_t_atom, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, DEL_T_ATOM_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, DEL_T_ATOM_ID);
        }
        // visiting Alt: NAME
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: a, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        //    vars: {'name_var': 'Token'}
        Token name_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '(' del_target ')'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_target) - should work
            // generated call: (del_target_var = del_target_rule()) != null  // del_target
            // node.name: a, call.assigned_variable: del_target_var
        // collecting vars: del_target_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_literal': 'Token', 'del_target_var': 'SSTNode', '_literal_1': 'Token'}
        Token _literal = null;
        Token _literal_1 = null;
        SSTNode del_target_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            &&
            // TODO visiting JavaParserGeneratorNamedItem: del_target
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(del_target)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_target) - should work
            // REMOVE result call (del_target_var = del_target_rule()) != null  // del_target
            (del_target_var = del_target_rule()) != null  // del_target
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '(' del_targets? ')'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(del_targets?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(del_targets)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_181_var = _tmp_181_rule()) != null  // del_targets
            // generated call: ((_opt_var = _tmp_181_rule()) != null || _opt_var == null)  // del_targets?
            // node.name: a, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_literal': 'Token', '_opt_var': None, '_literal_1': 'Token'}
        Object _opt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            &&
            // TODO visiting JavaParserGeneratorNamedItem: del_targets?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(del_targets?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(del_targets?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(del_targets)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_181_var = _tmp_181_rule()) != null  // del_targets
            // REMOVE result call ((_opt_var = _tmp_181_rule()) != null || _opt_var == null)  // del_targets?
            ((_opt_var = _tmp_181_rule()) != null || _opt_var == null)  // del_targets?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '[' del_targets? ']'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
            // generated call: (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(del_targets?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(del_targets)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_182_var = _tmp_182_rule()) != null  // del_targets
            // generated call: ((_opt_var = _tmp_182_rule()) != null || _opt_var == null)  // del_targets?
            // node.name: a, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
            // generated call: (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_literal': 'Token', '_opt_var': None, '_literal_1': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '['
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('[')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
            // REMOVE result call (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            &&
            // TODO visiting JavaParserGeneratorNamedItem: del_targets?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(del_targets?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(del_targets?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(del_targets)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_182_var = _tmp_182_rule()) != null  // del_targets
            // REMOVE result call ((_opt_var = _tmp_182_rule()) != null || _opt_var == null)  // del_targets?
            ((_opt_var = _tmp_182_rule()) != null || _opt_var == null)  // del_targets?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ']'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(']')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
            // REMOVE result call (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            (_literal_1 = expect(Token.Kind.RSQB)) != null  // token=']'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, DEL_T_ATOM_ID, null);
    }

    // targets: ','.target+ ','?
    // TODO replacing asdl_expr_seq* --> SSTNode[]
    public SSTNode[] targets_rule() {
    // isLoop: False, isGather: False, type: asdl_expr_seq*)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: targets, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, TARGETS_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, TARGETS_ID);
        }
        // visiting Alt: ','.target+ ','?
        // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.target+)
            // generated call: (_gather_183_var = _gather_183_rule()) != null  // ','.target+
            // node.name: a, call.assigned_variable: _gather_183_var
        // collecting vars: _gather_183_var, asdl_expr_seq*
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_185_var = _tmp_185_rule()) != null  // ','
            // generated call: ((_opt_var = _tmp_185_rule()) != null || _opt_var == null)  // ','?
            // node.name: None, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'_gather_183_var': 'asdl_expr_seq*', '_opt_var': None}
        // TODO replacing asdl_expr_seq* --> SSTNode[]
        SSTNode[] _gather_183_var = null;
        Object _opt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','.target+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.target+)
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.target+)
            // REMOVE result call (_gather_183_var = _gather_183_rule()) != null  // ','.target+
            (_gather_183_var = (SSTNode[])_gather_183_rule()) != null  // ','.target+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_185_var = _tmp_185_rule()) != null  // ','
            // REMOVE result call ((_opt_var = _tmp_185_rule()) != null || _opt_var == null)  // ','?
            ((_opt_var = _tmp_185_rule()) != null || _opt_var == null)  // ','?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, TARGETS_ID, null);
    }

    // target:
    //     | t_primary '.' NAME !t_lookahead
    //     | t_primary '[' slices ']' !t_lookahead
    //     | t_atom
    public SSTNode target_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: target, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, TARGET_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, TARGET_ID);
        }
        // visiting Alt: t_primary '.' NAME !t_lookahead
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // generated call: (t_primary_var = t_primary_rule()) != null  // t_primary
            // node.name: a, call.assigned_variable: t_primary_var
        // collecting vars: t_primary_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
            // generated call: (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: b, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
            // generated call: None
        // collecting vars: None, None
        //    vars: {'t_primary_var': 'SSTNode', '_literal': 'Token', 'name_var': 'Token', None: None}
        Token _literal = null;
        Token name_var = null;
        SSTNode t_primary_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: t_primary
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(t_primary)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // REMOVE result call (t_primary_var = t_primary_rule()) != null  // t_primary
            (t_primary_var = t_primary_rule()) != null  // t_primary
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '.'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('.')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
            // REMOVE result call (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
            &&
            // TODO visiting JavaParserGeneratorNamedItem: !t_lookahead
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!t_lookahead)
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
            // TODO call is not created !t_lookahead -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: t_primary '[' slices ']' !t_lookahead
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // generated call: (t_primary_var = t_primary_rule()) != null  // t_primary
            // node.name: a, call.assigned_variable: t_primary_var
        // collecting vars: t_primary_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
            // generated call: (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
            // generated call: (slices_var = slices_rule()) != null  // slices
            // node.name: b, call.assigned_variable: slices_var
        // collecting vars: slices_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
            // generated call: (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
            // generated call: None
        // collecting vars: None, None
        //    vars: {'t_primary_var': 'SSTNode', '_literal': 'Token', 'slices_var': 'SSTNode', '_literal_1': 'Token', None: None}
        Token _literal_1 = null;
        SSTNode slices_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: t_primary
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(t_primary)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // REMOVE result call (t_primary_var = t_primary_rule()) != null  // t_primary
            (t_primary_var = t_primary_rule()) != null  // t_primary
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '['
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('[')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
            // REMOVE result call (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            &&
            // TODO visiting JavaParserGeneratorNamedItem: slices
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(slices)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
            // REMOVE result call (slices_var = slices_rule()) != null  // slices
            (slices_var = slices_rule()) != null  // slices
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ']'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(']')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
            // REMOVE result call (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            (_literal_1 = expect(Token.Kind.RSQB)) != null  // token=']'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: !t_lookahead
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!t_lookahead)
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
            // TODO call is not created !t_lookahead -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: t_atom
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_atom) - should work
            // generated call: (t_atom_var = t_atom_rule()) != null  // t_atom
            // node.name: None, call.assigned_variable: t_atom_var
        // collecting vars: t_atom_var, SSTNode
        //    vars: {'t_atom_var': 'SSTNode'}
        SSTNode t_atom_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: t_atom
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(t_atom)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_atom) - should work
            // REMOVE result call (t_atom_var = t_atom_rule()) != null  // t_atom
            (t_atom_var = t_atom_rule()) != null  // t_atom
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, TARGET_ID, null);
    }

    // Left-recursive
    // t_primary:
    //     | t_primary '.' NAME &t_lookahead
    //     | t_primary '[' slices ']' &t_lookahead
    //     | t_primary genexp &t_lookahead
    //     | t_primary '(' arguments? ')' &t_lookahead
    //     | atom &t_lookahead
    public SSTNode t_primary_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // left recursion--
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Left Recursion Rule: t_primary, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, T_PRIMARY_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, T_PRIMARY_ID);
        }
        int lastPos = pos;
        int endPos;
        SSTNode lastResult = null;
        cache.putResult(pos, T_PRIMARY_ID, null);
        while(true) {
            reset(pos);
            SSTNode result = t_primary_rule_body();
            endPos = mark();
            if (endPos <= lastPos) {
                break;
            }
            lastResult = result;
            lastPos = endPos;
            cache.putResult(pos, T_PRIMARY_ID, result);
        }
        reset(lastPos);
        if (DEBUG) {
            debugMessageln("Result: " + lastResult);
            this.level--;
        }
        return lastResult;
    }

    // left-rersive rule body
    public SSTNode t_primary_rule_body() {
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: t_primary, pos: " + pos);
            this.level++;
        }
        // visiting Alt: t_primary '.' NAME &t_lookahead
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // generated call: (t_primary_var = t_primary_rule()) != null  // t_primary
            // node.name: a, call.assigned_variable: t_primary_var
        // collecting vars: t_primary_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
            // generated call: (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: b, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&t_lookahead)
            // generated call: None
        // collecting vars: None, None
        //    vars: {'t_primary_var': 'SSTNode', '_literal': 'Token', 'name_var': 'Token', None: None}
        Token _literal = null;
        Token name_var = null;
        SSTNode t_primary_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: t_primary
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(t_primary)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // REMOVE result call (t_primary_var = t_primary_rule()) != null  // t_primary
            (t_primary_var = t_primary_rule()) != null  // t_primary
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '.'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('.')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
            // REMOVE result call (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
            &&
            // TODO visiting JavaParserGeneratorNamedItem: &t_lookahead
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&t_lookahead)
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&t_lookahead)
            // TODO call is not created &t_lookahead -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: t_primary '[' slices ']' &t_lookahead
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // generated call: (t_primary_var = t_primary_rule()) != null  // t_primary
            // node.name: a, call.assigned_variable: t_primary_var
        // collecting vars: t_primary_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
            // generated call: (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
            // generated call: (slices_var = slices_rule()) != null  // slices
            // node.name: b, call.assigned_variable: slices_var
        // collecting vars: slices_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
            // generated call: (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&t_lookahead)
            // generated call: None
        // collecting vars: None, None
        //    vars: {'t_primary_var': 'SSTNode', '_literal': 'Token', 'slices_var': 'SSTNode', '_literal_1': 'Token', None: None}
        Token _literal_1 = null;
        SSTNode slices_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: t_primary
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(t_primary)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // REMOVE result call (t_primary_var = t_primary_rule()) != null  // t_primary
            (t_primary_var = t_primary_rule()) != null  // t_primary
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '['
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('[')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
            // REMOVE result call (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            &&
            // TODO visiting JavaParserGeneratorNamedItem: slices
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(slices)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
            // REMOVE result call (slices_var = slices_rule()) != null  // slices
            (slices_var = slices_rule()) != null  // slices
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ']'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(']')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
            // REMOVE result call (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            (_literal_1 = expect(Token.Kind.RSQB)) != null  // token=']'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: &t_lookahead
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&t_lookahead)
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&t_lookahead)
            // TODO call is not created &t_lookahead -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: t_primary genexp &t_lookahead
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // generated call: (t_primary_var = t_primary_rule()) != null  // t_primary
            // node.name: a, call.assigned_variable: t_primary_var
        // collecting vars: t_primary_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(genexp) - should work
            // generated call: (genexp_var = genexp_rule()) != null  // genexp
            // node.name: b, call.assigned_variable: genexp_var
        // collecting vars: genexp_var, SSTNode
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&t_lookahead)
            // generated call: None
        // collecting vars: None, None
        //    vars: {'t_primary_var': 'SSTNode', 'genexp_var': 'SSTNode', None: None}
        SSTNode genexp_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: t_primary
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(t_primary)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // REMOVE result call (t_primary_var = t_primary_rule()) != null  // t_primary
            (t_primary_var = t_primary_rule()) != null  // t_primary
            &&
            // TODO visiting JavaParserGeneratorNamedItem: genexp
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(genexp)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(genexp) - should work
            // REMOVE result call (genexp_var = genexp_rule()) != null  // genexp
            (genexp_var = genexp_rule()) != null  // genexp
            &&
            // TODO visiting JavaParserGeneratorNamedItem: &t_lookahead
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&t_lookahead)
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&t_lookahead)
            // TODO call is not created &t_lookahead -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: t_primary '(' arguments? ')' &t_lookahead
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // generated call: (t_primary_var = t_primary_rule()) != null  // t_primary
            // node.name: a, call.assigned_variable: t_primary_var
        // collecting vars: t_primary_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(arguments?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(arguments)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_186_var = _tmp_186_rule()) != null  // arguments
            // generated call: ((_opt_var = _tmp_186_rule()) != null || _opt_var == null)  // arguments?
            // node.name: b, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&t_lookahead)
            // generated call: None
        // collecting vars: None, None
        //    vars: {'t_primary_var': 'SSTNode', '_literal': 'Token', '_opt_var': None, '_literal_1': 'Token', None: None}
        Object _opt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: t_primary
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(t_primary)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // REMOVE result call (t_primary_var = t_primary_rule()) != null  // t_primary
            (t_primary_var = t_primary_rule()) != null  // t_primary
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            &&
            // TODO visiting JavaParserGeneratorNamedItem: arguments?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(arguments?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(arguments?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(arguments)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_186_var = _tmp_186_rule()) != null  // arguments
            // REMOVE result call ((_opt_var = _tmp_186_rule()) != null || _opt_var == null)  // arguments?
            ((_opt_var = _tmp_186_rule()) != null || _opt_var == null)  // arguments?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: &t_lookahead
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&t_lookahead)
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&t_lookahead)
            // TODO call is not created &t_lookahead -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: atom &t_lookahead
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(atom) - should work
            // generated call: (atom_var = atom_rule()) != null  // atom
            // node.name: a, call.assigned_variable: atom_var
        // collecting vars: atom_var, SSTNode
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&t_lookahead)
            // generated call: None
        // collecting vars: None, None
        //    vars: {'atom_var': 'SSTNode', None: None}
        SSTNode atom_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: atom
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(atom)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(atom) - should work
            // REMOVE result call (atom_var = atom_rule()) != null  // atom
            (atom_var = atom_rule()) != null  // atom
            &&
            // TODO visiting JavaParserGeneratorNamedItem: &t_lookahead
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&t_lookahead)
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&t_lookahead)
            // TODO call is not created &t_lookahead -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, T_PRIMARY_ID, null);
    }

    // t_lookahead: '(' | '[' | '.'
    public Object t_lookahead_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: t_lookahead, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, T_LOOKAHEAD_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, T_LOOKAHEAD_ID);
        }
        // visiting Alt: '('
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        Token _literal = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            (_literal = expect(Token.Kind.LPAR)) != null  // token='('
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '['
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
            // generated call: (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '['
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('[')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
            // REMOVE result call (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            (_literal = expect(Token.Kind.LSQB)) != null  // token='['
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '.'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
            // generated call: (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '.'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('.')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
            // REMOVE result call (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            (_literal = expect(Token.Kind.DOT)) != null  // token='.'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, T_LOOKAHEAD_ID, null);
    }

    // t_atom: NAME | '(' target ')' | '(' targets? ')' | '[' targets? ']'
    public SSTNode t_atom_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: t_atom, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, T_ATOM_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, T_ATOM_ID);
        }
        // visiting Alt: NAME
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: a, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        //    vars: {'name_var': 'Token'}
        Token name_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '(' target ')'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(target) - should work
            // generated call: (target_var = target_rule()) != null  // target
            // node.name: a, call.assigned_variable: target_var
        // collecting vars: target_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_literal': 'Token', 'target_var': 'SSTNode', '_literal_1': 'Token'}
        Token _literal = null;
        Token _literal_1 = null;
        SSTNode target_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            &&
            // TODO visiting JavaParserGeneratorNamedItem: target
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(target)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(target) - should work
            // REMOVE result call (target_var = target_rule()) != null  // target
            (target_var = target_rule()) != null  // target
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '(' targets? ')'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(targets?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(targets)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_187_var = _tmp_187_rule()) != null  // targets
            // generated call: ((_opt_var = _tmp_187_rule()) != null || _opt_var == null)  // targets?
            // node.name: b, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_literal': 'Token', '_opt_var': None, '_literal_1': 'Token'}
        Object _opt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            &&
            // TODO visiting JavaParserGeneratorNamedItem: targets?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(targets?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(targets?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(targets)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_187_var = _tmp_187_rule()) != null  // targets
            // REMOVE result call ((_opt_var = _tmp_187_rule()) != null || _opt_var == null)  // targets?
            ((_opt_var = _tmp_187_rule()) != null || _opt_var == null)  // targets?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '[' targets? ']'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
            // generated call: (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(targets?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(targets)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_188_var = _tmp_188_rule()) != null  // targets
            // generated call: ((_opt_var = _tmp_188_rule()) != null || _opt_var == null)  // targets?
            // node.name: b, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
            // generated call: (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_literal': 'Token', '_opt_var': None, '_literal_1': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '['
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('[')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
            // REMOVE result call (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            &&
            // TODO visiting JavaParserGeneratorNamedItem: targets?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(targets?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(targets?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(targets)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_188_var = _tmp_188_rule()) != null  // targets
            // REMOVE result call ((_opt_var = _tmp_188_rule()) != null || _opt_var == null)  // targets?
            ((_opt_var = _tmp_188_rule()) != null || _opt_var == null)  // targets?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ']'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(']')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
            // REMOVE result call (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            (_literal_1 = expect(Token.Kind.RSQB)) != null  // token=']'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, T_ATOM_ID, null);
    }

    // invalid_arguments:
    //     | args ',' '*'
    //     | expression for_if_clauses ',' [args | expression for_if_clauses]
    //     | args for_if_clauses
    //     | args ',' expression for_if_clauses
    //     | args ',' args
    public Object invalid_arguments_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: invalid_arguments, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_ARGUMENTS_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, INVALID_ARGUMENTS_ID);
        }
        // visiting Alt: args ',' '*'
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
            // generated call: (args_var = args_rule()) != null  // args
            // node.name: None, call.assigned_variable: args_var
        // collecting vars: args_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'args_var': 'SSTNode', '_literal': 'Token', '_literal_1': 'Token'}
        Token _literal = null;
        Token _literal_1 = null;
        SSTNode args_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: args
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(args)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
            // REMOVE result call (args_var = args_rule()) != null  // args
            (args_var = args_rule()) != null  // args
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '*'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            (_literal_1 = expect(Token.Kind.STAR)) != null  // token='*'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: expression for_if_clauses ',' [args | expression for_if_clauses]
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: a, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
        // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
            // generated call: (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            // node.name: None, call.assigned_variable: for_if_clauses_var
        // collecting vars: for_if_clauses_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt([args | expression for_if_clauses])
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(args | expression for_if_clauses)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_189_var = _tmp_189_rule()) != null  // args | expression for_if_clauses
            // generated call: ((_opt_var = _tmp_189_rule()) != null || _opt_var == null)  // [args | expression for_if_clauses]
            // node.name: None, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'expression_var': 'SSTNode', 'for_if_clauses_var': 'SSTNode[]', '_literal': 'Token', '_opt_var': None}
        Object _opt_var = null;
        SSTNode expression_var = null;
        SSTNode[] for_if_clauses_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: for_if_clauses
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(for_if_clauses)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
            // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
            // REMOVE result call (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: [args | expression for_if_clauses]
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem([args | expression for_if_clauses])
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt([args | expression for_if_clauses])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(args | expression for_if_clauses)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_189_var = _tmp_189_rule()) != null  // args | expression for_if_clauses
            // REMOVE result call ((_opt_var = _tmp_189_rule()) != null || _opt_var == null)  // [args | expression for_if_clauses]
            ((_opt_var = _tmp_189_rule()) != null || _opt_var == null)  // [args | expression for_if_clauses]
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: args for_if_clauses
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
            // generated call: (args_var = args_rule()) != null  // args
            // node.name: a, call.assigned_variable: args_var
        // collecting vars: args_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
        // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
            // generated call: (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            // node.name: None, call.assigned_variable: for_if_clauses_var
        // collecting vars: for_if_clauses_var, SSTNode[]
        //    vars: {'args_var': 'SSTNode', 'for_if_clauses_var': 'SSTNode[]'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: args
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(args)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
            // REMOVE result call (args_var = args_rule()) != null  // args
            (args_var = args_rule()) != null  // args
            &&
            // TODO visiting JavaParserGeneratorNamedItem: for_if_clauses
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(for_if_clauses)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
            // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
            // REMOVE result call (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: args ',' expression for_if_clauses
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
            // generated call: (args_var = args_rule()) != null  // args
            // node.name: None, call.assigned_variable: args_var
        // collecting vars: args_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: a, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
        // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
            // generated call: (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            // node.name: None, call.assigned_variable: for_if_clauses_var
        // collecting vars: for_if_clauses_var, SSTNode[]
        //    vars: {'args_var': 'SSTNode', '_literal': 'Token', 'expression_var': 'SSTNode', 'for_if_clauses_var': 'SSTNode[]'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: args
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(args)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
            // REMOVE result call (args_var = args_rule()) != null  // args
            (args_var = args_rule()) != null  // args
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: for_if_clauses
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(for_if_clauses)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
            // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
            // REMOVE result call (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: args ',' args
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
            // generated call: (args_var = args_rule()) != null  // args
            // node.name: a, call.assigned_variable: args_var
        // collecting vars: args_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
            // generated call: (args_var = args_rule()) != null  // args
            // node.name: None, call.assigned_variable: args_var
        // collecting vars: args_var_1, SSTNode
        //    vars: {'args_var': 'SSTNode', '_literal': 'Token', 'args_var_1': 'SSTNode'}
        SSTNode args_var_1 = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: args
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(args)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
            // REMOVE result call (args_var = args_rule()) != null  // args
            (args_var = args_rule()) != null  // args
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: args
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(args)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
            // REMOVE result call (args_var = args_rule()) != null  // args
            (args_var_1 = args_rule()) != null  // args
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, INVALID_ARGUMENTS_ID, null);
    }

    // invalid_kwarg: expression '='
    public Object invalid_kwarg_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: invalid_kwarg, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_KWARG_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, INVALID_KWARG_ID);
        }
        // visiting Alt: expression '='
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: None, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
            // generated call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            // node.name: a, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'expression_var': 'SSTNode', '_literal': 'Token'}
        Token _literal = null;
        SSTNode expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
            // REMOVE result call (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, INVALID_KWARG_ID, null);
    }

    // invalid_expression: !(NAME STRING | SOFT_KEYWORD) disjunction expression
    public Object invalid_expression_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: invalid_expression, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_EXPRESSION_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, INVALID_EXPRESSION_ID);
        }
        // visiting Alt: !(NAME STRING | SOFT_KEYWORD) disjunction expression
        // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!(NAME STRING | SOFT_KEYWORD))
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
            // generated call: (disjunction_var = disjunction_rule()) != null  // disjunction
            // node.name: a, call.assigned_variable: disjunction_var
        // collecting vars: disjunction_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: None, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        //    vars: {None: None, 'disjunction_var': 'SSTNode', 'expression_var': 'SSTNode'}
        SSTNode disjunction_var = null;
        SSTNode expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: !(NAME STRING | SOFT_KEYWORD)
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!(NAME STRING | SOFT_KEYWORD))
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!(NAME STRING | SOFT_KEYWORD))
            // TODO call is not created !(NAME STRING | SOFT_KEYWORD) -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: disjunction
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(disjunction)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
            // REMOVE result call (disjunction_var = disjunction_rule()) != null  // disjunction
            (disjunction_var = disjunction_rule()) != null  // disjunction
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, INVALID_EXPRESSION_ID, null);
    }

    // invalid_named_expression:
    //     | expression ':=' expression
    //     | NAME '=' bitwise_or !('=' | ':=' | ',')
    //     | !(list | tuple | genexp | 'True' | 'None' | 'False') bitwise_or '=' bitwise_or !('=' | ':=' | ',')
    public Object invalid_named_expression_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: invalid_named_expression, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_NAMED_EXPRESSION_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, INVALID_NAMED_EXPRESSION_ID);
        }
        // visiting Alt: expression ':=' expression
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: a, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':=')
            // generated call: (_literal = expect(Token.Kind.COLONEQUAL)) != null  // token=':='
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: None, call.assigned_variable: expression_var
        // collecting vars: expression_var_1, SSTNode
        //    vars: {'expression_var': 'SSTNode', '_literal': 'Token', 'expression_var_1': 'SSTNode'}
        Token _literal = null;
        SSTNode expression_var = null;
        SSTNode expression_var_1 = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ':='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':=')
            // REMOVE result call (_literal = expect(Token.Kind.COLONEQUAL)) != null  // token=':='
            (_literal = expect(Token.Kind.COLONEQUAL)) != null  // token=':='
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var_1 = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: NAME '=' bitwise_or !('=' | ':=' | ',')
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: a, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
            // generated call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            // node.name: b, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // node.name: None, call.assigned_variable: bitwise_or_var
        // collecting vars: bitwise_or_var, SSTNode
        // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!('=' | ':=' | ','))
            // generated call: None
        // collecting vars: None, None
        //    vars: {'name_var': 'Token', '_literal': 'Token', 'bitwise_or_var': 'SSTNode', None: None}
        SSTNode bitwise_or_var = null;
        Token name_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
            // REMOVE result call (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            &&
            // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            &&
            // TODO visiting JavaParserGeneratorNamedItem: !('=' | ':=' | ',')
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!('=' | ':=' | ','))
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!('=' | ':=' | ','))
            // TODO call is not created !('=' | ':=' | ',') -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: !(list | tuple | genexp | 'True' | 'None' | 'False') bitwise_or '=' bitwise_or !('=' | ':=' | ',')
        // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!(list | tuple | genexp | 'True' | 'None' | 'False'))
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // node.name: a, call.assigned_variable: bitwise_or_var
        // collecting vars: bitwise_or_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
            // generated call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            // node.name: b, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // node.name: None, call.assigned_variable: bitwise_or_var
        // collecting vars: bitwise_or_var_1, SSTNode
        // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!('=' | ':=' | ','))
            // generated call: None
        // collecting vars: None, None
        //    vars: {None: None, 'bitwise_or_var': 'SSTNode', '_literal': 'Token', 'bitwise_or_var_1': 'SSTNode'}
        SSTNode bitwise_or_var_1 = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: !(list | tuple | genexp | 'True' | 'None' | 'False')
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!(list | tuple | genexp | 'True' | 'None' | 'False'))
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!(list | tuple | genexp | 'True' | 'None' | 'False'))
            // TODO call is not created !(list | tuple | genexp | 'True' | 'None' | 'False') -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
            // REMOVE result call (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            &&
            // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            (bitwise_or_var_1 = bitwise_or_rule()) != null  // bitwise_or
            &&
            // TODO visiting JavaParserGeneratorNamedItem: !('=' | ':=' | ',')
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!('=' | ':=' | ','))
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!('=' | ':=' | ','))
            // TODO call is not created !('=' | ':=' | ',') -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, INVALID_NAMED_EXPRESSION_ID, null);
    }

    // invalid_assignment:
    //     | invalid_ann_assign_target ':' expression
    //     | star_named_expression ',' star_named_expressions* ':' expression
    //     | expression ':' expression
    //     | ((star_targets '='))* star_expressions '='
    //     | ((star_targets '='))* yield_expr '='
    //     | star_expressions augassign (yield_expr | star_expressions)
    public Object invalid_assignment_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: invalid_assignment, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_ASSIGNMENT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, INVALID_ASSIGNMENT_ID);
        }
        // visiting Alt: invalid_ann_assign_target ':' expression
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_ann_assign_target) - should work
            // generated call: (invalid_ann_assign_target_var = invalid_ann_assign_target_rule()) != null  // invalid_ann_assign_target
            // node.name: a, call.assigned_variable: invalid_ann_assign_target_var
        // collecting vars: invalid_ann_assign_target_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: None, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        //    vars: {'invalid_ann_assign_target_var': 'SSTNode', '_literal': 'Token', 'expression_var': 'SSTNode'}
        Token _literal = null;
        SSTNode expression_var = null;
        SSTNode invalid_ann_assign_target_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: invalid_ann_assign_target
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_ann_assign_target)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_ann_assign_target) - should work
            // REMOVE result call (invalid_ann_assign_target_var = invalid_ann_assign_target_rule()) != null  // invalid_ann_assign_target
            (invalid_ann_assign_target_var = invalid_ann_assign_target_rule()) != null  // invalid_ann_assign_target
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: star_named_expression ',' star_named_expressions* ':' expression
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
            // generated call: (star_named_expression_var = star_named_expression_rule()) != null  // star_named_expression
            // node.name: a, call.assigned_variable: star_named_expression_var
        // collecting vars: star_named_expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // TODO visiting JavaCallMakerVisitor.visit_Repeat0(star_named_expressions*)
            // generated call: (_loop0_190_var = _loop0_190_rule()) != null  // star_named_expressions*
            // node.name: None, call.assigned_variable: _loop0_190_var
        // collecting vars: _loop0_190_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: None, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        //    vars: {'star_named_expression_var': 'SSTNode', '_literal': 'Token', '_loop0_190_var': 'SSTNode[]', '_literal_1': 'Token', 'expression_var': 'SSTNode'}
        Token _literal_1 = null;
        SSTNode[] _loop0_190_var = null;
        SSTNode star_named_expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_named_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_named_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
            // REMOVE result call (star_named_expression_var = star_named_expression_rule()) != null  // star_named_expression
            (star_named_expression_var = star_named_expression_rule()) != null  // star_named_expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: star_named_expressions*
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_named_expressions*)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(star_named_expressions*)
            // REMOVE result call (_loop0_190_var = _loop0_190_rule()) != null  // star_named_expressions*
            (_loop0_190_var = _loop0_190_rule()) != null  // star_named_expressions*
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            (_literal_1 = expect(Token.Kind.COLON)) != null  // token=':'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: expression ':' expression
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: a, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: None, call.assigned_variable: expression_var
        // collecting vars: expression_var_1, SSTNode
        //    vars: {'expression_var': 'SSTNode', '_literal': 'Token', 'expression_var_1': 'SSTNode'}
        SSTNode expression_var_1 = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var_1 = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: ((star_targets '='))* star_expressions '='
        // TODO visiting JavaCallMakerVisitor.visit_Repeat0(((star_targets '='))*)
            // generated call: (_loop0_191_var = _loop0_191_rule()) != null  // ((star_targets '='))*
            // node.name: None, call.assigned_variable: _loop0_191_var
        // collecting vars: _loop0_191_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // generated call: (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            // node.name: a, call.assigned_variable: star_expressions_var
        // collecting vars: star_expressions_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
            // generated call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_loop0_191_var': 'SSTNode[]', 'star_expressions_var': 'SSTNode', '_literal': 'Token'}
        SSTNode[] _loop0_191_var = null;
        SSTNode star_expressions_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ((star_targets '='))*
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(((star_targets '='))*)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(((star_targets '='))*)
            // REMOVE result call (_loop0_191_var = _loop0_191_rule()) != null  // ((star_targets '='))*
            (_loop0_191_var = _loop0_191_rule()) != null  // ((star_targets '='))*
            &&
            // TODO visiting JavaParserGeneratorNamedItem: star_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expressions)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // REMOVE result call (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
            // REMOVE result call (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: ((star_targets '='))* yield_expr '='
        // TODO visiting JavaCallMakerVisitor.visit_Repeat0(((star_targets '='))*)
            // generated call: (_loop0_192_var = _loop0_192_rule()) != null  // ((star_targets '='))*
            // node.name: None, call.assigned_variable: _loop0_192_var
        // collecting vars: _loop0_192_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
            // generated call: (yield_expr_var = yield_expr_rule()) != null  // yield_expr
            // node.name: a, call.assigned_variable: yield_expr_var
        // collecting vars: yield_expr_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
            // generated call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_loop0_192_var': 'SSTNode[]', 'yield_expr_var': 'SSTNode', '_literal': 'Token'}
        SSTNode[] _loop0_192_var = null;
        SSTNode yield_expr_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ((star_targets '='))*
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(((star_targets '='))*)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(((star_targets '='))*)
            // REMOVE result call (_loop0_192_var = _loop0_192_rule()) != null  // ((star_targets '='))*
            (_loop0_192_var = _loop0_192_rule()) != null  // ((star_targets '='))*
            &&
            // TODO visiting JavaParserGeneratorNamedItem: yield_expr
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(yield_expr)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
            // REMOVE result call (yield_expr_var = yield_expr_rule()) != null  // yield_expr
            (yield_expr_var = yield_expr_rule()) != null  // yield_expr
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
            // REMOVE result call (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: star_expressions augassign (yield_expr | star_expressions)
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // generated call: (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            // node.name: a, call.assigned_variable: star_expressions_var
        // collecting vars: star_expressions_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(augassign) - should work
        // TODO replacing AugOperator[] --> SSTNode[]
            // generated call: (augassign_var = augassign_rule()) != null  // augassign
            // node.name: None, call.assigned_variable: augassign_var
        // collecting vars: augassign_var, SSTNode[]
        // TODO visiting JavaCallMakerVisitor.visit_Group((yield_expr | star_expressions))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(yield_expr | star_expressions)
            // generated call: (_tmp_193_var = _tmp_193_rule()) != null  // yield_expr | star_expressions
            // node.name: None, call.assigned_variable: _tmp_193_var
        // collecting vars: _tmp_193_var, None
        //    vars: {'star_expressions_var': 'SSTNode', 'augassign_var': 'SSTNode[]', '_tmp_193_var': None}
        Object _tmp_193_var = null;
        SSTNode[] augassign_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expressions)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // REMOVE result call (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            &&
            // TODO visiting JavaParserGeneratorNamedItem: augassign
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(augassign)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(augassign) - should work
            // TODO replacing AugOperator[] --> SSTNode[]
            // REMOVE result call (augassign_var = augassign_rule()) != null  // augassign
            (augassign_var = augassign_rule()) != null  // augassign
            &&
            // TODO visiting JavaParserGeneratorNamedItem: (yield_expr | star_expressions)
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((yield_expr | star_expressions))
            // TODO visiting JavaCallMakerVisitor.visit_Group((yield_expr | star_expressions))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(yield_expr | star_expressions)
            // REMOVE result call (_tmp_193_var = _tmp_193_rule()) != null  // yield_expr | star_expressions
            (_tmp_193_var = _tmp_193_rule()) != null  // yield_expr | star_expressions
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, INVALID_ASSIGNMENT_ID, null);
    }

    // invalid_ann_assign_target: list | tuple | '(' invalid_ann_assign_target ')'
    public SSTNode invalid_ann_assign_target_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: invalid_ann_assign_target, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_ANN_ASSIGN_TARGET_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, INVALID_ANN_ASSIGN_TARGET_ID);
        }
        // visiting Alt: list
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(list) - should work
            // generated call: (list_var = list_rule()) != null  // list
            // node.name: None, call.assigned_variable: list_var
        // collecting vars: list_var, SSTNode
        //    vars: {'list_var': 'SSTNode'}
        SSTNode list_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: list
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(list)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(list) - should work
            // REMOVE result call (list_var = list_rule()) != null  // list
            (list_var = list_rule()) != null  // list
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: tuple
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(tuple) - should work
            // generated call: (tuple_var = tuple_rule()) != null  // tuple
            // node.name: None, call.assigned_variable: tuple_var
        // collecting vars: tuple_var, SSTNode
        //    vars: {'tuple_var': 'SSTNode'}
        SSTNode tuple_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: tuple
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(tuple)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(tuple) - should work
            // REMOVE result call (tuple_var = tuple_rule()) != null  // tuple
            (tuple_var = tuple_rule()) != null  // tuple
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '(' invalid_ann_assign_target ')'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_ann_assign_target) - should work
            // generated call: (invalid_ann_assign_target_var = invalid_ann_assign_target_rule()) != null  // invalid_ann_assign_target
            // node.name: a, call.assigned_variable: invalid_ann_assign_target_var
        // collecting vars: invalid_ann_assign_target_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_literal': 'Token', 'invalid_ann_assign_target_var': 'SSTNode', '_literal_1': 'Token'}
        Token _literal = null;
        Token _literal_1 = null;
        SSTNode invalid_ann_assign_target_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            &&
            // TODO visiting JavaParserGeneratorNamedItem: invalid_ann_assign_target
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_ann_assign_target)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_ann_assign_target) - should work
            // REMOVE result call (invalid_ann_assign_target_var = invalid_ann_assign_target_rule()) != null  // invalid_ann_assign_target
            (invalid_ann_assign_target_var = invalid_ann_assign_target_rule()) != null  // invalid_ann_assign_target
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, INVALID_ANN_ASSIGN_TARGET_ID, null);
    }

    // invalid_del_stmt: 'del' star_expressions
    public Object invalid_del_stmt_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: invalid_del_stmt, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_DEL_STMT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, INVALID_DEL_STMT_ID);
        }
        // visiting Alt: 'del' star_expressions
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('del')
            // generated call: (_keyword = expect(KEYWORD_DEL)) != null  // token='del'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // generated call: (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            // node.name: a, call.assigned_variable: star_expressions_var
        // collecting vars: star_expressions_var, SSTNode
        //    vars: {'_keyword': 'Token', 'star_expressions_var': 'SSTNode'}
        Token _keyword = null;
        SSTNode star_expressions_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'del'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('del')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('del')
            // REMOVE result call (_keyword = expect(KEYWORD_DEL)) != null  // token='del'
            (_keyword = expect(KEYWORD_DEL)) != null  // token='del'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: star_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expressions)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // REMOVE result call (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            (star_expressions_var = star_expressions_rule()) != null  // star_expressions
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, INVALID_DEL_STMT_ID, null);
    }

    // invalid_block: NEWLINE !INDENT
    public Object invalid_block_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: invalid_block, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_BLOCK_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, INVALID_BLOCK_ID);
        }
        // visiting Alt: NEWLINE !INDENT
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // generated call: (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            // node.name: None, call.assigned_variable: newline_var
        // collecting vars: newline_var, Token
        // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!INDENT)
            // generated call: None
        // collecting vars: None, None
        //    vars: {'newline_var': 'Token', None: None}
        Token newline_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: NEWLINE
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // REMOVE result call (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: !INDENT
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!INDENT)
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!INDENT)
            // TODO call is not created !INDENT -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, INVALID_BLOCK_ID, null);
    }

    // Left-recursive
    // invalid_primary: primary '{'
    public Object invalid_primary_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: invalid_primary, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_PRIMARY_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, INVALID_PRIMARY_ID);
        }
        // visiting Alt: primary '{'
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
            // generated call: (primary_var = primary_rule()) != null  // primary
            // node.name: None, call.assigned_variable: primary_var
        // collecting vars: primary_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
            // generated call: (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            // node.name: a, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'primary_var': 'SSTNode', '_literal': 'Token'}
        Token _literal = null;
        SSTNode primary_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: primary
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(primary)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
            // REMOVE result call (primary_var = primary_rule()) != null  // primary
            (primary_var = primary_rule()) != null  // primary
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '{'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('{')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
            // REMOVE result call (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, INVALID_PRIMARY_ID, null);
    }

    // invalid_comprehension:
    //     | ('[' | '(' | '{') starred_expression for_if_clauses
    //     | ('[' | '{') star_named_expression ',' star_named_expressions? for_if_clauses
    public Object invalid_comprehension_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: invalid_comprehension, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_COMPREHENSION_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, INVALID_COMPREHENSION_ID);
        }
        // visiting Alt: ('[' | '(' | '{') starred_expression for_if_clauses
        // TODO visiting JavaCallMakerVisitor.visit_Group(('[' | '(' | '{'))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('[' | '(' | '{')
            // generated call: (_tmp_194_var = _tmp_194_rule()) != null  // '[' | '(' | '{'
            // node.name: None, call.assigned_variable: _tmp_194_var
        // collecting vars: _tmp_194_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(starred_expression) - should work
            // generated call: (starred_expression_var = starred_expression_rule()) != null  // starred_expression
            // node.name: a, call.assigned_variable: starred_expression_var
        // collecting vars: starred_expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
        // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
            // generated call: (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            // node.name: None, call.assigned_variable: for_if_clauses_var
        // collecting vars: for_if_clauses_var, SSTNode[]
        //    vars: {'_tmp_194_var': None, 'starred_expression_var': 'SSTNode', 'for_if_clauses_var': 'SSTNode[]'}
        Object _tmp_194_var = null;
        SSTNode[] for_if_clauses_var = null;
        SSTNode starred_expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ('[' | '(' | '{')
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(('[' | '(' | '{'))
            // TODO visiting JavaCallMakerVisitor.visit_Group(('[' | '(' | '{'))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('[' | '(' | '{')
            // REMOVE result call (_tmp_194_var = _tmp_194_rule()) != null  // '[' | '(' | '{'
            (_tmp_194_var = _tmp_194_rule()) != null  // '[' | '(' | '{'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: starred_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(starred_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(starred_expression) - should work
            // REMOVE result call (starred_expression_var = starred_expression_rule()) != null  // starred_expression
            (starred_expression_var = starred_expression_rule()) != null  // starred_expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: for_if_clauses
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(for_if_clauses)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
            // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
            // REMOVE result call (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: ('[' | '{') star_named_expression ',' star_named_expressions? for_if_clauses
        // TODO visiting JavaCallMakerVisitor.visit_Group(('[' | '{'))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('[' | '{')
            // generated call: (_tmp_195_var = _tmp_195_rule()) != null  // '[' | '{'
            // node.name: None, call.assigned_variable: _tmp_195_var
        // collecting vars: _tmp_195_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
            // generated call: (star_named_expression_var = star_named_expression_rule()) != null  // star_named_expression
            // node.name: a, call.assigned_variable: star_named_expression_var
        // collecting vars: star_named_expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_named_expressions?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_named_expressions)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_196_var = _tmp_196_rule()) != null  // star_named_expressions
            // generated call: ((_opt_var = _tmp_196_rule()) != null || _opt_var == null)  // star_named_expressions?
            // node.name: None, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
        // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
            // generated call: (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            // node.name: None, call.assigned_variable: for_if_clauses_var
        // collecting vars: for_if_clauses_var, SSTNode[]
        //    vars: {'_tmp_195_var': None, 'star_named_expression_var': 'SSTNode', '_literal': 'Token', '_opt_var': None, 'for_if_clauses_var': 'SSTNode[]'}
        Token _literal = null;
        Object _opt_var = null;
        Object _tmp_195_var = null;
        SSTNode star_named_expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ('[' | '{')
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(('[' | '{'))
            // TODO visiting JavaCallMakerVisitor.visit_Group(('[' | '{'))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('[' | '{')
            // REMOVE result call (_tmp_195_var = _tmp_195_rule()) != null  // '[' | '{'
            (_tmp_195_var = _tmp_195_rule()) != null  // '[' | '{'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: star_named_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_named_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
            // REMOVE result call (star_named_expression_var = star_named_expression_rule()) != null  // star_named_expression
            (star_named_expression_var = star_named_expression_rule()) != null  // star_named_expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: star_named_expressions?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_named_expressions?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_named_expressions?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_named_expressions)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_196_var = _tmp_196_rule()) != null  // star_named_expressions
            // REMOVE result call ((_opt_var = _tmp_196_rule()) != null || _opt_var == null)  // star_named_expressions?
            ((_opt_var = _tmp_196_rule()) != null || _opt_var == null)  // star_named_expressions?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: for_if_clauses
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(for_if_clauses)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
            // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
            // REMOVE result call (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, INVALID_COMPREHENSION_ID, null);
    }

    // invalid_dict_comprehension: '{' '**' bitwise_or for_if_clauses '}'
    public Object invalid_dict_comprehension_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: invalid_dict_comprehension, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_DICT_COMPREHENSION_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, INVALID_DICT_COMPREHENSION_ID);
        }
        // visiting Alt: '{' '**' bitwise_or for_if_clauses '}'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
            // generated call: (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
            // generated call: (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            // node.name: a, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // node.name: None, call.assigned_variable: bitwise_or_var
        // collecting vars: bitwise_or_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
        // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
            // generated call: (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            // node.name: None, call.assigned_variable: for_if_clauses_var
        // collecting vars: for_if_clauses_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
            // generated call: (_literal = expect(Token.Kind.RBRACE)) != null  // token='}'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_2, Token
        //    vars: {'_literal': 'Token', '_literal_1': 'Token', 'bitwise_or_var': 'SSTNode', 'for_if_clauses_var': 'SSTNode[]', '_literal_2': 'Token'}
        Token _literal = null;
        Token _literal_1 = null;
        Token _literal_2 = null;
        SSTNode bitwise_or_var = null;
        SSTNode[] for_if_clauses_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '{'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('{')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
            // REMOVE result call (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '**'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('**')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
            // REMOVE result call (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            (_literal_1 = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            &&
            // TODO visiting JavaParserGeneratorNamedItem: for_if_clauses
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(for_if_clauses)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
            // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
            // REMOVE result call (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '}'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('}')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
            // REMOVE result call (_literal = expect(Token.Kind.RBRACE)) != null  // token='}'
            (_literal_2 = expect(Token.Kind.RBRACE)) != null  // token='}'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, INVALID_DICT_COMPREHENSION_ID, null);
    }

    // invalid_parameters: param_no_default* invalid_parameters_helper param_no_default
    public Object invalid_parameters_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: invalid_parameters, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_PARAMETERS_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, INVALID_PARAMETERS_ID);
        }
        // visiting Alt: param_no_default* invalid_parameters_helper param_no_default
        // TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_no_default*)
            // generated call: (_loop0_197_var = _loop0_197_rule()) != null  // param_no_default*
            // node.name: None, call.assigned_variable: _loop0_197_var
        // collecting vars: _loop0_197_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_parameters_helper) - should work
            // generated call: (invalid_parameters_helper_var = invalid_parameters_helper_rule()) != null  // invalid_parameters_helper
            // node.name: None, call.assigned_variable: invalid_parameters_helper_var
        // collecting vars: invalid_parameters_helper_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            // node.name: None, call.assigned_variable: param_no_default_var
        // collecting vars: param_no_default_var, SSTNode
        //    vars: {'_loop0_197_var': 'SSTNode[]', 'invalid_parameters_helper_var': None, 'param_no_default_var': 'SSTNode'}
        SSTNode[] _loop0_197_var = null;
        Object invalid_parameters_helper_var = null;
        SSTNode param_no_default_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: param_no_default*
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default*)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_no_default*)
            // REMOVE result call (_loop0_197_var = _loop0_197_rule()) != null  // param_no_default*
            (_loop0_197_var = _loop0_197_rule()) != null  // param_no_default*
            &&
            // TODO visiting JavaParserGeneratorNamedItem: invalid_parameters_helper
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_parameters_helper)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_parameters_helper) - should work
            // REMOVE result call (invalid_parameters_helper_var = invalid_parameters_helper_rule()) != null  // invalid_parameters_helper
            (invalid_parameters_helper_var = invalid_parameters_helper_rule()) != null  // invalid_parameters_helper
            &&
            // TODO visiting JavaParserGeneratorNamedItem: param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            (param_no_default_var = param_no_default_rule()) != null  // param_no_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, INVALID_PARAMETERS_ID, null);
    }

    // invalid_parameters_helper: slash_with_default | param_with_default+
    public Object invalid_parameters_helper_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: invalid_parameters_helper, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_PARAMETERS_HELPER_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, INVALID_PARAMETERS_HELPER_ID);
        }
        // visiting Alt: slash_with_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slash_with_default) - should work
        // TODO replacing SlashWithDefault[] --> SSTNode[]
            // generated call: (slash_with_default_var = slash_with_default_rule()) != null  // slash_with_default
            // node.name: a, call.assigned_variable: slash_with_default_var
        // collecting vars: slash_with_default_var, SSTNode[]
        //    vars: {'slash_with_default_var': 'SSTNode[]'}
        SSTNode[] slash_with_default_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: slash_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(slash_with_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slash_with_default) - should work
            // TODO replacing SlashWithDefault[] --> SSTNode[]
            // REMOVE result call (slash_with_default_var = slash_with_default_rule()) != null  // slash_with_default
            (slash_with_default_var = slash_with_default_rule()) != null  // slash_with_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: param_with_default+
        // TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_with_default+)
            // generated call: (_loop1_198_var = _loop1_198_rule()) != null  // param_with_default+
            // node.name: None, call.assigned_variable: _loop1_198_var
        // collecting vars: _loop1_198_var, SSTNode[]
        //    vars: {'_loop1_198_var': 'SSTNode[]'}
        SSTNode[] _loop1_198_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: param_with_default+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_with_default+)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_with_default+)
            // REMOVE result call (_loop1_198_var = _loop1_198_rule()) != null  // param_with_default+
            (_loop1_198_var = _loop1_198_rule()) != null  // param_with_default+
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, INVALID_PARAMETERS_HELPER_ID, null);
    }

    // invalid_lambda_parameters:
    //     | lambda_param_no_default* invalid_lambda_parameters_helper lambda_param_no_default
    public Object invalid_lambda_parameters_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: invalid_lambda_parameters, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_LAMBDA_PARAMETERS_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, INVALID_LAMBDA_PARAMETERS_ID);
        }
        // visiting Alt: lambda_param_no_default* invalid_lambda_parameters_helper lambda_param_no_default
        // TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_no_default*)
            // generated call: (_loop0_199_var = _loop0_199_rule()) != null  // lambda_param_no_default*
            // node.name: None, call.assigned_variable: _loop0_199_var
        // collecting vars: _loop0_199_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_lambda_parameters_helper) - should work
            // generated call: (invalid_lambda_parameters_helper_var = invalid_lambda_parameters_helper_rule()) != null  // invalid_lambda_parameters_helper
            // node.name: None, call.assigned_variable: invalid_lambda_parameters_helper_var
        // collecting vars: invalid_lambda_parameters_helper_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            // node.name: None, call.assigned_variable: lambda_param_no_default_var
        // collecting vars: lambda_param_no_default_var, SSTNode
        //    vars: {'_loop0_199_var': 'SSTNode[]', 'invalid_lambda_parameters_helper_var': None, 'lambda_param_no_default_var': 'SSTNode'}
        SSTNode[] _loop0_199_var = null;
        Object invalid_lambda_parameters_helper_var = null;
        SSTNode lambda_param_no_default_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default*
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default*)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_no_default*)
            // REMOVE result call (_loop0_199_var = _loop0_199_rule()) != null  // lambda_param_no_default*
            (_loop0_199_var = _loop0_199_rule()) != null  // lambda_param_no_default*
            &&
            // TODO visiting JavaParserGeneratorNamedItem: invalid_lambda_parameters_helper
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_lambda_parameters_helper)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_lambda_parameters_helper) - should work
            // REMOVE result call (invalid_lambda_parameters_helper_var = invalid_lambda_parameters_helper_rule()) != null  // invalid_lambda_parameters_helper
            (invalid_lambda_parameters_helper_var = invalid_lambda_parameters_helper_rule()) != null  // invalid_lambda_parameters_helper
            &&
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, INVALID_LAMBDA_PARAMETERS_ID, null);
    }

    // invalid_lambda_parameters_helper:
    //     | lambda_slash_with_default
    //     | lambda_param_with_default+
    public Object invalid_lambda_parameters_helper_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: invalid_lambda_parameters_helper, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_LAMBDA_PARAMETERS_HELPER_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, INVALID_LAMBDA_PARAMETERS_HELPER_ID);
        }
        // visiting Alt: lambda_slash_with_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_slash_with_default) - should work
        // TODO replacing SlashWithDefault[] --> SSTNode[]
            // generated call: (lambda_slash_with_default_var = lambda_slash_with_default_rule()) != null  // lambda_slash_with_default
            // node.name: a, call.assigned_variable: lambda_slash_with_default_var
        // collecting vars: lambda_slash_with_default_var, SSTNode[]
        //    vars: {'lambda_slash_with_default_var': 'SSTNode[]'}
        SSTNode[] lambda_slash_with_default_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_slash_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_slash_with_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_slash_with_default) - should work
            // TODO replacing SlashWithDefault[] --> SSTNode[]
            // REMOVE result call (lambda_slash_with_default_var = lambda_slash_with_default_rule()) != null  // lambda_slash_with_default
            (lambda_slash_with_default_var = lambda_slash_with_default_rule()) != null  // lambda_slash_with_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: lambda_param_with_default+
        // TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_with_default+)
            // generated call: (_loop1_200_var = _loop1_200_rule()) != null  // lambda_param_with_default+
            // node.name: None, call.assigned_variable: _loop1_200_var
        // collecting vars: _loop1_200_var, SSTNode[]
        //    vars: {'_loop1_200_var': 'SSTNode[]'}
        SSTNode[] _loop1_200_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_with_default+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_with_default+)
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_with_default+)
            // REMOVE result call (_loop1_200_var = _loop1_200_rule()) != null  // lambda_param_with_default+
            (_loop1_200_var = _loop1_200_rule()) != null  // lambda_param_with_default+
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, INVALID_LAMBDA_PARAMETERS_HELPER_ID, null);
    }

    // invalid_star_etc: '*' (')' | ',' (')' | '**')) | '*' ',' TYPE_COMMENT
    public Object invalid_star_etc_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: invalid_star_etc, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_STAR_ETC_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, INVALID_STAR_ETC_ID);
        }
        // visiting Alt: '*' (')' | ',' (')' | '**'))
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // TODO visiting JavaCallMakerVisitor.visit_Group((')' | ',' (')' | '**')))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(')' | ',' (')' | '**'))
            // generated call: (_tmp_201_var = _tmp_201_rule()) != null  // ')' | ',' (')' | '**')
            // node.name: None, call.assigned_variable: _tmp_201_var
        // collecting vars: _tmp_201_var, None
        //    vars: {'_literal': 'Token', '_tmp_201_var': None}
        Token _literal = null;
        Object _tmp_201_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '*'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: (')' | ',' (')' | '**'))
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((')' | ',' (')' | '**')))
            // TODO visiting JavaCallMakerVisitor.visit_Group((')' | ',' (')' | '**')))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(')' | ',' (')' | '**'))
            // REMOVE result call (_tmp_201_var = _tmp_201_rule()) != null  // ')' | ',' (')' | '**')
            (_tmp_201_var = _tmp_201_rule()) != null  // ')' | ',' (')' | '**')
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '*' ',' TYPE_COMMENT
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            // node.name: None, call.assigned_variable: type_comment_var
        // collecting vars: type_comment_var, Token
        //    vars: {'_literal': 'Token', '_literal_1': 'Token', 'type_comment_var': 'Token'}
        Token _literal_1 = null;
        Token type_comment_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '*'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal_1 = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // REMOVE result call (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, INVALID_STAR_ETC_ID, null);
    }

    // invalid_lambda_star_etc: '*' (':' | ',' (':' | '**'))
    public Object invalid_lambda_star_etc_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: invalid_lambda_star_etc, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_LAMBDA_STAR_ETC_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, INVALID_LAMBDA_STAR_ETC_ID);
        }
        // visiting Alt: '*' (':' | ',' (':' | '**'))
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // TODO visiting JavaCallMakerVisitor.visit_Group((':' | ',' (':' | '**')))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(':' | ',' (':' | '**'))
            // generated call: (_tmp_202_var = _tmp_202_rule()) != null  // ':' | ',' (':' | '**')
            // node.name: None, call.assigned_variable: _tmp_202_var
        // collecting vars: _tmp_202_var, None
        //    vars: {'_literal': 'Token', '_tmp_202_var': None}
        Token _literal = null;
        Object _tmp_202_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '*'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: (':' | ',' (':' | '**'))
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((':' | ',' (':' | '**')))
            // TODO visiting JavaCallMakerVisitor.visit_Group((':' | ',' (':' | '**')))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(':' | ',' (':' | '**'))
            // REMOVE result call (_tmp_202_var = _tmp_202_rule()) != null  // ':' | ',' (':' | '**')
            (_tmp_202_var = _tmp_202_rule()) != null  // ':' | ',' (':' | '**')
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, INVALID_LAMBDA_STAR_ETC_ID, null);
    }

    // invalid_double_type_comments: TYPE_COMMENT NEWLINE TYPE_COMMENT NEWLINE INDENT
    public Object invalid_double_type_comments_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: invalid_double_type_comments, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_DOUBLE_TYPE_COMMENTS_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, INVALID_DOUBLE_TYPE_COMMENTS_ID);
        }
        // visiting Alt: TYPE_COMMENT NEWLINE TYPE_COMMENT NEWLINE INDENT
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            // node.name: None, call.assigned_variable: type_comment_var
        // collecting vars: type_comment_var, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // generated call: (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            // node.name: None, call.assigned_variable: newline_var
        // collecting vars: newline_var, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            // node.name: None, call.assigned_variable: type_comment_var
        // collecting vars: type_comment_var_1, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // generated call: (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            // node.name: None, call.assigned_variable: newline_var
        // collecting vars: newline_var_1, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(INDENT) - should work
            // generated call: (indent_var = expect(Token.Kind.INDENT)) != null  // token='INDENT'
            // node.name: None, call.assigned_variable: indent_var
        // collecting vars: indent_var, Token
        //    vars: {'type_comment_var': 'Token', 'newline_var': 'Token', 'type_comment_var_1': 'Token', 'newline_var_1': 'Token', 'indent_var': 'Token'}
        Token indent_var = null;
        Token newline_var = null;
        Token newline_var_1 = null;
        Token type_comment_var = null;
        Token type_comment_var_1 = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // REMOVE result call (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NEWLINE
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // REMOVE result call (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // REMOVE result call (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            (type_comment_var_1 = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NEWLINE
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // REMOVE result call (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            (newline_var_1 = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: INDENT
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(INDENT)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(INDENT) - should work
            // REMOVE result call (indent_var = expect(Token.Kind.INDENT)) != null  // token='INDENT'
            (indent_var = expect(Token.Kind.INDENT)) != null  // token='INDENT'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, INVALID_DOUBLE_TYPE_COMMENTS_ID, null);
    }

    // invalid_with_item: expression 'as' expression &(',' | ')' | ':')
    public Object invalid_with_item_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: invalid_with_item, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_WITH_ITEM_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, INVALID_WITH_ITEM_ID);
        }
        // visiting Alt: expression 'as' expression &(',' | ')' | ':')
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: None, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
            // generated call: (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: a, call.assigned_variable: expression_var
        // collecting vars: expression_var_1, SSTNode
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&(',' | ')' | ':'))
            // generated call: None
        // collecting vars: None, None
        //    vars: {'expression_var': 'SSTNode', '_keyword': 'Token', 'expression_var_1': 'SSTNode', None: None}
        Token _keyword = null;
        SSTNode expression_var = null;
        SSTNode expression_var_1 = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: 'as'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('as')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
            // REMOVE result call (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var_1 = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: &(',' | ')' | ':')
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&(',' | ')' | ':'))
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&(',' | ')' | ':'))
            // TODO call is not created &(',' | ')' | ':') -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, INVALID_WITH_ITEM_ID, null);
    }

    // invalid_for_target: ASYNC? 'for' star_expressions
    public Object invalid_for_target_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: invalid_for_target, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_FOR_TARGET_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, INVALID_FOR_TARGET_ID);
        }
        // visiting Alt: ASYNC? 'for' star_expressions
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(ASYNC?)
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
            // JavaCallMakerVisitor.visit_Opt.generated call: (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            // generated call: ((_opt_var = expect(Token.Kind.ASYNC)) != null || _opt_var == null)  // ASYNC?
            // node.name: None, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('for')
            // generated call: (_keyword = expect(KEYWORD_FOR)) != null  // token='for'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // generated call: (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            // node.name: a, call.assigned_variable: star_expressions_var
        // collecting vars: star_expressions_var, SSTNode
        //    vars: {'_opt_var': None, '_keyword': 'Token', 'star_expressions_var': 'SSTNode'}
        Token _keyword = null;
        Object _opt_var = null;
        SSTNode star_expressions_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ASYNC?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(ASYNC?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(ASYNC?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
                // JavaCallMakerVisitor.visit_Opt.generated call: (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            // REMOVE result call ((_opt_var = expect(Token.Kind.ASYNC)) != null || _opt_var == null)  // ASYNC?
            ((_opt_var = expect(Token.Kind.ASYNC)) != null || _opt_var == null)  // ASYNC?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: 'for'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('for')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('for')
            // REMOVE result call (_keyword = expect(KEYWORD_FOR)) != null  // token='for'
            (_keyword = expect(KEYWORD_FOR)) != null  // token='for'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: star_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expressions)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // REMOVE result call (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            (star_expressions_var = star_expressions_rule()) != null  // star_expressions
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, INVALID_FOR_TARGET_ID, null);
    }

    // invalid_group: '(' starred_expression ')' | '(' '**' expression ')'
    public Object invalid_group_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: invalid_group, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_GROUP_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, INVALID_GROUP_ID);
        }
        // visiting Alt: '(' starred_expression ')'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(starred_expression) - should work
            // generated call: (starred_expression_var = starred_expression_rule()) != null  // starred_expression
            // node.name: a, call.assigned_variable: starred_expression_var
        // collecting vars: starred_expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_literal': 'Token', 'starred_expression_var': 'SSTNode', '_literal_1': 'Token'}
        Token _literal = null;
        Token _literal_1 = null;
        SSTNode starred_expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            &&
            // TODO visiting JavaParserGeneratorNamedItem: starred_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(starred_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(starred_expression) - should work
            // REMOVE result call (starred_expression_var = starred_expression_rule()) != null  // starred_expression
            (starred_expression_var = starred_expression_rule()) != null  // starred_expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '(' '**' expression ')'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
            // generated call: (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            // node.name: a, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: None, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_2, Token
        //    vars: {'_literal': 'Token', '_literal_1': 'Token', 'expression_var': 'SSTNode', '_literal_2': 'Token'}
        Token _literal_2 = null;
        SSTNode expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '**'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('**')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
            // REMOVE result call (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            (_literal_1 = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            (_literal_2 = expect(Token.Kind.RPAR)) != null  // token=')'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, INVALID_GROUP_ID, null);
    }

    // invalid_import_from_targets: import_from_as_names ','
    public Object invalid_import_from_targets_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: invalid_import_from_targets, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_IMPORT_FROM_TARGETS_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, INVALID_IMPORT_FROM_TARGETS_ID);
        }
        // visiting Alt: import_from_as_names ','
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_as_names) - should work
        // TODO replacing asdl_alias_seq[] --> SSTNode[]
            // generated call: (import_from_as_names_var = import_from_as_names_rule()) != null  // import_from_as_names
            // node.name: None, call.assigned_variable: import_from_as_names_var
        // collecting vars: import_from_as_names_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'import_from_as_names_var': 'SSTNode[]', '_literal': 'Token'}
        Token _literal = null;
        SSTNode[] import_from_as_names_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: import_from_as_names
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(import_from_as_names)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_as_names) - should work
            // TODO replacing asdl_alias_seq[] --> SSTNode[]
            // REMOVE result call (import_from_as_names_var = import_from_as_names_rule()) != null  // import_from_as_names
            (import_from_as_names_var = import_from_as_names_rule()) != null  // import_from_as_names
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, INVALID_IMPORT_FROM_TARGETS_ID, null);
    }

    // invalid_with_stmt:
    //     | ASYNC? 'with' ','.(expression ['as' star_target])+ &&':'
    //     | ASYNC? 'with' '(' ','.(expressions ['as' star_target])+ ','? ')' &&':'
    public Object invalid_with_stmt_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: invalid_with_stmt, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_WITH_STMT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, INVALID_WITH_STMT_ID);
        }
        // visiting Alt: ASYNC? 'with' ','.(expression ['as' star_target])+ &&':'
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(ASYNC?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(ASYNC)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_203_var = _tmp_203_rule()) != null  // ASYNC
            // generated call: ((_opt_var = _tmp_203_rule()) != null || _opt_var == null)  // ASYNC?
            // node.name: None, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
            // generated call: (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.(expression ['as' star_target])+)
            // generated call: (_gather_204_var = _gather_204_rule()) != null  // ','.(expression ['as' star_target])+
            // node.name: None, call.assigned_variable: _gather_204_var
        // collecting vars: _gather_204_var, SSTNode[]
        // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
            // generated call: None
        // collecting vars: None, None
        //    vars: {'_opt_var': None, '_keyword': 'Token', '_gather_204_var': 'SSTNode[]', None: None}
        SSTNode[] _gather_204_var = null;
        Token _keyword = null;
        Object _opt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ASYNC?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(ASYNC?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(ASYNC?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(ASYNC)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_203_var = _tmp_203_rule()) != null  // ASYNC
            // REMOVE result call ((_opt_var = _tmp_203_rule()) != null || _opt_var == null)  // ASYNC?
            ((_opt_var = _tmp_203_rule()) != null || _opt_var == null)  // ASYNC?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: 'with'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('with')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
            // REMOVE result call (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
            (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','.(expression ['as' star_target])+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.(expression ['as' star_target])+)
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.(expression ['as' star_target])+)
            // REMOVE result call (_gather_204_var = _gather_204_rule()) != null  // ','.(expression ['as' star_target])+
            (_gather_204_var = _gather_204_rule()) != null  // ','.(expression ['as' star_target])+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: &&':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&&':')
            // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
            // TODO call is not created &&':' -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: ASYNC? 'with' '(' ','.(expressions ['as' star_target])+ ','? ')' &&':'
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(ASYNC?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(ASYNC)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_206_var = _tmp_206_rule()) != null  // ASYNC
            // generated call: ((_opt_var = _tmp_206_rule()) != null || _opt_var == null)  // ASYNC?
            // node.name: None, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
            // generated call: (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.(expressions ['as' star_target])+)
            // generated call: (_gather_207_var = _gather_207_rule()) != null  // ','.(expressions ['as' star_target])+
            // node.name: None, call.assigned_variable: _gather_207_var
        // collecting vars: _gather_207_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // generated call: ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
            // node.name: None, call.assigned_variable: _opt_var
        // collecting vars: _opt_var_1, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
            // generated call: None
        // collecting vars: None, None
        //    vars: {'_opt_var': None, '_keyword': 'Token', '_literal': 'Token', '_gather_207_var': 'SSTNode[]', '_opt_var_1': None, '_literal_1': 'Token', None: None}
        SSTNode[] _gather_207_var = null;
        Token _literal = null;
        Token _literal_1 = null;
        Object _opt_var_1 = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ASYNC?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(ASYNC?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(ASYNC?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(ASYNC)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_206_var = _tmp_206_rule()) != null  // ASYNC
            // REMOVE result call ((_opt_var = _tmp_206_rule()) != null || _opt_var == null)  // ASYNC?
            ((_opt_var = _tmp_206_rule()) != null || _opt_var == null)  // ASYNC?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: 'with'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('with')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
            // REMOVE result call (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
            (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','.(expressions ['as' star_target])+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.(expressions ['as' star_target])+)
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.(expressions ['as' star_target])+)
            // REMOVE result call (_gather_207_var = _gather_207_rule()) != null  // ','.(expressions ['as' star_target])+
            (_gather_207_var = _gather_207_rule()) != null  // ','.(expressions ['as' star_target])+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // REMOVE result call ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
            ((_opt_var_1 = expect(Token.Kind.COMMA)) != null || _opt_var_1 == null)  // ','?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: &&':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&&':')
            // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
            // TODO call is not created &&':' -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, INVALID_WITH_STMT_ID, null);
    }

    // invalid_except_block:
    //     | 'except' expression ',' expressions ['as' NAME] ':'
    //     | 'except' expression ['as' NAME] &&':'
    //     | 'except' &&':'
    public Object invalid_except_block_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: invalid_except_block, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_EXCEPT_BLOCK_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, INVALID_EXCEPT_BLOCK_ID);
        }
        // visiting Alt: 'except' expression ',' expressions ['as' NAME] ':'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('except')
            // generated call: (_keyword = expect(KEYWORD_EXCEPT)) != null  // token='except'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: a, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expressions) - should work
            // generated call: (expressions_var = expressions_rule()) != null  // expressions
            // node.name: None, call.assigned_variable: expressions_var
        // collecting vars: expressions_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' NAME])
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' NAME)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_209_var = _tmp_209_rule()) != null  // 'as' NAME
            // generated call: ((_opt_var = _tmp_209_rule()) != null || _opt_var == null)  // ['as' NAME]
            // node.name: None, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_keyword': 'Token', 'expression_var': 'SSTNode', '_literal': 'Token', 'expressions_var': 'SSTNode', '_opt_var': None, '_literal_1': 'Token'}
        Token _keyword = null;
        Token _literal = null;
        Token _literal_1 = null;
        Object _opt_var = null;
        SSTNode expression_var = null;
        SSTNode expressions_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'except'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('except')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('except')
            // REMOVE result call (_keyword = expect(KEYWORD_EXCEPT)) != null  // token='except'
            (_keyword = expect(KEYWORD_EXCEPT)) != null  // token='except'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expressions)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expressions) - should work
            // REMOVE result call (expressions_var = expressions_rule()) != null  // expressions
            (expressions_var = expressions_rule()) != null  // expressions
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ['as' NAME]
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(['as' NAME])
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' NAME])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' NAME)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_209_var = _tmp_209_rule()) != null  // 'as' NAME
            // REMOVE result call ((_opt_var = _tmp_209_rule()) != null || _opt_var == null)  // ['as' NAME]
            ((_opt_var = _tmp_209_rule()) != null || _opt_var == null)  // ['as' NAME]
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            (_literal_1 = expect(Token.Kind.COLON)) != null  // token=':'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: 'except' expression ['as' NAME] &&':'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('except')
            // generated call: (_keyword = expect(KEYWORD_EXCEPT)) != null  // token='except'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: None, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' NAME])
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' NAME)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_210_var = _tmp_210_rule()) != null  // 'as' NAME
            // generated call: ((_opt_var = _tmp_210_rule()) != null || _opt_var == null)  // ['as' NAME]
            // node.name: None, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
            // generated call: None
        // collecting vars: None, None
        //    vars: {'_keyword': 'Token', 'expression_var': 'SSTNode', '_opt_var': None, None: None}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'except'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('except')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('except')
            // REMOVE result call (_keyword = expect(KEYWORD_EXCEPT)) != null  // token='except'
            (_keyword = expect(KEYWORD_EXCEPT)) != null  // token='except'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ['as' NAME]
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(['as' NAME])
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' NAME])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' NAME)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_210_var = _tmp_210_rule()) != null  // 'as' NAME
            // REMOVE result call ((_opt_var = _tmp_210_rule()) != null || _opt_var == null)  // ['as' NAME]
            ((_opt_var = _tmp_210_rule()) != null || _opt_var == null)  // ['as' NAME]
            &&
            // TODO visiting JavaParserGeneratorNamedItem: &&':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&&':')
            // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
            // TODO call is not created &&':' -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: 'except' &&':'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('except')
            // generated call: (_keyword = expect(KEYWORD_EXCEPT)) != null  // token='except'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
            // generated call: None
        // collecting vars: None, None
        //    vars: {'_keyword': 'Token', None: None}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'except'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('except')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('except')
            // REMOVE result call (_keyword = expect(KEYWORD_EXCEPT)) != null  // token='except'
            (_keyword = expect(KEYWORD_EXCEPT)) != null  // token='except'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: &&':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&&':')
            // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
            // TODO call is not created &&':' -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, INVALID_EXCEPT_BLOCK_ID, null);
    }

    // invalid_match_stmt: "match" subject_expr !':'
    public Object invalid_match_stmt_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: invalid_match_stmt, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_MATCH_STMT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, INVALID_MATCH_STMT_ID);
        }
        // visiting Alt: "match" subject_expr !':'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf("match")
            // generated call: (_keyword = expect("match")) != null  // soft_keyword='"match"'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(subject_expr) - should work
            // generated call: (subject_expr_var = subject_expr_rule()) != null  // subject_expr
            // node.name: None, call.assigned_variable: subject_expr_var
        // collecting vars: subject_expr_var, SSTNode
        // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!':')
            // generated call: None
        // collecting vars: None, None
        //    vars: {'_keyword': 'Token', 'subject_expr_var': 'SSTNode', None: None}
        Token _keyword = null;
        SSTNode subject_expr_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: "match"
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem("match")
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf("match")
            // REMOVE result call (_keyword = expect("match")) != null  // soft_keyword='"match"'
            (_keyword = expect("match")) != null  // soft_keyword='"match"'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: subject_expr
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(subject_expr)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(subject_expr) - should work
            // REMOVE result call (subject_expr_var = subject_expr_rule()) != null  // subject_expr
            (subject_expr_var = subject_expr_rule()) != null  // subject_expr
            &&
            // TODO visiting JavaParserGeneratorNamedItem: !':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!':')
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!':')
            // TODO call is not created !':' -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, INVALID_MATCH_STMT_ID, null);
    }

    // invalid_case_block: "case" patterns guard? !':'
    public Object invalid_case_block_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: invalid_case_block, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_CASE_BLOCK_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, INVALID_CASE_BLOCK_ID);
        }
        // visiting Alt: "case" patterns guard? !':'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf("case")
            // generated call: (_keyword = expect("case")) != null  // soft_keyword='"case"'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(patterns) - should work
            // generated call: (patterns_var = patterns_rule()) != null  // patterns
            // node.name: None, call.assigned_variable: patterns_var
        // collecting vars: patterns_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(guard?)
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(guard) - should work
            // JavaCallMakerVisitor.visit_Opt.generated call: (guard_var = guard_rule()) != null  // guard
            // generated call: ((_opt_var = guard_rule()) != null || _opt_var == null)  // guard?
            // node.name: None, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!':')
            // generated call: None
        // collecting vars: None, None
        //    vars: {'_keyword': 'Token', 'patterns_var': 'SSTNode', '_opt_var': None, None: None}
        Token _keyword = null;
        Object _opt_var = null;
        SSTNode patterns_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: "case"
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem("case")
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf("case")
            // REMOVE result call (_keyword = expect("case")) != null  // soft_keyword='"case"'
            (_keyword = expect("case")) != null  // soft_keyword='"case"'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: patterns
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(patterns)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(patterns) - should work
            // REMOVE result call (patterns_var = patterns_rule()) != null  // patterns
            (patterns_var = patterns_rule()) != null  // patterns
            &&
            // TODO visiting JavaParserGeneratorNamedItem: guard?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(guard?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(guard?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(guard) - should work
                // JavaCallMakerVisitor.visit_Opt.generated call: (guard_var = guard_rule()) != null  // guard
            // REMOVE result call ((_opt_var = guard_rule()) != null || _opt_var == null)  // guard?
            ((_opt_var = guard_rule()) != null || _opt_var == null)  // guard?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: !':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!':')
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!':')
            // TODO call is not created !':' -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, INVALID_CASE_BLOCK_ID, null);
    }

    // invalid_if_stmt: 'if' named_expression NEWLINE
    public Object invalid_if_stmt_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: invalid_if_stmt, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_IF_STMT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, INVALID_IF_STMT_ID);
        }
        // visiting Alt: 'if' named_expression NEWLINE
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
            // generated call: (_keyword = expect(KEYWORD_IF)) != null  // token='if'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // generated call: (named_expression_var = named_expression_rule()) != null  // named_expression
            // node.name: None, call.assigned_variable: named_expression_var
        // collecting vars: named_expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // generated call: (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            // node.name: None, call.assigned_variable: newline_var
        // collecting vars: newline_var, Token
        //    vars: {'_keyword': 'Token', 'named_expression_var': 'SSTNode', 'newline_var': 'Token'}
        Token _keyword = null;
        SSTNode named_expression_var = null;
        Token newline_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'if'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('if')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
            // REMOVE result call (_keyword = expect(KEYWORD_IF)) != null  // token='if'
            (_keyword = expect(KEYWORD_IF)) != null  // token='if'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: named_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(named_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // REMOVE result call (named_expression_var = named_expression_rule()) != null  // named_expression
            (named_expression_var = named_expression_rule()) != null  // named_expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NEWLINE
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // REMOVE result call (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, INVALID_IF_STMT_ID, null);
    }

    // invalid_elif_stmt: 'elif' named_expression NEWLINE
    public Object invalid_elif_stmt_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: invalid_elif_stmt, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_ELIF_STMT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, INVALID_ELIF_STMT_ID);
        }
        // visiting Alt: 'elif' named_expression NEWLINE
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('elif')
            // generated call: (_keyword = expect(KEYWORD_ELIF)) != null  // token='elif'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // generated call: (named_expression_var = named_expression_rule()) != null  // named_expression
            // node.name: None, call.assigned_variable: named_expression_var
        // collecting vars: named_expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // generated call: (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            // node.name: None, call.assigned_variable: newline_var
        // collecting vars: newline_var, Token
        //    vars: {'_keyword': 'Token', 'named_expression_var': 'SSTNode', 'newline_var': 'Token'}
        Token _keyword = null;
        SSTNode named_expression_var = null;
        Token newline_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'elif'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('elif')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('elif')
            // REMOVE result call (_keyword = expect(KEYWORD_ELIF)) != null  // token='elif'
            (_keyword = expect(KEYWORD_ELIF)) != null  // token='elif'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: named_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(named_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // REMOVE result call (named_expression_var = named_expression_rule()) != null  // named_expression
            (named_expression_var = named_expression_rule()) != null  // named_expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NEWLINE
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // REMOVE result call (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, INVALID_ELIF_STMT_ID, null);
    }

    // invalid_while_stmt: 'while' named_expression NEWLINE
    public Object invalid_while_stmt_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: invalid_while_stmt, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_WHILE_STMT_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, INVALID_WHILE_STMT_ID);
        }
        // visiting Alt: 'while' named_expression NEWLINE
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('while')
            // generated call: (_keyword = expect(KEYWORD_WHILE)) != null  // token='while'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // generated call: (named_expression_var = named_expression_rule()) != null  // named_expression
            // node.name: None, call.assigned_variable: named_expression_var
        // collecting vars: named_expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // generated call: (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            // node.name: None, call.assigned_variable: newline_var
        // collecting vars: newline_var, Token
        //    vars: {'_keyword': 'Token', 'named_expression_var': 'SSTNode', 'newline_var': 'Token'}
        Token _keyword = null;
        SSTNode named_expression_var = null;
        Token newline_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'while'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('while')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('while')
            // REMOVE result call (_keyword = expect(KEYWORD_WHILE)) != null  // token='while'
            (_keyword = expect(KEYWORD_WHILE)) != null  // token='while'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: named_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(named_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // REMOVE result call (named_expression_var = named_expression_rule()) != null  // named_expression
            (named_expression_var = named_expression_rule()) != null  // named_expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NEWLINE
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // REMOVE result call (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, INVALID_WHILE_STMT_ID, null);
    }

    // invalid_double_starred_kvpairs:
    //     | ','.double_starred_kvpair+ ',' invalid_kvpair
    //     | expression ':' '*' bitwise_or
    //     | expression ':' &('}' | ',')
    public Object invalid_double_starred_kvpairs_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: invalid_double_starred_kvpairs, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_DOUBLE_STARRED_KVPAIRS_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, INVALID_DOUBLE_STARRED_KVPAIRS_ID);
        }
        // visiting Alt: ','.double_starred_kvpair+ ',' invalid_kvpair
        // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.double_starred_kvpair+)
            // generated call: (_gather_211_var = _gather_211_rule()) != null  // ','.double_starred_kvpair+
            // node.name: None, call.assigned_variable: _gather_211_var
        // collecting vars: _gather_211_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_kvpair) - should work
            // generated call: (invalid_kvpair_var = invalid_kvpair_rule()) != null  // invalid_kvpair
            // node.name: None, call.assigned_variable: invalid_kvpair_var
        // collecting vars: invalid_kvpair_var, None
        //    vars: {'_gather_211_var': 'SSTNode[]', '_literal': 'Token', 'invalid_kvpair_var': None}
        SSTNode[] _gather_211_var = null;
        Token _literal = null;
        Object invalid_kvpair_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','.double_starred_kvpair+
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.double_starred_kvpair+)
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.double_starred_kvpair+)
            // REMOVE result call (_gather_211_var = _gather_211_rule()) != null  // ','.double_starred_kvpair+
            (_gather_211_var = _gather_211_rule()) != null  // ','.double_starred_kvpair+
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: invalid_kvpair
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_kvpair)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_kvpair) - should work
            // REMOVE result call (invalid_kvpair_var = invalid_kvpair_rule()) != null  // invalid_kvpair
            (invalid_kvpair_var = invalid_kvpair_rule()) != null  // invalid_kvpair
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: expression ':' '*' bitwise_or
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: None, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // node.name: a, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // node.name: None, call.assigned_variable: bitwise_or_var
        // collecting vars: bitwise_or_var, SSTNode
        //    vars: {'expression_var': 'SSTNode', '_literal': 'Token', '_literal_1': 'Token', 'bitwise_or_var': 'SSTNode'}
        Token _literal_1 = null;
        SSTNode bitwise_or_var = null;
        SSTNode expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '*'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            (_literal_1 = expect(Token.Kind.STAR)) != null  // token='*'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: expression ':' &('}' | ',')
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: None, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // node.name: a, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('}' | ','))
            // generated call: None
        // collecting vars: None, None
        //    vars: {'expression_var': 'SSTNode', '_literal': 'Token', None: None}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: &('}' | ',')
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&('}' | ','))
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('}' | ','))
            // TODO call is not created &('}' | ',') -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, INVALID_DOUBLE_STARRED_KVPAIRS_ID, null);
    }

    // invalid_kvpair: expression !(':') | expression ':' '*' bitwise_or | expression ':'
    public Object invalid_kvpair_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: invalid_kvpair, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_KVPAIR_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, INVALID_KVPAIR_ID);
        }
        // visiting Alt: expression !(':')
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: a, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!(':'))
            // generated call: None
        // collecting vars: None, None
        //    vars: {'expression_var': 'SSTNode', None: None}
        SSTNode expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: !(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!(':'))
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!(':'))
            // TODO call is not created !(':') -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: expression ':' '*' bitwise_or
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: None, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // node.name: a, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // node.name: None, call.assigned_variable: bitwise_or_var
        // collecting vars: bitwise_or_var, SSTNode
        //    vars: {'expression_var': 'SSTNode', '_literal': 'Token', '_literal_1': 'Token', 'bitwise_or_var': 'SSTNode'}
        Token _literal = null;
        Token _literal_1 = null;
        SSTNode bitwise_or_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '*'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            (_literal_1 = expect(Token.Kind.STAR)) != null  // token='*'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: expression ':'
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: None, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // node.name: a, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'expression_var': 'SSTNode', '_literal': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            (_literal = expect(Token.Kind.COLON)) != null  // token=':'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, INVALID_KVPAIR_ID, null);
    }

    // _tmp_1: statements
    public Object _tmp_1_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_1, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_1_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_1_ID);
        }
        // visiting Alt: statements
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(statements) - should work
            // generated call: (statements_var = statements_rule()) != null  // statements
            // node.name: None, call.assigned_variable: statements_var
        // collecting vars: statements_var, SSTNode[]
        //    vars: {'statements_var': 'SSTNode[]'}
        SSTNode[] statements_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: statements
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(statements)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(statements) - should work
            // REMOVE result call (statements_var = statements_rule()) != null  // statements
            (statements_var = statements_rule()) != null  // statements
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_1_ID, null);
    }

    // _loop0_2: NEWLINE
    public SSTNode[] _loop0_2_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_2, pos: " + pos);
            this.level++;
        }
        // visiting Alt: NEWLINE
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // generated call: (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            // node.name: None, call.assigned_variable: newline_var
        // collecting vars: newline_var, Token
        //    vars: {'newline_var': 'Token'}
        Token newline_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: NEWLINE
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // REMOVE result call (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_2_ID, null);
    }

    // _tmp_3: type_expressions
    public Object _tmp_3_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_3, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_3_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_3_ID);
        }
        // visiting Alt: type_expressions
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(type_expressions) - should work
        // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // generated call: (type_expressions_var = type_expressions_rule()) != null  // type_expressions
            // node.name: None, call.assigned_variable: type_expressions_var
        // collecting vars: type_expressions_var, SSTNode[]
        //    vars: {'type_expressions_var': 'SSTNode[]'}
        SSTNode[] type_expressions_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: type_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(type_expressions)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(type_expressions) - should work
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // REMOVE result call (type_expressions_var = type_expressions_rule()) != null  // type_expressions
            (type_expressions_var = type_expressions_rule()) != null  // type_expressions
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_3_ID, null);
    }

    // _loop0_4: NEWLINE
    public SSTNode[] _loop0_4_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_4, pos: " + pos);
            this.level++;
        }
        // visiting Alt: NEWLINE
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // generated call: (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            // node.name: None, call.assigned_variable: newline_var
        // collecting vars: newline_var, Token
        //    vars: {'newline_var': 'Token'}
        Token newline_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: NEWLINE
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // REMOVE result call (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_4_ID, null);
    }

    // _loop0_6: ',' expression
    public SSTNode[] _loop0_6_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_6, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ',' expression
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: elem, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        //    vars: {'_literal': 'Token', 'expression_var': 'SSTNode'}
        Token _literal = null;
        SSTNode expression_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_6_ID, null);
    }

    // _gather_5: expression _loop0_6
    public SSTNode[] _gather_5_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _gather_5, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, _GATHER_5_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, _GATHER_5_ID);
        }
        // visiting Alt: expression _loop0_6
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: elem, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_6) - should work
            // generated call: (_loop0_6_var = _loop0_6_rule()) != null  // _loop0_6
            // node.name: seq, call.assigned_variable: _loop0_6_var
        // collecting vars: _loop0_6_var, SSTNode[]
        //    vars: {'expression_var': 'SSTNode', '_loop0_6_var': 'SSTNode[]'}
        SSTNode[] _loop0_6_var = null;
        SSTNode expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: _loop0_6
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_6)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_6) - should work
            // REMOVE result call (_loop0_6_var = _loop0_6_rule()) != null  // _loop0_6
            (_loop0_6_var = _loop0_6_rule()) != null  // _loop0_6
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _GATHER_5_ID, null);
    }

    // _loop0_8: ',' expression
    public SSTNode[] _loop0_8_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_8, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ',' expression
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: elem, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        //    vars: {'_literal': 'Token', 'expression_var': 'SSTNode'}
        Token _literal = null;
        SSTNode expression_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_8_ID, null);
    }

    // _gather_7: expression _loop0_8
    public SSTNode[] _gather_7_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _gather_7, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, _GATHER_7_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, _GATHER_7_ID);
        }
        // visiting Alt: expression _loop0_8
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: elem, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_8) - should work
            // generated call: (_loop0_8_var = _loop0_8_rule()) != null  // _loop0_8
            // node.name: seq, call.assigned_variable: _loop0_8_var
        // collecting vars: _loop0_8_var, SSTNode[]
        //    vars: {'expression_var': 'SSTNode', '_loop0_8_var': 'SSTNode[]'}
        SSTNode[] _loop0_8_var = null;
        SSTNode expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: _loop0_8
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_8)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_8) - should work
            // REMOVE result call (_loop0_8_var = _loop0_8_rule()) != null  // _loop0_8
            (_loop0_8_var = _loop0_8_rule()) != null  // _loop0_8
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _GATHER_7_ID, null);
    }

    // _loop0_10: ',' expression
    public SSTNode[] _loop0_10_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_10, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ',' expression
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: elem, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        //    vars: {'_literal': 'Token', 'expression_var': 'SSTNode'}
        Token _literal = null;
        SSTNode expression_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_10_ID, null);
    }

    // _gather_9: expression _loop0_10
    public SSTNode[] _gather_9_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _gather_9, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, _GATHER_9_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, _GATHER_9_ID);
        }
        // visiting Alt: expression _loop0_10
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: elem, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_10) - should work
            // generated call: (_loop0_10_var = _loop0_10_rule()) != null  // _loop0_10
            // node.name: seq, call.assigned_variable: _loop0_10_var
        // collecting vars: _loop0_10_var, SSTNode[]
        //    vars: {'expression_var': 'SSTNode', '_loop0_10_var': 'SSTNode[]'}
        SSTNode[] _loop0_10_var = null;
        SSTNode expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: _loop0_10
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_10)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_10) - should work
            // REMOVE result call (_loop0_10_var = _loop0_10_rule()) != null  // _loop0_10
            (_loop0_10_var = _loop0_10_rule()) != null  // _loop0_10
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _GATHER_9_ID, null);
    }

    // _loop0_12: ',' expression
    public SSTNode[] _loop0_12_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_12, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ',' expression
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: elem, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        //    vars: {'_literal': 'Token', 'expression_var': 'SSTNode'}
        Token _literal = null;
        SSTNode expression_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_12_ID, null);
    }

    // _gather_11: expression _loop0_12
    public SSTNode[] _gather_11_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _gather_11, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, _GATHER_11_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, _GATHER_11_ID);
        }
        // visiting Alt: expression _loop0_12
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: elem, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_12) - should work
            // generated call: (_loop0_12_var = _loop0_12_rule()) != null  // _loop0_12
            // node.name: seq, call.assigned_variable: _loop0_12_var
        // collecting vars: _loop0_12_var, SSTNode[]
        //    vars: {'expression_var': 'SSTNode', '_loop0_12_var': 'SSTNode[]'}
        SSTNode[] _loop0_12_var = null;
        SSTNode expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: _loop0_12
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_12)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_12) - should work
            // REMOVE result call (_loop0_12_var = _loop0_12_rule()) != null  // _loop0_12
            (_loop0_12_var = _loop0_12_rule()) != null  // _loop0_12
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _GATHER_11_ID, null);
    }

    // _loop1_13: statement
    public SSTNode[] _loop1_13_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_13, pos: " + pos);
            this.level++;
        }
        // visiting Alt: statement
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(statement) - should work
            // generated call: (statement_var = statement_rule()) != null  // statement
            // node.name: None, call.assigned_variable: statement_var
        // collecting vars: statement_var, SSTNode[]
        //    vars: {'statement_var': 'SSTNode[]'}
        SSTNode[] statement_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: statement
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(statement)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(statement) - should work
            // REMOVE result call (statement_var = statement_rule()) != null  // statement
            (statement_var = statement_rule()) != null  // statement
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP1_13_ID, null);
    }

    // _loop0_15: ';' simple_stmt
    public SSTNode[] _loop0_15_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_15, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ';' simple_stmt
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(';')
            // generated call: (_literal = expect(Token.Kind.SEMI)) != null  // token=';'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmt) - should work
        // TODO replacing stmt_ty --> SSTNode
            // generated call: (simple_stmt_var = simple_stmt_rule()) != null  // simple_stmt
            // node.name: elem, call.assigned_variable: simple_stmt_var
        // collecting vars: simple_stmt_var, SSTNode
        //    vars: {'_literal': 'Token', 'simple_stmt_var': 'SSTNode'}
        Token _literal = null;
        SSTNode simple_stmt_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ';'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(';')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(';')
            // REMOVE result call (_literal = expect(Token.Kind.SEMI)) != null  // token=';'
            (_literal = expect(Token.Kind.SEMI)) != null  // token=';'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: simple_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(simple_stmt)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmt) - should work
            // TODO replacing stmt_ty --> SSTNode
            // REMOVE result call (simple_stmt_var = simple_stmt_rule()) != null  // simple_stmt
            (simple_stmt_var = simple_stmt_rule()) != null  // simple_stmt
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_15_ID, null);
    }

    // _gather_14: simple_stmt _loop0_15
    public SSTNode[] _gather_14_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _gather_14, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, _GATHER_14_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, _GATHER_14_ID);
        }
        // visiting Alt: simple_stmt _loop0_15
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmt) - should work
        // TODO replacing stmt_ty --> SSTNode
            // generated call: (simple_stmt_var = simple_stmt_rule()) != null  // simple_stmt
            // node.name: elem, call.assigned_variable: simple_stmt_var
        // collecting vars: simple_stmt_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_15) - should work
            // generated call: (_loop0_15_var = _loop0_15_rule()) != null  // _loop0_15
            // node.name: seq, call.assigned_variable: _loop0_15_var
        // collecting vars: _loop0_15_var, SSTNode[]
        //    vars: {'simple_stmt_var': 'SSTNode', '_loop0_15_var': 'SSTNode[]'}
        SSTNode[] _loop0_15_var = null;
        SSTNode simple_stmt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: simple_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(simple_stmt)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmt) - should work
            // TODO replacing stmt_ty --> SSTNode
            // REMOVE result call (simple_stmt_var = simple_stmt_rule()) != null  // simple_stmt
            (simple_stmt_var = simple_stmt_rule()) != null  // simple_stmt
            &&
            // TODO visiting JavaParserGeneratorNamedItem: _loop0_15
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_15)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_15) - should work
            // REMOVE result call (_loop0_15_var = _loop0_15_rule()) != null  // _loop0_15
            (_loop0_15_var = _loop0_15_rule()) != null  // _loop0_15
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _GATHER_14_ID, null);
    }

    // _tmp_16: ';'
    public Object _tmp_16_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_16, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_16_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_16_ID);
        }
        // visiting Alt: ';'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(';')
            // generated call: (_literal = expect(Token.Kind.SEMI)) != null  // token=';'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        Token _literal = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ';'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(';')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(';')
            // REMOVE result call (_literal = expect(Token.Kind.SEMI)) != null  // token=';'
            (_literal = expect(Token.Kind.SEMI)) != null  // token=';'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_16_ID, null);
    }

    // _tmp_17: '=' annotated_rhs
    public Object _tmp_17_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_17, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_17_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_17_ID);
        }
        // visiting Alt: '=' annotated_rhs
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
            // generated call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(annotated_rhs) - should work
            // generated call: (annotated_rhs_var = annotated_rhs_rule()) != null  // annotated_rhs
            // node.name: d, call.assigned_variable: annotated_rhs_var
        // collecting vars: annotated_rhs_var, SSTNode
        //    vars: {'_literal': 'Token', 'annotated_rhs_var': 'SSTNode'}
        Token _literal = null;
        SSTNode annotated_rhs_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
            // REMOVE result call (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            &&
            // TODO visiting JavaParserGeneratorNamedItem: annotated_rhs
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(annotated_rhs)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(annotated_rhs) - should work
            // REMOVE result call (annotated_rhs_var = annotated_rhs_rule()) != null  // annotated_rhs
            (annotated_rhs_var = annotated_rhs_rule()) != null  // annotated_rhs
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_17_ID, null);
    }

    // _tmp_18: '(' single_target ')' | single_subscript_attribute_target
    public Object _tmp_18_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_18, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_18_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_18_ID);
        }
        // visiting Alt: '(' single_target ')'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(single_target) - should work
            // generated call: (single_target_var = single_target_rule()) != null  // single_target
            // node.name: b, call.assigned_variable: single_target_var
        // collecting vars: single_target_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_literal': 'Token', 'single_target_var': 'SSTNode', '_literal_1': 'Token'}
        Token _literal = null;
        Token _literal_1 = null;
        SSTNode single_target_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            &&
            // TODO visiting JavaParserGeneratorNamedItem: single_target
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(single_target)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(single_target) - should work
            // REMOVE result call (single_target_var = single_target_rule()) != null  // single_target
            (single_target_var = single_target_rule()) != null  // single_target
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: single_subscript_attribute_target
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(single_subscript_attribute_target) - should work
            // generated call: (single_subscript_attribute_target_var = single_subscript_attribute_target_rule()) != null  // single_subscript_attribute_target
            // node.name: None, call.assigned_variable: single_subscript_attribute_target_var
        // collecting vars: single_subscript_attribute_target_var, SSTNode
        //    vars: {'single_subscript_attribute_target_var': 'SSTNode'}
        SSTNode single_subscript_attribute_target_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: single_subscript_attribute_target
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(single_subscript_attribute_target)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(single_subscript_attribute_target) - should work
            // REMOVE result call (single_subscript_attribute_target_var = single_subscript_attribute_target_rule()) != null  // single_subscript_attribute_target
            (single_subscript_attribute_target_var = single_subscript_attribute_target_rule()) != null  // single_subscript_attribute_target
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_18_ID, null);
    }

    // _tmp_19: '=' annotated_rhs
    public Object _tmp_19_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_19, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_19_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_19_ID);
        }
        // visiting Alt: '=' annotated_rhs
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
            // generated call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(annotated_rhs) - should work
            // generated call: (annotated_rhs_var = annotated_rhs_rule()) != null  // annotated_rhs
            // node.name: d, call.assigned_variable: annotated_rhs_var
        // collecting vars: annotated_rhs_var, SSTNode
        //    vars: {'_literal': 'Token', 'annotated_rhs_var': 'SSTNode'}
        Token _literal = null;
        SSTNode annotated_rhs_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
            // REMOVE result call (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            &&
            // TODO visiting JavaParserGeneratorNamedItem: annotated_rhs
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(annotated_rhs)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(annotated_rhs) - should work
            // REMOVE result call (annotated_rhs_var = annotated_rhs_rule()) != null  // annotated_rhs
            (annotated_rhs_var = annotated_rhs_rule()) != null  // annotated_rhs
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_19_ID, null);
    }

    // _loop1_20: (star_targets '=')
    public SSTNode[] _loop1_20_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_20, pos: " + pos);
            this.level++;
        }
        // visiting Alt: (star_targets '=')
        // TODO visiting JavaCallMakerVisitor.visit_Group((star_targets '='))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_targets '=')
            // generated call: (_tmp_213_var = _tmp_213_rule()) != null  // star_targets '='
            // node.name: None, call.assigned_variable: _tmp_213_var
        // collecting vars: _tmp_213_var, None
        //    vars: {'_tmp_213_var': None}
        Object _tmp_213_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: (star_targets '=')
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((star_targets '='))
            // TODO visiting JavaCallMakerVisitor.visit_Group((star_targets '='))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_targets '=')
            // REMOVE result call (_tmp_213_var = _tmp_213_rule()) != null  // star_targets '='
            (_tmp_213_var = _tmp_213_rule()) != null  // star_targets '='
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP1_20_ID, null);
    }

    // _tmp_21: yield_expr | star_expressions
    public Object _tmp_21_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_21, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_21_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_21_ID);
        }
        // visiting Alt: yield_expr
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
            // generated call: (yield_expr_var = yield_expr_rule()) != null  // yield_expr
            // node.name: None, call.assigned_variable: yield_expr_var
        // collecting vars: yield_expr_var, SSTNode
        //    vars: {'yield_expr_var': 'SSTNode'}
        SSTNode yield_expr_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: yield_expr
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(yield_expr)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
            // REMOVE result call (yield_expr_var = yield_expr_rule()) != null  // yield_expr
            (yield_expr_var = yield_expr_rule()) != null  // yield_expr
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: star_expressions
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // generated call: (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            // node.name: None, call.assigned_variable: star_expressions_var
        // collecting vars: star_expressions_var, SSTNode
        //    vars: {'star_expressions_var': 'SSTNode'}
        SSTNode star_expressions_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expressions)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // REMOVE result call (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            (star_expressions_var = star_expressions_rule()) != null  // star_expressions
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_21_ID, null);
    }

    // _tmp_22: TYPE_COMMENT
    public Object _tmp_22_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_22, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_22_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_22_ID);
        }
        // visiting Alt: TYPE_COMMENT
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            // node.name: None, call.assigned_variable: type_comment_var
        // collecting vars: type_comment_var, Token
        //    vars: {'type_comment_var': 'Token'}
        Token type_comment_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // REMOVE result call (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_22_ID, null);
    }

    // _tmp_23: yield_expr | star_expressions
    public Object _tmp_23_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_23, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_23_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_23_ID);
        }
        // visiting Alt: yield_expr
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
            // generated call: (yield_expr_var = yield_expr_rule()) != null  // yield_expr
            // node.name: None, call.assigned_variable: yield_expr_var
        // collecting vars: yield_expr_var, SSTNode
        //    vars: {'yield_expr_var': 'SSTNode'}
        SSTNode yield_expr_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: yield_expr
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(yield_expr)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
            // REMOVE result call (yield_expr_var = yield_expr_rule()) != null  // yield_expr
            (yield_expr_var = yield_expr_rule()) != null  // yield_expr
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: star_expressions
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // generated call: (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            // node.name: None, call.assigned_variable: star_expressions_var
        // collecting vars: star_expressions_var, SSTNode
        //    vars: {'star_expressions_var': 'SSTNode'}
        SSTNode star_expressions_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expressions)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // REMOVE result call (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            (star_expressions_var = star_expressions_rule()) != null  // star_expressions
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_23_ID, null);
    }

    // _loop0_25: ',' NAME
    public SSTNode[] _loop0_25_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_25, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ',' NAME
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: elem, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        //    vars: {'_literal': 'Token', 'name_var': 'Token'}
        Token _literal = null;
        Token name_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_25_ID, null);
    }

    // _gather_24: NAME _loop0_25
    public SSTNode[] _gather_24_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _gather_24, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, _GATHER_24_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, _GATHER_24_ID);
        }
        // visiting Alt: NAME _loop0_25
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: elem, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_25) - should work
            // generated call: (_loop0_25_var = _loop0_25_rule()) != null  // _loop0_25
            // node.name: seq, call.assigned_variable: _loop0_25_var
        // collecting vars: _loop0_25_var, SSTNode[]
        //    vars: {'name_var': 'Token', '_loop0_25_var': 'SSTNode[]'}
        SSTNode[] _loop0_25_var = null;
        Token name_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
            &&
            // TODO visiting JavaParserGeneratorNamedItem: _loop0_25
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_25)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_25) - should work
            // REMOVE result call (_loop0_25_var = _loop0_25_rule()) != null  // _loop0_25
            (_loop0_25_var = _loop0_25_rule()) != null  // _loop0_25
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _GATHER_24_ID, null);
    }

    // _loop0_27: ',' NAME
    public SSTNode[] _loop0_27_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_27, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ',' NAME
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: elem, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        //    vars: {'_literal': 'Token', 'name_var': 'Token'}
        Token _literal = null;
        Token name_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_27_ID, null);
    }

    // _gather_26: NAME _loop0_27
    public SSTNode[] _gather_26_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _gather_26, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, _GATHER_26_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, _GATHER_26_ID);
        }
        // visiting Alt: NAME _loop0_27
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: elem, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_27) - should work
            // generated call: (_loop0_27_var = _loop0_27_rule()) != null  // _loop0_27
            // node.name: seq, call.assigned_variable: _loop0_27_var
        // collecting vars: _loop0_27_var, SSTNode[]
        //    vars: {'name_var': 'Token', '_loop0_27_var': 'SSTNode[]'}
        SSTNode[] _loop0_27_var = null;
        Token name_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
            &&
            // TODO visiting JavaParserGeneratorNamedItem: _loop0_27
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_27)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_27) - should work
            // REMOVE result call (_loop0_27_var = _loop0_27_rule()) != null  // _loop0_27
            (_loop0_27_var = _loop0_27_rule()) != null  // _loop0_27
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _GATHER_26_ID, null);
    }

    // _tmp_28: ',' expression
    public Object _tmp_28_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_28, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_28_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_28_ID);
        }
        // visiting Alt: ',' expression
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: z, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        //    vars: {'_literal': 'Token', 'expression_var': 'SSTNode'}
        Token _literal = null;
        SSTNode expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_28_ID, null);
    }

    // _loop0_29: ('.' | '...')
    public SSTNode[] _loop0_29_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_29, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ('.' | '...')
        // TODO visiting JavaCallMakerVisitor.visit_Group(('.' | '...'))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('.' | '...')
            // generated call: (_tmp_214_var = _tmp_214_rule()) != null  // '.' | '...'
            // node.name: None, call.assigned_variable: _tmp_214_var
        // collecting vars: _tmp_214_var, None
        //    vars: {'_tmp_214_var': None}
        Object _tmp_214_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ('.' | '...')
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(('.' | '...'))
            // TODO visiting JavaCallMakerVisitor.visit_Group(('.' | '...'))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('.' | '...')
            // REMOVE result call (_tmp_214_var = _tmp_214_rule()) != null  // '.' | '...'
            (_tmp_214_var = _tmp_214_rule()) != null  // '.' | '...'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_29_ID, null);
    }

    // _loop1_30: ('.' | '...')
    public SSTNode[] _loop1_30_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_30, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ('.' | '...')
        // TODO visiting JavaCallMakerVisitor.visit_Group(('.' | '...'))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('.' | '...')
            // generated call: (_tmp_215_var = _tmp_215_rule()) != null  // '.' | '...'
            // node.name: None, call.assigned_variable: _tmp_215_var
        // collecting vars: _tmp_215_var, None
        //    vars: {'_tmp_215_var': None}
        Object _tmp_215_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ('.' | '...')
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(('.' | '...'))
            // TODO visiting JavaCallMakerVisitor.visit_Group(('.' | '...'))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('.' | '...')
            // REMOVE result call (_tmp_215_var = _tmp_215_rule()) != null  // '.' | '...'
            (_tmp_215_var = _tmp_215_rule()) != null  // '.' | '...'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP1_30_ID, null);
    }

    // _tmp_31: ','
    public Object _tmp_31_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_31, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_31_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_31_ID);
        }
        // visiting Alt: ','
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        Token _literal = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_31_ID, null);
    }

    // _loop0_33: ',' import_from_as_name
    public SSTNode[] _loop0_33_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_33, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ',' import_from_as_name
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_as_name) - should work
        // TODO replacing alias_ty --> SSTNode
            // generated call: (import_from_as_name_var = import_from_as_name_rule()) != null  // import_from_as_name
            // node.name: elem, call.assigned_variable: import_from_as_name_var
        // collecting vars: import_from_as_name_var, SSTNode
        //    vars: {'_literal': 'Token', 'import_from_as_name_var': 'SSTNode'}
        Token _literal = null;
        SSTNode import_from_as_name_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: import_from_as_name
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(import_from_as_name)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_as_name) - should work
            // TODO replacing alias_ty --> SSTNode
            // REMOVE result call (import_from_as_name_var = import_from_as_name_rule()) != null  // import_from_as_name
            (import_from_as_name_var = import_from_as_name_rule()) != null  // import_from_as_name
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_33_ID, null);
    }

    // _gather_32: import_from_as_name _loop0_33
    public SSTNode[] _gather_32_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _gather_32, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, _GATHER_32_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, _GATHER_32_ID);
        }
        // visiting Alt: import_from_as_name _loop0_33
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_as_name) - should work
        // TODO replacing alias_ty --> SSTNode
            // generated call: (import_from_as_name_var = import_from_as_name_rule()) != null  // import_from_as_name
            // node.name: elem, call.assigned_variable: import_from_as_name_var
        // collecting vars: import_from_as_name_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_33) - should work
            // generated call: (_loop0_33_var = _loop0_33_rule()) != null  // _loop0_33
            // node.name: seq, call.assigned_variable: _loop0_33_var
        // collecting vars: _loop0_33_var, SSTNode[]
        //    vars: {'import_from_as_name_var': 'SSTNode', '_loop0_33_var': 'SSTNode[]'}
        SSTNode[] _loop0_33_var = null;
        SSTNode import_from_as_name_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: import_from_as_name
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(import_from_as_name)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_as_name) - should work
            // TODO replacing alias_ty --> SSTNode
            // REMOVE result call (import_from_as_name_var = import_from_as_name_rule()) != null  // import_from_as_name
            (import_from_as_name_var = import_from_as_name_rule()) != null  // import_from_as_name
            &&
            // TODO visiting JavaParserGeneratorNamedItem: _loop0_33
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_33)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_33) - should work
            // REMOVE result call (_loop0_33_var = _loop0_33_rule()) != null  // _loop0_33
            (_loop0_33_var = _loop0_33_rule()) != null  // _loop0_33
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _GATHER_32_ID, null);
    }

    // _tmp_34: 'as' NAME
    public Object _tmp_34_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_34, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_34_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_34_ID);
        }
        // visiting Alt: 'as' NAME
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
            // generated call: (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: z, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        //    vars: {'_keyword': 'Token', 'name_var': 'Token'}
        Token _keyword = null;
        Token name_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'as'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('as')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
            // REMOVE result call (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_34_ID, null);
    }

    // _loop0_36: ',' dotted_as_name
    public SSTNode[] _loop0_36_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_36, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ',' dotted_as_name
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_as_name) - should work
        // TODO replacing alias_ty --> SSTNode
            // generated call: (dotted_as_name_var = dotted_as_name_rule()) != null  // dotted_as_name
            // node.name: elem, call.assigned_variable: dotted_as_name_var
        // collecting vars: dotted_as_name_var, SSTNode
        //    vars: {'_literal': 'Token', 'dotted_as_name_var': 'SSTNode'}
        Token _literal = null;
        SSTNode dotted_as_name_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: dotted_as_name
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(dotted_as_name)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_as_name) - should work
            // TODO replacing alias_ty --> SSTNode
            // REMOVE result call (dotted_as_name_var = dotted_as_name_rule()) != null  // dotted_as_name
            (dotted_as_name_var = dotted_as_name_rule()) != null  // dotted_as_name
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_36_ID, null);
    }

    // _gather_35: dotted_as_name _loop0_36
    public SSTNode[] _gather_35_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _gather_35, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, _GATHER_35_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, _GATHER_35_ID);
        }
        // visiting Alt: dotted_as_name _loop0_36
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_as_name) - should work
        // TODO replacing alias_ty --> SSTNode
            // generated call: (dotted_as_name_var = dotted_as_name_rule()) != null  // dotted_as_name
            // node.name: elem, call.assigned_variable: dotted_as_name_var
        // collecting vars: dotted_as_name_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_36) - should work
            // generated call: (_loop0_36_var = _loop0_36_rule()) != null  // _loop0_36
            // node.name: seq, call.assigned_variable: _loop0_36_var
        // collecting vars: _loop0_36_var, SSTNode[]
        //    vars: {'dotted_as_name_var': 'SSTNode', '_loop0_36_var': 'SSTNode[]'}
        SSTNode[] _loop0_36_var = null;
        SSTNode dotted_as_name_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: dotted_as_name
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(dotted_as_name)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_as_name) - should work
            // TODO replacing alias_ty --> SSTNode
            // REMOVE result call (dotted_as_name_var = dotted_as_name_rule()) != null  // dotted_as_name
            (dotted_as_name_var = dotted_as_name_rule()) != null  // dotted_as_name
            &&
            // TODO visiting JavaParserGeneratorNamedItem: _loop0_36
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_36)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_36) - should work
            // REMOVE result call (_loop0_36_var = _loop0_36_rule()) != null  // _loop0_36
            (_loop0_36_var = _loop0_36_rule()) != null  // _loop0_36
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _GATHER_35_ID, null);
    }

    // _tmp_37: 'as' NAME
    public Object _tmp_37_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_37, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_37_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_37_ID);
        }
        // visiting Alt: 'as' NAME
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
            // generated call: (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: z, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        //    vars: {'_keyword': 'Token', 'name_var': 'Token'}
        Token _keyword = null;
        Token name_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'as'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('as')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
            // REMOVE result call (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_37_ID, null);
    }

    // _tmp_38: else_block
    public Object _tmp_38_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_38, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_38_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_38_ID);
        }
        // visiting Alt: else_block
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
            // generated call: (else_block_var = else_block_rule()) != null  // else_block
            // node.name: None, call.assigned_variable: else_block_var
        // collecting vars: else_block_var, SSTNode[]
        //    vars: {'else_block_var': 'SSTNode[]'}
        SSTNode[] else_block_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: else_block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(else_block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
            // REMOVE result call (else_block_var = else_block_rule()) != null  // else_block
            (else_block_var = else_block_rule()) != null  // else_block
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_38_ID, null);
    }

    // _tmp_39: else_block
    public Object _tmp_39_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_39, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_39_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_39_ID);
        }
        // visiting Alt: else_block
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
            // generated call: (else_block_var = else_block_rule()) != null  // else_block
            // node.name: None, call.assigned_variable: else_block_var
        // collecting vars: else_block_var, SSTNode[]
        //    vars: {'else_block_var': 'SSTNode[]'}
        SSTNode[] else_block_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: else_block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(else_block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
            // REMOVE result call (else_block_var = else_block_rule()) != null  // else_block
            (else_block_var = else_block_rule()) != null  // else_block
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_39_ID, null);
    }

    // _tmp_40: else_block
    public Object _tmp_40_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_40, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_40_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_40_ID);
        }
        // visiting Alt: else_block
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
            // generated call: (else_block_var = else_block_rule()) != null  // else_block
            // node.name: None, call.assigned_variable: else_block_var
        // collecting vars: else_block_var, SSTNode[]
        //    vars: {'else_block_var': 'SSTNode[]'}
        SSTNode[] else_block_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: else_block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(else_block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
            // REMOVE result call (else_block_var = else_block_rule()) != null  // else_block
            (else_block_var = else_block_rule()) != null  // else_block
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_40_ID, null);
    }

    // _tmp_41: TYPE_COMMENT
    public Object _tmp_41_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_41, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_41_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_41_ID);
        }
        // visiting Alt: TYPE_COMMENT
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            // node.name: None, call.assigned_variable: type_comment_var
        // collecting vars: type_comment_var, Token
        //    vars: {'type_comment_var': 'Token'}
        Token type_comment_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // REMOVE result call (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_41_ID, null);
    }

    // _tmp_42: else_block
    public Object _tmp_42_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_42, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_42_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_42_ID);
        }
        // visiting Alt: else_block
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
            // generated call: (else_block_var = else_block_rule()) != null  // else_block
            // node.name: None, call.assigned_variable: else_block_var
        // collecting vars: else_block_var, SSTNode[]
        //    vars: {'else_block_var': 'SSTNode[]'}
        SSTNode[] else_block_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: else_block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(else_block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
            // REMOVE result call (else_block_var = else_block_rule()) != null  // else_block
            (else_block_var = else_block_rule()) != null  // else_block
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_42_ID, null);
    }

    // _tmp_43: TYPE_COMMENT
    public Object _tmp_43_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_43, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_43_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_43_ID);
        }
        // visiting Alt: TYPE_COMMENT
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            // node.name: None, call.assigned_variable: type_comment_var
        // collecting vars: type_comment_var, Token
        //    vars: {'type_comment_var': 'Token'}
        Token type_comment_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // REMOVE result call (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_43_ID, null);
    }

    // _tmp_44: else_block
    public Object _tmp_44_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_44, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_44_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_44_ID);
        }
        // visiting Alt: else_block
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
            // generated call: (else_block_var = else_block_rule()) != null  // else_block
            // node.name: None, call.assigned_variable: else_block_var
        // collecting vars: else_block_var, SSTNode[]
        //    vars: {'else_block_var': 'SSTNode[]'}
        SSTNode[] else_block_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: else_block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(else_block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
            // REMOVE result call (else_block_var = else_block_rule()) != null  // else_block
            (else_block_var = else_block_rule()) != null  // else_block
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_44_ID, null);
    }

    // _loop0_46: ',' with_item
    public SSTNode[] _loop0_46_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_46, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ',' with_item
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
        // TODO replacing withitem_ty --> SSTNode
            // generated call: (with_item_var = with_item_rule()) != null  // with_item
            // node.name: elem, call.assigned_variable: with_item_var
        // collecting vars: with_item_var, SSTNode
        //    vars: {'_literal': 'Token', 'with_item_var': 'SSTNode'}
        Token _literal = null;
        SSTNode with_item_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: with_item
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(with_item)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
            // TODO replacing withitem_ty --> SSTNode
            // REMOVE result call (with_item_var = with_item_rule()) != null  // with_item
            (with_item_var = with_item_rule()) != null  // with_item
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_46_ID, null);
    }

    // _gather_45: with_item _loop0_46
    public SSTNode[] _gather_45_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _gather_45, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, _GATHER_45_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, _GATHER_45_ID);
        }
        // visiting Alt: with_item _loop0_46
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
        // TODO replacing withitem_ty --> SSTNode
            // generated call: (with_item_var = with_item_rule()) != null  // with_item
            // node.name: elem, call.assigned_variable: with_item_var
        // collecting vars: with_item_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_46) - should work
            // generated call: (_loop0_46_var = _loop0_46_rule()) != null  // _loop0_46
            // node.name: seq, call.assigned_variable: _loop0_46_var
        // collecting vars: _loop0_46_var, SSTNode[]
        //    vars: {'with_item_var': 'SSTNode', '_loop0_46_var': 'SSTNode[]'}
        SSTNode[] _loop0_46_var = null;
        SSTNode with_item_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: with_item
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(with_item)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
            // TODO replacing withitem_ty --> SSTNode
            // REMOVE result call (with_item_var = with_item_rule()) != null  // with_item
            (with_item_var = with_item_rule()) != null  // with_item
            &&
            // TODO visiting JavaParserGeneratorNamedItem: _loop0_46
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_46)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_46) - should work
            // REMOVE result call (_loop0_46_var = _loop0_46_rule()) != null  // _loop0_46
            (_loop0_46_var = _loop0_46_rule()) != null  // _loop0_46
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _GATHER_45_ID, null);
    }

    // _loop0_48: ',' with_item
    public SSTNode[] _loop0_48_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_48, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ',' with_item
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
        // TODO replacing withitem_ty --> SSTNode
            // generated call: (with_item_var = with_item_rule()) != null  // with_item
            // node.name: elem, call.assigned_variable: with_item_var
        // collecting vars: with_item_var, SSTNode
        //    vars: {'_literal': 'Token', 'with_item_var': 'SSTNode'}
        Token _literal = null;
        SSTNode with_item_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: with_item
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(with_item)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
            // TODO replacing withitem_ty --> SSTNode
            // REMOVE result call (with_item_var = with_item_rule()) != null  // with_item
            (with_item_var = with_item_rule()) != null  // with_item
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_48_ID, null);
    }

    // _gather_47: with_item _loop0_48
    public SSTNode[] _gather_47_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _gather_47, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, _GATHER_47_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, _GATHER_47_ID);
        }
        // visiting Alt: with_item _loop0_48
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
        // TODO replacing withitem_ty --> SSTNode
            // generated call: (with_item_var = with_item_rule()) != null  // with_item
            // node.name: elem, call.assigned_variable: with_item_var
        // collecting vars: with_item_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_48) - should work
            // generated call: (_loop0_48_var = _loop0_48_rule()) != null  // _loop0_48
            // node.name: seq, call.assigned_variable: _loop0_48_var
        // collecting vars: _loop0_48_var, SSTNode[]
        //    vars: {'with_item_var': 'SSTNode', '_loop0_48_var': 'SSTNode[]'}
        SSTNode[] _loop0_48_var = null;
        SSTNode with_item_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: with_item
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(with_item)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
            // TODO replacing withitem_ty --> SSTNode
            // REMOVE result call (with_item_var = with_item_rule()) != null  // with_item
            (with_item_var = with_item_rule()) != null  // with_item
            &&
            // TODO visiting JavaParserGeneratorNamedItem: _loop0_48
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_48)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_48) - should work
            // REMOVE result call (_loop0_48_var = _loop0_48_rule()) != null  // _loop0_48
            (_loop0_48_var = _loop0_48_rule()) != null  // _loop0_48
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _GATHER_47_ID, null);
    }

    // _tmp_49: TYPE_COMMENT
    public Object _tmp_49_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_49, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_49_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_49_ID);
        }
        // visiting Alt: TYPE_COMMENT
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            // node.name: None, call.assigned_variable: type_comment_var
        // collecting vars: type_comment_var, Token
        //    vars: {'type_comment_var': 'Token'}
        Token type_comment_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // REMOVE result call (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_49_ID, null);
    }

    // _loop0_51: ',' with_item
    public SSTNode[] _loop0_51_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_51, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ',' with_item
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
        // TODO replacing withitem_ty --> SSTNode
            // generated call: (with_item_var = with_item_rule()) != null  // with_item
            // node.name: elem, call.assigned_variable: with_item_var
        // collecting vars: with_item_var, SSTNode
        //    vars: {'_literal': 'Token', 'with_item_var': 'SSTNode'}
        Token _literal = null;
        SSTNode with_item_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: with_item
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(with_item)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
            // TODO replacing withitem_ty --> SSTNode
            // REMOVE result call (with_item_var = with_item_rule()) != null  // with_item
            (with_item_var = with_item_rule()) != null  // with_item
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_51_ID, null);
    }

    // _gather_50: with_item _loop0_51
    public SSTNode[] _gather_50_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _gather_50, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, _GATHER_50_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, _GATHER_50_ID);
        }
        // visiting Alt: with_item _loop0_51
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
        // TODO replacing withitem_ty --> SSTNode
            // generated call: (with_item_var = with_item_rule()) != null  // with_item
            // node.name: elem, call.assigned_variable: with_item_var
        // collecting vars: with_item_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_51) - should work
            // generated call: (_loop0_51_var = _loop0_51_rule()) != null  // _loop0_51
            // node.name: seq, call.assigned_variable: _loop0_51_var
        // collecting vars: _loop0_51_var, SSTNode[]
        //    vars: {'with_item_var': 'SSTNode', '_loop0_51_var': 'SSTNode[]'}
        SSTNode[] _loop0_51_var = null;
        SSTNode with_item_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: with_item
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(with_item)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
            // TODO replacing withitem_ty --> SSTNode
            // REMOVE result call (with_item_var = with_item_rule()) != null  // with_item
            (with_item_var = with_item_rule()) != null  // with_item
            &&
            // TODO visiting JavaParserGeneratorNamedItem: _loop0_51
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_51)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_51) - should work
            // REMOVE result call (_loop0_51_var = _loop0_51_rule()) != null  // _loop0_51
            (_loop0_51_var = _loop0_51_rule()) != null  // _loop0_51
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _GATHER_50_ID, null);
    }

    // _loop0_53: ',' with_item
    public SSTNode[] _loop0_53_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_53, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ',' with_item
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
        // TODO replacing withitem_ty --> SSTNode
            // generated call: (with_item_var = with_item_rule()) != null  // with_item
            // node.name: elem, call.assigned_variable: with_item_var
        // collecting vars: with_item_var, SSTNode
        //    vars: {'_literal': 'Token', 'with_item_var': 'SSTNode'}
        Token _literal = null;
        SSTNode with_item_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: with_item
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(with_item)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
            // TODO replacing withitem_ty --> SSTNode
            // REMOVE result call (with_item_var = with_item_rule()) != null  // with_item
            (with_item_var = with_item_rule()) != null  // with_item
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_53_ID, null);
    }

    // _gather_52: with_item _loop0_53
    public SSTNode[] _gather_52_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _gather_52, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, _GATHER_52_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, _GATHER_52_ID);
        }
        // visiting Alt: with_item _loop0_53
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
        // TODO replacing withitem_ty --> SSTNode
            // generated call: (with_item_var = with_item_rule()) != null  // with_item
            // node.name: elem, call.assigned_variable: with_item_var
        // collecting vars: with_item_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_53) - should work
            // generated call: (_loop0_53_var = _loop0_53_rule()) != null  // _loop0_53
            // node.name: seq, call.assigned_variable: _loop0_53_var
        // collecting vars: _loop0_53_var, SSTNode[]
        //    vars: {'with_item_var': 'SSTNode', '_loop0_53_var': 'SSTNode[]'}
        SSTNode[] _loop0_53_var = null;
        SSTNode with_item_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: with_item
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(with_item)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
            // TODO replacing withitem_ty --> SSTNode
            // REMOVE result call (with_item_var = with_item_rule()) != null  // with_item
            (with_item_var = with_item_rule()) != null  // with_item
            &&
            // TODO visiting JavaParserGeneratorNamedItem: _loop0_53
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_53)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_53) - should work
            // REMOVE result call (_loop0_53_var = _loop0_53_rule()) != null  // _loop0_53
            (_loop0_53_var = _loop0_53_rule()) != null  // _loop0_53
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _GATHER_52_ID, null);
    }

    // _tmp_54: TYPE_COMMENT
    public Object _tmp_54_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_54, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_54_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_54_ID);
        }
        // visiting Alt: TYPE_COMMENT
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            // node.name: None, call.assigned_variable: type_comment_var
        // collecting vars: type_comment_var, Token
        //    vars: {'type_comment_var': 'Token'}
        Token type_comment_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // REMOVE result call (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_54_ID, null);
    }

    // _loop1_55: except_block
    public SSTNode[] _loop1_55_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_55, pos: " + pos);
            this.level++;
        }
        // visiting Alt: except_block
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(except_block) - should work
        // TODO replacing excepthandler_ty --> SSTNode
            // generated call: (except_block_var = except_block_rule()) != null  // except_block
            // node.name: None, call.assigned_variable: except_block_var
        // collecting vars: except_block_var, SSTNode
        //    vars: {'except_block_var': 'SSTNode'}
        SSTNode except_block_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: except_block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(except_block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(except_block) - should work
            // TODO replacing excepthandler_ty --> SSTNode
            // REMOVE result call (except_block_var = except_block_rule()) != null  // except_block
            (except_block_var = except_block_rule()) != null  // except_block
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP1_55_ID, null);
    }

    // _tmp_56: else_block
    public Object _tmp_56_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_56, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_56_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_56_ID);
        }
        // visiting Alt: else_block
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
            // generated call: (else_block_var = else_block_rule()) != null  // else_block
            // node.name: None, call.assigned_variable: else_block_var
        // collecting vars: else_block_var, SSTNode[]
        //    vars: {'else_block_var': 'SSTNode[]'}
        SSTNode[] else_block_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: else_block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(else_block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
            // REMOVE result call (else_block_var = else_block_rule()) != null  // else_block
            (else_block_var = else_block_rule()) != null  // else_block
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_56_ID, null);
    }

    // _tmp_57: finally_block
    public Object _tmp_57_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_57, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_57_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_57_ID);
        }
        // visiting Alt: finally_block
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(finally_block) - should work
            // generated call: (finally_block_var = finally_block_rule()) != null  // finally_block
            // node.name: None, call.assigned_variable: finally_block_var
        // collecting vars: finally_block_var, SSTNode[]
        //    vars: {'finally_block_var': 'SSTNode[]'}
        SSTNode[] finally_block_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: finally_block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(finally_block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(finally_block) - should work
            // REMOVE result call (finally_block_var = finally_block_rule()) != null  // finally_block
            (finally_block_var = finally_block_rule()) != null  // finally_block
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_57_ID, null);
    }

    // _tmp_58: 'as' NAME
    public Object _tmp_58_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_58, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_58_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_58_ID);
        }
        // visiting Alt: 'as' NAME
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
            // generated call: (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: z, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        //    vars: {'_keyword': 'Token', 'name_var': 'Token'}
        Token _keyword = null;
        Token name_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'as'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('as')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
            // REMOVE result call (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_58_ID, null);
    }

    // _loop1_59: case_block
    public SSTNode[] _loop1_59_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_59, pos: " + pos);
            this.level++;
        }
        // visiting Alt: case_block
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(case_block) - should work
        // TODO replacing match_case_ty --> SSTNode
            // generated call: (case_block_var = case_block_rule()) != null  // case_block
            // node.name: None, call.assigned_variable: case_block_var
        // collecting vars: case_block_var, SSTNode
        //    vars: {'case_block_var': 'SSTNode'}
        SSTNode case_block_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: case_block
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(case_block)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(case_block) - should work
            // TODO replacing match_case_ty --> SSTNode
            // REMOVE result call (case_block_var = case_block_rule()) != null  // case_block
            (case_block_var = case_block_rule()) != null  // case_block
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP1_59_ID, null);
    }

    // _loop0_61: '|' closed_pattern
    public SSTNode[] _loop0_61_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_61, pos: " + pos);
            this.level++;
        }
        // visiting Alt: '|' closed_pattern
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('|')
            // generated call: (_literal = expect(Token.Kind.VBAR)) != null  // token='|'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(closed_pattern) - should work
            // generated call: (closed_pattern_var = closed_pattern_rule()) != null  // closed_pattern
            // node.name: elem, call.assigned_variable: closed_pattern_var
        // collecting vars: closed_pattern_var, SSTNode
        //    vars: {'_literal': 'Token', 'closed_pattern_var': 'SSTNode'}
        Token _literal = null;
        SSTNode closed_pattern_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: '|'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('|')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('|')
            // REMOVE result call (_literal = expect(Token.Kind.VBAR)) != null  // token='|'
            (_literal = expect(Token.Kind.VBAR)) != null  // token='|'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: closed_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(closed_pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(closed_pattern) - should work
            // REMOVE result call (closed_pattern_var = closed_pattern_rule()) != null  // closed_pattern
            (closed_pattern_var = closed_pattern_rule()) != null  // closed_pattern
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_61_ID, null);
    }

    // _gather_60: closed_pattern _loop0_61
    public SSTNode[] _gather_60_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _gather_60, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, _GATHER_60_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, _GATHER_60_ID);
        }
        // visiting Alt: closed_pattern _loop0_61
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(closed_pattern) - should work
            // generated call: (closed_pattern_var = closed_pattern_rule()) != null  // closed_pattern
            // node.name: elem, call.assigned_variable: closed_pattern_var
        // collecting vars: closed_pattern_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_61) - should work
            // generated call: (_loop0_61_var = _loop0_61_rule()) != null  // _loop0_61
            // node.name: seq, call.assigned_variable: _loop0_61_var
        // collecting vars: _loop0_61_var, SSTNode[]
        //    vars: {'closed_pattern_var': 'SSTNode', '_loop0_61_var': 'SSTNode[]'}
        SSTNode[] _loop0_61_var = null;
        SSTNode closed_pattern_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: closed_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(closed_pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(closed_pattern) - should work
            // REMOVE result call (closed_pattern_var = closed_pattern_rule()) != null  // closed_pattern
            (closed_pattern_var = closed_pattern_rule()) != null  // closed_pattern
            &&
            // TODO visiting JavaParserGeneratorNamedItem: _loop0_61
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_61)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_61) - should work
            // REMOVE result call (_loop0_61_var = _loop0_61_rule()) != null  // _loop0_61
            (_loop0_61_var = _loop0_61_rule()) != null  // _loop0_61
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _GATHER_60_ID, null);
    }

    // _loop0_63: ',' maybe_star_pattern
    public SSTNode[] _loop0_63_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_63, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ',' maybe_star_pattern
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(maybe_star_pattern) - should work
            // generated call: (maybe_star_pattern_var = maybe_star_pattern_rule()) != null  // maybe_star_pattern
            // node.name: elem, call.assigned_variable: maybe_star_pattern_var
        // collecting vars: maybe_star_pattern_var, SSTNode
        //    vars: {'_literal': 'Token', 'maybe_star_pattern_var': 'SSTNode'}
        Token _literal = null;
        SSTNode maybe_star_pattern_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: maybe_star_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(maybe_star_pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(maybe_star_pattern) - should work
            // REMOVE result call (maybe_star_pattern_var = maybe_star_pattern_rule()) != null  // maybe_star_pattern
            (maybe_star_pattern_var = maybe_star_pattern_rule()) != null  // maybe_star_pattern
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_63_ID, null);
    }

    // _gather_62: maybe_star_pattern _loop0_63
    public SSTNode[] _gather_62_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _gather_62, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, _GATHER_62_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, _GATHER_62_ID);
        }
        // visiting Alt: maybe_star_pattern _loop0_63
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(maybe_star_pattern) - should work
            // generated call: (maybe_star_pattern_var = maybe_star_pattern_rule()) != null  // maybe_star_pattern
            // node.name: elem, call.assigned_variable: maybe_star_pattern_var
        // collecting vars: maybe_star_pattern_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_63) - should work
            // generated call: (_loop0_63_var = _loop0_63_rule()) != null  // _loop0_63
            // node.name: seq, call.assigned_variable: _loop0_63_var
        // collecting vars: _loop0_63_var, SSTNode[]
        //    vars: {'maybe_star_pattern_var': 'SSTNode', '_loop0_63_var': 'SSTNode[]'}
        SSTNode[] _loop0_63_var = null;
        SSTNode maybe_star_pattern_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: maybe_star_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(maybe_star_pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(maybe_star_pattern) - should work
            // REMOVE result call (maybe_star_pattern_var = maybe_star_pattern_rule()) != null  // maybe_star_pattern
            (maybe_star_pattern_var = maybe_star_pattern_rule()) != null  // maybe_star_pattern
            &&
            // TODO visiting JavaParserGeneratorNamedItem: _loop0_63
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_63)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_63) - should work
            // REMOVE result call (_loop0_63_var = _loop0_63_rule()) != null  // _loop0_63
            (_loop0_63_var = _loop0_63_rule()) != null  // _loop0_63
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _GATHER_62_ID, null);
    }

    // _tmp_64: capture_pattern | wildcard_pattern
    public Object _tmp_64_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_64, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_64_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_64_ID);
        }
        // visiting Alt: capture_pattern
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(capture_pattern) - should work
            // generated call: (capture_pattern_var = capture_pattern_rule()) != null  // capture_pattern
            // node.name: None, call.assigned_variable: capture_pattern_var
        // collecting vars: capture_pattern_var, SSTNode
        //    vars: {'capture_pattern_var': 'SSTNode'}
        SSTNode capture_pattern_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: capture_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(capture_pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(capture_pattern) - should work
            // REMOVE result call (capture_pattern_var = capture_pattern_rule()) != null  // capture_pattern
            (capture_pattern_var = capture_pattern_rule()) != null  // capture_pattern
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: wildcard_pattern
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(wildcard_pattern) - should work
            // generated call: (wildcard_pattern_var = wildcard_pattern_rule()) != null  // wildcard_pattern
            // node.name: None, call.assigned_variable: wildcard_pattern_var
        // collecting vars: wildcard_pattern_var, SSTNode
        //    vars: {'wildcard_pattern_var': 'SSTNode'}
        SSTNode wildcard_pattern_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: wildcard_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(wildcard_pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(wildcard_pattern) - should work
            // REMOVE result call (wildcard_pattern_var = wildcard_pattern_rule()) != null  // wildcard_pattern
            (wildcard_pattern_var = wildcard_pattern_rule()) != null  // wildcard_pattern
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_64_ID, null);
    }

    // _loop0_66: ',' key_value_pattern
    public SSTNode[] _loop0_66_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_66, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ',' key_value_pattern
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(key_value_pattern) - should work
        // TODO replacing KeyValuePair[] --> SSTNode[]
            // generated call: (key_value_pattern_var = key_value_pattern_rule()) != null  // key_value_pattern
            // node.name: elem, call.assigned_variable: key_value_pattern_var
        // collecting vars: key_value_pattern_var, SSTNode[]
        //    vars: {'_literal': 'Token', 'key_value_pattern_var': 'SSTNode[]'}
        Token _literal = null;
        SSTNode[] key_value_pattern_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: key_value_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(key_value_pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(key_value_pattern) - should work
            // TODO replacing KeyValuePair[] --> SSTNode[]
            // REMOVE result call (key_value_pattern_var = key_value_pattern_rule()) != null  // key_value_pattern
            (key_value_pattern_var = key_value_pattern_rule()) != null  // key_value_pattern
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_66_ID, null);
    }

    // _gather_65: key_value_pattern _loop0_66
    public SSTNode[] _gather_65_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _gather_65, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, _GATHER_65_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, _GATHER_65_ID);
        }
        // visiting Alt: key_value_pattern _loop0_66
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(key_value_pattern) - should work
        // TODO replacing KeyValuePair[] --> SSTNode[]
            // generated call: (key_value_pattern_var = key_value_pattern_rule()) != null  // key_value_pattern
            // node.name: elem, call.assigned_variable: key_value_pattern_var
        // collecting vars: key_value_pattern_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_66) - should work
            // generated call: (_loop0_66_var = _loop0_66_rule()) != null  // _loop0_66
            // node.name: seq, call.assigned_variable: _loop0_66_var
        // collecting vars: _loop0_66_var, SSTNode[]
        //    vars: {'key_value_pattern_var': 'SSTNode[]', '_loop0_66_var': 'SSTNode[]'}
        SSTNode[] _loop0_66_var = null;
        SSTNode[] key_value_pattern_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: key_value_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(key_value_pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(key_value_pattern) - should work
            // TODO replacing KeyValuePair[] --> SSTNode[]
            // REMOVE result call (key_value_pattern_var = key_value_pattern_rule()) != null  // key_value_pattern
            (key_value_pattern_var = key_value_pattern_rule()) != null  // key_value_pattern
            &&
            // TODO visiting JavaParserGeneratorNamedItem: _loop0_66
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_66)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_66) - should work
            // REMOVE result call (_loop0_66_var = _loop0_66_rule()) != null  // _loop0_66
            (_loop0_66_var = _loop0_66_rule()) != null  // _loop0_66
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _GATHER_65_ID, null);
    }

    // _tmp_67: literal_pattern | value_pattern
    public Object _tmp_67_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_67, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_67_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_67_ID);
        }
        // visiting Alt: literal_pattern
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(literal_pattern) - should work
            // generated call: (literal_pattern_var = literal_pattern_rule()) != null  // literal_pattern
            // node.name: None, call.assigned_variable: literal_pattern_var
        // collecting vars: literal_pattern_var, SSTNode
        //    vars: {'literal_pattern_var': 'SSTNode'}
        SSTNode literal_pattern_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: literal_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(literal_pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(literal_pattern) - should work
            // REMOVE result call (literal_pattern_var = literal_pattern_rule()) != null  // literal_pattern
            (literal_pattern_var = literal_pattern_rule()) != null  // literal_pattern
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: value_pattern
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(value_pattern) - should work
            // generated call: (value_pattern_var = value_pattern_rule()) != null  // value_pattern
            // node.name: None, call.assigned_variable: value_pattern_var
        // collecting vars: value_pattern_var, SSTNode
        //    vars: {'value_pattern_var': 'SSTNode'}
        SSTNode value_pattern_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: value_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(value_pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(value_pattern) - should work
            // REMOVE result call (value_pattern_var = value_pattern_rule()) != null  // value_pattern
            (value_pattern_var = value_pattern_rule()) != null  // value_pattern
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_67_ID, null);
    }

    // _loop0_69: ',' pattern
    public SSTNode[] _loop0_69_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_69, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ',' pattern
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
            // generated call: (pattern_var = pattern_rule()) != null  // pattern
            // node.name: elem, call.assigned_variable: pattern_var
        // collecting vars: pattern_var, SSTNode
        //    vars: {'_literal': 'Token', 'pattern_var': 'SSTNode'}
        Token _literal = null;
        SSTNode pattern_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
            // REMOVE result call (pattern_var = pattern_rule()) != null  // pattern
            (pattern_var = pattern_rule()) != null  // pattern
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_69_ID, null);
    }

    // _gather_68: pattern _loop0_69
    public SSTNode[] _gather_68_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _gather_68, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, _GATHER_68_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, _GATHER_68_ID);
        }
        // visiting Alt: pattern _loop0_69
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
            // generated call: (pattern_var = pattern_rule()) != null  // pattern
            // node.name: elem, call.assigned_variable: pattern_var
        // collecting vars: pattern_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_69) - should work
            // generated call: (_loop0_69_var = _loop0_69_rule()) != null  // _loop0_69
            // node.name: seq, call.assigned_variable: _loop0_69_var
        // collecting vars: _loop0_69_var, SSTNode[]
        //    vars: {'pattern_var': 'SSTNode', '_loop0_69_var': 'SSTNode[]'}
        SSTNode[] _loop0_69_var = null;
        SSTNode pattern_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
            // REMOVE result call (pattern_var = pattern_rule()) != null  // pattern
            (pattern_var = pattern_rule()) != null  // pattern
            &&
            // TODO visiting JavaParserGeneratorNamedItem: _loop0_69
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_69)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_69) - should work
            // REMOVE result call (_loop0_69_var = _loop0_69_rule()) != null  // _loop0_69
            (_loop0_69_var = _loop0_69_rule()) != null  // _loop0_69
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _GATHER_68_ID, null);
    }

    // _loop0_71: ',' keyword_pattern
    public SSTNode[] _loop0_71_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_71, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ',' keyword_pattern
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(keyword_pattern) - should work
        // TODO replacing keyword_ty --> SSTNode
            // generated call: (keyword_pattern_var = keyword_pattern_rule()) != null  // keyword_pattern
            // node.name: elem, call.assigned_variable: keyword_pattern_var
        // collecting vars: keyword_pattern_var, SSTNode
        //    vars: {'_literal': 'Token', 'keyword_pattern_var': 'SSTNode'}
        Token _literal = null;
        SSTNode keyword_pattern_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: keyword_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(keyword_pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(keyword_pattern) - should work
            // TODO replacing keyword_ty --> SSTNode
            // REMOVE result call (keyword_pattern_var = keyword_pattern_rule()) != null  // keyword_pattern
            (keyword_pattern_var = keyword_pattern_rule()) != null  // keyword_pattern
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_71_ID, null);
    }

    // _gather_70: keyword_pattern _loop0_71
    public SSTNode[] _gather_70_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _gather_70, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, _GATHER_70_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, _GATHER_70_ID);
        }
        // visiting Alt: keyword_pattern _loop0_71
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(keyword_pattern) - should work
        // TODO replacing keyword_ty --> SSTNode
            // generated call: (keyword_pattern_var = keyword_pattern_rule()) != null  // keyword_pattern
            // node.name: elem, call.assigned_variable: keyword_pattern_var
        // collecting vars: keyword_pattern_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_71) - should work
            // generated call: (_loop0_71_var = _loop0_71_rule()) != null  // _loop0_71
            // node.name: seq, call.assigned_variable: _loop0_71_var
        // collecting vars: _loop0_71_var, SSTNode[]
        //    vars: {'keyword_pattern_var': 'SSTNode', '_loop0_71_var': 'SSTNode[]'}
        SSTNode[] _loop0_71_var = null;
        SSTNode keyword_pattern_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: keyword_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(keyword_pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(keyword_pattern) - should work
            // TODO replacing keyword_ty --> SSTNode
            // REMOVE result call (keyword_pattern_var = keyword_pattern_rule()) != null  // keyword_pattern
            (keyword_pattern_var = keyword_pattern_rule()) != null  // keyword_pattern
            &&
            // TODO visiting JavaParserGeneratorNamedItem: _loop0_71
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_71)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_71) - should work
            // REMOVE result call (_loop0_71_var = _loop0_71_rule()) != null  // _loop0_71
            (_loop0_71_var = _loop0_71_rule()) != null  // _loop0_71
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _GATHER_70_ID, null);
    }

    // _tmp_72: star_expressions
    public Object _tmp_72_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_72, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_72_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_72_ID);
        }
        // visiting Alt: star_expressions
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // generated call: (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            // node.name: None, call.assigned_variable: star_expressions_var
        // collecting vars: star_expressions_var, SSTNode
        //    vars: {'star_expressions_var': 'SSTNode'}
        SSTNode star_expressions_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expressions)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // REMOVE result call (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            (star_expressions_var = star_expressions_rule()) != null  // star_expressions
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_72_ID, null);
    }

    // _tmp_73: 'from' expression
    public Object _tmp_73_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_73, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_73_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_73_ID);
        }
        // visiting Alt: 'from' expression
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('from')
            // generated call: (_keyword = expect(KEYWORD_FROM)) != null  // token='from'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: z, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        //    vars: {'_keyword': 'Token', 'expression_var': 'SSTNode'}
        Token _keyword = null;
        SSTNode expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'from'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('from')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('from')
            // REMOVE result call (_keyword = expect(KEYWORD_FROM)) != null  // token='from'
            (_keyword = expect(KEYWORD_FROM)) != null  // token='from'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_73_ID, null);
    }

    // _tmp_74: params
    public Object _tmp_74_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_74, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_74_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_74_ID);
        }
        // visiting Alt: params
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(params) - should work
        // TODO replacing arguments_ty --> SSTNode
            // generated call: (params_var = params_rule()) != null  // params
            // node.name: None, call.assigned_variable: params_var
        // collecting vars: params_var, SSTNode
        //    vars: {'params_var': 'SSTNode'}
        SSTNode params_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: params
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(params)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(params) - should work
            // TODO replacing arguments_ty --> SSTNode
            // REMOVE result call (params_var = params_rule()) != null  // params
            (params_var = params_rule()) != null  // params
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_74_ID, null);
    }

    // _tmp_75: '->' expression
    public Object _tmp_75_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_75, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_75_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_75_ID);
        }
        // visiting Alt: '->' expression
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('->')
            // generated call: (_literal = expect(Token.Kind.RARROW)) != null  // token='->'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: z, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        //    vars: {'_literal': 'Token', 'expression_var': 'SSTNode'}
        Token _literal = null;
        SSTNode expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '->'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('->')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('->')
            // REMOVE result call (_literal = expect(Token.Kind.RARROW)) != null  // token='->'
            (_literal = expect(Token.Kind.RARROW)) != null  // token='->'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_75_ID, null);
    }

    // _tmp_76: func_type_comment
    public Object _tmp_76_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_76, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_76_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_76_ID);
        }
        // visiting Alt: func_type_comment
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(func_type_comment) - should work
        // TODO replacing Token[] --> SSTNode[]
            // generated call: (func_type_comment_var = func_type_comment_rule()) != null  // func_type_comment
            // node.name: None, call.assigned_variable: func_type_comment_var
        // collecting vars: func_type_comment_var, SSTNode[]
        //    vars: {'func_type_comment_var': 'SSTNode[]'}
        SSTNode[] func_type_comment_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: func_type_comment
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(func_type_comment)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(func_type_comment) - should work
            // TODO replacing Token[] --> SSTNode[]
            // REMOVE result call (func_type_comment_var = func_type_comment_rule()) != null  // func_type_comment
            (func_type_comment_var = func_type_comment_rule()) != null  // func_type_comment
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_76_ID, null);
    }

    // _tmp_77: params
    public Object _tmp_77_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_77, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_77_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_77_ID);
        }
        // visiting Alt: params
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(params) - should work
        // TODO replacing arguments_ty --> SSTNode
            // generated call: (params_var = params_rule()) != null  // params
            // node.name: None, call.assigned_variable: params_var
        // collecting vars: params_var, SSTNode
        //    vars: {'params_var': 'SSTNode'}
        SSTNode params_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: params
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(params)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(params) - should work
            // TODO replacing arguments_ty --> SSTNode
            // REMOVE result call (params_var = params_rule()) != null  // params
            (params_var = params_rule()) != null  // params
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_77_ID, null);
    }

    // _tmp_78: '->' expression
    public Object _tmp_78_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_78, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_78_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_78_ID);
        }
        // visiting Alt: '->' expression
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('->')
            // generated call: (_literal = expect(Token.Kind.RARROW)) != null  // token='->'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: z, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        //    vars: {'_literal': 'Token', 'expression_var': 'SSTNode'}
        Token _literal = null;
        SSTNode expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '->'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('->')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('->')
            // REMOVE result call (_literal = expect(Token.Kind.RARROW)) != null  // token='->'
            (_literal = expect(Token.Kind.RARROW)) != null  // token='->'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_78_ID, null);
    }

    // _tmp_79: func_type_comment
    public Object _tmp_79_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_79, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_79_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_79_ID);
        }
        // visiting Alt: func_type_comment
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(func_type_comment) - should work
        // TODO replacing Token[] --> SSTNode[]
            // generated call: (func_type_comment_var = func_type_comment_rule()) != null  // func_type_comment
            // node.name: None, call.assigned_variable: func_type_comment_var
        // collecting vars: func_type_comment_var, SSTNode[]
        //    vars: {'func_type_comment_var': 'SSTNode[]'}
        SSTNode[] func_type_comment_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: func_type_comment
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(func_type_comment)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(func_type_comment) - should work
            // TODO replacing Token[] --> SSTNode[]
            // REMOVE result call (func_type_comment_var = func_type_comment_rule()) != null  // func_type_comment
            (func_type_comment_var = func_type_comment_rule()) != null  // func_type_comment
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_79_ID, null);
    }

    // _loop0_80: param_no_default
    public SSTNode[] _loop0_80_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_80, pos: " + pos);
            this.level++;
        }
        // visiting Alt: param_no_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            // node.name: None, call.assigned_variable: param_no_default_var
        // collecting vars: param_no_default_var, SSTNode
        //    vars: {'param_no_default_var': 'SSTNode'}
        SSTNode param_no_default_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            (param_no_default_var = param_no_default_rule()) != null  // param_no_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_80_ID, null);
    }

    // _loop0_81: param_with_default
    public SSTNode[] _loop0_81_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_81, pos: " + pos);
            this.level++;
        }
        // visiting Alt: param_with_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
        // TODO replacing NameDefaultPair[] --> SSTNode[]
            // generated call: (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            // node.name: None, call.assigned_variable: param_with_default_var
        // collecting vars: param_with_default_var, SSTNode[]
        //    vars: {'param_with_default_var': 'SSTNode[]'}
        SSTNode[] param_with_default_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: param_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_with_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
            // TODO replacing NameDefaultPair[] --> SSTNode[]
            // REMOVE result call (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            (param_with_default_var = param_with_default_rule()) != null  // param_with_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_81_ID, null);
    }

    // _tmp_82: star_etc
    public Object _tmp_82_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_82, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_82_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_82_ID);
        }
        // visiting Alt: star_etc
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_etc) - should work
        // TODO replacing StarEtc[] --> SSTNode[]
            // generated call: (star_etc_var = star_etc_rule()) != null  // star_etc
            // node.name: None, call.assigned_variable: star_etc_var
        // collecting vars: star_etc_var, SSTNode[]
        //    vars: {'star_etc_var': 'SSTNode[]'}
        SSTNode[] star_etc_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_etc
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_etc)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_etc) - should work
            // TODO replacing StarEtc[] --> SSTNode[]
            // REMOVE result call (star_etc_var = star_etc_rule()) != null  // star_etc
            (star_etc_var = star_etc_rule()) != null  // star_etc
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_82_ID, null);
    }

    // _loop0_83: param_with_default
    public SSTNode[] _loop0_83_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_83, pos: " + pos);
            this.level++;
        }
        // visiting Alt: param_with_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
        // TODO replacing NameDefaultPair[] --> SSTNode[]
            // generated call: (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            // node.name: None, call.assigned_variable: param_with_default_var
        // collecting vars: param_with_default_var, SSTNode[]
        //    vars: {'param_with_default_var': 'SSTNode[]'}
        SSTNode[] param_with_default_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: param_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_with_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
            // TODO replacing NameDefaultPair[] --> SSTNode[]
            // REMOVE result call (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            (param_with_default_var = param_with_default_rule()) != null  // param_with_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_83_ID, null);
    }

    // _tmp_84: star_etc
    public Object _tmp_84_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_84, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_84_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_84_ID);
        }
        // visiting Alt: star_etc
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_etc) - should work
        // TODO replacing StarEtc[] --> SSTNode[]
            // generated call: (star_etc_var = star_etc_rule()) != null  // star_etc
            // node.name: None, call.assigned_variable: star_etc_var
        // collecting vars: star_etc_var, SSTNode[]
        //    vars: {'star_etc_var': 'SSTNode[]'}
        SSTNode[] star_etc_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_etc
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_etc)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_etc) - should work
            // TODO replacing StarEtc[] --> SSTNode[]
            // REMOVE result call (star_etc_var = star_etc_rule()) != null  // star_etc
            (star_etc_var = star_etc_rule()) != null  // star_etc
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_84_ID, null);
    }

    // _loop1_85: param_no_default
    public SSTNode[] _loop1_85_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_85, pos: " + pos);
            this.level++;
        }
        // visiting Alt: param_no_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            // node.name: None, call.assigned_variable: param_no_default_var
        // collecting vars: param_no_default_var, SSTNode
        //    vars: {'param_no_default_var': 'SSTNode'}
        SSTNode param_no_default_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            (param_no_default_var = param_no_default_rule()) != null  // param_no_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP1_85_ID, null);
    }

    // _loop0_86: param_with_default
    public SSTNode[] _loop0_86_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_86, pos: " + pos);
            this.level++;
        }
        // visiting Alt: param_with_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
        // TODO replacing NameDefaultPair[] --> SSTNode[]
            // generated call: (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            // node.name: None, call.assigned_variable: param_with_default_var
        // collecting vars: param_with_default_var, SSTNode[]
        //    vars: {'param_with_default_var': 'SSTNode[]'}
        SSTNode[] param_with_default_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: param_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_with_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
            // TODO replacing NameDefaultPair[] --> SSTNode[]
            // REMOVE result call (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            (param_with_default_var = param_with_default_rule()) != null  // param_with_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_86_ID, null);
    }

    // _tmp_87: star_etc
    public Object _tmp_87_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_87, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_87_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_87_ID);
        }
        // visiting Alt: star_etc
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_etc) - should work
        // TODO replacing StarEtc[] --> SSTNode[]
            // generated call: (star_etc_var = star_etc_rule()) != null  // star_etc
            // node.name: None, call.assigned_variable: star_etc_var
        // collecting vars: star_etc_var, SSTNode[]
        //    vars: {'star_etc_var': 'SSTNode[]'}
        SSTNode[] star_etc_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_etc
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_etc)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_etc) - should work
            // TODO replacing StarEtc[] --> SSTNode[]
            // REMOVE result call (star_etc_var = star_etc_rule()) != null  // star_etc
            (star_etc_var = star_etc_rule()) != null  // star_etc
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_87_ID, null);
    }

    // _loop1_88: param_with_default
    public SSTNode[] _loop1_88_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_88, pos: " + pos);
            this.level++;
        }
        // visiting Alt: param_with_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
        // TODO replacing NameDefaultPair[] --> SSTNode[]
            // generated call: (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            // node.name: None, call.assigned_variable: param_with_default_var
        // collecting vars: param_with_default_var, SSTNode[]
        //    vars: {'param_with_default_var': 'SSTNode[]'}
        SSTNode[] param_with_default_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: param_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_with_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
            // TODO replacing NameDefaultPair[] --> SSTNode[]
            // REMOVE result call (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            (param_with_default_var = param_with_default_rule()) != null  // param_with_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP1_88_ID, null);
    }

    // _tmp_89: star_etc
    public Object _tmp_89_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_89, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_89_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_89_ID);
        }
        // visiting Alt: star_etc
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_etc) - should work
        // TODO replacing StarEtc[] --> SSTNode[]
            // generated call: (star_etc_var = star_etc_rule()) != null  // star_etc
            // node.name: None, call.assigned_variable: star_etc_var
        // collecting vars: star_etc_var, SSTNode[]
        //    vars: {'star_etc_var': 'SSTNode[]'}
        SSTNode[] star_etc_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_etc
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_etc)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_etc) - should work
            // TODO replacing StarEtc[] --> SSTNode[]
            // REMOVE result call (star_etc_var = star_etc_rule()) != null  // star_etc
            (star_etc_var = star_etc_rule()) != null  // star_etc
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_89_ID, null);
    }

    // _loop1_90: param_no_default
    public SSTNode[] _loop1_90_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_90, pos: " + pos);
            this.level++;
        }
        // visiting Alt: param_no_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            // node.name: None, call.assigned_variable: param_no_default_var
        // collecting vars: param_no_default_var, SSTNode
        //    vars: {'param_no_default_var': 'SSTNode'}
        SSTNode param_no_default_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            (param_no_default_var = param_no_default_rule()) != null  // param_no_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP1_90_ID, null);
    }

    // _loop1_91: param_no_default
    public SSTNode[] _loop1_91_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_91, pos: " + pos);
            this.level++;
        }
        // visiting Alt: param_no_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            // node.name: None, call.assigned_variable: param_no_default_var
        // collecting vars: param_no_default_var, SSTNode
        //    vars: {'param_no_default_var': 'SSTNode'}
        SSTNode param_no_default_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            (param_no_default_var = param_no_default_rule()) != null  // param_no_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP1_91_ID, null);
    }

    // _loop0_92: param_no_default
    public SSTNode[] _loop0_92_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_92, pos: " + pos);
            this.level++;
        }
        // visiting Alt: param_no_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            // node.name: None, call.assigned_variable: param_no_default_var
        // collecting vars: param_no_default_var, SSTNode
        //    vars: {'param_no_default_var': 'SSTNode'}
        SSTNode param_no_default_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            (param_no_default_var = param_no_default_rule()) != null  // param_no_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_92_ID, null);
    }

    // _loop1_93: param_with_default
    public SSTNode[] _loop1_93_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_93, pos: " + pos);
            this.level++;
        }
        // visiting Alt: param_with_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
        // TODO replacing NameDefaultPair[] --> SSTNode[]
            // generated call: (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            // node.name: None, call.assigned_variable: param_with_default_var
        // collecting vars: param_with_default_var, SSTNode[]
        //    vars: {'param_with_default_var': 'SSTNode[]'}
        SSTNode[] param_with_default_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: param_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_with_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
            // TODO replacing NameDefaultPair[] --> SSTNode[]
            // REMOVE result call (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            (param_with_default_var = param_with_default_rule()) != null  // param_with_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP1_93_ID, null);
    }

    // _loop0_94: param_no_default
    public SSTNode[] _loop0_94_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_94, pos: " + pos);
            this.level++;
        }
        // visiting Alt: param_no_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            // node.name: None, call.assigned_variable: param_no_default_var
        // collecting vars: param_no_default_var, SSTNode
        //    vars: {'param_no_default_var': 'SSTNode'}
        SSTNode param_no_default_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            (param_no_default_var = param_no_default_rule()) != null  // param_no_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_94_ID, null);
    }

    // _loop1_95: param_with_default
    public SSTNode[] _loop1_95_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_95, pos: " + pos);
            this.level++;
        }
        // visiting Alt: param_with_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
        // TODO replacing NameDefaultPair[] --> SSTNode[]
            // generated call: (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            // node.name: None, call.assigned_variable: param_with_default_var
        // collecting vars: param_with_default_var, SSTNode[]
        //    vars: {'param_with_default_var': 'SSTNode[]'}
        SSTNode[] param_with_default_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: param_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_with_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
            // TODO replacing NameDefaultPair[] --> SSTNode[]
            // REMOVE result call (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            (param_with_default_var = param_with_default_rule()) != null  // param_with_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP1_95_ID, null);
    }

    // _loop0_96: param_maybe_default
    public SSTNode[] _loop0_96_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_96, pos: " + pos);
            this.level++;
        }
        // visiting Alt: param_maybe_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_maybe_default) - should work
        // TODO replacing NameDefaultPair[] --> SSTNode[]
            // generated call: (param_maybe_default_var = param_maybe_default_rule()) != null  // param_maybe_default
            // node.name: None, call.assigned_variable: param_maybe_default_var
        // collecting vars: param_maybe_default_var, SSTNode[]
        //    vars: {'param_maybe_default_var': 'SSTNode[]'}
        SSTNode[] param_maybe_default_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: param_maybe_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_maybe_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_maybe_default) - should work
            // TODO replacing NameDefaultPair[] --> SSTNode[]
            // REMOVE result call (param_maybe_default_var = param_maybe_default_rule()) != null  // param_maybe_default
            (param_maybe_default_var = param_maybe_default_rule()) != null  // param_maybe_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_96_ID, null);
    }

    // _tmp_97: kwds
    public Object _tmp_97_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_97, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_97_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_97_ID);
        }
        // visiting Alt: kwds
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwds) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (kwds_var = kwds_rule()) != null  // kwds
            // node.name: None, call.assigned_variable: kwds_var
        // collecting vars: kwds_var, SSTNode
        //    vars: {'kwds_var': 'SSTNode'}
        SSTNode kwds_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: kwds
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kwds)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwds) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (kwds_var = kwds_rule()) != null  // kwds
            (kwds_var = kwds_rule()) != null  // kwds
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_97_ID, null);
    }

    // _loop1_98: param_maybe_default
    public SSTNode[] _loop1_98_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_98, pos: " + pos);
            this.level++;
        }
        // visiting Alt: param_maybe_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_maybe_default) - should work
        // TODO replacing NameDefaultPair[] --> SSTNode[]
            // generated call: (param_maybe_default_var = param_maybe_default_rule()) != null  // param_maybe_default
            // node.name: None, call.assigned_variable: param_maybe_default_var
        // collecting vars: param_maybe_default_var, SSTNode[]
        //    vars: {'param_maybe_default_var': 'SSTNode[]'}
        SSTNode[] param_maybe_default_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: param_maybe_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_maybe_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_maybe_default) - should work
            // TODO replacing NameDefaultPair[] --> SSTNode[]
            // REMOVE result call (param_maybe_default_var = param_maybe_default_rule()) != null  // param_maybe_default
            (param_maybe_default_var = param_maybe_default_rule()) != null  // param_maybe_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP1_98_ID, null);
    }

    // _tmp_99: kwds
    public Object _tmp_99_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_99, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_99_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_99_ID);
        }
        // visiting Alt: kwds
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwds) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (kwds_var = kwds_rule()) != null  // kwds
            // node.name: None, call.assigned_variable: kwds_var
        // collecting vars: kwds_var, SSTNode
        //    vars: {'kwds_var': 'SSTNode'}
        SSTNode kwds_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: kwds
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kwds)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwds) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (kwds_var = kwds_rule()) != null  // kwds
            (kwds_var = kwds_rule()) != null  // kwds
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_99_ID, null);
    }

    // _loop1_100: ('@' named_expression NEWLINE)
    public SSTNode[] _loop1_100_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_100, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ('@' named_expression NEWLINE)
        // TODO visiting JavaCallMakerVisitor.visit_Group(('@' named_expression NEWLINE))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('@' named_expression NEWLINE)
            // generated call: (_tmp_216_var = _tmp_216_rule()) != null  // '@' named_expression NEWLINE
            // node.name: None, call.assigned_variable: _tmp_216_var
        // collecting vars: _tmp_216_var, None
        //    vars: {'_tmp_216_var': None}
        Object _tmp_216_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ('@' named_expression NEWLINE)
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(('@' named_expression NEWLINE))
            // TODO visiting JavaCallMakerVisitor.visit_Group(('@' named_expression NEWLINE))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('@' named_expression NEWLINE)
            // REMOVE result call (_tmp_216_var = _tmp_216_rule()) != null  // '@' named_expression NEWLINE
            (_tmp_216_var = _tmp_216_rule()) != null  // '@' named_expression NEWLINE
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP1_100_ID, null);
    }

    // _tmp_101: '(' arguments? ')'
    public Object _tmp_101_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_101, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_101_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_101_ID);
        }
        // visiting Alt: '(' arguments? ')'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(arguments?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(arguments)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_217_var = _tmp_217_rule()) != null  // arguments
            // generated call: ((_opt_var = _tmp_217_rule()) != null || _opt_var == null)  // arguments?
            // node.name: z, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal_1, Token
        //    vars: {'_literal': 'Token', '_opt_var': None, '_literal_1': 'Token'}
        Token _literal = null;
        Token _literal_1 = null;
        Object _opt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            &&
            // TODO visiting JavaParserGeneratorNamedItem: arguments?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(arguments?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(arguments?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(arguments)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_217_var = _tmp_217_rule()) != null  // arguments
            // REMOVE result call ((_opt_var = _tmp_217_rule()) != null || _opt_var == null)  // arguments?
            ((_opt_var = _tmp_217_rule()) != null || _opt_var == null)  // arguments?
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_101_ID, null);
    }

    // _loop1_102: (',' star_expression)
    public SSTNode[] _loop1_102_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_102, pos: " + pos);
            this.level++;
        }
        // visiting Alt: (',' star_expression)
        // TODO visiting JavaCallMakerVisitor.visit_Group((',' star_expression))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' star_expression)
            // generated call: (_tmp_218_var = _tmp_218_rule()) != null  // ',' star_expression
            // node.name: None, call.assigned_variable: _tmp_218_var
        // collecting vars: _tmp_218_var, None
        //    vars: {'_tmp_218_var': None}
        Object _tmp_218_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: (',' star_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((',' star_expression))
            // TODO visiting JavaCallMakerVisitor.visit_Group((',' star_expression))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' star_expression)
            // REMOVE result call (_tmp_218_var = _tmp_218_rule()) != null  // ',' star_expression
            (_tmp_218_var = _tmp_218_rule()) != null  // ',' star_expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP1_102_ID, null);
    }

    // _tmp_103: ','
    public Object _tmp_103_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_103, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_103_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_103_ID);
        }
        // visiting Alt: ','
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        Token _literal = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_103_ID, null);
    }

    // _loop0_105: ',' star_named_expression
    public SSTNode[] _loop0_105_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_105, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ',' star_named_expression
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
            // generated call: (star_named_expression_var = star_named_expression_rule()) != null  // star_named_expression
            // node.name: elem, call.assigned_variable: star_named_expression_var
        // collecting vars: star_named_expression_var, SSTNode
        //    vars: {'_literal': 'Token', 'star_named_expression_var': 'SSTNode'}
        Token _literal = null;
        SSTNode star_named_expression_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: star_named_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_named_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
            // REMOVE result call (star_named_expression_var = star_named_expression_rule()) != null  // star_named_expression
            (star_named_expression_var = star_named_expression_rule()) != null  // star_named_expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_105_ID, null);
    }

    // _gather_104: star_named_expression _loop0_105
    public SSTNode[] _gather_104_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _gather_104, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, _GATHER_104_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, _GATHER_104_ID);
        }
        // visiting Alt: star_named_expression _loop0_105
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
            // generated call: (star_named_expression_var = star_named_expression_rule()) != null  // star_named_expression
            // node.name: elem, call.assigned_variable: star_named_expression_var
        // collecting vars: star_named_expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_105) - should work
            // generated call: (_loop0_105_var = _loop0_105_rule()) != null  // _loop0_105
            // node.name: seq, call.assigned_variable: _loop0_105_var
        // collecting vars: _loop0_105_var, SSTNode[]
        //    vars: {'star_named_expression_var': 'SSTNode', '_loop0_105_var': 'SSTNode[]'}
        SSTNode[] _loop0_105_var = null;
        SSTNode star_named_expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_named_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_named_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
            // REMOVE result call (star_named_expression_var = star_named_expression_rule()) != null  // star_named_expression
            (star_named_expression_var = star_named_expression_rule()) != null  // star_named_expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: _loop0_105
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_105)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_105) - should work
            // REMOVE result call (_loop0_105_var = _loop0_105_rule()) != null  // _loop0_105
            (_loop0_105_var = _loop0_105_rule()) != null  // _loop0_105
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _GATHER_104_ID, null);
    }

    // _tmp_106: ','
    public Object _tmp_106_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_106, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_106_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_106_ID);
        }
        // visiting Alt: ','
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        Token _literal = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_106_ID, null);
    }

    // _loop1_107: (',' expression)
    public SSTNode[] _loop1_107_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_107, pos: " + pos);
            this.level++;
        }
        // visiting Alt: (',' expression)
        // TODO visiting JavaCallMakerVisitor.visit_Group((',' expression))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' expression)
            // generated call: (_tmp_219_var = _tmp_219_rule()) != null  // ',' expression
            // node.name: None, call.assigned_variable: _tmp_219_var
        // collecting vars: _tmp_219_var, None
        //    vars: {'_tmp_219_var': None}
        Object _tmp_219_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: (',' expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((',' expression))
            // TODO visiting JavaCallMakerVisitor.visit_Group((',' expression))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' expression)
            // REMOVE result call (_tmp_219_var = _tmp_219_rule()) != null  // ',' expression
            (_tmp_219_var = _tmp_219_rule()) != null  // ',' expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP1_107_ID, null);
    }

    // _tmp_108: ','
    public Object _tmp_108_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_108, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_108_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_108_ID);
        }
        // visiting Alt: ','
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        Token _literal = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_108_ID, null);
    }

    // _tmp_109: lambda_params
    public Object _tmp_109_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_109, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_109_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_109_ID);
        }
        // visiting Alt: lambda_params
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_params) - should work
        // TODO replacing arguments_ty --> SSTNode
            // generated call: (lambda_params_var = lambda_params_rule()) != null  // lambda_params
            // node.name: None, call.assigned_variable: lambda_params_var
        // collecting vars: lambda_params_var, SSTNode
        //    vars: {'lambda_params_var': 'SSTNode'}
        SSTNode lambda_params_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_params
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_params)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_params) - should work
            // TODO replacing arguments_ty --> SSTNode
            // REMOVE result call (lambda_params_var = lambda_params_rule()) != null  // lambda_params
            (lambda_params_var = lambda_params_rule()) != null  // lambda_params
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_109_ID, null);
    }

    // _loop0_110: lambda_param_no_default
    public SSTNode[] _loop0_110_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_110, pos: " + pos);
            this.level++;
        }
        // visiting Alt: lambda_param_no_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            // node.name: None, call.assigned_variable: lambda_param_no_default_var
        // collecting vars: lambda_param_no_default_var, SSTNode
        //    vars: {'lambda_param_no_default_var': 'SSTNode'}
        SSTNode lambda_param_no_default_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_110_ID, null);
    }

    // _loop0_111: lambda_param_with_default
    public SSTNode[] _loop0_111_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_111, pos: " + pos);
            this.level++;
        }
        // visiting Alt: lambda_param_with_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
        // TODO replacing NameDefaultPair[] --> SSTNode[]
            // generated call: (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            // node.name: None, call.assigned_variable: lambda_param_with_default_var
        // collecting vars: lambda_param_with_default_var, SSTNode[]
        //    vars: {'lambda_param_with_default_var': 'SSTNode[]'}
        SSTNode[] lambda_param_with_default_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_with_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
            // TODO replacing NameDefaultPair[] --> SSTNode[]
            // REMOVE result call (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_111_ID, null);
    }

    // _tmp_112: lambda_star_etc
    public Object _tmp_112_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_112, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_112_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_112_ID);
        }
        // visiting Alt: lambda_star_etc
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_star_etc) - should work
        // TODO replacing StarEtc[] --> SSTNode[]
            // generated call: (lambda_star_etc_var = lambda_star_etc_rule()) != null  // lambda_star_etc
            // node.name: None, call.assigned_variable: lambda_star_etc_var
        // collecting vars: lambda_star_etc_var, SSTNode[]
        //    vars: {'lambda_star_etc_var': 'SSTNode[]'}
        SSTNode[] lambda_star_etc_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_star_etc
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_star_etc)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_star_etc) - should work
            // TODO replacing StarEtc[] --> SSTNode[]
            // REMOVE result call (lambda_star_etc_var = lambda_star_etc_rule()) != null  // lambda_star_etc
            (lambda_star_etc_var = lambda_star_etc_rule()) != null  // lambda_star_etc
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_112_ID, null);
    }

    // _loop0_113: lambda_param_with_default
    public SSTNode[] _loop0_113_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_113, pos: " + pos);
            this.level++;
        }
        // visiting Alt: lambda_param_with_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
        // TODO replacing NameDefaultPair[] --> SSTNode[]
            // generated call: (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            // node.name: None, call.assigned_variable: lambda_param_with_default_var
        // collecting vars: lambda_param_with_default_var, SSTNode[]
        //    vars: {'lambda_param_with_default_var': 'SSTNode[]'}
        SSTNode[] lambda_param_with_default_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_with_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
            // TODO replacing NameDefaultPair[] --> SSTNode[]
            // REMOVE result call (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_113_ID, null);
    }

    // _tmp_114: lambda_star_etc
    public Object _tmp_114_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_114, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_114_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_114_ID);
        }
        // visiting Alt: lambda_star_etc
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_star_etc) - should work
        // TODO replacing StarEtc[] --> SSTNode[]
            // generated call: (lambda_star_etc_var = lambda_star_etc_rule()) != null  // lambda_star_etc
            // node.name: None, call.assigned_variable: lambda_star_etc_var
        // collecting vars: lambda_star_etc_var, SSTNode[]
        //    vars: {'lambda_star_etc_var': 'SSTNode[]'}
        SSTNode[] lambda_star_etc_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_star_etc
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_star_etc)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_star_etc) - should work
            // TODO replacing StarEtc[] --> SSTNode[]
            // REMOVE result call (lambda_star_etc_var = lambda_star_etc_rule()) != null  // lambda_star_etc
            (lambda_star_etc_var = lambda_star_etc_rule()) != null  // lambda_star_etc
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_114_ID, null);
    }

    // _loop1_115: lambda_param_no_default
    public SSTNode[] _loop1_115_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_115, pos: " + pos);
            this.level++;
        }
        // visiting Alt: lambda_param_no_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            // node.name: None, call.assigned_variable: lambda_param_no_default_var
        // collecting vars: lambda_param_no_default_var, SSTNode
        //    vars: {'lambda_param_no_default_var': 'SSTNode'}
        SSTNode lambda_param_no_default_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP1_115_ID, null);
    }

    // _loop0_116: lambda_param_with_default
    public SSTNode[] _loop0_116_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_116, pos: " + pos);
            this.level++;
        }
        // visiting Alt: lambda_param_with_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
        // TODO replacing NameDefaultPair[] --> SSTNode[]
            // generated call: (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            // node.name: None, call.assigned_variable: lambda_param_with_default_var
        // collecting vars: lambda_param_with_default_var, SSTNode[]
        //    vars: {'lambda_param_with_default_var': 'SSTNode[]'}
        SSTNode[] lambda_param_with_default_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_with_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
            // TODO replacing NameDefaultPair[] --> SSTNode[]
            // REMOVE result call (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_116_ID, null);
    }

    // _tmp_117: lambda_star_etc
    public Object _tmp_117_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_117, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_117_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_117_ID);
        }
        // visiting Alt: lambda_star_etc
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_star_etc) - should work
        // TODO replacing StarEtc[] --> SSTNode[]
            // generated call: (lambda_star_etc_var = lambda_star_etc_rule()) != null  // lambda_star_etc
            // node.name: None, call.assigned_variable: lambda_star_etc_var
        // collecting vars: lambda_star_etc_var, SSTNode[]
        //    vars: {'lambda_star_etc_var': 'SSTNode[]'}
        SSTNode[] lambda_star_etc_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_star_etc
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_star_etc)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_star_etc) - should work
            // TODO replacing StarEtc[] --> SSTNode[]
            // REMOVE result call (lambda_star_etc_var = lambda_star_etc_rule()) != null  // lambda_star_etc
            (lambda_star_etc_var = lambda_star_etc_rule()) != null  // lambda_star_etc
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_117_ID, null);
    }

    // _loop1_118: lambda_param_with_default
    public SSTNode[] _loop1_118_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_118, pos: " + pos);
            this.level++;
        }
        // visiting Alt: lambda_param_with_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
        // TODO replacing NameDefaultPair[] --> SSTNode[]
            // generated call: (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            // node.name: None, call.assigned_variable: lambda_param_with_default_var
        // collecting vars: lambda_param_with_default_var, SSTNode[]
        //    vars: {'lambda_param_with_default_var': 'SSTNode[]'}
        SSTNode[] lambda_param_with_default_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_with_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
            // TODO replacing NameDefaultPair[] --> SSTNode[]
            // REMOVE result call (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP1_118_ID, null);
    }

    // _tmp_119: lambda_star_etc
    public Object _tmp_119_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_119, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_119_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_119_ID);
        }
        // visiting Alt: lambda_star_etc
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_star_etc) - should work
        // TODO replacing StarEtc[] --> SSTNode[]
            // generated call: (lambda_star_etc_var = lambda_star_etc_rule()) != null  // lambda_star_etc
            // node.name: None, call.assigned_variable: lambda_star_etc_var
        // collecting vars: lambda_star_etc_var, SSTNode[]
        //    vars: {'lambda_star_etc_var': 'SSTNode[]'}
        SSTNode[] lambda_star_etc_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_star_etc
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_star_etc)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_star_etc) - should work
            // TODO replacing StarEtc[] --> SSTNode[]
            // REMOVE result call (lambda_star_etc_var = lambda_star_etc_rule()) != null  // lambda_star_etc
            (lambda_star_etc_var = lambda_star_etc_rule()) != null  // lambda_star_etc
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_119_ID, null);
    }

    // _loop1_120: lambda_param_no_default
    public SSTNode[] _loop1_120_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_120, pos: " + pos);
            this.level++;
        }
        // visiting Alt: lambda_param_no_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            // node.name: None, call.assigned_variable: lambda_param_no_default_var
        // collecting vars: lambda_param_no_default_var, SSTNode
        //    vars: {'lambda_param_no_default_var': 'SSTNode'}
        SSTNode lambda_param_no_default_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP1_120_ID, null);
    }

    // _loop1_121: lambda_param_no_default
    public SSTNode[] _loop1_121_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_121, pos: " + pos);
            this.level++;
        }
        // visiting Alt: lambda_param_no_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            // node.name: None, call.assigned_variable: lambda_param_no_default_var
        // collecting vars: lambda_param_no_default_var, SSTNode
        //    vars: {'lambda_param_no_default_var': 'SSTNode'}
        SSTNode lambda_param_no_default_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP1_121_ID, null);
    }

    // _loop0_122: lambda_param_no_default
    public SSTNode[] _loop0_122_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_122, pos: " + pos);
            this.level++;
        }
        // visiting Alt: lambda_param_no_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            // node.name: None, call.assigned_variable: lambda_param_no_default_var
        // collecting vars: lambda_param_no_default_var, SSTNode
        //    vars: {'lambda_param_no_default_var': 'SSTNode'}
        SSTNode lambda_param_no_default_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_122_ID, null);
    }

    // _loop1_123: lambda_param_with_default
    public SSTNode[] _loop1_123_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_123, pos: " + pos);
            this.level++;
        }
        // visiting Alt: lambda_param_with_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
        // TODO replacing NameDefaultPair[] --> SSTNode[]
            // generated call: (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            // node.name: None, call.assigned_variable: lambda_param_with_default_var
        // collecting vars: lambda_param_with_default_var, SSTNode[]
        //    vars: {'lambda_param_with_default_var': 'SSTNode[]'}
        SSTNode[] lambda_param_with_default_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_with_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
            // TODO replacing NameDefaultPair[] --> SSTNode[]
            // REMOVE result call (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP1_123_ID, null);
    }

    // _loop0_124: lambda_param_no_default
    public SSTNode[] _loop0_124_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_124, pos: " + pos);
            this.level++;
        }
        // visiting Alt: lambda_param_no_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            // node.name: None, call.assigned_variable: lambda_param_no_default_var
        // collecting vars: lambda_param_no_default_var, SSTNode
        //    vars: {'lambda_param_no_default_var': 'SSTNode'}
        SSTNode lambda_param_no_default_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_124_ID, null);
    }

    // _loop1_125: lambda_param_with_default
    public SSTNode[] _loop1_125_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_125, pos: " + pos);
            this.level++;
        }
        // visiting Alt: lambda_param_with_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
        // TODO replacing NameDefaultPair[] --> SSTNode[]
            // generated call: (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            // node.name: None, call.assigned_variable: lambda_param_with_default_var
        // collecting vars: lambda_param_with_default_var, SSTNode[]
        //    vars: {'lambda_param_with_default_var': 'SSTNode[]'}
        SSTNode[] lambda_param_with_default_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_with_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
            // TODO replacing NameDefaultPair[] --> SSTNode[]
            // REMOVE result call (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP1_125_ID, null);
    }

    // _loop0_126: lambda_param_maybe_default
    public SSTNode[] _loop0_126_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_126, pos: " + pos);
            this.level++;
        }
        // visiting Alt: lambda_param_maybe_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_maybe_default) - should work
        // TODO replacing NameDefaultPair[] --> SSTNode[]
            // generated call: (lambda_param_maybe_default_var = lambda_param_maybe_default_rule()) != null  // lambda_param_maybe_default
            // node.name: None, call.assigned_variable: lambda_param_maybe_default_var
        // collecting vars: lambda_param_maybe_default_var, SSTNode[]
        //    vars: {'lambda_param_maybe_default_var': 'SSTNode[]'}
        SSTNode[] lambda_param_maybe_default_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_maybe_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_maybe_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_maybe_default) - should work
            // TODO replacing NameDefaultPair[] --> SSTNode[]
            // REMOVE result call (lambda_param_maybe_default_var = lambda_param_maybe_default_rule()) != null  // lambda_param_maybe_default
            (lambda_param_maybe_default_var = lambda_param_maybe_default_rule()) != null  // lambda_param_maybe_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_126_ID, null);
    }

    // _tmp_127: lambda_kwds
    public Object _tmp_127_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_127, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_127_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_127_ID);
        }
        // visiting Alt: lambda_kwds
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_kwds) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (lambda_kwds_var = lambda_kwds_rule()) != null  // lambda_kwds
            // node.name: None, call.assigned_variable: lambda_kwds_var
        // collecting vars: lambda_kwds_var, SSTNode
        //    vars: {'lambda_kwds_var': 'SSTNode'}
        SSTNode lambda_kwds_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_kwds
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_kwds)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_kwds) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (lambda_kwds_var = lambda_kwds_rule()) != null  // lambda_kwds
            (lambda_kwds_var = lambda_kwds_rule()) != null  // lambda_kwds
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_127_ID, null);
    }

    // _loop1_128: lambda_param_maybe_default
    public SSTNode[] _loop1_128_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_128, pos: " + pos);
            this.level++;
        }
        // visiting Alt: lambda_param_maybe_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_maybe_default) - should work
        // TODO replacing NameDefaultPair[] --> SSTNode[]
            // generated call: (lambda_param_maybe_default_var = lambda_param_maybe_default_rule()) != null  // lambda_param_maybe_default
            // node.name: None, call.assigned_variable: lambda_param_maybe_default_var
        // collecting vars: lambda_param_maybe_default_var, SSTNode[]
        //    vars: {'lambda_param_maybe_default_var': 'SSTNode[]'}
        SSTNode[] lambda_param_maybe_default_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_maybe_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_maybe_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_maybe_default) - should work
            // TODO replacing NameDefaultPair[] --> SSTNode[]
            // REMOVE result call (lambda_param_maybe_default_var = lambda_param_maybe_default_rule()) != null  // lambda_param_maybe_default
            (lambda_param_maybe_default_var = lambda_param_maybe_default_rule()) != null  // lambda_param_maybe_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP1_128_ID, null);
    }

    // _tmp_129: lambda_kwds
    public Object _tmp_129_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_129, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_129_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_129_ID);
        }
        // visiting Alt: lambda_kwds
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_kwds) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (lambda_kwds_var = lambda_kwds_rule()) != null  // lambda_kwds
            // node.name: None, call.assigned_variable: lambda_kwds_var
        // collecting vars: lambda_kwds_var, SSTNode
        //    vars: {'lambda_kwds_var': 'SSTNode'}
        SSTNode lambda_kwds_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_kwds
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_kwds)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_kwds) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (lambda_kwds_var = lambda_kwds_rule()) != null  // lambda_kwds
            (lambda_kwds_var = lambda_kwds_rule()) != null  // lambda_kwds
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_129_ID, null);
    }

    // _loop1_130: ('or' conjunction)
    public SSTNode[] _loop1_130_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_130, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ('or' conjunction)
        // TODO visiting JavaCallMakerVisitor.visit_Group(('or' conjunction))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('or' conjunction)
            // generated call: (_tmp_220_var = _tmp_220_rule()) != null  // 'or' conjunction
            // node.name: None, call.assigned_variable: _tmp_220_var
        // collecting vars: _tmp_220_var, None
        //    vars: {'_tmp_220_var': None}
        Object _tmp_220_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ('or' conjunction)
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(('or' conjunction))
            // TODO visiting JavaCallMakerVisitor.visit_Group(('or' conjunction))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('or' conjunction)
            // REMOVE result call (_tmp_220_var = _tmp_220_rule()) != null  // 'or' conjunction
            (_tmp_220_var = _tmp_220_rule()) != null  // 'or' conjunction
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP1_130_ID, null);
    }

    // _loop1_131: ('and' inversion)
    public SSTNode[] _loop1_131_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_131, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ('and' inversion)
        // TODO visiting JavaCallMakerVisitor.visit_Group(('and' inversion))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('and' inversion)
            // generated call: (_tmp_221_var = _tmp_221_rule()) != null  // 'and' inversion
            // node.name: None, call.assigned_variable: _tmp_221_var
        // collecting vars: _tmp_221_var, None
        //    vars: {'_tmp_221_var': None}
        Object _tmp_221_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ('and' inversion)
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(('and' inversion))
            // TODO visiting JavaCallMakerVisitor.visit_Group(('and' inversion))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('and' inversion)
            // REMOVE result call (_tmp_221_var = _tmp_221_rule()) != null  // 'and' inversion
            (_tmp_221_var = _tmp_221_rule()) != null  // 'and' inversion
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP1_131_ID, null);
    }

    // _loop1_132: compare_op_bitwise_or_pair
    public SSTNode[] _loop1_132_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_132, pos: " + pos);
            this.level++;
        }
        // visiting Alt: compare_op_bitwise_or_pair
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(compare_op_bitwise_or_pair) - should work
        // TODO replacing CmpopExprPair[] --> SSTNode[]
            // generated call: (compare_op_bitwise_or_pair_var = compare_op_bitwise_or_pair_rule()) != null  // compare_op_bitwise_or_pair
            // node.name: None, call.assigned_variable: compare_op_bitwise_or_pair_var
        // collecting vars: compare_op_bitwise_or_pair_var, SSTNode[]
        //    vars: {'compare_op_bitwise_or_pair_var': 'SSTNode[]'}
        SSTNode[] compare_op_bitwise_or_pair_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: compare_op_bitwise_or_pair
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(compare_op_bitwise_or_pair)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(compare_op_bitwise_or_pair) - should work
            // TODO replacing CmpopExprPair[] --> SSTNode[]
            // REMOVE result call (compare_op_bitwise_or_pair_var = compare_op_bitwise_or_pair_rule()) != null  // compare_op_bitwise_or_pair
            (compare_op_bitwise_or_pair_var = compare_op_bitwise_or_pair_rule()) != null  // compare_op_bitwise_or_pair
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP1_132_ID, null);
    }

    // _tmp_133: '!='
    public Object _tmp_133_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_133, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_133_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_133_ID);
        }
        // visiting Alt: '!='
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('!=')
            // generated call: (_literal = expect(Token.Kind.NOTEQUAL)) != null  // token='!='
            // node.name: tok, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        Token _literal = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '!='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('!=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('!=')
            // REMOVE result call (_literal = expect(Token.Kind.NOTEQUAL)) != null  // token='!='
            (_literal = expect(Token.Kind.NOTEQUAL)) != null  // token='!='
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_133_ID, null);
    }

    // _tmp_134: arguments
    public Object _tmp_134_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_134, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_134_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_134_ID);
        }
        // visiting Alt: arguments
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(arguments) - should work
            // generated call: (arguments_var = arguments_rule()) != null  // arguments
            // node.name: None, call.assigned_variable: arguments_var
        // collecting vars: arguments_var, SSTNode
        //    vars: {'arguments_var': 'SSTNode'}
        SSTNode arguments_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: arguments
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(arguments)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(arguments) - should work
            // REMOVE result call (arguments_var = arguments_rule()) != null  // arguments
            (arguments_var = arguments_rule()) != null  // arguments
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_134_ID, null);
    }

    // _loop0_136: ',' slice
    public SSTNode[] _loop0_136_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_136, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ',' slice
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slice) - should work
            // generated call: (slice_var = slice_rule()) != null  // slice
            // node.name: elem, call.assigned_variable: slice_var
        // collecting vars: slice_var, SSTNode
        //    vars: {'_literal': 'Token', 'slice_var': 'SSTNode'}
        Token _literal = null;
        SSTNode slice_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: slice
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(slice)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slice) - should work
            // REMOVE result call (slice_var = slice_rule()) != null  // slice
            (slice_var = slice_rule()) != null  // slice
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_136_ID, null);
    }

    // _gather_135: slice _loop0_136
    public SSTNode[] _gather_135_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _gather_135, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, _GATHER_135_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, _GATHER_135_ID);
        }
        // visiting Alt: slice _loop0_136
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slice) - should work
            // generated call: (slice_var = slice_rule()) != null  // slice
            // node.name: elem, call.assigned_variable: slice_var
        // collecting vars: slice_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_136) - should work
            // generated call: (_loop0_136_var = _loop0_136_rule()) != null  // _loop0_136
            // node.name: seq, call.assigned_variable: _loop0_136_var
        // collecting vars: _loop0_136_var, SSTNode[]
        //    vars: {'slice_var': 'SSTNode', '_loop0_136_var': 'SSTNode[]'}
        SSTNode[] _loop0_136_var = null;
        SSTNode slice_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: slice
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(slice)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slice) - should work
            // REMOVE result call (slice_var = slice_rule()) != null  // slice
            (slice_var = slice_rule()) != null  // slice
            &&
            // TODO visiting JavaParserGeneratorNamedItem: _loop0_136
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_136)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_136) - should work
            // REMOVE result call (_loop0_136_var = _loop0_136_rule()) != null  // _loop0_136
            (_loop0_136_var = _loop0_136_rule()) != null  // _loop0_136
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _GATHER_135_ID, null);
    }

    // _tmp_137: ','
    public Object _tmp_137_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_137, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_137_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_137_ID);
        }
        // visiting Alt: ','
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        Token _literal = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_137_ID, null);
    }

    // _tmp_138: expression
    public Object _tmp_138_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_138, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_138_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_138_ID);
        }
        // visiting Alt: expression
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: None, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        //    vars: {'expression_var': 'SSTNode'}
        SSTNode expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_138_ID, null);
    }

    // _tmp_139: expression
    public Object _tmp_139_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_139, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_139_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_139_ID);
        }
        // visiting Alt: expression
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: None, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        //    vars: {'expression_var': 'SSTNode'}
        SSTNode expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_139_ID, null);
    }

    // _tmp_140: ':' expression?
    public Object _tmp_140_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_140, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_140_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_140_ID);
        }
        // visiting Alt: ':' expression?
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(expression?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expression)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_222_var = _tmp_222_rule()) != null  // expression
            // generated call: ((_opt_var = _tmp_222_rule()) != null || _opt_var == null)  // expression?
            // node.name: d, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'_literal': 'Token', '_opt_var': None}
        Token _literal = null;
        Object _opt_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(expression?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expression)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_222_var = _tmp_222_rule()) != null  // expression
            // REMOVE result call ((_opt_var = _tmp_222_rule()) != null || _opt_var == null)  // expression?
            ((_opt_var = _tmp_222_rule()) != null || _opt_var == null)  // expression?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_140_ID, null);
    }

    // _tmp_141: tuple | group | genexp
    public Object _tmp_141_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_141, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_141_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_141_ID);
        }
        // visiting Alt: tuple
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(tuple) - should work
            // generated call: (tuple_var = tuple_rule()) != null  // tuple
            // node.name: None, call.assigned_variable: tuple_var
        // collecting vars: tuple_var, SSTNode
        //    vars: {'tuple_var': 'SSTNode'}
        SSTNode tuple_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: tuple
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(tuple)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(tuple) - should work
            // REMOVE result call (tuple_var = tuple_rule()) != null  // tuple
            (tuple_var = tuple_rule()) != null  // tuple
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: group
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(group) - should work
            // generated call: (group_var = group_rule()) != null  // group
            // node.name: None, call.assigned_variable: group_var
        // collecting vars: group_var, SSTNode
        //    vars: {'group_var': 'SSTNode'}
        SSTNode group_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: group
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(group)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(group) - should work
            // REMOVE result call (group_var = group_rule()) != null  // group
            (group_var = group_rule()) != null  // group
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: genexp
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(genexp) - should work
            // generated call: (genexp_var = genexp_rule()) != null  // genexp
            // node.name: None, call.assigned_variable: genexp_var
        // collecting vars: genexp_var, SSTNode
        //    vars: {'genexp_var': 'SSTNode'}
        SSTNode genexp_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: genexp
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(genexp)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(genexp) - should work
            // REMOVE result call (genexp_var = genexp_rule()) != null  // genexp
            (genexp_var = genexp_rule()) != null  // genexp
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_141_ID, null);
    }

    // _tmp_142: list | listcomp
    public Object _tmp_142_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_142, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_142_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_142_ID);
        }
        // visiting Alt: list
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(list) - should work
            // generated call: (list_var = list_rule()) != null  // list
            // node.name: None, call.assigned_variable: list_var
        // collecting vars: list_var, SSTNode
        //    vars: {'list_var': 'SSTNode'}
        SSTNode list_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: list
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(list)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(list) - should work
            // REMOVE result call (list_var = list_rule()) != null  // list
            (list_var = list_rule()) != null  // list
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: listcomp
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(listcomp) - should work
            // generated call: (listcomp_var = listcomp_rule()) != null  // listcomp
            // node.name: None, call.assigned_variable: listcomp_var
        // collecting vars: listcomp_var, SSTNode
        //    vars: {'listcomp_var': 'SSTNode'}
        SSTNode listcomp_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: listcomp
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(listcomp)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(listcomp) - should work
            // REMOVE result call (listcomp_var = listcomp_rule()) != null  // listcomp
            (listcomp_var = listcomp_rule()) != null  // listcomp
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_142_ID, null);
    }

    // _tmp_143: dict | set | dictcomp | setcomp
    public Object _tmp_143_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_143, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_143_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_143_ID);
        }
        // visiting Alt: dict
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dict) - should work
            // generated call: (dict_var = dict_rule()) != null  // dict
            // node.name: None, call.assigned_variable: dict_var
        // collecting vars: dict_var, SSTNode
        //    vars: {'dict_var': 'SSTNode'}
        SSTNode dict_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: dict
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(dict)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dict) - should work
            // REMOVE result call (dict_var = dict_rule()) != null  // dict
            (dict_var = dict_rule()) != null  // dict
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: set
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(set) - should work
            // generated call: (set_var = set_rule()) != null  // set
            // node.name: None, call.assigned_variable: set_var
        // collecting vars: set_var, SSTNode
        //    vars: {'set_var': 'SSTNode'}
        SSTNode set_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: set
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(set)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(set) - should work
            // REMOVE result call (set_var = set_rule()) != null  // set
            (set_var = set_rule()) != null  // set
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: dictcomp
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dictcomp) - should work
            // generated call: (dictcomp_var = dictcomp_rule()) != null  // dictcomp
            // node.name: None, call.assigned_variable: dictcomp_var
        // collecting vars: dictcomp_var, SSTNode
        //    vars: {'dictcomp_var': 'SSTNode'}
        SSTNode dictcomp_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: dictcomp
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(dictcomp)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dictcomp) - should work
            // REMOVE result call (dictcomp_var = dictcomp_rule()) != null  // dictcomp
            (dictcomp_var = dictcomp_rule()) != null  // dictcomp
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: setcomp
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(setcomp) - should work
            // generated call: (setcomp_var = setcomp_rule()) != null  // setcomp
            // node.name: None, call.assigned_variable: setcomp_var
        // collecting vars: setcomp_var, SSTNode
        //    vars: {'setcomp_var': 'SSTNode'}
        SSTNode setcomp_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: setcomp
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(setcomp)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(setcomp) - should work
            // REMOVE result call (setcomp_var = setcomp_rule()) != null  // setcomp
            (setcomp_var = setcomp_rule()) != null  // setcomp
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_143_ID, null);
    }

    // _loop1_144: STRING
    public SSTNode[] _loop1_144_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_144, pos: " + pos);
            this.level++;
        }
        // visiting Alt: STRING
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(STRING) - should work
            // generated call: (string_var = expect(Token.Kind.STRING)) != null  // STRING
            // node.name: None, call.assigned_variable: string_var
        // collecting vars: string_var, Token
        //    vars: {'string_var': 'Token'}
        Token string_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: STRING
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(STRING)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(STRING) - should work
            // REMOVE result call (string_var = expect(Token.Kind.STRING)) != null  // STRING
            (string_var = expect(Token.Kind.STRING)) != null  // STRING
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP1_144_ID, null);
    }

    // _tmp_145: star_named_expressions
    public Object _tmp_145_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_145, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_145_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_145_ID);
        }
        // visiting Alt: star_named_expressions
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
        // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // generated call: (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
            // node.name: None, call.assigned_variable: star_named_expressions_var
        // collecting vars: star_named_expressions_var, SSTNode[]
        //    vars: {'star_named_expressions_var': 'SSTNode[]'}
        SSTNode[] star_named_expressions_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_named_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_named_expressions)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // REMOVE result call (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
            (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_145_ID, null);
    }

    // _tmp_146: star_named_expression ',' star_named_expressions?
    public Object _tmp_146_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_146, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_146_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_146_ID);
        }
        // visiting Alt: star_named_expression ',' star_named_expressions?
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
            // generated call: (star_named_expression_var = star_named_expression_rule()) != null  // star_named_expression
            // node.name: y, call.assigned_variable: star_named_expression_var
        // collecting vars: star_named_expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_named_expressions?)
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_named_expressions)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_223_var = _tmp_223_rule()) != null  // star_named_expressions
            // generated call: ((_opt_var = _tmp_223_rule()) != null || _opt_var == null)  // star_named_expressions?
            // node.name: z, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'star_named_expression_var': 'SSTNode', '_literal': 'Token', '_opt_var': None}
        Token _literal = null;
        Object _opt_var = null;
        SSTNode star_named_expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_named_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_named_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
            // REMOVE result call (star_named_expression_var = star_named_expression_rule()) != null  // star_named_expression
            (star_named_expression_var = star_named_expression_rule()) != null  // star_named_expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: star_named_expressions?
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_named_expressions?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_named_expressions?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_named_expressions)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_223_var = _tmp_223_rule()) != null  // star_named_expressions
            // REMOVE result call ((_opt_var = _tmp_223_rule()) != null || _opt_var == null)  // star_named_expressions?
            ((_opt_var = _tmp_223_rule()) != null || _opt_var == null)  // star_named_expressions?
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_146_ID, null);
    }

    // _tmp_147: yield_expr | named_expression
    public Object _tmp_147_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_147, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_147_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_147_ID);
        }
        // visiting Alt: yield_expr
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
            // generated call: (yield_expr_var = yield_expr_rule()) != null  // yield_expr
            // node.name: None, call.assigned_variable: yield_expr_var
        // collecting vars: yield_expr_var, SSTNode
        //    vars: {'yield_expr_var': 'SSTNode'}
        SSTNode yield_expr_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: yield_expr
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(yield_expr)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
            // REMOVE result call (yield_expr_var = yield_expr_rule()) != null  // yield_expr
            (yield_expr_var = yield_expr_rule()) != null  // yield_expr
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: named_expression
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // generated call: (named_expression_var = named_expression_rule()) != null  // named_expression
            // node.name: None, call.assigned_variable: named_expression_var
        // collecting vars: named_expression_var, SSTNode
        //    vars: {'named_expression_var': 'SSTNode'}
        SSTNode named_expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: named_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(named_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // REMOVE result call (named_expression_var = named_expression_rule()) != null  // named_expression
            (named_expression_var = named_expression_rule()) != null  // named_expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_147_ID, null);
    }

    // _tmp_148: double_starred_kvpairs
    public Object _tmp_148_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_148, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_148_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_148_ID);
        }
        // visiting Alt: double_starred_kvpairs
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_starred_kvpairs) - should work
        // TODO replacing asdl_seq[] --> SSTNode[]
            // generated call: (double_starred_kvpairs_var = double_starred_kvpairs_rule()) != null  // double_starred_kvpairs
            // node.name: None, call.assigned_variable: double_starred_kvpairs_var
        // collecting vars: double_starred_kvpairs_var, SSTNode[]
        //    vars: {'double_starred_kvpairs_var': 'SSTNode[]'}
        SSTNode[] double_starred_kvpairs_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: double_starred_kvpairs
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(double_starred_kvpairs)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_starred_kvpairs) - should work
            // TODO replacing asdl_seq[] --> SSTNode[]
            // REMOVE result call (double_starred_kvpairs_var = double_starred_kvpairs_rule()) != null  // double_starred_kvpairs
            (double_starred_kvpairs_var = double_starred_kvpairs_rule()) != null  // double_starred_kvpairs
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_148_ID, null);
    }

    // _loop0_150: ',' double_starred_kvpair
    public SSTNode[] _loop0_150_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_150, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ',' double_starred_kvpair
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_starred_kvpair) - should work
        // TODO replacing KeyValuePair[] --> SSTNode[]
            // generated call: (double_starred_kvpair_var = double_starred_kvpair_rule()) != null  // double_starred_kvpair
            // node.name: elem, call.assigned_variable: double_starred_kvpair_var
        // collecting vars: double_starred_kvpair_var, SSTNode[]
        //    vars: {'_literal': 'Token', 'double_starred_kvpair_var': 'SSTNode[]'}
        Token _literal = null;
        SSTNode[] double_starred_kvpair_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: double_starred_kvpair
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(double_starred_kvpair)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_starred_kvpair) - should work
            // TODO replacing KeyValuePair[] --> SSTNode[]
            // REMOVE result call (double_starred_kvpair_var = double_starred_kvpair_rule()) != null  // double_starred_kvpair
            (double_starred_kvpair_var = double_starred_kvpair_rule()) != null  // double_starred_kvpair
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_150_ID, null);
    }

    // _gather_149: double_starred_kvpair _loop0_150
    public SSTNode[] _gather_149_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _gather_149, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, _GATHER_149_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, _GATHER_149_ID);
        }
        // visiting Alt: double_starred_kvpair _loop0_150
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_starred_kvpair) - should work
        // TODO replacing KeyValuePair[] --> SSTNode[]
            // generated call: (double_starred_kvpair_var = double_starred_kvpair_rule()) != null  // double_starred_kvpair
            // node.name: elem, call.assigned_variable: double_starred_kvpair_var
        // collecting vars: double_starred_kvpair_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_150) - should work
            // generated call: (_loop0_150_var = _loop0_150_rule()) != null  // _loop0_150
            // node.name: seq, call.assigned_variable: _loop0_150_var
        // collecting vars: _loop0_150_var, SSTNode[]
        //    vars: {'double_starred_kvpair_var': 'SSTNode[]', '_loop0_150_var': 'SSTNode[]'}
        SSTNode[] _loop0_150_var = null;
        SSTNode[] double_starred_kvpair_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: double_starred_kvpair
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(double_starred_kvpair)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_starred_kvpair) - should work
            // TODO replacing KeyValuePair[] --> SSTNode[]
            // REMOVE result call (double_starred_kvpair_var = double_starred_kvpair_rule()) != null  // double_starred_kvpair
            (double_starred_kvpair_var = double_starred_kvpair_rule()) != null  // double_starred_kvpair
            &&
            // TODO visiting JavaParserGeneratorNamedItem: _loop0_150
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_150)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_150) - should work
            // REMOVE result call (_loop0_150_var = _loop0_150_rule()) != null  // _loop0_150
            (_loop0_150_var = _loop0_150_rule()) != null  // _loop0_150
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _GATHER_149_ID, null);
    }

    // _tmp_151: ','
    public Object _tmp_151_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_151, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_151_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_151_ID);
        }
        // visiting Alt: ','
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        Token _literal = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_151_ID, null);
    }

    // _loop1_152: for_if_clause
    public SSTNode[] _loop1_152_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_152, pos: " + pos);
            this.level++;
        }
        // visiting Alt: for_if_clause
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clause) - should work
        // TODO replacing comprehension_ty --> SSTNode
            // generated call: (for_if_clause_var = for_if_clause_rule()) != null  // for_if_clause
            // node.name: None, call.assigned_variable: for_if_clause_var
        // collecting vars: for_if_clause_var, SSTNode
        //    vars: {'for_if_clause_var': 'SSTNode'}
        SSTNode for_if_clause_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: for_if_clause
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(for_if_clause)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clause) - should work
            // TODO replacing comprehension_ty --> SSTNode
            // REMOVE result call (for_if_clause_var = for_if_clause_rule()) != null  // for_if_clause
            (for_if_clause_var = for_if_clause_rule()) != null  // for_if_clause
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP1_152_ID, null);
    }

    // _loop0_153: ('if' disjunction)
    public SSTNode[] _loop0_153_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_153, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ('if' disjunction)
        // TODO visiting JavaCallMakerVisitor.visit_Group(('if' disjunction))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('if' disjunction)
            // generated call: (_tmp_224_var = _tmp_224_rule()) != null  // 'if' disjunction
            // node.name: None, call.assigned_variable: _tmp_224_var
        // collecting vars: _tmp_224_var, None
        //    vars: {'_tmp_224_var': None}
        Object _tmp_224_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ('if' disjunction)
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(('if' disjunction))
            // TODO visiting JavaCallMakerVisitor.visit_Group(('if' disjunction))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('if' disjunction)
            // REMOVE result call (_tmp_224_var = _tmp_224_rule()) != null  // 'if' disjunction
            (_tmp_224_var = _tmp_224_rule()) != null  // 'if' disjunction
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_153_ID, null);
    }

    // _loop0_154: ('if' disjunction)
    public SSTNode[] _loop0_154_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_154, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ('if' disjunction)
        // TODO visiting JavaCallMakerVisitor.visit_Group(('if' disjunction))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('if' disjunction)
            // generated call: (_tmp_225_var = _tmp_225_rule()) != null  // 'if' disjunction
            // node.name: None, call.assigned_variable: _tmp_225_var
        // collecting vars: _tmp_225_var, None
        //    vars: {'_tmp_225_var': None}
        Object _tmp_225_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ('if' disjunction)
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(('if' disjunction))
            // TODO visiting JavaCallMakerVisitor.visit_Group(('if' disjunction))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('if' disjunction)
            // REMOVE result call (_tmp_225_var = _tmp_225_rule()) != null  // 'if' disjunction
            (_tmp_225_var = _tmp_225_rule()) != null  // 'if' disjunction
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_154_ID, null);
    }

    // _tmp_155: star_expressions
    public Object _tmp_155_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_155, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_155_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_155_ID);
        }
        // visiting Alt: star_expressions
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // generated call: (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            // node.name: None, call.assigned_variable: star_expressions_var
        // collecting vars: star_expressions_var, SSTNode
        //    vars: {'star_expressions_var': 'SSTNode'}
        SSTNode star_expressions_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expressions)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // REMOVE result call (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            (star_expressions_var = star_expressions_rule()) != null  // star_expressions
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_155_ID, null);
    }

    // _tmp_156: ','
    public Object _tmp_156_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_156, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_156_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_156_ID);
        }
        // visiting Alt: ','
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        Token _literal = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_156_ID, null);
    }

    // _loop0_158: ',' (starred_expression | direct_named_expression !'=')
    public SSTNode[] _loop0_158_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_158, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ',' (starred_expression | direct_named_expression !'=')
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // TODO visiting JavaCallMakerVisitor.visit_Group((starred_expression | direct_named_expression !'='))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(starred_expression | direct_named_expression !'=')
            // generated call: (_tmp_226_var = _tmp_226_rule()) != null  // starred_expression | direct_named_expression !'='
            // node.name: elem, call.assigned_variable: _tmp_226_var
        // collecting vars: _tmp_226_var, None
        //    vars: {'_literal': 'Token', '_tmp_226_var': None}
        Token _literal = null;
        Object _tmp_226_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: (starred_expression | direct_named_expression !'=')
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((starred_expression | direct_named_expression !'='))
            // TODO visiting JavaCallMakerVisitor.visit_Group((starred_expression | direct_named_expression !'='))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(starred_expression | direct_named_expression !'=')
            // REMOVE result call (_tmp_226_var = _tmp_226_rule()) != null  // starred_expression | direct_named_expression !'='
            (_tmp_226_var = _tmp_226_rule()) != null  // starred_expression | direct_named_expression !'='
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_158_ID, null);
    }

    // _gather_157: (starred_expression | direct_named_expression !'=') _loop0_158
    public SSTNode[] _gather_157_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _gather_157, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, _GATHER_157_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, _GATHER_157_ID);
        }
        // visiting Alt: (starred_expression | direct_named_expression !'=') _loop0_158
        // TODO visiting JavaCallMakerVisitor.visit_Group((starred_expression | direct_named_expression !'='))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(starred_expression | direct_named_expression !'=')
            // generated call: (_tmp_226_var = _tmp_226_rule()) != null  // starred_expression | direct_named_expression !'='
            // node.name: elem, call.assigned_variable: _tmp_226_var
        // collecting vars: _tmp_226_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_158) - should work
            // generated call: (_loop0_158_var = _loop0_158_rule()) != null  // _loop0_158
            // node.name: seq, call.assigned_variable: _loop0_158_var
        // collecting vars: _loop0_158_var, SSTNode[]
        //    vars: {'_tmp_226_var': None, '_loop0_158_var': 'SSTNode[]'}
        SSTNode[] _loop0_158_var = null;
        Object _tmp_226_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: (starred_expression | direct_named_expression !'=')
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((starred_expression | direct_named_expression !'='))
            // TODO visiting JavaCallMakerVisitor.visit_Group((starred_expression | direct_named_expression !'='))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(starred_expression | direct_named_expression !'=')
            // REMOVE result call (_tmp_226_var = _tmp_226_rule()) != null  // starred_expression | direct_named_expression !'='
            (_tmp_226_var = _tmp_226_rule()) != null  // starred_expression | direct_named_expression !'='
            &&
            // TODO visiting JavaParserGeneratorNamedItem: _loop0_158
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_158)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_158) - should work
            // REMOVE result call (_loop0_158_var = _loop0_158_rule()) != null  // _loop0_158
            (_loop0_158_var = _loop0_158_rule()) != null  // _loop0_158
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _GATHER_157_ID, null);
    }

    // _tmp_159: ',' kwargs
    public Object _tmp_159_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_159, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_159_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_159_ID);
        }
        // visiting Alt: ',' kwargs
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwargs) - should work
        // TODO replacing asdl_seq[] --> SSTNode[]
            // generated call: (kwargs_var = kwargs_rule()) != null  // kwargs
            // node.name: k, call.assigned_variable: kwargs_var
        // collecting vars: kwargs_var, SSTNode[]
        //    vars: {'_literal': 'Token', 'kwargs_var': 'SSTNode[]'}
        Token _literal = null;
        SSTNode[] kwargs_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: kwargs
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kwargs)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwargs) - should work
            // TODO replacing asdl_seq[] --> SSTNode[]
            // REMOVE result call (kwargs_var = kwargs_rule()) != null  // kwargs
            (kwargs_var = kwargs_rule()) != null  // kwargs
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_159_ID, null);
    }

    // _loop0_161: ',' kwarg_or_starred
    public SSTNode[] _loop0_161_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_161, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ',' kwarg_or_starred
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_starred) - should work
        // TODO replacing KeywordOrStarred[] --> SSTNode[]
            // generated call: (kwarg_or_starred_var = kwarg_or_starred_rule()) != null  // kwarg_or_starred
            // node.name: elem, call.assigned_variable: kwarg_or_starred_var
        // collecting vars: kwarg_or_starred_var, SSTNode[]
        //    vars: {'_literal': 'Token', 'kwarg_or_starred_var': 'SSTNode[]'}
        Token _literal = null;
        SSTNode[] kwarg_or_starred_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: kwarg_or_starred
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kwarg_or_starred)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_starred) - should work
            // TODO replacing KeywordOrStarred[] --> SSTNode[]
            // REMOVE result call (kwarg_or_starred_var = kwarg_or_starred_rule()) != null  // kwarg_or_starred
            (kwarg_or_starred_var = kwarg_or_starred_rule()) != null  // kwarg_or_starred
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_161_ID, null);
    }

    // _gather_160: kwarg_or_starred _loop0_161
    public SSTNode[] _gather_160_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _gather_160, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, _GATHER_160_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, _GATHER_160_ID);
        }
        // visiting Alt: kwarg_or_starred _loop0_161
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_starred) - should work
        // TODO replacing KeywordOrStarred[] --> SSTNode[]
            // generated call: (kwarg_or_starred_var = kwarg_or_starred_rule()) != null  // kwarg_or_starred
            // node.name: elem, call.assigned_variable: kwarg_or_starred_var
        // collecting vars: kwarg_or_starred_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_161) - should work
            // generated call: (_loop0_161_var = _loop0_161_rule()) != null  // _loop0_161
            // node.name: seq, call.assigned_variable: _loop0_161_var
        // collecting vars: _loop0_161_var, SSTNode[]
        //    vars: {'kwarg_or_starred_var': 'SSTNode[]', '_loop0_161_var': 'SSTNode[]'}
        SSTNode[] _loop0_161_var = null;
        SSTNode[] kwarg_or_starred_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: kwarg_or_starred
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kwarg_or_starred)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_starred) - should work
            // TODO replacing KeywordOrStarred[] --> SSTNode[]
            // REMOVE result call (kwarg_or_starred_var = kwarg_or_starred_rule()) != null  // kwarg_or_starred
            (kwarg_or_starred_var = kwarg_or_starred_rule()) != null  // kwarg_or_starred
            &&
            // TODO visiting JavaParserGeneratorNamedItem: _loop0_161
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_161)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_161) - should work
            // REMOVE result call (_loop0_161_var = _loop0_161_rule()) != null  // _loop0_161
            (_loop0_161_var = _loop0_161_rule()) != null  // _loop0_161
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _GATHER_160_ID, null);
    }

    // _loop0_163: ',' kwarg_or_double_starred
    public SSTNode[] _loop0_163_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_163, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ',' kwarg_or_double_starred
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_double_starred) - should work
        // TODO replacing KeywordOrStarred[] --> SSTNode[]
            // generated call: (kwarg_or_double_starred_var = kwarg_or_double_starred_rule()) != null  // kwarg_or_double_starred
            // node.name: elem, call.assigned_variable: kwarg_or_double_starred_var
        // collecting vars: kwarg_or_double_starred_var, SSTNode[]
        //    vars: {'_literal': 'Token', 'kwarg_or_double_starred_var': 'SSTNode[]'}
        Token _literal = null;
        SSTNode[] kwarg_or_double_starred_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: kwarg_or_double_starred
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kwarg_or_double_starred)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_double_starred) - should work
            // TODO replacing KeywordOrStarred[] --> SSTNode[]
            // REMOVE result call (kwarg_or_double_starred_var = kwarg_or_double_starred_rule()) != null  // kwarg_or_double_starred
            (kwarg_or_double_starred_var = kwarg_or_double_starred_rule()) != null  // kwarg_or_double_starred
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_163_ID, null);
    }

    // _gather_162: kwarg_or_double_starred _loop0_163
    public SSTNode[] _gather_162_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _gather_162, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, _GATHER_162_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, _GATHER_162_ID);
        }
        // visiting Alt: kwarg_or_double_starred _loop0_163
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_double_starred) - should work
        // TODO replacing KeywordOrStarred[] --> SSTNode[]
            // generated call: (kwarg_or_double_starred_var = kwarg_or_double_starred_rule()) != null  // kwarg_or_double_starred
            // node.name: elem, call.assigned_variable: kwarg_or_double_starred_var
        // collecting vars: kwarg_or_double_starred_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_163) - should work
            // generated call: (_loop0_163_var = _loop0_163_rule()) != null  // _loop0_163
            // node.name: seq, call.assigned_variable: _loop0_163_var
        // collecting vars: _loop0_163_var, SSTNode[]
        //    vars: {'kwarg_or_double_starred_var': 'SSTNode[]', '_loop0_163_var': 'SSTNode[]'}
        SSTNode[] _loop0_163_var = null;
        SSTNode[] kwarg_or_double_starred_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: kwarg_or_double_starred
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kwarg_or_double_starred)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_double_starred) - should work
            // TODO replacing KeywordOrStarred[] --> SSTNode[]
            // REMOVE result call (kwarg_or_double_starred_var = kwarg_or_double_starred_rule()) != null  // kwarg_or_double_starred
            (kwarg_or_double_starred_var = kwarg_or_double_starred_rule()) != null  // kwarg_or_double_starred
            &&
            // TODO visiting JavaParserGeneratorNamedItem: _loop0_163
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_163)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_163) - should work
            // REMOVE result call (_loop0_163_var = _loop0_163_rule()) != null  // _loop0_163
            (_loop0_163_var = _loop0_163_rule()) != null  // _loop0_163
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _GATHER_162_ID, null);
    }

    // _loop0_165: ',' kwarg_or_starred
    public SSTNode[] _loop0_165_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_165, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ',' kwarg_or_starred
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_starred) - should work
        // TODO replacing KeywordOrStarred[] --> SSTNode[]
            // generated call: (kwarg_or_starred_var = kwarg_or_starred_rule()) != null  // kwarg_or_starred
            // node.name: elem, call.assigned_variable: kwarg_or_starred_var
        // collecting vars: kwarg_or_starred_var, SSTNode[]
        //    vars: {'_literal': 'Token', 'kwarg_or_starred_var': 'SSTNode[]'}
        Token _literal = null;
        SSTNode[] kwarg_or_starred_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: kwarg_or_starred
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kwarg_or_starred)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_starred) - should work
            // TODO replacing KeywordOrStarred[] --> SSTNode[]
            // REMOVE result call (kwarg_or_starred_var = kwarg_or_starred_rule()) != null  // kwarg_or_starred
            (kwarg_or_starred_var = kwarg_or_starred_rule()) != null  // kwarg_or_starred
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_165_ID, null);
    }

    // _gather_164: kwarg_or_starred _loop0_165
    public SSTNode[] _gather_164_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _gather_164, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, _GATHER_164_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, _GATHER_164_ID);
        }
        // visiting Alt: kwarg_or_starred _loop0_165
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_starred) - should work
        // TODO replacing KeywordOrStarred[] --> SSTNode[]
            // generated call: (kwarg_or_starred_var = kwarg_or_starred_rule()) != null  // kwarg_or_starred
            // node.name: elem, call.assigned_variable: kwarg_or_starred_var
        // collecting vars: kwarg_or_starred_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_165) - should work
            // generated call: (_loop0_165_var = _loop0_165_rule()) != null  // _loop0_165
            // node.name: seq, call.assigned_variable: _loop0_165_var
        // collecting vars: _loop0_165_var, SSTNode[]
        //    vars: {'kwarg_or_starred_var': 'SSTNode[]', '_loop0_165_var': 'SSTNode[]'}
        SSTNode[] _loop0_165_var = null;
        SSTNode[] kwarg_or_starred_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: kwarg_or_starred
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kwarg_or_starred)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_starred) - should work
            // TODO replacing KeywordOrStarred[] --> SSTNode[]
            // REMOVE result call (kwarg_or_starred_var = kwarg_or_starred_rule()) != null  // kwarg_or_starred
            (kwarg_or_starred_var = kwarg_or_starred_rule()) != null  // kwarg_or_starred
            &&
            // TODO visiting JavaParserGeneratorNamedItem: _loop0_165
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_165)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_165) - should work
            // REMOVE result call (_loop0_165_var = _loop0_165_rule()) != null  // _loop0_165
            (_loop0_165_var = _loop0_165_rule()) != null  // _loop0_165
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _GATHER_164_ID, null);
    }

    // _loop0_167: ',' kwarg_or_double_starred
    public SSTNode[] _loop0_167_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_167, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ',' kwarg_or_double_starred
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_double_starred) - should work
        // TODO replacing KeywordOrStarred[] --> SSTNode[]
            // generated call: (kwarg_or_double_starred_var = kwarg_or_double_starred_rule()) != null  // kwarg_or_double_starred
            // node.name: elem, call.assigned_variable: kwarg_or_double_starred_var
        // collecting vars: kwarg_or_double_starred_var, SSTNode[]
        //    vars: {'_literal': 'Token', 'kwarg_or_double_starred_var': 'SSTNode[]'}
        Token _literal = null;
        SSTNode[] kwarg_or_double_starred_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: kwarg_or_double_starred
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kwarg_or_double_starred)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_double_starred) - should work
            // TODO replacing KeywordOrStarred[] --> SSTNode[]
            // REMOVE result call (kwarg_or_double_starred_var = kwarg_or_double_starred_rule()) != null  // kwarg_or_double_starred
            (kwarg_or_double_starred_var = kwarg_or_double_starred_rule()) != null  // kwarg_or_double_starred
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_167_ID, null);
    }

    // _gather_166: kwarg_or_double_starred _loop0_167
    public SSTNode[] _gather_166_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _gather_166, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, _GATHER_166_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, _GATHER_166_ID);
        }
        // visiting Alt: kwarg_or_double_starred _loop0_167
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_double_starred) - should work
        // TODO replacing KeywordOrStarred[] --> SSTNode[]
            // generated call: (kwarg_or_double_starred_var = kwarg_or_double_starred_rule()) != null  // kwarg_or_double_starred
            // node.name: elem, call.assigned_variable: kwarg_or_double_starred_var
        // collecting vars: kwarg_or_double_starred_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_167) - should work
            // generated call: (_loop0_167_var = _loop0_167_rule()) != null  // _loop0_167
            // node.name: seq, call.assigned_variable: _loop0_167_var
        // collecting vars: _loop0_167_var, SSTNode[]
        //    vars: {'kwarg_or_double_starred_var': 'SSTNode[]', '_loop0_167_var': 'SSTNode[]'}
        SSTNode[] _loop0_167_var = null;
        SSTNode[] kwarg_or_double_starred_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: kwarg_or_double_starred
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kwarg_or_double_starred)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_double_starred) - should work
            // TODO replacing KeywordOrStarred[] --> SSTNode[]
            // REMOVE result call (kwarg_or_double_starred_var = kwarg_or_double_starred_rule()) != null  // kwarg_or_double_starred
            (kwarg_or_double_starred_var = kwarg_or_double_starred_rule()) != null  // kwarg_or_double_starred
            &&
            // TODO visiting JavaParserGeneratorNamedItem: _loop0_167
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_167)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_167) - should work
            // REMOVE result call (_loop0_167_var = _loop0_167_rule()) != null  // _loop0_167
            (_loop0_167_var = _loop0_167_rule()) != null  // _loop0_167
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _GATHER_166_ID, null);
    }

    // _loop0_168: (',' star_target)
    public SSTNode[] _loop0_168_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_168, pos: " + pos);
            this.level++;
        }
        // visiting Alt: (',' star_target)
        // TODO visiting JavaCallMakerVisitor.visit_Group((',' star_target))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' star_target)
            // generated call: (_tmp_227_var = _tmp_227_rule()) != null  // ',' star_target
            // node.name: None, call.assigned_variable: _tmp_227_var
        // collecting vars: _tmp_227_var, None
        //    vars: {'_tmp_227_var': None}
        Object _tmp_227_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: (',' star_target)
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((',' star_target))
            // TODO visiting JavaCallMakerVisitor.visit_Group((',' star_target))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' star_target)
            // REMOVE result call (_tmp_227_var = _tmp_227_rule()) != null  // ',' star_target
            (_tmp_227_var = _tmp_227_rule()) != null  // ',' star_target
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_168_ID, null);
    }

    // _tmp_169: ','
    public Object _tmp_169_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_169, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_169_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_169_ID);
        }
        // visiting Alt: ','
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        Token _literal = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_169_ID, null);
    }

    // _loop0_171: ',' star_target
    public SSTNode[] _loop0_171_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_171, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ',' star_target
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // generated call: (star_target_var = star_target_rule()) != null  // star_target
            // node.name: elem, call.assigned_variable: star_target_var
        // collecting vars: star_target_var, SSTNode
        //    vars: {'_literal': 'Token', 'star_target_var': 'SSTNode'}
        Token _literal = null;
        SSTNode star_target_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: star_target
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_target)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // REMOVE result call (star_target_var = star_target_rule()) != null  // star_target
            (star_target_var = star_target_rule()) != null  // star_target
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_171_ID, null);
    }

    // _gather_170: star_target _loop0_171
    public SSTNode[] _gather_170_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _gather_170, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, _GATHER_170_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, _GATHER_170_ID);
        }
        // visiting Alt: star_target _loop0_171
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // generated call: (star_target_var = star_target_rule()) != null  // star_target
            // node.name: elem, call.assigned_variable: star_target_var
        // collecting vars: star_target_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_171) - should work
            // generated call: (_loop0_171_var = _loop0_171_rule()) != null  // _loop0_171
            // node.name: seq, call.assigned_variable: _loop0_171_var
        // collecting vars: _loop0_171_var, SSTNode[]
        //    vars: {'star_target_var': 'SSTNode', '_loop0_171_var': 'SSTNode[]'}
        SSTNode[] _loop0_171_var = null;
        SSTNode star_target_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_target
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_target)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // REMOVE result call (star_target_var = star_target_rule()) != null  // star_target
            (star_target_var = star_target_rule()) != null  // star_target
            &&
            // TODO visiting JavaParserGeneratorNamedItem: _loop0_171
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_171)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_171) - should work
            // REMOVE result call (_loop0_171_var = _loop0_171_rule()) != null  // _loop0_171
            (_loop0_171_var = _loop0_171_rule()) != null  // _loop0_171
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _GATHER_170_ID, null);
    }

    // _tmp_172: ','
    public Object _tmp_172_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_172, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_172_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_172_ID);
        }
        // visiting Alt: ','
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        Token _literal = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_172_ID, null);
    }

    // _loop1_173: (',' star_target)
    public SSTNode[] _loop1_173_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_173, pos: " + pos);
            this.level++;
        }
        // visiting Alt: (',' star_target)
        // TODO visiting JavaCallMakerVisitor.visit_Group((',' star_target))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' star_target)
            // generated call: (_tmp_228_var = _tmp_228_rule()) != null  // ',' star_target
            // node.name: None, call.assigned_variable: _tmp_228_var
        // collecting vars: _tmp_228_var, None
        //    vars: {'_tmp_228_var': None}
        Object _tmp_228_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: (',' star_target)
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((',' star_target))
            // TODO visiting JavaCallMakerVisitor.visit_Group((',' star_target))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' star_target)
            // REMOVE result call (_tmp_228_var = _tmp_228_rule()) != null  // ',' star_target
            (_tmp_228_var = _tmp_228_rule()) != null  // ',' star_target
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP1_173_ID, null);
    }

    // _tmp_174: ','
    public Object _tmp_174_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_174, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_174_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_174_ID);
        }
        // visiting Alt: ','
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        Token _literal = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_174_ID, null);
    }

    // _tmp_175: !'*' star_target
    public Object _tmp_175_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_175, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_175_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_175_ID);
        }
        // visiting Alt: !'*' star_target
        // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!'*')
            // generated call: None
        // collecting vars: None, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // generated call: (star_target_var = star_target_rule()) != null  // star_target
            // node.name: None, call.assigned_variable: star_target_var
        // collecting vars: star_target_var, SSTNode
        //    vars: {None: None, 'star_target_var': 'SSTNode'}
        SSTNode star_target_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: !'*'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!'*')
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!'*')
            // TODO call is not created !'*' -> creates artificial
            true
            &&
            // TODO visiting JavaParserGeneratorNamedItem: star_target
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_target)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // REMOVE result call (star_target_var = star_target_rule()) != null  // star_target
            (star_target_var = star_target_rule()) != null  // star_target
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_175_ID, null);
    }

    // _tmp_176: star_targets_tuple_seq
    public Object _tmp_176_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_176, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_176_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_176_ID);
        }
        // visiting Alt: star_targets_tuple_seq
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets_tuple_seq) - should work
        // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // generated call: (star_targets_tuple_seq_var = star_targets_tuple_seq_rule()) != null  // star_targets_tuple_seq
            // node.name: None, call.assigned_variable: star_targets_tuple_seq_var
        // collecting vars: star_targets_tuple_seq_var, SSTNode[]
        //    vars: {'star_targets_tuple_seq_var': 'SSTNode[]'}
        SSTNode[] star_targets_tuple_seq_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_targets_tuple_seq
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_targets_tuple_seq)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets_tuple_seq) - should work
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // REMOVE result call (star_targets_tuple_seq_var = star_targets_tuple_seq_rule()) != null  // star_targets_tuple_seq
            (star_targets_tuple_seq_var = star_targets_tuple_seq_rule()) != null  // star_targets_tuple_seq
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_176_ID, null);
    }

    // _tmp_177: star_targets_list_seq
    public Object _tmp_177_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_177, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_177_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_177_ID);
        }
        // visiting Alt: star_targets_list_seq
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets_list_seq) - should work
        // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // generated call: (star_targets_list_seq_var = star_targets_list_seq_rule()) != null  // star_targets_list_seq
            // node.name: None, call.assigned_variable: star_targets_list_seq_var
        // collecting vars: star_targets_list_seq_var, SSTNode[]
        //    vars: {'star_targets_list_seq_var': 'SSTNode[]'}
        SSTNode[] star_targets_list_seq_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_targets_list_seq
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_targets_list_seq)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets_list_seq) - should work
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // REMOVE result call (star_targets_list_seq_var = star_targets_list_seq_rule()) != null  // star_targets_list_seq
            (star_targets_list_seq_var = star_targets_list_seq_rule()) != null  // star_targets_list_seq
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_177_ID, null);
    }

    // _loop0_179: ',' del_target
    public SSTNode[] _loop0_179_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_179, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ',' del_target
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_target) - should work
            // generated call: (del_target_var = del_target_rule()) != null  // del_target
            // node.name: elem, call.assigned_variable: del_target_var
        // collecting vars: del_target_var, SSTNode
        //    vars: {'_literal': 'Token', 'del_target_var': 'SSTNode'}
        Token _literal = null;
        SSTNode del_target_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: del_target
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(del_target)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_target) - should work
            // REMOVE result call (del_target_var = del_target_rule()) != null  // del_target
            (del_target_var = del_target_rule()) != null  // del_target
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_179_ID, null);
    }

    // _gather_178: del_target _loop0_179
    public SSTNode[] _gather_178_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _gather_178, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, _GATHER_178_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, _GATHER_178_ID);
        }
        // visiting Alt: del_target _loop0_179
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_target) - should work
            // generated call: (del_target_var = del_target_rule()) != null  // del_target
            // node.name: elem, call.assigned_variable: del_target_var
        // collecting vars: del_target_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_179) - should work
            // generated call: (_loop0_179_var = _loop0_179_rule()) != null  // _loop0_179
            // node.name: seq, call.assigned_variable: _loop0_179_var
        // collecting vars: _loop0_179_var, SSTNode[]
        //    vars: {'del_target_var': 'SSTNode', '_loop0_179_var': 'SSTNode[]'}
        SSTNode[] _loop0_179_var = null;
        SSTNode del_target_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: del_target
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(del_target)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_target) - should work
            // REMOVE result call (del_target_var = del_target_rule()) != null  // del_target
            (del_target_var = del_target_rule()) != null  // del_target
            &&
            // TODO visiting JavaParserGeneratorNamedItem: _loop0_179
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_179)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_179) - should work
            // REMOVE result call (_loop0_179_var = _loop0_179_rule()) != null  // _loop0_179
            (_loop0_179_var = _loop0_179_rule()) != null  // _loop0_179
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _GATHER_178_ID, null);
    }

    // _tmp_180: ','
    public Object _tmp_180_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_180, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_180_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_180_ID);
        }
        // visiting Alt: ','
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        Token _literal = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_180_ID, null);
    }

    // _tmp_181: del_targets
    public Object _tmp_181_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_181, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_181_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_181_ID);
        }
        // visiting Alt: del_targets
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_targets) - should work
        // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // generated call: (del_targets_var = del_targets_rule()) != null  // del_targets
            // node.name: None, call.assigned_variable: del_targets_var
        // collecting vars: del_targets_var, SSTNode[]
        //    vars: {'del_targets_var': 'SSTNode[]'}
        SSTNode[] del_targets_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: del_targets
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(del_targets)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_targets) - should work
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // REMOVE result call (del_targets_var = del_targets_rule()) != null  // del_targets
            (del_targets_var = del_targets_rule()) != null  // del_targets
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_181_ID, null);
    }

    // _tmp_182: del_targets
    public Object _tmp_182_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_182, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_182_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_182_ID);
        }
        // visiting Alt: del_targets
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_targets) - should work
        // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // generated call: (del_targets_var = del_targets_rule()) != null  // del_targets
            // node.name: None, call.assigned_variable: del_targets_var
        // collecting vars: del_targets_var, SSTNode[]
        //    vars: {'del_targets_var': 'SSTNode[]'}
        SSTNode[] del_targets_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: del_targets
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(del_targets)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_targets) - should work
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // REMOVE result call (del_targets_var = del_targets_rule()) != null  // del_targets
            (del_targets_var = del_targets_rule()) != null  // del_targets
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_182_ID, null);
    }

    // _loop0_184: ',' target
    public SSTNode[] _loop0_184_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_184, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ',' target
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(target) - should work
            // generated call: (target_var = target_rule()) != null  // target
            // node.name: elem, call.assigned_variable: target_var
        // collecting vars: target_var, SSTNode
        //    vars: {'_literal': 'Token', 'target_var': 'SSTNode'}
        Token _literal = null;
        SSTNode target_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: target
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(target)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(target) - should work
            // REMOVE result call (target_var = target_rule()) != null  // target
            (target_var = target_rule()) != null  // target
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_184_ID, null);
    }

    // _gather_183: target _loop0_184
    public SSTNode[] _gather_183_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _gather_183, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, _GATHER_183_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, _GATHER_183_ID);
        }
        // visiting Alt: target _loop0_184
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(target) - should work
            // generated call: (target_var = target_rule()) != null  // target
            // node.name: elem, call.assigned_variable: target_var
        // collecting vars: target_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_184) - should work
            // generated call: (_loop0_184_var = _loop0_184_rule()) != null  // _loop0_184
            // node.name: seq, call.assigned_variable: _loop0_184_var
        // collecting vars: _loop0_184_var, SSTNode[]
        //    vars: {'target_var': 'SSTNode', '_loop0_184_var': 'SSTNode[]'}
        SSTNode[] _loop0_184_var = null;
        SSTNode target_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: target
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(target)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(target) - should work
            // REMOVE result call (target_var = target_rule()) != null  // target
            (target_var = target_rule()) != null  // target
            &&
            // TODO visiting JavaParserGeneratorNamedItem: _loop0_184
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_184)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_184) - should work
            // REMOVE result call (_loop0_184_var = _loop0_184_rule()) != null  // _loop0_184
            (_loop0_184_var = _loop0_184_rule()) != null  // _loop0_184
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _GATHER_183_ID, null);
    }

    // _tmp_185: ','
    public Object _tmp_185_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_185, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_185_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_185_ID);
        }
        // visiting Alt: ','
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        Token _literal = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_185_ID, null);
    }

    // _tmp_186: arguments
    public Object _tmp_186_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_186, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_186_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_186_ID);
        }
        // visiting Alt: arguments
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(arguments) - should work
            // generated call: (arguments_var = arguments_rule()) != null  // arguments
            // node.name: None, call.assigned_variable: arguments_var
        // collecting vars: arguments_var, SSTNode
        //    vars: {'arguments_var': 'SSTNode'}
        SSTNode arguments_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: arguments
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(arguments)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(arguments) - should work
            // REMOVE result call (arguments_var = arguments_rule()) != null  // arguments
            (arguments_var = arguments_rule()) != null  // arguments
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_186_ID, null);
    }

    // _tmp_187: targets
    public Object _tmp_187_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_187, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_187_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_187_ID);
        }
        // visiting Alt: targets
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(targets) - should work
        // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // generated call: (targets_var = targets_rule()) != null  // targets
            // node.name: None, call.assigned_variable: targets_var
        // collecting vars: targets_var, SSTNode[]
        //    vars: {'targets_var': 'SSTNode[]'}
        SSTNode[] targets_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: targets
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(targets)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(targets) - should work
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // REMOVE result call (targets_var = targets_rule()) != null  // targets
            (targets_var = targets_rule()) != null  // targets
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_187_ID, null);
    }

    // _tmp_188: targets
    public Object _tmp_188_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_188, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_188_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_188_ID);
        }
        // visiting Alt: targets
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(targets) - should work
        // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // generated call: (targets_var = targets_rule()) != null  // targets
            // node.name: None, call.assigned_variable: targets_var
        // collecting vars: targets_var, SSTNode[]
        //    vars: {'targets_var': 'SSTNode[]'}
        SSTNode[] targets_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: targets
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(targets)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(targets) - should work
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // REMOVE result call (targets_var = targets_rule()) != null  // targets
            (targets_var = targets_rule()) != null  // targets
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_188_ID, null);
    }

    // _tmp_189: args | expression for_if_clauses
    public Object _tmp_189_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_189, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_189_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_189_ID);
        }
        // visiting Alt: args
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
            // generated call: (args_var = args_rule()) != null  // args
            // node.name: None, call.assigned_variable: args_var
        // collecting vars: args_var, SSTNode
        //    vars: {'args_var': 'SSTNode'}
        SSTNode args_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: args
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(args)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
            // REMOVE result call (args_var = args_rule()) != null  // args
            (args_var = args_rule()) != null  // args
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: expression for_if_clauses
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: None, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
        // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
            // generated call: (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            // node.name: None, call.assigned_variable: for_if_clauses_var
        // collecting vars: for_if_clauses_var, SSTNode[]
        //    vars: {'expression_var': 'SSTNode', 'for_if_clauses_var': 'SSTNode[]'}
        SSTNode expression_var = null;
        SSTNode[] for_if_clauses_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: for_if_clauses
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(for_if_clauses)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
            // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
            // REMOVE result call (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_189_ID, null);
    }

    // _loop0_190: star_named_expressions
    public SSTNode[] _loop0_190_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_190, pos: " + pos);
            this.level++;
        }
        // visiting Alt: star_named_expressions
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
        // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // generated call: (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
            // node.name: None, call.assigned_variable: star_named_expressions_var
        // collecting vars: star_named_expressions_var, SSTNode[]
        //    vars: {'star_named_expressions_var': 'SSTNode[]'}
        SSTNode[] star_named_expressions_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: star_named_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_named_expressions)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // REMOVE result call (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
            (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_190_ID, null);
    }

    // _loop0_191: (star_targets '=')
    public SSTNode[] _loop0_191_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_191, pos: " + pos);
            this.level++;
        }
        // visiting Alt: (star_targets '=')
        // TODO visiting JavaCallMakerVisitor.visit_Group((star_targets '='))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_targets '=')
            // generated call: (_tmp_229_var = _tmp_229_rule()) != null  // star_targets '='
            // node.name: None, call.assigned_variable: _tmp_229_var
        // collecting vars: _tmp_229_var, None
        //    vars: {'_tmp_229_var': None}
        Object _tmp_229_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: (star_targets '=')
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((star_targets '='))
            // TODO visiting JavaCallMakerVisitor.visit_Group((star_targets '='))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_targets '=')
            // REMOVE result call (_tmp_229_var = _tmp_229_rule()) != null  // star_targets '='
            (_tmp_229_var = _tmp_229_rule()) != null  // star_targets '='
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_191_ID, null);
    }

    // _loop0_192: (star_targets '=')
    public SSTNode[] _loop0_192_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_192, pos: " + pos);
            this.level++;
        }
        // visiting Alt: (star_targets '=')
        // TODO visiting JavaCallMakerVisitor.visit_Group((star_targets '='))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_targets '=')
            // generated call: (_tmp_230_var = _tmp_230_rule()) != null  // star_targets '='
            // node.name: None, call.assigned_variable: _tmp_230_var
        // collecting vars: _tmp_230_var, None
        //    vars: {'_tmp_230_var': None}
        Object _tmp_230_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: (star_targets '=')
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((star_targets '='))
            // TODO visiting JavaCallMakerVisitor.visit_Group((star_targets '='))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_targets '=')
            // REMOVE result call (_tmp_230_var = _tmp_230_rule()) != null  // star_targets '='
            (_tmp_230_var = _tmp_230_rule()) != null  // star_targets '='
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_192_ID, null);
    }

    // _tmp_193: yield_expr | star_expressions
    public Object _tmp_193_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_193, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_193_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_193_ID);
        }
        // visiting Alt: yield_expr
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
            // generated call: (yield_expr_var = yield_expr_rule()) != null  // yield_expr
            // node.name: None, call.assigned_variable: yield_expr_var
        // collecting vars: yield_expr_var, SSTNode
        //    vars: {'yield_expr_var': 'SSTNode'}
        SSTNode yield_expr_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: yield_expr
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(yield_expr)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
            // REMOVE result call (yield_expr_var = yield_expr_rule()) != null  // yield_expr
            (yield_expr_var = yield_expr_rule()) != null  // yield_expr
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: star_expressions
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // generated call: (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            // node.name: None, call.assigned_variable: star_expressions_var
        // collecting vars: star_expressions_var, SSTNode
        //    vars: {'star_expressions_var': 'SSTNode'}
        SSTNode star_expressions_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expressions)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // REMOVE result call (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            (star_expressions_var = star_expressions_rule()) != null  // star_expressions
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_193_ID, null);
    }

    // _tmp_194: '[' | '(' | '{'
    public Object _tmp_194_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_194, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_194_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_194_ID);
        }
        // visiting Alt: '['
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
            // generated call: (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        Token _literal = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '['
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('[')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
            // REMOVE result call (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            (_literal = expect(Token.Kind.LSQB)) != null  // token='['
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '('
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
            // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            (_literal = expect(Token.Kind.LPAR)) != null  // token='('
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '{'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
            // generated call: (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '{'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('{')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
            // REMOVE result call (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_194_ID, null);
    }

    // _tmp_195: '[' | '{'
    public Object _tmp_195_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_195, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_195_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_195_ID);
        }
        // visiting Alt: '['
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
            // generated call: (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        Token _literal = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '['
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('[')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
            // REMOVE result call (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            (_literal = expect(Token.Kind.LSQB)) != null  // token='['
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '{'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
            // generated call: (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '{'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('{')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
            // REMOVE result call (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_195_ID, null);
    }

    // _tmp_196: star_named_expressions
    public Object _tmp_196_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_196, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_196_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_196_ID);
        }
        // visiting Alt: star_named_expressions
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
        // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // generated call: (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
            // node.name: None, call.assigned_variable: star_named_expressions_var
        // collecting vars: star_named_expressions_var, SSTNode[]
        //    vars: {'star_named_expressions_var': 'SSTNode[]'}
        SSTNode[] star_named_expressions_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_named_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_named_expressions)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // REMOVE result call (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
            (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_196_ID, null);
    }

    // _loop0_197: param_no_default
    public SSTNode[] _loop0_197_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_197, pos: " + pos);
            this.level++;
        }
        // visiting Alt: param_no_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            // node.name: None, call.assigned_variable: param_no_default_var
        // collecting vars: param_no_default_var, SSTNode
        //    vars: {'param_no_default_var': 'SSTNode'}
        SSTNode param_no_default_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            (param_no_default_var = param_no_default_rule()) != null  // param_no_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_197_ID, null);
    }

    // _loop1_198: param_with_default
    public SSTNode[] _loop1_198_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_198, pos: " + pos);
            this.level++;
        }
        // visiting Alt: param_with_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
        // TODO replacing NameDefaultPair[] --> SSTNode[]
            // generated call: (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            // node.name: None, call.assigned_variable: param_with_default_var
        // collecting vars: param_with_default_var, SSTNode[]
        //    vars: {'param_with_default_var': 'SSTNode[]'}
        SSTNode[] param_with_default_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: param_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_with_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
            // TODO replacing NameDefaultPair[] --> SSTNode[]
            // REMOVE result call (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            (param_with_default_var = param_with_default_rule()) != null  // param_with_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP1_198_ID, null);
    }

    // _loop0_199: lambda_param_no_default
    public SSTNode[] _loop0_199_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_199, pos: " + pos);
            this.level++;
        }
        // visiting Alt: lambda_param_no_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
        // TODO replacing arg_ty --> SSTNode
            // generated call: (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            // node.name: None, call.assigned_variable: lambda_param_no_default_var
        // collecting vars: lambda_param_no_default_var, SSTNode
        //    vars: {'lambda_param_no_default_var': 'SSTNode'}
        SSTNode lambda_param_no_default_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
            // TODO replacing arg_ty --> SSTNode
            // REMOVE result call (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_199_ID, null);
    }

    // _loop1_200: lambda_param_with_default
    public SSTNode[] _loop1_200_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_200, pos: " + pos);
            this.level++;
        }
        // visiting Alt: lambda_param_with_default
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
        // TODO replacing NameDefaultPair[] --> SSTNode[]
            // generated call: (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            // node.name: None, call.assigned_variable: lambda_param_with_default_var
        // collecting vars: lambda_param_with_default_var, SSTNode[]
        //    vars: {'lambda_param_with_default_var': 'SSTNode[]'}
        SSTNode[] lambda_param_with_default_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: lambda_param_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_with_default)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
            // TODO replacing NameDefaultPair[] --> SSTNode[]
            // REMOVE result call (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP1_200_ID, null);
    }

    // _tmp_201: ')' | ',' (')' | '**')
    public Object _tmp_201_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_201, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_201_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_201_ID);
        }
        // visiting Alt: ')'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        Token _literal = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: ',' (')' | '**')
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // TODO visiting JavaCallMakerVisitor.visit_Group((')' | '**'))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(')' | '**')
            // generated call: (_tmp_231_var = _tmp_231_rule()) != null  // ')' | '**'
            // node.name: None, call.assigned_variable: _tmp_231_var
        // collecting vars: _tmp_231_var, None
        //    vars: {'_literal': 'Token', '_tmp_231_var': None}
        Object _tmp_231_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: (')' | '**')
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((')' | '**'))
            // TODO visiting JavaCallMakerVisitor.visit_Group((')' | '**'))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(')' | '**')
            // REMOVE result call (_tmp_231_var = _tmp_231_rule()) != null  // ')' | '**'
            (_tmp_231_var = _tmp_231_rule()) != null  // ')' | '**'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_201_ID, null);
    }

    // _tmp_202: ':' | ',' (':' | '**')
    public Object _tmp_202_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_202, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_202_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_202_ID);
        }
        // visiting Alt: ':'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        Token _literal = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            (_literal = expect(Token.Kind.COLON)) != null  // token=':'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: ',' (':' | '**')
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // TODO visiting JavaCallMakerVisitor.visit_Group((':' | '**'))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(':' | '**')
            // generated call: (_tmp_232_var = _tmp_232_rule()) != null  // ':' | '**'
            // node.name: None, call.assigned_variable: _tmp_232_var
        // collecting vars: _tmp_232_var, None
        //    vars: {'_literal': 'Token', '_tmp_232_var': None}
        Object _tmp_232_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: (':' | '**')
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((':' | '**'))
            // TODO visiting JavaCallMakerVisitor.visit_Group((':' | '**'))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(':' | '**')
            // REMOVE result call (_tmp_232_var = _tmp_232_rule()) != null  // ':' | '**'
            (_tmp_232_var = _tmp_232_rule()) != null  // ':' | '**'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_202_ID, null);
    }

    // _tmp_203: ASYNC
    public Object _tmp_203_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_203, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_203_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_203_ID);
        }
        // visiting Alt: ASYNC
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
            // generated call: (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            // node.name: None, call.assigned_variable: async_var
        // collecting vars: async_var, Token
        //    vars: {'async_var': 'Token'}
        Token async_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ASYNC
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(ASYNC)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
            // REMOVE result call (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_203_ID, null);
    }

    // _loop0_205: ',' (expression ['as' star_target])
    public SSTNode[] _loop0_205_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_205, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ',' (expression ['as' star_target])
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // TODO visiting JavaCallMakerVisitor.visit_Group((expression ['as' star_target]))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expression ['as' star_target])
            // generated call: (_tmp_233_var = _tmp_233_rule()) != null  // expression ['as' star_target]
            // node.name: elem, call.assigned_variable: _tmp_233_var
        // collecting vars: _tmp_233_var, None
        //    vars: {'_literal': 'Token', '_tmp_233_var': None}
        Token _literal = null;
        Object _tmp_233_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: (expression ['as' star_target])
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((expression ['as' star_target]))
            // TODO visiting JavaCallMakerVisitor.visit_Group((expression ['as' star_target]))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expression ['as' star_target])
            // REMOVE result call (_tmp_233_var = _tmp_233_rule()) != null  // expression ['as' star_target]
            (_tmp_233_var = _tmp_233_rule()) != null  // expression ['as' star_target]
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_205_ID, null);
    }

    // _gather_204: (expression ['as' star_target]) _loop0_205
    public SSTNode[] _gather_204_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _gather_204, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, _GATHER_204_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, _GATHER_204_ID);
        }
        // visiting Alt: (expression ['as' star_target]) _loop0_205
        // TODO visiting JavaCallMakerVisitor.visit_Group((expression ['as' star_target]))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expression ['as' star_target])
            // generated call: (_tmp_233_var = _tmp_233_rule()) != null  // expression ['as' star_target]
            // node.name: elem, call.assigned_variable: _tmp_233_var
        // collecting vars: _tmp_233_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_205) - should work
            // generated call: (_loop0_205_var = _loop0_205_rule()) != null  // _loop0_205
            // node.name: seq, call.assigned_variable: _loop0_205_var
        // collecting vars: _loop0_205_var, SSTNode[]
        //    vars: {'_tmp_233_var': None, '_loop0_205_var': 'SSTNode[]'}
        SSTNode[] _loop0_205_var = null;
        Object _tmp_233_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: (expression ['as' star_target])
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((expression ['as' star_target]))
            // TODO visiting JavaCallMakerVisitor.visit_Group((expression ['as' star_target]))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expression ['as' star_target])
            // REMOVE result call (_tmp_233_var = _tmp_233_rule()) != null  // expression ['as' star_target]
            (_tmp_233_var = _tmp_233_rule()) != null  // expression ['as' star_target]
            &&
            // TODO visiting JavaParserGeneratorNamedItem: _loop0_205
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_205)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_205) - should work
            // REMOVE result call (_loop0_205_var = _loop0_205_rule()) != null  // _loop0_205
            (_loop0_205_var = _loop0_205_rule()) != null  // _loop0_205
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _GATHER_204_ID, null);
    }

    // _tmp_206: ASYNC
    public Object _tmp_206_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_206, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_206_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_206_ID);
        }
        // visiting Alt: ASYNC
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
            // generated call: (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            // node.name: None, call.assigned_variable: async_var
        // collecting vars: async_var, Token
        //    vars: {'async_var': 'Token'}
        Token async_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ASYNC
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(ASYNC)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
            // REMOVE result call (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_206_ID, null);
    }

    // _loop0_208: ',' (expressions ['as' star_target])
    public SSTNode[] _loop0_208_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_208, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ',' (expressions ['as' star_target])
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // TODO visiting JavaCallMakerVisitor.visit_Group((expressions ['as' star_target]))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expressions ['as' star_target])
            // generated call: (_tmp_234_var = _tmp_234_rule()) != null  // expressions ['as' star_target]
            // node.name: elem, call.assigned_variable: _tmp_234_var
        // collecting vars: _tmp_234_var, None
        //    vars: {'_literal': 'Token', '_tmp_234_var': None}
        Token _literal = null;
        Object _tmp_234_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: (expressions ['as' star_target])
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((expressions ['as' star_target]))
            // TODO visiting JavaCallMakerVisitor.visit_Group((expressions ['as' star_target]))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expressions ['as' star_target])
            // REMOVE result call (_tmp_234_var = _tmp_234_rule()) != null  // expressions ['as' star_target]
            (_tmp_234_var = _tmp_234_rule()) != null  // expressions ['as' star_target]
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_208_ID, null);
    }

    // _gather_207: (expressions ['as' star_target]) _loop0_208
    public SSTNode[] _gather_207_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _gather_207, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, _GATHER_207_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, _GATHER_207_ID);
        }
        // visiting Alt: (expressions ['as' star_target]) _loop0_208
        // TODO visiting JavaCallMakerVisitor.visit_Group((expressions ['as' star_target]))
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expressions ['as' star_target])
            // generated call: (_tmp_234_var = _tmp_234_rule()) != null  // expressions ['as' star_target]
            // node.name: elem, call.assigned_variable: _tmp_234_var
        // collecting vars: _tmp_234_var, None
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_208) - should work
            // generated call: (_loop0_208_var = _loop0_208_rule()) != null  // _loop0_208
            // node.name: seq, call.assigned_variable: _loop0_208_var
        // collecting vars: _loop0_208_var, SSTNode[]
        //    vars: {'_tmp_234_var': None, '_loop0_208_var': 'SSTNode[]'}
        SSTNode[] _loop0_208_var = null;
        Object _tmp_234_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: (expressions ['as' star_target])
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((expressions ['as' star_target]))
            // TODO visiting JavaCallMakerVisitor.visit_Group((expressions ['as' star_target]))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expressions ['as' star_target])
            // REMOVE result call (_tmp_234_var = _tmp_234_rule()) != null  // expressions ['as' star_target]
            (_tmp_234_var = _tmp_234_rule()) != null  // expressions ['as' star_target]
            &&
            // TODO visiting JavaParserGeneratorNamedItem: _loop0_208
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_208)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_208) - should work
            // REMOVE result call (_loop0_208_var = _loop0_208_rule()) != null  // _loop0_208
            (_loop0_208_var = _loop0_208_rule()) != null  // _loop0_208
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _GATHER_207_ID, null);
    }

    // _tmp_209: 'as' NAME
    public Object _tmp_209_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_209, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_209_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_209_ID);
        }
        // visiting Alt: 'as' NAME
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
            // generated call: (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: None, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        //    vars: {'_keyword': 'Token', 'name_var': 'Token'}
        Token _keyword = null;
        Token name_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'as'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('as')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
            // REMOVE result call (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_209_ID, null);
    }

    // _tmp_210: 'as' NAME
    public Object _tmp_210_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_210, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_210_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_210_ID);
        }
        // visiting Alt: 'as' NAME
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
            // generated call: (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // node.name: None, call.assigned_variable: name_var
        // collecting vars: name_var, Token
        //    vars: {'_keyword': 'Token', 'name_var': 'Token'}
        Token _keyword = null;
        Token name_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'as'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('as')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
            // REMOVE result call (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
            (name_var = expect(Token.Kind.NAME)) != null  // NAME
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_210_ID, null);
    }

    // _loop0_212: ',' double_starred_kvpair
    public SSTNode[] _loop0_212_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_212, pos: " + pos);
            this.level++;
        }
        // visiting Alt: ',' double_starred_kvpair
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_starred_kvpair) - should work
        // TODO replacing KeyValuePair[] --> SSTNode[]
            // generated call: (double_starred_kvpair_var = double_starred_kvpair_rule()) != null  // double_starred_kvpair
            // node.name: elem, call.assigned_variable: double_starred_kvpair_var
        // collecting vars: double_starred_kvpair_var, SSTNode[]
        //    vars: {'_literal': 'Token', 'double_starred_kvpair_var': 'SSTNode[]'}
        Token _literal = null;
        SSTNode[] double_starred_kvpair_var = null;
        while (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: double_starred_kvpair
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(double_starred_kvpair)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_starred_kvpair) - should work
            // TODO replacing KeyValuePair[] --> SSTNode[]
            // REMOVE result call (double_starred_kvpair_var = double_starred_kvpair_rule()) != null  // double_starred_kvpair
            (double_starred_kvpair_var = double_starred_kvpair_rule()) != null  // double_starred_kvpair
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded - adding one result to collection!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _LOOP0_212_ID, null);
    }

    // _gather_211: double_starred_kvpair _loop0_212
    public SSTNode[] _gather_211_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _gather_211, pos: " + pos);
            this.level++;
        }
        if (cacheOfArrays.hasResult(pos, _GATHER_211_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cacheOfArrays.getResult(pos, _GATHER_211_ID);
        }
        // visiting Alt: double_starred_kvpair _loop0_212
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_starred_kvpair) - should work
        // TODO replacing KeyValuePair[] --> SSTNode[]
            // generated call: (double_starred_kvpair_var = double_starred_kvpair_rule()) != null  // double_starred_kvpair
            // node.name: elem, call.assigned_variable: double_starred_kvpair_var
        // collecting vars: double_starred_kvpair_var, SSTNode[]
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_212) - should work
            // generated call: (_loop0_212_var = _loop0_212_rule()) != null  // _loop0_212
            // node.name: seq, call.assigned_variable: _loop0_212_var
        // collecting vars: _loop0_212_var, SSTNode[]
        //    vars: {'double_starred_kvpair_var': 'SSTNode[]', '_loop0_212_var': 'SSTNode[]'}
        SSTNode[] _loop0_212_var = null;
        SSTNode[] double_starred_kvpair_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: double_starred_kvpair
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(double_starred_kvpair)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_starred_kvpair) - should work
            // TODO replacing KeyValuePair[] --> SSTNode[]
            // REMOVE result call (double_starred_kvpair_var = double_starred_kvpair_rule()) != null  // double_starred_kvpair
            (double_starred_kvpair_var = double_starred_kvpair_rule()) != null  // double_starred_kvpair
            &&
            // TODO visiting JavaParserGeneratorNamedItem: _loop0_212
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_212)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_212) - should work
            // REMOVE result call (_loop0_212_var = _loop0_212_rule()) != null  // _loop0_212
            (_loop0_212_var = _loop0_212_rule()) != null  // _loop0_212
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cacheOfArrays.putResult(pos, _GATHER_211_ID, null);
    }

    // _tmp_213: star_targets '='
    public Object _tmp_213_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_213, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_213_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_213_ID);
        }
        // visiting Alt: star_targets '='
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
            // generated call: (star_targets_var = star_targets_rule()) != null  // star_targets
            // node.name: z, call.assigned_variable: star_targets_var
        // collecting vars: star_targets_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
            // generated call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'star_targets_var': 'SSTNode', '_literal': 'Token'}
        Token _literal = null;
        SSTNode star_targets_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_targets
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_targets)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
            // REMOVE result call (star_targets_var = star_targets_rule()) != null  // star_targets
            (star_targets_var = star_targets_rule()) != null  // star_targets
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
            // REMOVE result call (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_213_ID, null);
    }

    // _tmp_214: '.' | '...'
    public Object _tmp_214_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_214, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_214_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_214_ID);
        }
        // visiting Alt: '.'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
            // generated call: (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        Token _literal = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '.'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('.')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
            // REMOVE result call (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            (_literal = expect(Token.Kind.DOT)) != null  // token='.'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '...'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('...')
            // generated call: (_literal = expect(Token.Kind.ELLIPSIS)) != null  // token='...'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '...'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('...')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('...')
            // REMOVE result call (_literal = expect(Token.Kind.ELLIPSIS)) != null  // token='...'
            (_literal = expect(Token.Kind.ELLIPSIS)) != null  // token='...'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_214_ID, null);
    }

    // _tmp_215: '.' | '...'
    public Object _tmp_215_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_215, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_215_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_215_ID);
        }
        // visiting Alt: '.'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
            // generated call: (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        Token _literal = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '.'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('.')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
            // REMOVE result call (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            (_literal = expect(Token.Kind.DOT)) != null  // token='.'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '...'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('...')
            // generated call: (_literal = expect(Token.Kind.ELLIPSIS)) != null  // token='...'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '...'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('...')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('...')
            // REMOVE result call (_literal = expect(Token.Kind.ELLIPSIS)) != null  // token='...'
            (_literal = expect(Token.Kind.ELLIPSIS)) != null  // token='...'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_215_ID, null);
    }

    // _tmp_216: '@' named_expression NEWLINE
    public Object _tmp_216_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_216, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_216_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_216_ID);
        }
        // visiting Alt: '@' named_expression NEWLINE
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('@')
            // generated call: (_literal = expect(Token.Kind.AT)) != null  // token='@'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // generated call: (named_expression_var = named_expression_rule()) != null  // named_expression
            // node.name: f, call.assigned_variable: named_expression_var
        // collecting vars: named_expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // generated call: (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            // node.name: None, call.assigned_variable: newline_var
        // collecting vars: newline_var, Token
        //    vars: {'_literal': 'Token', 'named_expression_var': 'SSTNode', 'newline_var': 'Token'}
        Token _literal = null;
        SSTNode named_expression_var = null;
        Token newline_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '@'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('@')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('@')
            // REMOVE result call (_literal = expect(Token.Kind.AT)) != null  // token='@'
            (_literal = expect(Token.Kind.AT)) != null  // token='@'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: named_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(named_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // REMOVE result call (named_expression_var = named_expression_rule()) != null  // named_expression
            (named_expression_var = named_expression_rule()) != null  // named_expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: NEWLINE
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // REMOVE result call (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_216_ID, null);
    }

    // _tmp_217: arguments
    public Object _tmp_217_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_217, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_217_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_217_ID);
        }
        // visiting Alt: arguments
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(arguments) - should work
            // generated call: (arguments_var = arguments_rule()) != null  // arguments
            // node.name: None, call.assigned_variable: arguments_var
        // collecting vars: arguments_var, SSTNode
        //    vars: {'arguments_var': 'SSTNode'}
        SSTNode arguments_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: arguments
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(arguments)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(arguments) - should work
            // REMOVE result call (arguments_var = arguments_rule()) != null  // arguments
            (arguments_var = arguments_rule()) != null  // arguments
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_217_ID, null);
    }

    // _tmp_218: ',' star_expression
    public Object _tmp_218_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_218, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_218_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_218_ID);
        }
        // visiting Alt: ',' star_expression
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expression) - should work
            // generated call: (star_expression_var = star_expression_rule()) != null  // star_expression
            // node.name: c, call.assigned_variable: star_expression_var
        // collecting vars: star_expression_var, SSTNode
        //    vars: {'_literal': 'Token', 'star_expression_var': 'SSTNode'}
        Token _literal = null;
        SSTNode star_expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: star_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expression) - should work
            // REMOVE result call (star_expression_var = star_expression_rule()) != null  // star_expression
            (star_expression_var = star_expression_rule()) != null  // star_expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_218_ID, null);
    }

    // _tmp_219: ',' expression
    public Object _tmp_219_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_219, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_219_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_219_ID);
        }
        // visiting Alt: ',' expression
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: c, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        //    vars: {'_literal': 'Token', 'expression_var': 'SSTNode'}
        Token _literal = null;
        SSTNode expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_219_ID, null);
    }

    // _tmp_220: 'or' conjunction
    public Object _tmp_220_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_220, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_220_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_220_ID);
        }
        // visiting Alt: 'or' conjunction
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('or')
            // generated call: (_keyword = expect(KEYWORD_OR)) != null  // token='or'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(conjunction) - should work
            // generated call: (conjunction_var = conjunction_rule()) != null  // conjunction
            // node.name: c, call.assigned_variable: conjunction_var
        // collecting vars: conjunction_var, SSTNode
        //    vars: {'_keyword': 'Token', 'conjunction_var': 'SSTNode'}
        Token _keyword = null;
        SSTNode conjunction_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'or'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('or')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('or')
            // REMOVE result call (_keyword = expect(KEYWORD_OR)) != null  // token='or'
            (_keyword = expect(KEYWORD_OR)) != null  // token='or'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: conjunction
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(conjunction)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(conjunction) - should work
            // REMOVE result call (conjunction_var = conjunction_rule()) != null  // conjunction
            (conjunction_var = conjunction_rule()) != null  // conjunction
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_220_ID, null);
    }

    // _tmp_221: 'and' inversion
    public Object _tmp_221_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_221, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_221_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_221_ID);
        }
        // visiting Alt: 'and' inversion
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('and')
            // generated call: (_keyword = expect(KEYWORD_AND)) != null  // token='and'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(inversion) - should work
            // generated call: (inversion_var = inversion_rule()) != null  // inversion
            // node.name: c, call.assigned_variable: inversion_var
        // collecting vars: inversion_var, SSTNode
        //    vars: {'_keyword': 'Token', 'inversion_var': 'SSTNode'}
        Token _keyword = null;
        SSTNode inversion_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'and'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('and')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('and')
            // REMOVE result call (_keyword = expect(KEYWORD_AND)) != null  // token='and'
            (_keyword = expect(KEYWORD_AND)) != null  // token='and'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: inversion
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(inversion)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(inversion) - should work
            // REMOVE result call (inversion_var = inversion_rule()) != null  // inversion
            (inversion_var = inversion_rule()) != null  // inversion
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_221_ID, null);
    }

    // _tmp_222: expression
    public Object _tmp_222_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_222, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_222_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_222_ID);
        }
        // visiting Alt: expression
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: None, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        //    vars: {'expression_var': 'SSTNode'}
        SSTNode expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_222_ID, null);
    }

    // _tmp_223: star_named_expressions
    public Object _tmp_223_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_223, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_223_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_223_ID);
        }
        // visiting Alt: star_named_expressions
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
        // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // generated call: (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
            // node.name: None, call.assigned_variable: star_named_expressions_var
        // collecting vars: star_named_expressions_var, SSTNode[]
        //    vars: {'star_named_expressions_var': 'SSTNode[]'}
        SSTNode[] star_named_expressions_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_named_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_named_expressions)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
            // REMOVE result call (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
            (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_223_ID, null);
    }

    // _tmp_224: 'if' disjunction
    public Object _tmp_224_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_224, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_224_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_224_ID);
        }
        // visiting Alt: 'if' disjunction
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
            // generated call: (_keyword = expect(KEYWORD_IF)) != null  // token='if'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
            // generated call: (disjunction_var = disjunction_rule()) != null  // disjunction
            // node.name: z, call.assigned_variable: disjunction_var
        // collecting vars: disjunction_var, SSTNode
        //    vars: {'_keyword': 'Token', 'disjunction_var': 'SSTNode'}
        Token _keyword = null;
        SSTNode disjunction_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'if'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('if')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
            // REMOVE result call (_keyword = expect(KEYWORD_IF)) != null  // token='if'
            (_keyword = expect(KEYWORD_IF)) != null  // token='if'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: disjunction
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(disjunction)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
            // REMOVE result call (disjunction_var = disjunction_rule()) != null  // disjunction
            (disjunction_var = disjunction_rule()) != null  // disjunction
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_224_ID, null);
    }

    // _tmp_225: 'if' disjunction
    public Object _tmp_225_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_225, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_225_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_225_ID);
        }
        // visiting Alt: 'if' disjunction
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
            // generated call: (_keyword = expect(KEYWORD_IF)) != null  // token='if'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
            // generated call: (disjunction_var = disjunction_rule()) != null  // disjunction
            // node.name: z, call.assigned_variable: disjunction_var
        // collecting vars: disjunction_var, SSTNode
        //    vars: {'_keyword': 'Token', 'disjunction_var': 'SSTNode'}
        Token _keyword = null;
        SSTNode disjunction_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'if'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('if')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
            // REMOVE result call (_keyword = expect(KEYWORD_IF)) != null  // token='if'
            (_keyword = expect(KEYWORD_IF)) != null  // token='if'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: disjunction
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(disjunction)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
            // REMOVE result call (disjunction_var = disjunction_rule()) != null  // disjunction
            (disjunction_var = disjunction_rule()) != null  // disjunction
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_225_ID, null);
    }

    // _tmp_226: starred_expression | direct_named_expression !'='
    public Object _tmp_226_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_226, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_226_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_226_ID);
        }
        // visiting Alt: starred_expression
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(starred_expression) - should work
            // generated call: (starred_expression_var = starred_expression_rule()) != null  // starred_expression
            // node.name: None, call.assigned_variable: starred_expression_var
        // collecting vars: starred_expression_var, SSTNode
        //    vars: {'starred_expression_var': 'SSTNode'}
        SSTNode starred_expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: starred_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(starred_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(starred_expression) - should work
            // REMOVE result call (starred_expression_var = starred_expression_rule()) != null  // starred_expression
            (starred_expression_var = starred_expression_rule()) != null  // starred_expression
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: direct_named_expression !'='
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(direct_named_expression) - should work
            // generated call: (direct_named_expression_var = direct_named_expression_rule()) != null  // direct_named_expression
            // node.name: None, call.assigned_variable: direct_named_expression_var
        // collecting vars: direct_named_expression_var, SSTNode
        // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!'=')
            // generated call: None
        // collecting vars: None, None
        //    vars: {'direct_named_expression_var': 'SSTNode', None: None}
        SSTNode direct_named_expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: direct_named_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(direct_named_expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(direct_named_expression) - should work
            // REMOVE result call (direct_named_expression_var = direct_named_expression_rule()) != null  // direct_named_expression
            (direct_named_expression_var = direct_named_expression_rule()) != null  // direct_named_expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: !'='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!'=')
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!'=')
            // TODO call is not created !'=' -> creates artificial
            true
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_226_ID, null);
    }

    // _tmp_227: ',' star_target
    public Object _tmp_227_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_227, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_227_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_227_ID);
        }
        // visiting Alt: ',' star_target
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // generated call: (star_target_var = star_target_rule()) != null  // star_target
            // node.name: c, call.assigned_variable: star_target_var
        // collecting vars: star_target_var, SSTNode
        //    vars: {'_literal': 'Token', 'star_target_var': 'SSTNode'}
        Token _literal = null;
        SSTNode star_target_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: star_target
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_target)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // REMOVE result call (star_target_var = star_target_rule()) != null  // star_target
            (star_target_var = star_target_rule()) != null  // star_target
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_227_ID, null);
    }

    // _tmp_228: ',' star_target
    public Object _tmp_228_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_228, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_228_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_228_ID);
        }
        // visiting Alt: ',' star_target
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // generated call: (star_target_var = star_target_rule()) != null  // star_target
            // node.name: c, call.assigned_variable: star_target_var
        // collecting vars: star_target_var, SSTNode
        //    vars: {'_literal': 'Token', 'star_target_var': 'SSTNode'}
        Token _literal = null;
        SSTNode star_target_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            &&
            // TODO visiting JavaParserGeneratorNamedItem: star_target
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_target)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // REMOVE result call (star_target_var = star_target_rule()) != null  // star_target
            (star_target_var = star_target_rule()) != null  // star_target
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_228_ID, null);
    }

    // _tmp_229: star_targets '='
    public Object _tmp_229_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_229, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_229_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_229_ID);
        }
        // visiting Alt: star_targets '='
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
            // generated call: (star_targets_var = star_targets_rule()) != null  // star_targets
            // node.name: None, call.assigned_variable: star_targets_var
        // collecting vars: star_targets_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
            // generated call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'star_targets_var': 'SSTNode', '_literal': 'Token'}
        Token _literal = null;
        SSTNode star_targets_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_targets
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_targets)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
            // REMOVE result call (star_targets_var = star_targets_rule()) != null  // star_targets
            (star_targets_var = star_targets_rule()) != null  // star_targets
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
            // REMOVE result call (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_229_ID, null);
    }

    // _tmp_230: star_targets '='
    public Object _tmp_230_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_230, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_230_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_230_ID);
        }
        // visiting Alt: star_targets '='
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
            // generated call: (star_targets_var = star_targets_rule()) != null  // star_targets
            // node.name: None, call.assigned_variable: star_targets_var
        // collecting vars: star_targets_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
            // generated call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'star_targets_var': 'SSTNode', '_literal': 'Token'}
        Token _literal = null;
        SSTNode star_targets_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: star_targets
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_targets)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
            // REMOVE result call (star_targets_var = star_targets_rule()) != null  // star_targets
            (star_targets_var = star_targets_rule()) != null  // star_targets
            &&
            // TODO visiting JavaParserGeneratorNamedItem: '='
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
            // REMOVE result call (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_230_ID, null);
    }

    // _tmp_231: ')' | '**'
    public Object _tmp_231_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_231, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_231_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_231_ID);
        }
        // visiting Alt: ')'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        Token _literal = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
            // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '**'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
            // generated call: (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '**'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('**')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
            // REMOVE result call (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_231_ID, null);
    }

    // _tmp_232: ':' | '**'
    public Object _tmp_232_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_232, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_232_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_232_ID);
        }
        // visiting Alt: ':'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        Token _literal = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            (_literal = expect(Token.Kind.COLON)) != null  // token=':'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        // visiting Alt: '**'
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
            // generated call: (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            // node.name: None, call.assigned_variable: _literal
        // collecting vars: _literal, Token
        //    vars: {'_literal': 'Token'}
        if (
            // TODO visiting JavaParserGeneratorNamedItem: '**'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('**')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
            // REMOVE result call (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_232_ID, null);
    }

    // _tmp_233: expression ['as' star_target]
    public Object _tmp_233_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_233, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_233_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_233_ID);
        }
        // visiting Alt: expression ['as' star_target]
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // generated call: (expression_var = expression_rule()) != null  // expression
            // node.name: None, call.assigned_variable: expression_var
        // collecting vars: expression_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' star_target])
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' star_target)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_235_var = _tmp_235_rule()) != null  // 'as' star_target
            // generated call: ((_opt_var = _tmp_235_rule()) != null || _opt_var == null)  // ['as' star_target]
            // node.name: None, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'expression_var': 'SSTNode', '_opt_var': None}
        Object _opt_var = null;
        SSTNode expression_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // REMOVE result call (expression_var = expression_rule()) != null  // expression
            (expression_var = expression_rule()) != null  // expression
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ['as' star_target]
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(['as' star_target])
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' star_target])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' star_target)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_235_var = _tmp_235_rule()) != null  // 'as' star_target
            // REMOVE result call ((_opt_var = _tmp_235_rule()) != null || _opt_var == null)  // ['as' star_target]
            ((_opt_var = _tmp_235_rule()) != null || _opt_var == null)  // ['as' star_target]
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_233_ID, null);
    }

    // _tmp_234: expressions ['as' star_target]
    public Object _tmp_234_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_234, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_234_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_234_ID);
        }
        // visiting Alt: expressions ['as' star_target]
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expressions) - should work
            // generated call: (expressions_var = expressions_rule()) != null  // expressions
            // node.name: None, call.assigned_variable: expressions_var
        // collecting vars: expressions_var, SSTNode
        // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' star_target])
        // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' star_target)
            // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_236_var = _tmp_236_rule()) != null  // 'as' star_target
            // generated call: ((_opt_var = _tmp_236_rule()) != null || _opt_var == null)  // ['as' star_target]
            // node.name: None, call.assigned_variable: _opt_var
        // collecting vars: _opt_var, None
        //    vars: {'expressions_var': 'SSTNode', '_opt_var': None}
        Object _opt_var = null;
        SSTNode expressions_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expressions)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expressions) - should work
            // REMOVE result call (expressions_var = expressions_rule()) != null  // expressions
            (expressions_var = expressions_rule()) != null  // expressions
            &&
            // TODO visiting JavaParserGeneratorNamedItem: ['as' star_target]
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(['as' star_target])
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' star_target])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' star_target)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_236_var = _tmp_236_rule()) != null  // 'as' star_target
            // REMOVE result call ((_opt_var = _tmp_236_rule()) != null || _opt_var == null)  // ['as' star_target]
            ((_opt_var = _tmp_236_rule()) != null || _opt_var == null)  // ['as' star_target]
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_234_ID, null);
    }

    // _tmp_235: 'as' star_target
    public Object _tmp_235_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_235, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_235_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_235_ID);
        }
        // visiting Alt: 'as' star_target
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
            // generated call: (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // generated call: (star_target_var = star_target_rule()) != null  // star_target
            // node.name: None, call.assigned_variable: star_target_var
        // collecting vars: star_target_var, SSTNode
        //    vars: {'_keyword': 'Token', 'star_target_var': 'SSTNode'}
        Token _keyword = null;
        SSTNode star_target_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'as'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('as')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
            // REMOVE result call (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: star_target
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_target)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // REMOVE result call (star_target_var = star_target_rule()) != null  // star_target
            (star_target_var = star_target_rule()) != null  // star_target
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_235_ID, null);
    }

    // _tmp_236: 'as' star_target
    public Object _tmp_236_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Rule: _tmp_236, pos: " + pos);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_236_ID)) {
            if (DEBUG) {
                debugMessageln("Taken from cache");
                this.level--;
            }
            return cache.getResult(pos, _TMP_236_ID);
        }
        // visiting Alt: 'as' star_target
        // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
            // generated call: (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            // node.name: None, call.assigned_variable: _keyword
        // collecting vars: _keyword, Token
        // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // generated call: (star_target_var = star_target_rule()) != null  // star_target
            // node.name: None, call.assigned_variable: star_target_var
        // collecting vars: star_target_var, SSTNode
        //    vars: {'_keyword': 'Token', 'star_target_var': 'SSTNode'}
        Token _keyword = null;
        SSTNode star_target_var = null;
        if (
            // TODO visiting JavaParserGeneratorNamedItem: 'as'
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('as')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
            // REMOVE result call (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            &&
            // TODO visiting JavaParserGeneratorNamedItem: star_target
            // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_target)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // REMOVE result call (star_target_var = star_target_rule()) != null  // star_target
            (star_target_var = star_target_rule()) != null  // star_target
        ) {
            if (DEBUG) {
                debugMessageln("Succeeded!");
            }
        }
        reset(pos);
        if (DEBUG) {
            debugMessageln("Result: null");
            this.level--;
        }
        return cache.putResult(pos, _TMP_236_ID, null);
    }

    private void indent(StringBuffer sb) {
        for (int i = 0; i < level; i++) {
            sb.append("  ");
        }
    }
    
    void debugMessage(String text) {
        debugMessage(text, true);
    }
    
    void debugMessage(String text, boolean indent) {
        StringBuffer sb = new StringBuffer();
        if(indent) {
            indent(sb);
        }
        sb.append(text);
        System.out.print(sb.toString());
    }

    void debugMessageln(String text) {
        debugMessageln(text, true);
    }
    
    void debugMessageln(String text, boolean indent) {
        StringBuffer sb = new StringBuffer();
        if (indent) {
            indent(sb);
        }
        sb.append(text);
        System.out.println(sb.toString());
    }
}
