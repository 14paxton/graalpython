// @generated by java_generator.py from pegjava/python.gram

/*
 * This is not ready to use.
 * Here should be the license.
 */

package com.oracle.graal.python.parser;

import com.oracle.graal.python.parser.sst.SSTNode;
import com.oracle.graal.python.parser.tokenizer.Token;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class GenParser extends Parser {
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(statements?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(statements)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_1_var = _tmp_1_rule()) != null  // statements
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf($) - should work
// name = ENDMARKER
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(statement_newline) - should work
// name = statement_newline
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expressions) - should work
// name = expressions
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(NEWLINE*)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf($) - should work
// name = ENDMARKER
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(type_expressions?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(type_expressions)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_3_var = _tmp_3_rule()) != null  // type_expressions
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('->')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(NEWLINE*)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf($) - should work
// name = ENDMARKER
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
// name = star_expressions
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.expression+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.expression+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.expression+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.expression+)
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(statement+)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(compound_stmt) - should work
// name = compound_stmt
// TODO replacing stmt_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmts) - should work
// name = simple_stmts
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(compound_stmt) - should work
// name = compound_stmt
// TODO replacing stmt_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
// name = NEWLINE
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmts) - should work
// name = simple_stmts
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
// name = NEWLINE
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf($) - should work
// name = ENDMARKER
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmt) - should work
// name = simple_stmt
// TODO replacing stmt_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!';')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(';')
// lookahead_call_helper call: (_literal = expect(Token.Kind.SEMI)) != null  // token=';'
//    call.nodetype: GENERIC_TOKEN
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
// name = NEWLINE
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(';'.simple_stmt+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(';'?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(';')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_16_var = _tmp_16_rule()) != null  // ';'
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
// name = NEWLINE
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(assignment) - should work
// name = assignment
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
// name = star_expressions
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'return')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(return_stmt) - should work
// name = return_stmt
// TODO replacing stmt_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('import' | 'from'))
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_stmt) - should work
// name = import_stmt
// TODO replacing stmt_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'raise')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(raise_stmt) - should work
// name = raise_stmt
// TODO replacing stmt_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('pass')
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'del')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_stmt) - should work
// name = del_stmt
// TODO replacing stmt_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'yield')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_stmt) - should work
// name = yield_stmt
// TODO replacing stmt_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'assert')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(assert_stmt) - should work
// name = assert_stmt
// TODO replacing stmt_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('break')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('continue')
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'global')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(global_stmt) - should work
// name = global_stmt
// TODO replacing stmt_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'nonlocal')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(nonlocal_stmt) - should work
// name = nonlocal_stmt
// TODO replacing stmt_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('def' | '@' | ASYNC))
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(function_def) - should work
// name = function_def
// TODO replacing stmt_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'if')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(if_stmt) - should work
// name = if_stmt
// TODO replacing stmt_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('class' | '@'))
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(class_def) - should work
// name = class_def
// TODO replacing stmt_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('with' | ASYNC))
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_stmt) - should work
// name = with_stmt
// TODO replacing stmt_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('for' | ASYNC))
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_stmt) - should work
// name = for_stmt
// TODO replacing stmt_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'try')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(try_stmt) - should work
// name = try_stmt
// TODO replacing stmt_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'while')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(while_stmt) - should work
// name = while_stmt
// TODO replacing stmt_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(match_stmt) - should work
// name = match_stmt
// TODO replacing stmt_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(['=' annotated_rhs])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('=' annotated_rhs)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_17_var = _tmp_17_rule()) != null  // '=' annotated_rhs
// TODO visiting JavaCallMakerVisitor.visit_Group(('(' single_target ')' | single_subscript_attribute_target))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('(' single_target ')' | single_subscript_attribute_target)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(['=' annotated_rhs])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('=' annotated_rhs)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_19_var = _tmp_19_rule()) != null  // '=' annotated_rhs
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(((star_targets '='))+)
// TODO visiting JavaCallMakerVisitor.visit_Group((yield_expr | star_expressions))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(yield_expr | star_expressions)
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!'=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// lookahead_call_helper call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
//    call.nodetype: GENERIC_TOKEN
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(TYPE_COMMENT)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_22_var = _tmp_22_rule()) != null  // TYPE_COMMENT
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(single_target) - should work
// name = single_target
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(augassign) - should work
// name = augassign
// TODO replacing AugOperator[] --> SSTNode[]
// TODO visiting JavaCallMakerVisitor.visit_Cut(~)
// TODO visiting JavaCallMakerVisitor.visit_Group((yield_expr | star_expressions))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(yield_expr | star_expressions)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_assignment) - should work
// name = invalid_assignment
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('+=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('-=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('@=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('%=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('&=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('|=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('^=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('<<=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('>>=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('//=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('global')
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.NAME+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('nonlocal')
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.NAME+)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
// name = yield_expr
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('assert')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_Opt([',' expression])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' expression)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_28_var = _tmp_28_rule()) != null  // ',' expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('del')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_targets) - should work
// name = del_targets
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&(';' | NEWLINE))
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_del_stmt) - should work
// name = invalid_del_stmt
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_name) - should work
// name = import_name
// TODO replacing stmt_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from) - should work
// name = import_from
// TODO replacing stmt_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('import')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_as_names) - should work
// name = dotted_as_names
// TODO replacing asdl_alias_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('from')
// TODO visiting JavaCallMakerVisitor.visit_Repeat0((('.' | '...'))*)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_name) - should work
// name = dotted_name
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('import')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_targets) - should work
// name = import_from_targets
// TODO replacing asdl_alias_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('from')
// TODO visiting JavaCallMakerVisitor.visit_Repeat1((('.' | '...'))+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('import')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_targets) - should work
// name = import_from_targets
// TODO replacing asdl_alias_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_as_names) - should work
// name = import_from_as_names
// TODO replacing asdl_alias_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_31_var = _tmp_31_rule()) != null  // ','
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_as_names) - should work
// name = import_from_as_names
// TODO replacing asdl_alias_seq[] --> SSTNode[]
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!',')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// lookahead_call_helper call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
//    call.nodetype: GENERIC_TOKEN
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_import_from_targets) - should work
// name = invalid_import_from_targets
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.import_from_as_name+)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' NAME])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' NAME)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_34_var = _tmp_34_rule()) != null  // 'as' NAME
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.dotted_as_name+)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_name) - should work
// name = dotted_name
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' NAME])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' NAME)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_37_var = _tmp_37_rule()) != null  // 'as' NAME
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_name) - should work
// name = dotted_name
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
// name = named_expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// name = block
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(elif_stmt) - should work
// name = elif_stmt
// TODO replacing stmt_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
// name = named_expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// name = block
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_38_var = _tmp_38_rule()) != null  // else_block
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_if_stmt) - should work
// name = invalid_if_stmt
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('elif')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
// name = named_expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// name = block
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(elif_stmt) - should work
// name = elif_stmt
// TODO replacing stmt_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('elif')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
// name = named_expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// name = block
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_39_var = _tmp_39_rule()) != null  // else_block
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_elif_stmt) - should work
// name = invalid_elif_stmt
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('else')
// TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// name = block
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('while')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
// name = named_expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// name = block
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_40_var = _tmp_40_rule()) != null  // else_block
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_while_stmt) - should work
// name = invalid_while_stmt
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('for')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
// name = star_targets
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
// TODO visiting JavaCallMakerVisitor.visit_Cut(~)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
// name = star_expressions
// TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(TYPE_COMMENT)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_41_var = _tmp_41_rule()) != null  // TYPE_COMMENT
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// name = block
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_42_var = _tmp_42_rule()) != null  // else_block
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
// name = ASYNC
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('for')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
// name = star_targets
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
// TODO visiting JavaCallMakerVisitor.visit_Cut(~)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
// name = star_expressions
// TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(TYPE_COMMENT)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_43_var = _tmp_43_rule()) != null  // TYPE_COMMENT
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// name = block
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_44_var = _tmp_44_rule()) != null  // else_block
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_for_target) - should work
// name = invalid_for_target
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.with_item+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// name = block
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.with_item+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(TYPE_COMMENT)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_49_var = _tmp_49_rule()) != null  // TYPE_COMMENT
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// name = block
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
// name = ASYNC
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.with_item+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// name = block
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
// name = ASYNC
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.with_item+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(TYPE_COMMENT)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_54_var = _tmp_54_rule()) != null  // TYPE_COMMENT
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// name = block
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_with_stmt) - should work
// name = invalid_with_stmt
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
// name = star_target
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&(',' | ')' | ':'))
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_with_item) - should work
// name = invalid_with_item
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('try')
// TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// name = block
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(finally_block) - should work
// name = finally_block
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('try')
// TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// name = block
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(except_block+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_56_var = _tmp_56_rule()) != null  // else_block
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(finally_block?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(finally_block)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_57_var = _tmp_57_rule()) != null  // finally_block
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('except')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' NAME])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' NAME)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_58_var = _tmp_58_rule()) != null  // 'as' NAME
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// name = block
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('except')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// name = block
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_except_block) - should work
// name = invalid_except_block
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('finally')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// name = block
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf("match")
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(subject_expr) - should work
// name = subject_expr
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
// name = NEWLINE
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(INDENT) - should work
// name = INDENT
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(case_block+)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(DEDENT) - should work
// name = DEDENT
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_match_stmt) - should work
// name = invalid_match_stmt
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
// name = star_named_expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_named_expressions?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
// name = star_named_expressions
// TODO replacing asdl_expr_seq[] --> SSTNode[]
    // JavaCallMakerVisitor.visit_Opt.generated call: (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
// name = named_expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf("case")
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(patterns) - should work
// name = patterns
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(guard?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(guard) - should work
// name = guard
    // JavaCallMakerVisitor.visit_Opt.generated call: (guard_var = guard_rule()) != null  // guard
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// name = block
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_case_block) - should work
// name = invalid_case_block
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
// name = named_expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(open_sequence_pattern) - should work
// name = open_sequence_pattern
// TODO replacing asdl_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
// name = pattern
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(as_pattern) - should work
// name = as_pattern
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(or_pattern) - should work
// name = or_pattern
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(or_pattern) - should work
// name = or_pattern
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(capture_pattern) - should work
// name = capture_pattern
// REMOVE visiting JavaCallMakerVisitor.visit_Gather('|'.closed_pattern+)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(literal_pattern) - should work
// name = literal_pattern
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(capture_pattern) - should work
// name = capture_pattern
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(wildcard_pattern) - should work
// name = wildcard_pattern
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(value_pattern) - should work
// name = value_pattern
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(group_pattern) - should work
// name = group_pattern
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sequence_pattern) - should work
// name = sequence_pattern
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(mapping_pattern) - should work
// name = mapping_pattern
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(class_pattern) - should work
// name = class_pattern
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(signed_number) - should work
// name = signed_number
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!('+' | '-'))
// TODO visiting JavaCallMakerVisitor.visit_Group(('+' | '-'))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('+' | '-')
// lookahead_call_helper call: (_tmp_62_var = _tmp_62_rule()) != null  // '+' | '-'
//    call.nodetype: None
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(signed_number) - should work
// name = signed_number
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('+')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NUMBER) - should work
// name = NUMBER
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(signed_number) - should work
// name = signed_number
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('-')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NUMBER) - should work
// name = NUMBER
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(strings) - should work
// name = strings
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('None')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('True')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('False')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NUMBER) - should work
// name = NUMBER
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('-')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NUMBER) - should work
// name = NUMBER
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!"_")
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf("_")
// lookahead_call_helper call: (_keyword = expect("_")) != null  // soft_keyword='"_"'
//    call.nodetype: SOFT_KEYWORD
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!('.' | '(' | '='))
// TODO visiting JavaCallMakerVisitor.visit_Group(('.' | '(' | '='))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('.' | '(' | '=')
// lookahead_call_helper call: (_tmp_63_var = _tmp_63_rule()) != null  // '.' | '(' | '='
//    call.nodetype: None
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf("_")
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(attr) - should work
// name = attr
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!('.' | '(' | '='))
// TODO visiting JavaCallMakerVisitor.visit_Group(('.' | '(' | '='))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('.' | '(' | '=')
// lookahead_call_helper call: (_tmp_64_var = _tmp_64_rule()) != null  // '.' | '(' | '='
//    call.nodetype: None
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(name_or_attr) - should work
// name = name_or_attr
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(attr) - should work
// name = attr
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
// name = pattern
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(maybe_sequence_pattern?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(maybe_sequence_pattern) - should work
// name = maybe_sequence_pattern
// TODO replacing asdl_seq[] --> SSTNode[]
    // JavaCallMakerVisitor.visit_Opt.generated call: (maybe_sequence_pattern_var = maybe_sequence_pattern_rule()) != null  // maybe_sequence_pattern
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(open_sequence_pattern?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(open_sequence_pattern) - should work
// name = open_sequence_pattern
// TODO replacing asdl_seq[] --> SSTNode[]
    // JavaCallMakerVisitor.visit_Opt.generated call: (open_sequence_pattern_var = open_sequence_pattern_rule()) != null  // open_sequence_pattern
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(maybe_star_pattern) - should work
// name = maybe_star_pattern
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(maybe_sequence_pattern?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(maybe_sequence_pattern) - should work
// name = maybe_sequence_pattern
// TODO replacing asdl_seq[] --> SSTNode[]
    // JavaCallMakerVisitor.visit_Opt.generated call: (maybe_sequence_pattern_var = maybe_sequence_pattern_rule()) != null  // maybe_sequence_pattern
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.maybe_star_pattern+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_pattern) - should work
// name = star_pattern
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
// name = pattern
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// TODO visiting JavaCallMakerVisitor.visit_Group((capture_pattern | wildcard_pattern))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(capture_pattern | wildcard_pattern)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(items_pattern?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(items_pattern) - should work
// name = items_pattern
// TODO replacing asdl_seq[] --> SSTNode[]
    // JavaCallMakerVisitor.visit_Opt.generated call: (items_pattern_var = items_pattern_rule()) != null  // items_pattern
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.key_value_pattern+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
// TODO visiting JavaCallMakerVisitor.visit_Group((literal_pattern | value_pattern))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(literal_pattern | value_pattern)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
// name = pattern
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_star_pattern) - should work
// name = double_star_pattern
// TODO replacing KeyValuePair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(capture_pattern) - should work
// name = capture_pattern
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(name_or_attr) - should work
// name = name_or_attr
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(name_or_attr) - should work
// name = name_or_attr
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(positional_patterns) - should work
// name = positional_patterns
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(name_or_attr) - should work
// name = name_or_attr
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(keyword_patterns) - should work
// name = keyword_patterns
// TODO replacing asdl_keyword_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(name_or_attr) - should work
// name = name_or_attr
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(positional_patterns) - should work
// name = positional_patterns
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(keyword_patterns) - should work
// name = keyword_patterns
// TODO replacing asdl_keyword_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.pattern+)
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.keyword_pattern+)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
// name = pattern
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('return')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_expressions?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_expressions)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_75_var = _tmp_75_rule()) != null  // star_expressions
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('raise')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(['from' expression])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('from' expression)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_76_var = _tmp_76_rule()) != null  // 'from' expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('raise')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(decorators) - should work
// name = decorators
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(function_def_raw) - should work
// name = function_def_raw
// TODO replacing stmt_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(function_def_raw) - should work
// name = function_def_raw
// TODO replacing stmt_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('def')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(params?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(params)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_77_var = _tmp_77_rule()) != null  // params
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(['->' expression])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('->' expression)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_78_var = _tmp_78_rule()) != null  // '->' expression
// TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(func_type_comment?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(func_type_comment)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_79_var = _tmp_79_rule()) != null  // func_type_comment
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// name = block
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
// name = ASYNC
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('def')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(params?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(params)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_80_var = _tmp_80_rule()) != null  // params
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(['->' expression])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('->' expression)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_81_var = _tmp_81_rule()) != null  // '->' expression
// TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(func_type_comment?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(func_type_comment)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_82_var = _tmp_82_rule()) != null  // func_type_comment
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// name = block
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
// name = NEWLINE
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
// name = TYPE_COMMENT
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&(NEWLINE INDENT))
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_double_type_comments) - should work
// name = invalid_double_type_comments
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
// name = TYPE_COMMENT
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_parameters) - should work
// name = invalid_parameters
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(parameters) - should work
// name = parameters
// TODO replacing arguments_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slash_no_default) - should work
// name = slash_no_default
// TODO replacing asdl_arg_seq[] --> SSTNode[]
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_no_default*)
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_with_default*)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_etc?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_etc)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_85_var = _tmp_85_rule()) != null  // star_etc
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slash_with_default) - should work
// name = slash_with_default
// TODO replacing SlashWithDefault[] --> SSTNode[]
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_with_default*)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_etc?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_etc)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_87_var = _tmp_87_rule()) != null  // star_etc
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_no_default+)
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_with_default*)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_etc?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_etc)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_90_var = _tmp_90_rule()) != null  // star_etc
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_with_default+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_etc?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_etc)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_92_var = _tmp_92_rule()) != null  // star_etc
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_etc) - should work
// name = star_etc
// TODO replacing StarEtc[] --> SSTNode[]
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_no_default+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_no_default+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_no_default*)
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_with_default+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_no_default*)
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_with_default+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
// name = param_no_default
// TODO replacing arg_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_maybe_default*)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(kwds?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(kwds)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_100_var = _tmp_100_rule()) != null  // kwds
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_maybe_default+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(kwds?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(kwds)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_102_var = _tmp_102_rule()) != null  // kwds
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwds) - should work
// name = kwds
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_star_etc) - should work
// name = invalid_star_etc
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
// name = param_no_default
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
// name = param
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
// name = TYPE_COMMENT
    // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
// name = param
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
// name = TYPE_COMMENT
    // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
// name = param
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
// name = default_param
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
// name = TYPE_COMMENT
    // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
// name = param
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
// name = default_param
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
// name = TYPE_COMMENT
    // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
// name = param
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(default_param?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
// name = default_param
    // JavaCallMakerVisitor.visit_Opt.generated call: (default_param_var = default_param_rule()) != null  // default_param
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
// name = TYPE_COMMENT
    // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
// name = param
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(default_param?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
// name = default_param
    // JavaCallMakerVisitor.visit_Opt.generated call: (default_param_var = default_param_rule()) != null  // default_param
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
// name = TYPE_COMMENT
    // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(annotation?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(annotation) - should work
// name = annotation
    // JavaCallMakerVisitor.visit_Opt.generated call: (annotation_var = annotation_rule()) != null  // annotation
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// TODO visiting JavaCallMakerVisitor.visit_Repeat1((('@' named_expression NEWLINE))+)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(decorators) - should work
// name = decorators
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(class_def_raw) - should work
// name = class_def_raw
// TODO replacing stmt_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(class_def_raw) - should work
// name = class_def_raw
// TODO replacing stmt_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('class')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(['(' arguments? ')'])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('(' arguments? ')')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_104_var = _tmp_104_rule()) != null  // '(' arguments? ')'
// TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
// name = block
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
// name = NEWLINE
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(INDENT) - should work
// name = INDENT
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(statements) - should work
// name = statements
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(DEDENT) - should work
// name = DEDENT
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmts) - should work
// name = simple_stmts
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_block) - should work
// name = invalid_block
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expression) - should work
// name = star_expression
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(((',' star_expression))+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_106_var = _tmp_106_rule()) != null  // ','
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expression) - should work
// name = star_expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expression) - should work
// name = star_expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// name = bitwise_or
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.star_named_expression+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_109_var = _tmp_109_rule()) != null  // ','
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// name = bitwise_or
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
// name = named_expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':=')
// TODO visiting JavaCallMakerVisitor.visit_Cut(~)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_named_expression) - should work
// name = invalid_named_expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!':=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':=')
// lookahead_call_helper call: (_literal = expect(Token.Kind.COLONEQUAL)) != null  // token=':='
//    call.nodetype: GENERIC_TOKEN
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':=')
// TODO visiting JavaCallMakerVisitor.visit_Cut(~)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!':=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':=')
// lookahead_call_helper call: (_literal = expect(Token.Kind.COLONEQUAL)) != null  // token=':='
//    call.nodetype: GENERIC_TOKEN
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
// name = yield_expr
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
// name = star_expressions
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(((',' expression))+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_111_var = _tmp_111_rule()) != null  // ','
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_expression) - should work
// name = invalid_expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
// name = disjunction
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
// name = disjunction
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('else')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
// name = disjunction
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambdef) - should work
// name = lambdef
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('lambda')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_params?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_params)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_112_var = _tmp_112_rule()) != null  // lambda_params
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_lambda_parameters) - should work
// name = invalid_lambda_parameters
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_parameters) - should work
// name = lambda_parameters
// TODO replacing arguments_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_slash_no_default) - should work
// name = lambda_slash_no_default
// TODO replacing asdl_arg_seq[] --> SSTNode[]
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_no_default*)
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_with_default*)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_star_etc?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_star_etc)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_115_var = _tmp_115_rule()) != null  // lambda_star_etc
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_slash_with_default) - should work
// name = lambda_slash_with_default
// TODO replacing SlashWithDefault[] --> SSTNode[]
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_with_default*)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_star_etc?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_star_etc)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_117_var = _tmp_117_rule()) != null  // lambda_star_etc
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_no_default+)
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_with_default*)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_star_etc?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_star_etc)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_120_var = _tmp_120_rule()) != null  // lambda_star_etc
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_with_default+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_star_etc?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_star_etc)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_122_var = _tmp_122_rule()) != null  // lambda_star_etc
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_star_etc) - should work
// name = lambda_star_etc
// TODO replacing StarEtc[] --> SSTNode[]
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_no_default+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_no_default+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&':')
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_no_default*)
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_with_default+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_no_default*)
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_with_default+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&':')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
// name = lambda_param_no_default
// TODO replacing arg_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_maybe_default*)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_kwds?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_kwds)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_130_var = _tmp_130_rule()) != null  // lambda_kwds
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_maybe_default+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_kwds?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_kwds)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_132_var = _tmp_132_rule()) != null  // lambda_kwds
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_kwds) - should work
// name = lambda_kwds
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_lambda_star_etc) - should work
// name = invalid_lambda_star_etc
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
// name = lambda_param_no_default
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
// name = lambda_param
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
// name = lambda_param
// TODO replacing arg_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
// name = lambda_param
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
// name = default_param
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
// name = lambda_param
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
// name = default_param
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
// name = lambda_param
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(default_param?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
// name = default_param
    // JavaCallMakerVisitor.visit_Opt.generated call: (default_param_var = default_param_rule()) != null  // default_param
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
// name = lambda_param
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(default_param?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
// name = default_param
    // JavaCallMakerVisitor.visit_Opt.generated call: (default_param_var = default_param_rule()) != null  // default_param
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(conjunction) - should work
// name = conjunction
// TODO visiting JavaCallMakerVisitor.visit_Repeat1((('or' conjunction))+)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(conjunction) - should work
// name = conjunction
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(inversion) - should work
// name = inversion
// TODO visiting JavaCallMakerVisitor.visit_Repeat1((('and' inversion))+)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(inversion) - should work
// name = inversion
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('not')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(inversion) - should work
// name = inversion
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(comparison) - should work
// name = comparison
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// name = bitwise_or
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(compare_op_bitwise_or_pair+)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// name = bitwise_or
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(eq_bitwise_or) - should work
// name = eq_bitwise_or
// TODO replacing CmpopExprPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(noteq_bitwise_or) - should work
// name = noteq_bitwise_or
// TODO replacing CmpopExprPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lte_bitwise_or) - should work
// name = lte_bitwise_or
// TODO replacing CmpopExprPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lt_bitwise_or) - should work
// name = lt_bitwise_or
// TODO replacing CmpopExprPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(gte_bitwise_or) - should work
// name = gte_bitwise_or
// TODO replacing CmpopExprPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(gt_bitwise_or) - should work
// name = gt_bitwise_or
// TODO replacing CmpopExprPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(notin_bitwise_or) - should work
// name = notin_bitwise_or
// TODO replacing CmpopExprPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(in_bitwise_or) - should work
// name = in_bitwise_or
// TODO replacing CmpopExprPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(isnot_bitwise_or) - should work
// name = isnot_bitwise_or
// TODO replacing CmpopExprPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(is_bitwise_or) - should work
// name = is_bitwise_or
// TODO replacing CmpopExprPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('==')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// name = bitwise_or
// TODO visiting JavaCallMakerVisitor.visit_Group(('!='))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('!=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// name = bitwise_or
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('<=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// name = bitwise_or
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('<')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// name = bitwise_or
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('>=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// name = bitwise_or
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('>')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// name = bitwise_or
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('not')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// name = bitwise_or
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// name = bitwise_or
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('is')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('not')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// name = bitwise_or
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('is')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// name = bitwise_or
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// name = bitwise_or
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('|')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_xor) - should work
// name = bitwise_xor
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_xor) - should work
// name = bitwise_xor
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_xor) - should work
// name = bitwise_xor
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('^')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_and) - should work
// name = bitwise_and
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_and) - should work
// name = bitwise_and
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_and) - should work
// name = bitwise_and
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('&')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(shift_expr) - should work
// name = shift_expr
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(shift_expr) - should work
// name = shift_expr
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(shift_expr) - should work
// name = shift_expr
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('<<')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sum) - should work
// name = sum
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(shift_expr) - should work
// name = shift_expr
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('>>')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sum) - should work
// name = sum
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sum) - should work
// name = sum
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sum) - should work
// name = sum
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('+')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
// name = term
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sum) - should work
// name = sum
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('-')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
// name = term
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
// name = term
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
// name = term
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
// name = factor
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
// name = term
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
// name = factor
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
// name = term
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('//')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
// name = factor
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
// name = term
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('%')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
// name = factor
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
// name = term
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('@')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
// name = factor
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
// name = factor
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('+')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
// name = factor
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('-')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
// name = factor
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('~')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
// name = factor
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(power) - should work
// name = power
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(await_primary) - should work
// name = await_primary
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
// name = factor
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(await_primary) - should work
// name = await_primary
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(AWAIT) - should work
// name = AWAIT
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
// name = primary
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
// name = primary
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_primary) - should work
// name = invalid_primary
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
// name = primary
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
// name = primary
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(genexp) - should work
// name = genexp
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
// name = primary
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(arguments?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(arguments)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_137_var = _tmp_137_rule()) != null  // arguments
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
// name = primary
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
// name = slices
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(atom) - should work
// name = atom
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slice) - should work
// name = slice
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!',')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// lookahead_call_helper call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
//    call.nodetype: GENERIC_TOKEN
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.slice+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_140_var = _tmp_140_rule()) != null  // ','
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(expression?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expression)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_141_var = _tmp_141_rule()) != null  // expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(expression?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expression)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_142_var = _tmp_142_rule()) != null  // expression
// REMOVE visiting JavaCallMakerVisitor.visit_Opt([':' expression?])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(':' expression?)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_143_var = _tmp_143_rule()) != null  // ':' expression?
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
// name = named_expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('True')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('False')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('None')
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&STRING)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(strings) - should work
// name = strings
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NUMBER) - should work
// name = NUMBER
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'(')
// TODO visiting JavaCallMakerVisitor.visit_Group((tuple | group | genexp))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(tuple | group | genexp)
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'[')
// TODO visiting JavaCallMakerVisitor.visit_Group((list | listcomp))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(list | listcomp)
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'{')
// TODO visiting JavaCallMakerVisitor.visit_Group((dict | set | dictcomp | setcomp))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(dict | set | dictcomp | setcomp)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('...')
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(STRING+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_named_expressions?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_named_expressions)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_148_var = _tmp_148_rule()) != null  // star_named_expressions
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
// name = named_expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
// name = for_if_clauses
// TODO replacing asdl_comprehension_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_comprehension) - should work
// name = invalid_comprehension
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt([star_named_expression ',' star_named_expressions?])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_named_expression ',' star_named_expressions?)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_149_var = _tmp_149_rule()) != null  // star_named_expression ',' star_named_expressions?
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// TODO visiting JavaCallMakerVisitor.visit_Group((yield_expr | named_expression))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(yield_expr | named_expression)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_group) - should work
// name = invalid_group
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(direct_named_expression) - should work
// name = direct_named_expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
// name = for_if_clauses
// TODO replacing asdl_comprehension_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_comprehension) - should work
// name = invalid_comprehension
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
// name = star_named_expressions
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
// name = named_expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
// name = for_if_clauses
// TODO replacing asdl_comprehension_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_comprehension) - should work
// name = invalid_comprehension
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(double_starred_kvpairs?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(double_starred_kvpairs)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_151_var = _tmp_151_rule()) != null  // double_starred_kvpairs
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_double_starred_kvpairs) - should work
// name = invalid_double_starred_kvpairs
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kvpair) - should work
// name = kvpair
// TODO replacing KeyValuePair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
// name = for_if_clauses
// TODO replacing asdl_comprehension_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_dict_comprehension) - should work
// name = invalid_dict_comprehension
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.double_starred_kvpair+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_154_var = _tmp_154_rule()) != null  // ','
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// name = bitwise_or
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kvpair) - should work
// name = kvpair
// TODO replacing KeyValuePair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(for_if_clause+)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
// name = ASYNC
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('for')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
// name = star_targets
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
// TODO visiting JavaCallMakerVisitor.visit_Cut(~)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
// name = disjunction
// TODO visiting JavaCallMakerVisitor.visit_Repeat0((('if' disjunction))*)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('for')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
// name = star_targets
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
// TODO visiting JavaCallMakerVisitor.visit_Cut(~)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
// name = disjunction
// TODO visiting JavaCallMakerVisitor.visit_Repeat0((('if' disjunction))*)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_for_target) - should work
// name = invalid_for_target
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('yield')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('from')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('yield')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_expressions?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_expressions)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_158_var = _tmp_158_rule()) != null  // star_expressions
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
// name = args
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_159_var = _tmp_159_rule()) != null  // ','
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_arguments) - should work
// name = invalid_arguments
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.(starred_expression | direct_named_expression !'=')+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt([',' kwargs])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' kwargs)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_162_var = _tmp_162_rule()) != null  // ',' kwargs
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwargs) - should work
// name = kwargs
// TODO replacing asdl_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.kwarg_or_starred+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.kwarg_or_double_starred+)
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.kwarg_or_starred+)
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.kwarg_or_double_starred+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(starred_expression) - should work
// name = starred_expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_kwarg) - should work
// name = invalid_kwarg
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_kwarg) - should work
// name = invalid_kwarg
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
// name = star_target
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!',')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// lookahead_call_helper call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
//    call.nodetype: GENERIC_TOKEN
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
// name = star_target
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(((',' star_target))*)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_172_var = _tmp_172_rule()) != null  // ','
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.star_target+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_175_var = _tmp_175_rule()) != null  // ','
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
// name = star_target
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(((',' star_target))+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_177_var = _tmp_177_rule()) != null  // ','
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
// name = star_target
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// TODO visiting JavaCallMakerVisitor.visit_Group((!'*' star_target))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(!'*' star_target)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(target_with_star_atom) - should work
// name = target_with_star_atom
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
// name = t_primary
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_lookahead) - should work
// name = t_lookahead
// lookahead_call_helper call: (t_lookahead_var = t_lookahead_rule()) != null  // t_lookahead
//    call.nodetype: None
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
// name = t_primary
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
// name = slices
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_lookahead) - should work
// name = t_lookahead
// lookahead_call_helper call: (t_lookahead_var = t_lookahead_rule()) != null  // t_lookahead
//    call.nodetype: None
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_atom) - should work
// name = star_atom
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(target_with_star_atom) - should work
// name = target_with_star_atom
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_targets_tuple_seq?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_targets_tuple_seq)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_179_var = _tmp_179_rule()) != null  // star_targets_tuple_seq
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_targets_list_seq?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_targets_list_seq)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_180_var = _tmp_180_rule()) != null  // star_targets_list_seq
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(single_subscript_attribute_target) - should work
// name = single_subscript_attribute_target
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(single_target) - should work
// name = single_target
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
// name = t_primary
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_lookahead) - should work
// name = t_lookahead
// lookahead_call_helper call: (t_lookahead_var = t_lookahead_rule()) != null  // t_lookahead
//    call.nodetype: None
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
// name = t_primary
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
// name = slices
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_lookahead) - should work
// name = t_lookahead
// lookahead_call_helper call: (t_lookahead_var = t_lookahead_rule()) != null  // t_lookahead
//    call.nodetype: None
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.del_target+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_183_var = _tmp_183_rule()) != null  // ','
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
// name = t_primary
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_lookahead) - should work
// name = t_lookahead
// lookahead_call_helper call: (t_lookahead_var = t_lookahead_rule()) != null  // t_lookahead
//    call.nodetype: None
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
// name = t_primary
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
// name = slices
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_lookahead) - should work
// name = t_lookahead
// lookahead_call_helper call: (t_lookahead_var = t_lookahead_rule()) != null  // t_lookahead
//    call.nodetype: None
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_t_atom) - should work
// name = del_t_atom
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_target) - should work
// name = del_target
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(del_targets?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(del_targets)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_184_var = _tmp_184_rule()) != null  // del_targets
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(del_targets?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(del_targets)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_185_var = _tmp_185_rule()) != null  // del_targets
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.target+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_188_var = _tmp_188_rule()) != null  // ','
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
// name = t_primary
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_lookahead) - should work
// name = t_lookahead
// lookahead_call_helper call: (t_lookahead_var = t_lookahead_rule()) != null  // t_lookahead
//    call.nodetype: None
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
// name = t_primary
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
// name = slices
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_lookahead) - should work
// name = t_lookahead
// lookahead_call_helper call: (t_lookahead_var = t_lookahead_rule()) != null  // t_lookahead
//    call.nodetype: None
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_atom) - should work
// name = t_atom
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
// name = t_primary
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&t_lookahead)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
// name = t_primary
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
// name = slices
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&t_lookahead)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
// name = t_primary
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(genexp) - should work
// name = genexp
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&t_lookahead)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
// name = t_primary
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(arguments?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(arguments)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_189_var = _tmp_189_rule()) != null  // arguments
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&t_lookahead)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(atom) - should work
// name = atom
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&t_lookahead)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(target) - should work
// name = target
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(targets?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(targets)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_190_var = _tmp_190_rule()) != null  // targets
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(targets?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(targets)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_191_var = _tmp_191_rule()) != null  // targets
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
// name = args
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
// name = for_if_clauses
// TODO replacing asdl_comprehension_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt([args | expression for_if_clauses])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(args | expression for_if_clauses)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_192_var = _tmp_192_rule()) != null  // args | expression for_if_clauses
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
// name = args
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
// name = for_if_clauses
// TODO replacing asdl_comprehension_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
// name = args
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
// name = for_if_clauses
// TODO replacing asdl_comprehension_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
// name = args
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
// name = args
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!(NAME STRING | SOFT_KEYWORD))
// TODO visiting JavaCallMakerVisitor.visit_Group((NAME STRING | SOFT_KEYWORD))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(NAME STRING | SOFT_KEYWORD)
// lookahead_call_helper call: (_tmp_193_var = _tmp_193_rule()) != null  // NAME STRING | SOFT_KEYWORD
//    call.nodetype: None
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
// name = disjunction
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// name = bitwise_or
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!('=' | ':=' | ','))
// TODO visiting JavaCallMakerVisitor.visit_Group(('=' | ':=' | ','))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('=' | ':=' | ',')
// lookahead_call_helper call: (_tmp_194_var = _tmp_194_rule()) != null  // '=' | ':=' | ','
//    call.nodetype: None
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!(list | tuple | genexp | 'True' | 'None' | 'False'))
// TODO visiting JavaCallMakerVisitor.visit_Group((list | tuple | genexp | 'True' | 'None' | 'False'))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(list | tuple | genexp | 'True' | 'None' | 'False')
// lookahead_call_helper call: (_tmp_195_var = _tmp_195_rule()) != null  // list | tuple | genexp | 'True' | 'None' | 'False'
//    call.nodetype: None
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// name = bitwise_or
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// name = bitwise_or
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!('=' | ':=' | ','))
// TODO visiting JavaCallMakerVisitor.visit_Group(('=' | ':=' | ','))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('=' | ':=' | ',')
// lookahead_call_helper call: (_tmp_196_var = _tmp_196_rule()) != null  // '=' | ':=' | ','
//    call.nodetype: None
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_ann_assign_target) - should work
// name = invalid_ann_assign_target
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
// name = star_named_expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(star_named_expressions*)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(((star_targets '='))*)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
// name = star_expressions
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(((star_targets '='))*)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
// name = yield_expr
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
// name = star_expressions
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(augassign) - should work
// name = augassign
// TODO replacing AugOperator[] --> SSTNode[]
// TODO visiting JavaCallMakerVisitor.visit_Group((yield_expr | star_expressions))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(yield_expr | star_expressions)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(list) - should work
// name = list
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(tuple) - should work
// name = tuple
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_ann_assign_target) - should work
// name = invalid_ann_assign_target
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('del')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
// name = star_expressions
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
// name = NEWLINE
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!INDENT)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(INDENT) - should work
// name = INDENT
// lookahead_call_helper call: (indent_var = expect(Token.Kind.INDENT)) != null  // token='INDENT'
//    call.nodetype: GENERIC_TOKEN
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
// name = primary
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
// TODO visiting JavaCallMakerVisitor.visit_Group(('[' | '(' | '{'))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('[' | '(' | '{')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(starred_expression) - should work
// name = starred_expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
// name = for_if_clauses
// TODO replacing asdl_comprehension_seq[] --> SSTNode[]
// TODO visiting JavaCallMakerVisitor.visit_Group(('[' | '{'))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('[' | '{')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
// name = star_named_expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_named_expressions?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_named_expressions)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_203_var = _tmp_203_rule()) != null  // star_named_expressions
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
// name = for_if_clauses
// TODO replacing asdl_comprehension_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// name = bitwise_or
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
// name = for_if_clauses
// TODO replacing asdl_comprehension_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_no_default*)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_parameters_helper) - should work
// name = invalid_parameters_helper
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
// name = param_no_default
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slash_with_default) - should work
// name = slash_with_default
// TODO replacing SlashWithDefault[] --> SSTNode[]
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_with_default+)
// TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_no_default*)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_lambda_parameters_helper) - should work
// name = invalid_lambda_parameters_helper
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
// name = lambda_param_no_default
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_slash_with_default) - should work
// name = lambda_slash_with_default
// TODO replacing SlashWithDefault[] --> SSTNode[]
// TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_with_default+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// TODO visiting JavaCallMakerVisitor.visit_Group((')' | ',' (')' | '**')))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(')' | ',' (')' | '**'))
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
// name = TYPE_COMMENT
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// TODO visiting JavaCallMakerVisitor.visit_Group((':' | ',' (':' | '**')))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(':' | ',' (':' | '**'))
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
// name = TYPE_COMMENT
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
// name = NEWLINE
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
// name = TYPE_COMMENT
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
// name = NEWLINE
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(INDENT) - should work
// name = INDENT
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&(',' | ')' | ':'))
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(ASYNC?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
// name = ASYNC
    // JavaCallMakerVisitor.visit_Opt.generated call: (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('for')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
// name = star_expressions
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(starred_expression) - should work
// name = starred_expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_as_names) - should work
// name = import_from_as_names
// TODO replacing asdl_alias_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(ASYNC?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(ASYNC)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_210_var = _tmp_210_rule()) != null  // ASYNC
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.(expression ['as' star_target])+)
// TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(ASYNC?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(ASYNC)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_213_var = _tmp_213_rule()) != null  // ASYNC
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.(expressions ['as' star_target])+)
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
    // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('except')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expressions) - should work
// name = expressions
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' NAME])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' NAME)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_216_var = _tmp_216_rule()) != null  // 'as' NAME
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('except')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' NAME])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' NAME)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_217_var = _tmp_217_rule()) != null  // 'as' NAME
// TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('except')
// TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf("match")
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(subject_expr) - should work
// name = subject_expr
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!':')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// lookahead_call_helper call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
//    call.nodetype: GENERIC_TOKEN
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf("case")
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(patterns) - should work
// name = patterns
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(guard?)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(guard) - should work
// name = guard
    // JavaCallMakerVisitor.visit_Opt.generated call: (guard_var = guard_rule()) != null  // guard
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!':')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// lookahead_call_helper call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
//    call.nodetype: GENERIC_TOKEN
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
// name = named_expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
// name = NEWLINE
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('elif')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
// name = named_expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
// name = NEWLINE
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('while')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
// name = named_expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
// name = NEWLINE
// REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.double_starred_kvpair+)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_kvpair) - should work
// name = invalid_kvpair
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// name = bitwise_or
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('}' | ','))
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!(':'))
// TODO visiting JavaCallMakerVisitor.visit_Group((':'))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(':')
// lookahead_call_helper call: (_tmp_220_var = _tmp_220_rule()) != null  // ':'
//    call.nodetype: None
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
// name = bitwise_or
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(statements) - should work
// name = statements
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
// name = NEWLINE
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(type_expressions) - should work
// name = type_expressions
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
// name = NEWLINE
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_6) - should work
// name = _loop0_6
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_8) - should work
// name = _loop0_8
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_10) - should work
// name = _loop0_10
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_12) - should work
// name = _loop0_12
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(statement) - should work
// name = statement
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(';')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmt) - should work
// name = simple_stmt
// TODO replacing stmt_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmt) - should work
// name = simple_stmt
// TODO replacing stmt_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_15) - should work
// name = _loop0_15
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(';')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(annotated_rhs) - should work
// name = annotated_rhs
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(single_target) - should work
// name = single_target
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(single_subscript_attribute_target) - should work
// name = single_subscript_attribute_target
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(annotated_rhs) - should work
// name = annotated_rhs
// TODO visiting JavaCallMakerVisitor.visit_Group((star_targets '='))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_targets '=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
// name = yield_expr
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
// name = star_expressions
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
// name = TYPE_COMMENT
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
// name = yield_expr
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
// name = star_expressions
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_25) - should work
// name = _loop0_25
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_27) - should work
// name = _loop0_27
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// TODO visiting JavaCallMakerVisitor.visit_Group(('.' | '...'))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('.' | '...')
// TODO visiting JavaCallMakerVisitor.visit_Group(('.' | '...'))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('.' | '...')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_as_name) - should work
// name = import_from_as_name
// TODO replacing alias_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_as_name) - should work
// name = import_from_as_name
// TODO replacing alias_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_33) - should work
// name = _loop0_33
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_as_name) - should work
// name = dotted_as_name
// TODO replacing alias_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_as_name) - should work
// name = dotted_as_name
// TODO replacing alias_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_36) - should work
// name = _loop0_36
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
// name = else_block
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
// name = else_block
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
// name = else_block
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
// name = TYPE_COMMENT
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
// name = else_block
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
// name = TYPE_COMMENT
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
// name = else_block
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
// name = with_item
// TODO replacing withitem_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
// name = with_item
// TODO replacing withitem_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_46) - should work
// name = _loop0_46
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
// name = with_item
// TODO replacing withitem_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
// name = with_item
// TODO replacing withitem_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_48) - should work
// name = _loop0_48
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
// name = TYPE_COMMENT
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
// name = with_item
// TODO replacing withitem_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
// name = with_item
// TODO replacing withitem_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_51) - should work
// name = _loop0_51
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
// name = with_item
// TODO replacing withitem_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
// name = with_item
// TODO replacing withitem_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_53) - should work
// name = _loop0_53
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
// name = TYPE_COMMENT
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(except_block) - should work
// name = except_block
// TODO replacing excepthandler_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
// name = else_block
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(finally_block) - should work
// name = finally_block
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(case_block) - should work
// name = case_block
// TODO replacing match_case_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('|')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(closed_pattern) - should work
// name = closed_pattern
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(closed_pattern) - should work
// name = closed_pattern
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_61) - should work
// name = _loop0_61
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('+')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('-')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(maybe_star_pattern) - should work
// name = maybe_star_pattern
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(maybe_star_pattern) - should work
// name = maybe_star_pattern
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_66) - should work
// name = _loop0_66
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(capture_pattern) - should work
// name = capture_pattern
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(wildcard_pattern) - should work
// name = wildcard_pattern
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(key_value_pattern) - should work
// name = key_value_pattern
// TODO replacing KeyValuePair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(key_value_pattern) - should work
// name = key_value_pattern
// TODO replacing KeyValuePair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_69) - should work
// name = _loop0_69
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(literal_pattern) - should work
// name = literal_pattern
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(value_pattern) - should work
// name = value_pattern
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
// name = pattern
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
// name = pattern
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_72) - should work
// name = _loop0_72
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(keyword_pattern) - should work
// name = keyword_pattern
// TODO replacing keyword_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(keyword_pattern) - should work
// name = keyword_pattern
// TODO replacing keyword_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_74) - should work
// name = _loop0_74
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
// name = star_expressions
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('from')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(params) - should work
// name = params
// TODO replacing arguments_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('->')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(func_type_comment) - should work
// name = func_type_comment
// TODO replacing Token[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(params) - should work
// name = params
// TODO replacing arguments_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('->')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(func_type_comment) - should work
// name = func_type_comment
// TODO replacing Token[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
// name = param_no_default
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
// name = param_with_default
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_etc) - should work
// name = star_etc
// TODO replacing StarEtc[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
// name = param_with_default
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_etc) - should work
// name = star_etc
// TODO replacing StarEtc[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
// name = param_no_default
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
// name = param_with_default
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_etc) - should work
// name = star_etc
// TODO replacing StarEtc[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
// name = param_with_default
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_etc) - should work
// name = star_etc
// TODO replacing StarEtc[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
// name = param_no_default
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
// name = param_no_default
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
// name = param_no_default
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
// name = param_with_default
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
// name = param_no_default
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
// name = param_with_default
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_maybe_default) - should work
// name = param_maybe_default
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwds) - should work
// name = kwds
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_maybe_default) - should work
// name = param_maybe_default
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwds) - should work
// name = kwds
// TODO replacing arg_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_Group(('@' named_expression NEWLINE))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('@' named_expression NEWLINE)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(arguments?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(arguments)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_225_var = _tmp_225_rule()) != null  // arguments
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// TODO visiting JavaCallMakerVisitor.visit_Group((',' star_expression))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' star_expression)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
// name = star_named_expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
// name = star_named_expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_108) - should work
// name = _loop0_108
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// TODO visiting JavaCallMakerVisitor.visit_Group((',' expression))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' expression)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_params) - should work
// name = lambda_params
// TODO replacing arguments_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
// name = lambda_param_no_default
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
// name = lambda_param_with_default
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_star_etc) - should work
// name = lambda_star_etc
// TODO replacing StarEtc[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
// name = lambda_param_with_default
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_star_etc) - should work
// name = lambda_star_etc
// TODO replacing StarEtc[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
// name = lambda_param_no_default
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
// name = lambda_param_with_default
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_star_etc) - should work
// name = lambda_star_etc
// TODO replacing StarEtc[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
// name = lambda_param_with_default
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_star_etc) - should work
// name = lambda_star_etc
// TODO replacing StarEtc[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
// name = lambda_param_no_default
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
// name = lambda_param_no_default
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
// name = lambda_param_no_default
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
// name = lambda_param_with_default
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
// name = lambda_param_no_default
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
// name = lambda_param_with_default
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_maybe_default) - should work
// name = lambda_param_maybe_default
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_kwds) - should work
// name = lambda_kwds
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_maybe_default) - should work
// name = lambda_param_maybe_default
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_kwds) - should work
// name = lambda_kwds
// TODO replacing arg_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_Group(('or' conjunction))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('or' conjunction)
// TODO visiting JavaCallMakerVisitor.visit_Group(('and' inversion))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('and' inversion)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(compare_op_bitwise_or_pair) - should work
// name = compare_op_bitwise_or_pair
// TODO replacing CmpopExprPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('!=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(arguments) - should work
// name = arguments
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slice) - should work
// name = slice
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slice) - should work
// name = slice
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_139) - should work
// name = _loop0_139
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(expression?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expression)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_230_var = _tmp_230_rule()) != null  // expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(tuple) - should work
// name = tuple
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(group) - should work
// name = group
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(genexp) - should work
// name = genexp
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(list) - should work
// name = list
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(listcomp) - should work
// name = listcomp
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dict) - should work
// name = dict
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(set) - should work
// name = set
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dictcomp) - should work
// name = dictcomp
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(setcomp) - should work
// name = setcomp
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(STRING) - should work
// name = STRING
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
// name = star_named_expressions
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
// name = star_named_expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_named_expressions?)
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_named_expressions)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_231_var = _tmp_231_rule()) != null  // star_named_expressions
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
// name = yield_expr
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
// name = named_expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_starred_kvpairs) - should work
// name = double_starred_kvpairs
// TODO replacing asdl_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_starred_kvpair) - should work
// name = double_starred_kvpair
// TODO replacing KeyValuePair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_starred_kvpair) - should work
// name = double_starred_kvpair
// TODO replacing KeyValuePair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_153) - should work
// name = _loop0_153
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clause) - should work
// name = for_if_clause
// TODO replacing comprehension_ty --> SSTNode
// TODO visiting JavaCallMakerVisitor.visit_Group(('if' disjunction))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('if' disjunction)
// TODO visiting JavaCallMakerVisitor.visit_Group(('if' disjunction))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('if' disjunction)
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
// name = star_expressions
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// TODO visiting JavaCallMakerVisitor.visit_Group((starred_expression | direct_named_expression !'='))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(starred_expression | direct_named_expression !'=')
// TODO visiting JavaCallMakerVisitor.visit_Group((starred_expression | direct_named_expression !'='))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(starred_expression | direct_named_expression !'=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_161) - should work
// name = _loop0_161
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwargs) - should work
// name = kwargs
// TODO replacing asdl_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_starred) - should work
// name = kwarg_or_starred
// TODO replacing KeywordOrStarred[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_starred) - should work
// name = kwarg_or_starred
// TODO replacing KeywordOrStarred[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_164) - should work
// name = _loop0_164
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_double_starred) - should work
// name = kwarg_or_double_starred
// TODO replacing KeywordOrStarred[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_double_starred) - should work
// name = kwarg_or_double_starred
// TODO replacing KeywordOrStarred[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_166) - should work
// name = _loop0_166
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_starred) - should work
// name = kwarg_or_starred
// TODO replacing KeywordOrStarred[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_starred) - should work
// name = kwarg_or_starred
// TODO replacing KeywordOrStarred[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_168) - should work
// name = _loop0_168
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_double_starred) - should work
// name = kwarg_or_double_starred
// TODO replacing KeywordOrStarred[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_double_starred) - should work
// name = kwarg_or_double_starred
// TODO replacing KeywordOrStarred[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_170) - should work
// name = _loop0_170
// TODO visiting JavaCallMakerVisitor.visit_Group((',' star_target))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' star_target)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
// name = star_target
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
// name = star_target
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_174) - should work
// name = _loop0_174
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// TODO visiting JavaCallMakerVisitor.visit_Group((',' star_target))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' star_target)
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!'*')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
// lookahead_call_helper call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
//    call.nodetype: GENERIC_TOKEN
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
// name = star_target
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets_tuple_seq) - should work
// name = star_targets_tuple_seq
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets_list_seq) - should work
// name = star_targets_list_seq
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_target) - should work
// name = del_target
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_target) - should work
// name = del_target
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_182) - should work
// name = _loop0_182
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_targets) - should work
// name = del_targets
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_targets) - should work
// name = del_targets
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(target) - should work
// name = target
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(target) - should work
// name = target
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_187) - should work
// name = _loop0_187
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(arguments) - should work
// name = arguments
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(targets) - should work
// name = targets
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(targets) - should work
// name = targets
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
// name = args
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
// name = for_if_clauses
// TODO replacing asdl_comprehension_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(STRING) - should work
// name = STRING
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(SOFT_KEYWORD) - should work
// name = SOFT_KEYWORD
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(list) - should work
// name = list
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(tuple) - should work
// name = tuple
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(genexp) - should work
// name = genexp
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('True')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('None')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('False')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
// name = star_named_expressions
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// TODO visiting JavaCallMakerVisitor.visit_Group((star_targets '='))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_targets '=')
// TODO visiting JavaCallMakerVisitor.visit_Group((star_targets '='))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_targets '=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
// name = yield_expr
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
// name = star_expressions
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
// name = star_named_expressions
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
// name = param_no_default
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
// name = param_with_default
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
// name = lambda_param_no_default
// TODO replacing arg_ty --> SSTNode
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
// name = lambda_param_with_default
// TODO replacing NameDefaultPair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// TODO visiting JavaCallMakerVisitor.visit_Group((')' | '**'))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(')' | '**')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// TODO visiting JavaCallMakerVisitor.visit_Group((':' | '**'))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(':' | '**')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
// name = ASYNC
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// TODO visiting JavaCallMakerVisitor.visit_Group((expression ['as' star_target]))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expression ['as' star_target])
// TODO visiting JavaCallMakerVisitor.visit_Group((expression ['as' star_target]))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expression ['as' star_target])
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_212) - should work
// name = _loop0_212
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
// name = ASYNC
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// TODO visiting JavaCallMakerVisitor.visit_Group((expressions ['as' star_target]))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expressions ['as' star_target])
// TODO visiting JavaCallMakerVisitor.visit_Group((expressions ['as' star_target]))
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expressions ['as' star_target])
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_215) - should work
// name = _loop0_215
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
// name = NAME
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_starred_kvpair) - should work
// name = double_starred_kvpair
// TODO replacing KeyValuePair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_starred_kvpair) - should work
// name = double_starred_kvpair
// TODO replacing KeyValuePair[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_219) - should work
// name = _loop0_219
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
// name = star_targets
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('...')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('...')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('@')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
// name = named_expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
// name = NEWLINE
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(arguments) - should work
// name = arguments
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expression) - should work
// name = star_expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('or')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(conjunction) - should work
// name = conjunction
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('and')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(inversion) - should work
// name = inversion
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
// name = star_named_expressions
// TODO replacing asdl_expr_seq[] --> SSTNode[]
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
// name = disjunction
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
// name = disjunction
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(starred_expression) - should work
// name = starred_expression
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(direct_named_expression) - should work
// name = direct_named_expression
// TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!'=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// lookahead_call_helper call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
//    call.nodetype: GENERIC_TOKEN
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
// name = star_target
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
// name = star_target
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
// name = star_targets
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
// name = star_targets
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
// name = expression
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' star_target])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' star_target)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_243_var = _tmp_243_rule()) != null  // 'as' star_target
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expressions) - should work
// name = expressions
// REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' star_target])
// REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' star_target)
    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_244_var = _tmp_244_rule()) != null  // 'as' star_target
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
// name = star_target
// REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
// REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
// name = star_target
    // rule ids 
    private static final int FILE_ID = 0;
    private static final int INTERACTIVE_ID = 1;
    private static final int EVAL_ID = 2;
    private static final int FUNC_TYPE_ID = 3;
    private static final int FSTRING_ID = 4;
    private static final int TYPE_EXPRESSIONS_ID = 5;
    private static final int STATEMENTS_ID = 6;
    private static final int STATEMENT_ID = 7;
    private static final int STATEMENT_NEWLINE_ID = 8;
    private static final int SIMPLE_STMTS_ID = 9;
    private static final int SIMPLE_STMT_ID = 10;
    private static final int COMPOUND_STMT_ID = 11;
    private static final int ASSIGNMENT_ID = 12;
    private static final int AUGASSIGN_ID = 13;
    private static final int GLOBAL_STMT_ID = 14;
    private static final int NONLOCAL_STMT_ID = 15;
    private static final int YIELD_STMT_ID = 16;
    private static final int ASSERT_STMT_ID = 17;
    private static final int DEL_STMT_ID = 18;
    private static final int IMPORT_STMT_ID = 19;
    private static final int IMPORT_NAME_ID = 20;
    private static final int IMPORT_FROM_ID = 21;
    private static final int IMPORT_FROM_TARGETS_ID = 22;
    private static final int IMPORT_FROM_AS_NAMES_ID = 23;
    private static final int IMPORT_FROM_AS_NAME_ID = 24;
    private static final int DOTTED_AS_NAMES_ID = 25;
    private static final int DOTTED_AS_NAME_ID = 26;
    private static final int DOTTED_NAME_ID = 27; // Left-recursive
    private static final int IF_STMT_ID = 28;
    private static final int ELIF_STMT_ID = 29;
    private static final int ELSE_BLOCK_ID = 30;
    private static final int WHILE_STMT_ID = 31;
    private static final int FOR_STMT_ID = 32;
    private static final int WITH_STMT_ID = 33;
    private static final int WITH_ITEM_ID = 34;
    private static final int TRY_STMT_ID = 35;
    private static final int EXCEPT_BLOCK_ID = 36;
    private static final int FINALLY_BLOCK_ID = 37;
    private static final int MATCH_STMT_ID = 38;
    private static final int SUBJECT_EXPR_ID = 39;
    private static final int CASE_BLOCK_ID = 40;
    private static final int GUARD_ID = 41;
    private static final int PATTERNS_ID = 42;
    private static final int PATTERN_ID = 43;
    private static final int AS_PATTERN_ID = 44;
    private static final int OR_PATTERN_ID = 45;
    private static final int CLOSED_PATTERN_ID = 46;
    private static final int LITERAL_PATTERN_ID = 47;
    private static final int SIGNED_NUMBER_ID = 48;
    private static final int CAPTURE_PATTERN_ID = 49;
    private static final int WILDCARD_PATTERN_ID = 50;
    private static final int VALUE_PATTERN_ID = 51;
    private static final int ATTR_ID = 52; // Left-recursive
    private static final int NAME_OR_ATTR_ID = 53; // Left-recursive
    private static final int GROUP_PATTERN_ID = 54;
    private static final int SEQUENCE_PATTERN_ID = 55;
    private static final int OPEN_SEQUENCE_PATTERN_ID = 56;
    private static final int MAYBE_SEQUENCE_PATTERN_ID = 57;
    private static final int MAYBE_STAR_PATTERN_ID = 58;
    private static final int STAR_PATTERN_ID = 59;
    private static final int MAPPING_PATTERN_ID = 60;
    private static final int ITEMS_PATTERN_ID = 61;
    private static final int KEY_VALUE_PATTERN_ID = 62;
    private static final int DOUBLE_STAR_PATTERN_ID = 63;
    private static final int CLASS_PATTERN_ID = 64;
    private static final int POSITIONAL_PATTERNS_ID = 65;
    private static final int KEYWORD_PATTERNS_ID = 66;
    private static final int KEYWORD_PATTERN_ID = 67;
    private static final int RETURN_STMT_ID = 68;
    private static final int RAISE_STMT_ID = 69;
    private static final int FUNCTION_DEF_ID = 70;
    private static final int FUNCTION_DEF_RAW_ID = 71;
    private static final int FUNC_TYPE_COMMENT_ID = 72;
    private static final int PARAMS_ID = 73;
    private static final int PARAMETERS_ID = 74;
    private static final int SLASH_NO_DEFAULT_ID = 75;
    private static final int SLASH_WITH_DEFAULT_ID = 76;
    private static final int STAR_ETC_ID = 77;
    private static final int KWDS_ID = 78;
    private static final int PARAM_NO_DEFAULT_ID = 79;
    private static final int PARAM_WITH_DEFAULT_ID = 80;
    private static final int PARAM_MAYBE_DEFAULT_ID = 81;
    private static final int PARAM_ID = 82;
    private static final int ANNOTATION_ID = 83;
    private static final int DEFAULT_PARAM_ID = 84;
    private static final int DECORATORS_ID = 85;
    private static final int CLASS_DEF_ID = 86;
    private static final int CLASS_DEF_RAW_ID = 87;
    private static final int BLOCK_ID = 88;
    private static final int STAR_EXPRESSIONS_ID = 89;
    private static final int STAR_EXPRESSION_ID = 90;
    private static final int STAR_NAMED_EXPRESSIONS_ID = 91;
    private static final int STAR_NAMED_EXPRESSION_ID = 92;
    private static final int NAMED_EXPRESSION_ID = 93;
    private static final int DIRECT_NAMED_EXPRESSION_ID = 94;
    private static final int ANNOTATED_RHS_ID = 95;
    private static final int EXPRESSIONS_ID = 96;
    private static final int EXPRESSION_ID = 97;
    private static final int LAMBDEF_ID = 98;
    private static final int LAMBDA_PARAMS_ID = 99;
    private static final int LAMBDA_PARAMETERS_ID = 100;
    private static final int LAMBDA_SLASH_NO_DEFAULT_ID = 101;
    private static final int LAMBDA_SLASH_WITH_DEFAULT_ID = 102;
    private static final int LAMBDA_STAR_ETC_ID = 103;
    private static final int LAMBDA_KWDS_ID = 104;
    private static final int LAMBDA_PARAM_NO_DEFAULT_ID = 105;
    private static final int LAMBDA_PARAM_WITH_DEFAULT_ID = 106;
    private static final int LAMBDA_PARAM_MAYBE_DEFAULT_ID = 107;
    private static final int LAMBDA_PARAM_ID = 108;
    private static final int DISJUNCTION_ID = 109;
    private static final int CONJUNCTION_ID = 110;
    private static final int INVERSION_ID = 111;
    private static final int COMPARISON_ID = 112;
    private static final int COMPARE_OP_BITWISE_OR_PAIR_ID = 113;
    private static final int EQ_BITWISE_OR_ID = 114;
    private static final int NOTEQ_BITWISE_OR_ID = 115;
    private static final int LTE_BITWISE_OR_ID = 116;
    private static final int LT_BITWISE_OR_ID = 117;
    private static final int GTE_BITWISE_OR_ID = 118;
    private static final int GT_BITWISE_OR_ID = 119;
    private static final int NOTIN_BITWISE_OR_ID = 120;
    private static final int IN_BITWISE_OR_ID = 121;
    private static final int ISNOT_BITWISE_OR_ID = 122;
    private static final int IS_BITWISE_OR_ID = 123;
    private static final int BITWISE_OR_ID = 124; // Left-recursive
    private static final int BITWISE_XOR_ID = 125; // Left-recursive
    private static final int BITWISE_AND_ID = 126; // Left-recursive
    private static final int SHIFT_EXPR_ID = 127; // Left-recursive
    private static final int SUM_ID = 128; // Left-recursive
    private static final int TERM_ID = 129; // Left-recursive
    private static final int FACTOR_ID = 130;
    private static final int POWER_ID = 131;
    private static final int AWAIT_PRIMARY_ID = 132;
    private static final int PRIMARY_ID = 133; // Left-recursive
    private static final int SLICES_ID = 134;
    private static final int SLICE_ID = 135;
    private static final int ATOM_ID = 136;
    private static final int STRINGS_ID = 137;
    private static final int LIST_ID = 138;
    private static final int LISTCOMP_ID = 139;
    private static final int TUPLE_ID = 140;
    private static final int GROUP_ID = 141;
    private static final int GENEXP_ID = 142;
    private static final int SET_ID = 143;
    private static final int SETCOMP_ID = 144;
    private static final int DICT_ID = 145;
    private static final int DICTCOMP_ID = 146;
    private static final int DOUBLE_STARRED_KVPAIRS_ID = 147;
    private static final int DOUBLE_STARRED_KVPAIR_ID = 148;
    private static final int KVPAIR_ID = 149;
    private static final int FOR_IF_CLAUSES_ID = 150;
    private static final int FOR_IF_CLAUSE_ID = 151;
    private static final int YIELD_EXPR_ID = 152;
    private static final int ARGUMENTS_ID = 153;
    private static final int ARGS_ID = 154;
    private static final int KWARGS_ID = 155;
    private static final int STARRED_EXPRESSION_ID = 156;
    private static final int KWARG_OR_STARRED_ID = 157;
    private static final int KWARG_OR_DOUBLE_STARRED_ID = 158;
    private static final int STAR_TARGETS_ID = 159;
    private static final int STAR_TARGETS_LIST_SEQ_ID = 160;
    private static final int STAR_TARGETS_TUPLE_SEQ_ID = 161;
    private static final int STAR_TARGET_ID = 162;
    private static final int TARGET_WITH_STAR_ATOM_ID = 163;
    private static final int STAR_ATOM_ID = 164;
    private static final int SINGLE_TARGET_ID = 165;
    private static final int SINGLE_SUBSCRIPT_ATTRIBUTE_TARGET_ID = 166;
    private static final int DEL_TARGETS_ID = 167;
    private static final int DEL_TARGET_ID = 168;
    private static final int DEL_T_ATOM_ID = 169;
    private static final int TARGETS_ID = 170;
    private static final int TARGET_ID = 171;
    private static final int T_PRIMARY_ID = 172; // Left-recursive
    private static final int T_LOOKAHEAD_ID = 173;
    private static final int T_ATOM_ID = 174;
    private static final int INVALID_ARGUMENTS_ID = 175;
    private static final int INVALID_KWARG_ID = 176;
    private static final int INVALID_EXPRESSION_ID = 177;
    private static final int INVALID_NAMED_EXPRESSION_ID = 178;
    private static final int INVALID_ASSIGNMENT_ID = 179;
    private static final int INVALID_ANN_ASSIGN_TARGET_ID = 180;
    private static final int INVALID_DEL_STMT_ID = 181;
    private static final int INVALID_BLOCK_ID = 182;
    private static final int INVALID_PRIMARY_ID = 183; // Left-recursive
    private static final int INVALID_COMPREHENSION_ID = 184;
    private static final int INVALID_DICT_COMPREHENSION_ID = 185;
    private static final int INVALID_PARAMETERS_ID = 186;
    private static final int INVALID_PARAMETERS_HELPER_ID = 187;
    private static final int INVALID_LAMBDA_PARAMETERS_ID = 188;
    private static final int INVALID_LAMBDA_PARAMETERS_HELPER_ID = 189;
    private static final int INVALID_STAR_ETC_ID = 190;
    private static final int INVALID_LAMBDA_STAR_ETC_ID = 191;
    private static final int INVALID_DOUBLE_TYPE_COMMENTS_ID = 192;
    private static final int INVALID_WITH_ITEM_ID = 193;
    private static final int INVALID_FOR_TARGET_ID = 194;
    private static final int INVALID_GROUP_ID = 195;
    private static final int INVALID_IMPORT_FROM_TARGETS_ID = 196;
    private static final int INVALID_WITH_STMT_ID = 197;
    private static final int INVALID_EXCEPT_BLOCK_ID = 198;
    private static final int INVALID_MATCH_STMT_ID = 199;
    private static final int INVALID_CASE_BLOCK_ID = 200;
    private static final int INVALID_IF_STMT_ID = 201;
    private static final int INVALID_ELIF_STMT_ID = 202;
    private static final int INVALID_WHILE_STMT_ID = 203;
    private static final int INVALID_DOUBLE_STARRED_KVPAIRS_ID = 204;
    private static final int INVALID_KVPAIR_ID = 205;
    private static final int _TMP_1_ID = 206;
    private static final int _LOOP0_2_ID = 207;
    private static final int _TMP_3_ID = 208;
    private static final int _LOOP0_4_ID = 209;
    private static final int _LOOP0_6_ID = 210;
    private static final int _GATHER_5_ID = 211;
    private static final int _LOOP0_8_ID = 212;
    private static final int _GATHER_7_ID = 213;
    private static final int _LOOP0_10_ID = 214;
    private static final int _GATHER_9_ID = 215;
    private static final int _LOOP0_12_ID = 216;
    private static final int _GATHER_11_ID = 217;
    private static final int _LOOP1_13_ID = 218;
    private static final int _LOOP0_15_ID = 219;
    private static final int _GATHER_14_ID = 220;
    private static final int _TMP_16_ID = 221;
    private static final int _TMP_17_ID = 222;
    private static final int _TMP_18_ID = 223;
    private static final int _TMP_19_ID = 224;
    private static final int _LOOP1_20_ID = 225;
    private static final int _TMP_21_ID = 226;
    private static final int _TMP_22_ID = 227;
    private static final int _TMP_23_ID = 228;
    private static final int _LOOP0_25_ID = 229;
    private static final int _GATHER_24_ID = 230;
    private static final int _LOOP0_27_ID = 231;
    private static final int _GATHER_26_ID = 232;
    private static final int _TMP_28_ID = 233;
    private static final int _LOOP0_29_ID = 234;
    private static final int _LOOP1_30_ID = 235;
    private static final int _TMP_31_ID = 236;
    private static final int _LOOP0_33_ID = 237;
    private static final int _GATHER_32_ID = 238;
    private static final int _TMP_34_ID = 239;
    private static final int _LOOP0_36_ID = 240;
    private static final int _GATHER_35_ID = 241;
    private static final int _TMP_37_ID = 242;
    private static final int _TMP_38_ID = 243;
    private static final int _TMP_39_ID = 244;
    private static final int _TMP_40_ID = 245;
    private static final int _TMP_41_ID = 246;
    private static final int _TMP_42_ID = 247;
    private static final int _TMP_43_ID = 248;
    private static final int _TMP_44_ID = 249;
    private static final int _LOOP0_46_ID = 250;
    private static final int _GATHER_45_ID = 251;
    private static final int _LOOP0_48_ID = 252;
    private static final int _GATHER_47_ID = 253;
    private static final int _TMP_49_ID = 254;
    private static final int _LOOP0_51_ID = 255;
    private static final int _GATHER_50_ID = 256;
    private static final int _LOOP0_53_ID = 257;
    private static final int _GATHER_52_ID = 258;
    private static final int _TMP_54_ID = 259;
    private static final int _LOOP1_55_ID = 260;
    private static final int _TMP_56_ID = 261;
    private static final int _TMP_57_ID = 262;
    private static final int _TMP_58_ID = 263;
    private static final int _LOOP1_59_ID = 264;
    private static final int _LOOP0_61_ID = 265;
    private static final int _GATHER_60_ID = 266;
    private static final int _TMP_62_ID = 267;
    private static final int _TMP_63_ID = 268;
    private static final int _TMP_64_ID = 269;
    private static final int _LOOP0_66_ID = 270;
    private static final int _GATHER_65_ID = 271;
    private static final int _TMP_67_ID = 272;
    private static final int _LOOP0_69_ID = 273;
    private static final int _GATHER_68_ID = 274;
    private static final int _TMP_70_ID = 275;
    private static final int _LOOP0_72_ID = 276;
    private static final int _GATHER_71_ID = 277;
    private static final int _LOOP0_74_ID = 278;
    private static final int _GATHER_73_ID = 279;
    private static final int _TMP_75_ID = 280;
    private static final int _TMP_76_ID = 281;
    private static final int _TMP_77_ID = 282;
    private static final int _TMP_78_ID = 283;
    private static final int _TMP_79_ID = 284;
    private static final int _TMP_80_ID = 285;
    private static final int _TMP_81_ID = 286;
    private static final int _TMP_82_ID = 287;
    private static final int _LOOP0_83_ID = 288;
    private static final int _LOOP0_84_ID = 289;
    private static final int _TMP_85_ID = 290;
    private static final int _LOOP0_86_ID = 291;
    private static final int _TMP_87_ID = 292;
    private static final int _LOOP1_88_ID = 293;
    private static final int _LOOP0_89_ID = 294;
    private static final int _TMP_90_ID = 295;
    private static final int _LOOP1_91_ID = 296;
    private static final int _TMP_92_ID = 297;
    private static final int _LOOP1_93_ID = 298;
    private static final int _LOOP1_94_ID = 299;
    private static final int _LOOP0_95_ID = 300;
    private static final int _LOOP1_96_ID = 301;
    private static final int _LOOP0_97_ID = 302;
    private static final int _LOOP1_98_ID = 303;
    private static final int _LOOP0_99_ID = 304;
    private static final int _TMP_100_ID = 305;
    private static final int _LOOP1_101_ID = 306;
    private static final int _TMP_102_ID = 307;
    private static final int _LOOP1_103_ID = 308;
    private static final int _TMP_104_ID = 309;
    private static final int _LOOP1_105_ID = 310;
    private static final int _TMP_106_ID = 311;
    private static final int _LOOP0_108_ID = 312;
    private static final int _GATHER_107_ID = 313;
    private static final int _TMP_109_ID = 314;
    private static final int _LOOP1_110_ID = 315;
    private static final int _TMP_111_ID = 316;
    private static final int _TMP_112_ID = 317;
    private static final int _LOOP0_113_ID = 318;
    private static final int _LOOP0_114_ID = 319;
    private static final int _TMP_115_ID = 320;
    private static final int _LOOP0_116_ID = 321;
    private static final int _TMP_117_ID = 322;
    private static final int _LOOP1_118_ID = 323;
    private static final int _LOOP0_119_ID = 324;
    private static final int _TMP_120_ID = 325;
    private static final int _LOOP1_121_ID = 326;
    private static final int _TMP_122_ID = 327;
    private static final int _LOOP1_123_ID = 328;
    private static final int _LOOP1_124_ID = 329;
    private static final int _LOOP0_125_ID = 330;
    private static final int _LOOP1_126_ID = 331;
    private static final int _LOOP0_127_ID = 332;
    private static final int _LOOP1_128_ID = 333;
    private static final int _LOOP0_129_ID = 334;
    private static final int _TMP_130_ID = 335;
    private static final int _LOOP1_131_ID = 336;
    private static final int _TMP_132_ID = 337;
    private static final int _LOOP1_133_ID = 338;
    private static final int _LOOP1_134_ID = 339;
    private static final int _LOOP1_135_ID = 340;
    private static final int _TMP_136_ID = 341;
    private static final int _TMP_137_ID = 342;
    private static final int _LOOP0_139_ID = 343;
    private static final int _GATHER_138_ID = 344;
    private static final int _TMP_140_ID = 345;
    private static final int _TMP_141_ID = 346;
    private static final int _TMP_142_ID = 347;
    private static final int _TMP_143_ID = 348;
    private static final int _TMP_144_ID = 349;
    private static final int _TMP_145_ID = 350;
    private static final int _TMP_146_ID = 351;
    private static final int _LOOP1_147_ID = 352;
    private static final int _TMP_148_ID = 353;
    private static final int _TMP_149_ID = 354;
    private static final int _TMP_150_ID = 355;
    private static final int _TMP_151_ID = 356;
    private static final int _LOOP0_153_ID = 357;
    private static final int _GATHER_152_ID = 358;
    private static final int _TMP_154_ID = 359;
    private static final int _LOOP1_155_ID = 360;
    private static final int _LOOP0_156_ID = 361;
    private static final int _LOOP0_157_ID = 362;
    private static final int _TMP_158_ID = 363;
    private static final int _TMP_159_ID = 364;
    private static final int _LOOP0_161_ID = 365;
    private static final int _GATHER_160_ID = 366;
    private static final int _TMP_162_ID = 367;
    private static final int _LOOP0_164_ID = 368;
    private static final int _GATHER_163_ID = 369;
    private static final int _LOOP0_166_ID = 370;
    private static final int _GATHER_165_ID = 371;
    private static final int _LOOP0_168_ID = 372;
    private static final int _GATHER_167_ID = 373;
    private static final int _LOOP0_170_ID = 374;
    private static final int _GATHER_169_ID = 375;
    private static final int _LOOP0_171_ID = 376;
    private static final int _TMP_172_ID = 377;
    private static final int _LOOP0_174_ID = 378;
    private static final int _GATHER_173_ID = 379;
    private static final int _TMP_175_ID = 380;
    private static final int _LOOP1_176_ID = 381;
    private static final int _TMP_177_ID = 382;
    private static final int _TMP_178_ID = 383;
    private static final int _TMP_179_ID = 384;
    private static final int _TMP_180_ID = 385;
    private static final int _LOOP0_182_ID = 386;
    private static final int _GATHER_181_ID = 387;
    private static final int _TMP_183_ID = 388;
    private static final int _TMP_184_ID = 389;
    private static final int _TMP_185_ID = 390;
    private static final int _LOOP0_187_ID = 391;
    private static final int _GATHER_186_ID = 392;
    private static final int _TMP_188_ID = 393;
    private static final int _TMP_189_ID = 394;
    private static final int _TMP_190_ID = 395;
    private static final int _TMP_191_ID = 396;
    private static final int _TMP_192_ID = 397;
    private static final int _TMP_193_ID = 398;
    private static final int _TMP_194_ID = 399;
    private static final int _TMP_195_ID = 400;
    private static final int _TMP_196_ID = 401;
    private static final int _LOOP0_197_ID = 402;
    private static final int _LOOP0_198_ID = 403;
    private static final int _LOOP0_199_ID = 404;
    private static final int _TMP_200_ID = 405;
    private static final int _TMP_201_ID = 406;
    private static final int _TMP_202_ID = 407;
    private static final int _TMP_203_ID = 408;
    private static final int _LOOP0_204_ID = 409;
    private static final int _LOOP1_205_ID = 410;
    private static final int _LOOP0_206_ID = 411;
    private static final int _LOOP1_207_ID = 412;
    private static final int _TMP_208_ID = 413;
    private static final int _TMP_209_ID = 414;
    private static final int _TMP_210_ID = 415;
    private static final int _LOOP0_212_ID = 416;
    private static final int _GATHER_211_ID = 417;
    private static final int _TMP_213_ID = 418;
    private static final int _LOOP0_215_ID = 419;
    private static final int _GATHER_214_ID = 420;
    private static final int _TMP_216_ID = 421;
    private static final int _TMP_217_ID = 422;
    private static final int _LOOP0_219_ID = 423;
    private static final int _GATHER_218_ID = 424;
    private static final int _TMP_220_ID = 425;
    private static final int _TMP_221_ID = 426;
    private static final int _TMP_222_ID = 427;
    private static final int _TMP_223_ID = 428;
    private static final int _TMP_224_ID = 429;
    private static final int _TMP_225_ID = 430;
    private static final int _TMP_226_ID = 431;
    private static final int _TMP_227_ID = 432;
    private static final int _TMP_228_ID = 433;
    private static final int _TMP_229_ID = 434;
    private static final int _TMP_230_ID = 435;
    private static final int _TMP_231_ID = 436;
    private static final int _TMP_232_ID = 437;
    private static final int _TMP_233_ID = 438;
    private static final int _TMP_234_ID = 439;
    private static final int _TMP_235_ID = 440;
    private static final int _TMP_236_ID = 441;
    private static final int _TMP_237_ID = 442;
    private static final int _TMP_238_ID = 443;
    private static final int _TMP_239_ID = 444;
    private static final int _TMP_240_ID = 445;
    private static final int _TMP_241_ID = 446;
    private static final int _TMP_242_ID = 447;
    private static final int _TMP_243_ID = 448;
    private static final int _TMP_244_ID = 449;

    // keywords constants
    private static final String KEYWORD_PASS = "pass";
    private static final String KEYWORD_BREAK = "break";
    private static final String KEYWORD_CONTINUE = "continue";
    private static final String KEYWORD_GLOBAL = "global";
    private static final String KEYWORD_NONLOCAL = "nonlocal";
    private static final String KEYWORD_ASSERT = "assert";
    private static final String KEYWORD_DEL = "del";
    private static final String KEYWORD_IMPORT = "import";
    private static final String KEYWORD_FROM = "from";
    private static final String KEYWORD_IF = "if";
    private static final String KEYWORD_ELIF = "elif";
    private static final String KEYWORD_ELSE = "else";
    private static final String KEYWORD_WHILE = "while";
    private static final String KEYWORD_FOR = "for";
    private static final String KEYWORD_IN = "in";
    private static final String KEYWORD_WITH = "with";
    private static final String KEYWORD_AS = "as";
    private static final String KEYWORD_TRY = "try";
    private static final String KEYWORD_EXCEPT = "except";
    private static final String KEYWORD_FINALLY = "finally";
    private static final String KEYWORD_NONE = "None";
    private static final String KEYWORD_TRUE = "True";
    private static final String KEYWORD_FALSE = "False";
    private static final String KEYWORD_RETURN = "return";
    private static final String KEYWORD_RAISE = "raise";
    private static final String KEYWORD_DEF = "def";
    private static final String KEYWORD_CLASS = "class";
    private static final String KEYWORD_LAMBDA = "lambda";
    private static final String KEYWORD_NOT = "not";
    private static final String KEYWORD_IS = "is";
    private static final String KEYWORD_YIELD = "yield";
    private static final String KEYWORD_OR = "or";
    private static final String KEYWORD_AND = "and";

    // parser fields
    private final static boolean DEBUG = true;
    private int level = 0;
    private final RuleResultCache<Object> cache;
    private final Set<String> softKeywords;

    // caching results for pos -> rule
    // the null results are cached as well

    public GenParser(ParserTokenizer tokenizer, NodeFactory factory) {
        super(tokenizer, factory);
        cache = new RuleResultCache(this);
        softKeywords = new HashSet<>(Arrays.asList("_", "case", "match"));
    }

    // file: statements? $
    public SSTNode file_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: file, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, FILE_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, FILE_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: factory . createBlock ( ( SSTNode [ ] ) a , startToken . startOffset , endToken . endOffset ) ;
        {
            // visiting Alt: statements? $
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(statements?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(statements)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_1_var = _tmp_1_rule()) != null  // statements
                // generated call: ((_opt_var = _tmp_1_rule()) != null || _opt_var == null)  // statements?
            // collecting vars: None a
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf($) - should work
            // name = ENDMARKER
                // generated call: (endmarker_var = expect(Token.Kind.ENDMARKER)) != null  // token='ENDMARKER'
            // collecting vars: Token endmarker_var
            //    vars: {'a': None, 'endmarker_var': 'Token'}
            Object a;
            Token endmarker_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: statements?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(statements?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(statements?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(statements)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_1_var = _tmp_1_rule()) != null  // statements
                // REMOVE result call ((_opt_var = _tmp_1_rule()) != null || _opt_var == null)  // statements?
                ((a = _tmp_1_rule()) != null || a == null)  // statements?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: $
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem($)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf($) - should work
                // name = ENDMARKER
                // REMOVE result call (endmarker_var = expect(Token.Kind.ENDMARKER)) != null  // token='ENDMARKER'
                (endmarker_var = expect(Token.Kind.ENDMARKER)) != null  // token='ENDMARKER'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("file[" + pos + ", " + mark() +" ](level: " + level + ") statements? $ succeeded!");
                }
                // alt action: factory . createBlock ( ( SSTNode [ ] ) a , startToken . startOffset , endToken . endOffset ) ;
                Token endToken = getToken(mark());
                // node.action: factory . createBlock ( ( SSTNode [ ] ) a , startToken . startOffset , endToken . endOffset ) ;
                result = factory.createBlock((SSTNode[])a,startToken.startOffset,endToken.endOffset);;
                return (SSTNode)cache.putResult(pos, FILE_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, FILE_ID, null);
    }

    // interactive: statement_newline
    public SSTNode interactive_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: interactive, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, INTERACTIVE_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, INTERACTIVE_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Interactive ( a , p -> arena )
        {
            // visiting Alt: statement_newline
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(statement_newline) - should work
            // name = statement_newline
                // generated call: (statement_newline_var = statement_newline_rule()) != null  // statement_newline
            // collecting vars: SSTNode[] a
            //    vars: {'a': 'SSTNode[]'}
            SSTNode[] a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: statement_newline
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(statement_newline)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(statement_newline) - should work
                // name = statement_newline
                // REMOVE result call (statement_newline_var = statement_newline_rule()) != null  // statement_newline
                (a = statement_newline_rule()) != null  // statement_newline
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("interactive[" + pos + ", " + mark() +" ](level: " + level + ") statement_newline succeeded!");
                }
                // alt action: _PyAST_Interactive ( a , p -> arena )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Interactive ( a , p -> arena )
                return (SSTNode)cache.putResult(pos, INTERACTIVE_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, INTERACTIVE_ID, null);
    }

    // eval: expressions NEWLINE* $
    public SSTNode eval_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: eval, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, EVAL_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, EVAL_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Expression ( a , p -> arena )
        {
            // visiting Alt: expressions NEWLINE* $
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expressions) - should work
            // name = expressions
                // generated call: (expressions_var = expressions_rule()) != null  // expressions
            // collecting vars: SSTNode a
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(NEWLINE*)
                // generated call: (_loop0_2_var = _loop0_2_rule()) != null  // NEWLINE*
            // collecting vars: SSTNode[] _loop0_2_var
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf($) - should work
            // name = ENDMARKER
                // generated call: (endmarker_var = expect(Token.Kind.ENDMARKER)) != null  // token='ENDMARKER'
            // collecting vars: Token endmarker_var
            //    vars: {'a': 'SSTNode', '_loop0_2_var': 'SSTNode[]', 'endmarker_var': 'Token'}
            SSTNode[] _loop0_2_var;
            SSTNode a;
            Token endmarker_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: expressions
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expressions)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expressions) - should work
                // name = expressions
                // REMOVE result call (expressions_var = expressions_rule()) != null  // expressions
                (a = expressions_rule()) != null  // expressions
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NEWLINE*
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE*)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat0(NEWLINE*)
                // REMOVE result call (_loop0_2_var = _loop0_2_rule()) != null  // NEWLINE*
                (_loop0_2_var = _loop0_2_rule()) != null  // NEWLINE*
                &&
                // TODO visiting JavaParserGeneratorNamedItem: $
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem($)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf($) - should work
                // name = ENDMARKER
                // REMOVE result call (endmarker_var = expect(Token.Kind.ENDMARKER)) != null  // token='ENDMARKER'
                (endmarker_var = expect(Token.Kind.ENDMARKER)) != null  // token='ENDMARKER'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("eval[" + pos + ", " + mark() +" ](level: " + level + ") expressions NEWLINE* $ succeeded!");
                }
                // alt action: _PyAST_Expression ( a , p -> arena )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Expression ( a , p -> arena )
                return (SSTNode)cache.putResult(pos, EVAL_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, EVAL_ID, null);
    }

    // func_type: '(' type_expressions? ')' '->' expression NEWLINE* $
    public SSTNode func_type_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: func_type, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, FUNC_TYPE_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, FUNC_TYPE_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_FunctionType ( a , b , p -> arena )
        {
            // visiting Alt: '(' type_expressions? ')' '->' expression NEWLINE* $
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(type_expressions?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(type_expressions)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_3_var = _tmp_3_rule()) != null  // type_expressions
                // generated call: ((_opt_var = _tmp_3_rule()) != null || _opt_var == null)  // type_expressions?
            // collecting vars: None a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // collecting vars: Token _literal_1
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('->')
                // generated call: (_literal = expect(Token.Kind.RARROW)) != null  // token='->'
            // collecting vars: Token _literal_2
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode b
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(NEWLINE*)
                // generated call: (_loop0_4_var = _loop0_4_rule()) != null  // NEWLINE*
            // collecting vars: SSTNode[] _loop0_4_var
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf($) - should work
            // name = ENDMARKER
                // generated call: (endmarker_var = expect(Token.Kind.ENDMARKER)) != null  // token='ENDMARKER'
            // collecting vars: Token endmarker_var
            //    vars: {'_literal': 'Token', 'a': None, '_literal_1': 'Token', '_literal_2': 'Token', 'b': 'SSTNode', '_loop0_4_var': 'SSTNode[]', 'endmarker_var': 'Token'}
            Token _literal;
            Token _literal_1;
            Token _literal_2;
            SSTNode[] _loop0_4_var;
            Object a;
            SSTNode b;
            Token endmarker_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                &&
                // TODO visiting JavaParserGeneratorNamedItem: type_expressions?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(type_expressions?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(type_expressions?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(type_expressions)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_3_var = _tmp_3_rule()) != null  // type_expressions
                // REMOVE result call ((_opt_var = _tmp_3_rule()) != null || _opt_var == null)  // type_expressions?
                ((a = _tmp_3_rule()) != null || a == null)  // type_expressions?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
                (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '->'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('->')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('->')
                // REMOVE result call (_literal = expect(Token.Kind.RARROW)) != null  // token='->'
                (_literal_2 = expect(Token.Kind.RARROW)) != null  // token='->'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (b = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NEWLINE*
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE*)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat0(NEWLINE*)
                // REMOVE result call (_loop0_4_var = _loop0_4_rule()) != null  // NEWLINE*
                (_loop0_4_var = _loop0_4_rule()) != null  // NEWLINE*
                &&
                // TODO visiting JavaParserGeneratorNamedItem: $
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem($)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf($) - should work
                // name = ENDMARKER
                // REMOVE result call (endmarker_var = expect(Token.Kind.ENDMARKER)) != null  // token='ENDMARKER'
                (endmarker_var = expect(Token.Kind.ENDMARKER)) != null  // token='ENDMARKER'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("func_type[" + pos + ", " + mark() +" ](level: " + level + ") '(' type_expressions? ')' '->' expression NEWLINE* $ succeeded!");
                }
                // alt action: _PyAST_FunctionType ( a , b , p -> arena )
                Token endToken = getToken(mark());
                // node.action: _PyAST_FunctionType ( a , b , p -> arena )
                return (SSTNode)cache.putResult(pos, FUNC_TYPE_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, FUNC_TYPE_ID, null);
    }

    // fstring: star_expressions
    public SSTNode fstring_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: fstring, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, FSTRING_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, FSTRING_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: star_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // name = star_expressions
                // generated call: (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            // collecting vars: SSTNode star_expressions_var
            //    vars: {'star_expressions_var': 'SSTNode'}
            SSTNode star_expressions_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_expressions
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expressions)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
                // name = star_expressions
                // REMOVE result call (star_expressions_var = star_expressions_rule()) != null  // star_expressions
                (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("fstring[" + pos + ", " + mark() +" ](level: " + level + ") star_expressions succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['star_expressions_var']
                result = star_expressions_var;
                return (SSTNode)cache.putResult(pos, FSTRING_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, FSTRING_ID, null);
    }

    // type_expressions:
    //     | ','.expression+ ',' '*' expression ',' '**' expression
    //     | ','.expression+ ',' '*' expression
    //     | ','.expression+ ',' '**' expression
    //     | '*' expression ',' '**' expression
    //     | '*' expression
    //     | '**' expression
    //     | ','.expression+
    // TODO replacing asdl_expr_seq* --> SSTNode[]
    public SSTNode[] type_expressions_rule() {
    // isLoop: False, isGather: False, type: asdl_expr_seq*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: type_expressions, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, TYPE_EXPRESSIONS_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, TYPE_EXPRESSIONS_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: ( asdl_expr_seq * ) _PyPegen_seq_append_to_end ( p , CHECK ( asdl_seq * , _PyPegen_seq_append_to_end ( p , a , b ) ) , c )
        {
            // visiting Alt: ','.expression+ ',' '*' expression ',' '**' expression
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.expression+)
                // generated call: (_gather_5_var = _gather_5_rule()) != null  // ','.expression+
            // collecting vars: SSTNode[] a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // collecting vars: Token _literal_1
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode b
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal_2
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
                // generated call: (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            // collecting vars: Token _literal_3
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode c
            //    vars: {'a': 'SSTNode[]', '_literal': 'Token', '_literal_1': 'Token', 'b': 'SSTNode', '_literal_2': 'Token', '_literal_3': 'Token', 'c': 'SSTNode'}
            Token _literal;
            Token _literal_1;
            Token _literal_2;
            Token _literal_3;
            SSTNode[] a;
            SSTNode b;
            SSTNode c;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','.expression+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.expression+)
                // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.expression+)
                // REMOVE result call (_gather_5_var = _gather_5_rule()) != null  // ','.expression+
                (a = _gather_5_rule()) != null  // ','.expression+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '*'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                (_literal_1 = expect(Token.Kind.STAR)) != null  // token='*'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (b = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal_2 = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '**'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('**')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
                // REMOVE result call (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
                (_literal_3 = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (c = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("type_expressions[" + pos + ", " + mark() +" ](level: " + level + ") ','.expression+ ',' '*' expression ',' '**' expression succeeded!");
                }
                // alt action: ( asdl_expr_seq * ) _PyPegen_seq_append_to_end ( p , CHECK ( asdl_seq * , _PyPegen_seq_append_to_end ( p , a , b ) ) , c )
                Token endToken = getToken(mark());
                // node.action: ( asdl_expr_seq * ) _PyPegen_seq_append_to_end ( p , CHECK ( asdl_seq * , _PyPegen_seq_append_to_end ( p , a , b ) ) , c )
                return (SSTNode[])cache.putResult(pos, TYPE_EXPRESSIONS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: ( asdl_expr_seq * ) _PyPegen_seq_append_to_end ( p , a , b )
        {
            // visiting Alt: ','.expression+ ',' '*' expression
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.expression+)
                // generated call: (_gather_7_var = _gather_7_rule()) != null  // ','.expression+
            // collecting vars: SSTNode[] a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // collecting vars: Token _literal_1
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode b
            //    vars: {'a': 'SSTNode[]', '_literal': 'Token', '_literal_1': 'Token', 'b': 'SSTNode'}
            Token _literal;
            Token _literal_1;
            SSTNode[] a;
            SSTNode b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','.expression+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.expression+)
                // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.expression+)
                // REMOVE result call (_gather_7_var = _gather_7_rule()) != null  // ','.expression+
                (a = _gather_7_rule()) != null  // ','.expression+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '*'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                (_literal_1 = expect(Token.Kind.STAR)) != null  // token='*'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (b = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("type_expressions[" + pos + ", " + mark() +" ](level: " + level + ") ','.expression+ ',' '*' expression succeeded!");
                }
                // alt action: ( asdl_expr_seq * ) _PyPegen_seq_append_to_end ( p , a , b )
                Token endToken = getToken(mark());
                // node.action: ( asdl_expr_seq * ) _PyPegen_seq_append_to_end ( p , a , b )
                return (SSTNode[])cache.putResult(pos, TYPE_EXPRESSIONS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: ( asdl_expr_seq * ) _PyPegen_seq_append_to_end ( p , a , b )
        {
            // visiting Alt: ','.expression+ ',' '**' expression
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.expression+)
                // generated call: (_gather_9_var = _gather_9_rule()) != null  // ','.expression+
            // collecting vars: SSTNode[] a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
                // generated call: (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            // collecting vars: Token _literal_1
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode b
            //    vars: {'a': 'SSTNode[]', '_literal': 'Token', '_literal_1': 'Token', 'b': 'SSTNode'}
            Token _literal;
            Token _literal_1;
            SSTNode[] a;
            SSTNode b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','.expression+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.expression+)
                // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.expression+)
                // REMOVE result call (_gather_9_var = _gather_9_rule()) != null  // ','.expression+
                (a = _gather_9_rule()) != null  // ','.expression+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '**'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('**')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
                // REMOVE result call (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
                (_literal_1 = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (b = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("type_expressions[" + pos + ", " + mark() +" ](level: " + level + ") ','.expression+ ',' '**' expression succeeded!");
                }
                // alt action: ( asdl_expr_seq * ) _PyPegen_seq_append_to_end ( p , a , b )
                Token endToken = getToken(mark());
                // node.action: ( asdl_expr_seq * ) _PyPegen_seq_append_to_end ( p , a , b )
                return (SSTNode[])cache.putResult(pos, TYPE_EXPRESSIONS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: ( asdl_expr_seq * ) _PyPegen_seq_append_to_end ( p , CHECK ( asdl_seq * , _PyPegen_singleton_seq ( p , a ) ) , b )
        {
            // visiting Alt: '*' expression ',' '**' expression
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal_1
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
                // generated call: (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            // collecting vars: Token _literal_2
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode b
            //    vars: {'_literal': 'Token', 'a': 'SSTNode', '_literal_1': 'Token', '_literal_2': 'Token', 'b': 'SSTNode'}
            Token _literal;
            Token _literal_1;
            Token _literal_2;
            SSTNode a;
            SSTNode b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '*'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (a = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal_1 = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '**'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('**')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
                // REMOVE result call (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
                (_literal_2 = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (b = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("type_expressions[" + pos + ", " + mark() +" ](level: " + level + ") '*' expression ',' '**' expression succeeded!");
                }
                // alt action: ( asdl_expr_seq * ) _PyPegen_seq_append_to_end ( p , CHECK ( asdl_seq * , _PyPegen_singleton_seq ( p , a ) ) , b )
                Token endToken = getToken(mark());
                // node.action: ( asdl_expr_seq * ) _PyPegen_seq_append_to_end ( p , CHECK ( asdl_seq * , _PyPegen_singleton_seq ( p , a ) ) , b )
                return (SSTNode[])cache.putResult(pos, TYPE_EXPRESSIONS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: ( asdl_expr_seq * ) _PyPegen_singleton_seq ( p , a )
        {
            // visiting Alt: '*' expression
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode a
            //    vars: {'_literal': 'Token', 'a': 'SSTNode'}
            Token _literal;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '*'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (a = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("type_expressions[" + pos + ", " + mark() +" ](level: " + level + ") '*' expression succeeded!");
                }
                // alt action: ( asdl_expr_seq * ) _PyPegen_singleton_seq ( p , a )
                Token endToken = getToken(mark());
                // node.action: ( asdl_expr_seq * ) _PyPegen_singleton_seq ( p , a )
                return (SSTNode[])cache.putResult(pos, TYPE_EXPRESSIONS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: ( asdl_expr_seq * ) _PyPegen_singleton_seq ( p , a )
        {
            // visiting Alt: '**' expression
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
                // generated call: (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode a
            //    vars: {'_literal': 'Token', 'a': 'SSTNode'}
            Token _literal;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '**'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('**')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
                // REMOVE result call (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
                (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (a = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("type_expressions[" + pos + ", " + mark() +" ](level: " + level + ") '**' expression succeeded!");
                }
                // alt action: ( asdl_expr_seq * ) _PyPegen_singleton_seq ( p , a )
                Token endToken = getToken(mark());
                // node.action: ( asdl_expr_seq * ) _PyPegen_singleton_seq ( p , a )
                return (SSTNode[])cache.putResult(pos, TYPE_EXPRESSIONS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: a
        {
            // visiting Alt: ','.expression+
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.expression+)
                // generated call: (_gather_11_var = _gather_11_rule()) != null  // ','.expression+
            // collecting vars: asdl_expr_seq* a
            //    vars: {'a': 'asdl_expr_seq*'}
            // TODO replacing asdl_expr_seq* --> SSTNode[]
            SSTNode[] a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','.expression+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.expression+)
                // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.expression+)
                // REMOVE result call (_gather_11_var = _gather_11_rule()) != null  // ','.expression+
                (a = (SSTNode[])_gather_11_rule()) != null  // ','.expression+
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("type_expressions[" + pos + ", " + mark() +" ](level: " + level + ") ','.expression+ succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode[])cache.putResult(pos, TYPE_EXPRESSIONS_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, TYPE_EXPRESSIONS_ID, null);
    }

    // statements: statement+
    // TODO replacing SSTNode* --> SSTNode[]
    public SSTNode[] statements_rule() {
    // isLoop: False, isGather: False, type: SSTNode*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: statements, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, STATEMENTS_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, STATEMENTS_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: a
        {
            // visiting Alt: statement+
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(statement+)
                // generated call: (_loop1_13_var = _loop1_13_rule()) != null  // statement+
            // collecting vars: SSTNode[] a
            //    vars: {'a': 'SSTNode[]'}
            SSTNode[] a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: statement+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(statement+)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat1(statement+)
                // REMOVE result call (_loop1_13_var = _loop1_13_rule()) != null  // statement+
                (a = _loop1_13_rule()) != null  // statement+
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("statements[" + pos + ", " + mark() +" ](level: " + level + ") statement+ succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode[])cache.putResult(pos, STATEMENTS_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, STATEMENTS_ID, null);
    }

    // statement: compound_stmt | simple_stmts
    // TODO replacing SSTNode* --> SSTNode[]
    public SSTNode[] statement_rule() {
    // isLoop: False, isGather: False, type: SSTNode*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: statement, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, STATEMENT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, STATEMENT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: a
        {
            // visiting Alt: compound_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(compound_stmt) - should work
            // name = compound_stmt
            // TODO replacing stmt_ty --> SSTNode
                // generated call: (compound_stmt_var = compound_stmt_rule()) != null  // compound_stmt
            // collecting vars: SSTNode a
            //    vars: {'a': 'SSTNode'}
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: compound_stmt
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(compound_stmt)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(compound_stmt) - should work
                // name = compound_stmt
                // TODO replacing stmt_ty --> SSTNode
                // REMOVE result call (compound_stmt_var = compound_stmt_rule()) != null  // compound_stmt
                (a = compound_stmt_rule()) != null  // compound_stmt
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("statement[" + pos + ", " + mark() +" ](level: " + level + ") compound_stmt succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode[])cache.putResult(pos, STATEMENT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: a
        {
            // visiting Alt: simple_stmts
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmts) - should work
            // name = simple_stmts
                // generated call: (simple_stmts_var = simple_stmts_rule()) != null  // simple_stmts
            // collecting vars: SSTNode* a
            //    vars: {'a': 'SSTNode*'}
            // TODO replacing SSTNode* --> SSTNode[]
            SSTNode[] a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: simple_stmts
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(simple_stmts)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmts) - should work
                // name = simple_stmts
                // REMOVE result call (simple_stmts_var = simple_stmts_rule()) != null  // simple_stmts
                (a = (SSTNode[])simple_stmts_rule()) != null  // simple_stmts
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("statement[" + pos + ", " + mark() +" ](level: " + level + ") simple_stmts succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode[])cache.putResult(pos, STATEMENT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, STATEMENT_ID, null);
    }

    // statement_newline: compound_stmt NEWLINE | simple_stmts | NEWLINE | $
    // TODO replacing SSTNode* --> SSTNode[]
    public SSTNode[] statement_newline_rule() {
    // isLoop: False, isGather: False, type: SSTNode*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: statement_newline, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, STATEMENT_NEWLINE_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, STATEMENT_NEWLINE_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: ( asdl_stmt_seq * ) _PyPegen_singleton_seq ( p , a )
        {
            // visiting Alt: compound_stmt NEWLINE
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(compound_stmt) - should work
            // name = compound_stmt
            // TODO replacing stmt_ty --> SSTNode
                // generated call: (compound_stmt_var = compound_stmt_rule()) != null  // compound_stmt
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // name = NEWLINE
                // generated call: (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            // collecting vars: Token newline_var
            //    vars: {'a': 'SSTNode', 'newline_var': 'Token'}
            SSTNode a;
            Token newline_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: compound_stmt
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(compound_stmt)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(compound_stmt) - should work
                // name = compound_stmt
                // TODO replacing stmt_ty --> SSTNode
                // REMOVE result call (compound_stmt_var = compound_stmt_rule()) != null  // compound_stmt
                (a = compound_stmt_rule()) != null  // compound_stmt
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NEWLINE
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
                // name = NEWLINE
                // REMOVE result call (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
                (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("statement_newline[" + pos + ", " + mark() +" ](level: " + level + ") compound_stmt NEWLINE succeeded!");
                }
                // alt action: ( asdl_stmt_seq * ) _PyPegen_singleton_seq ( p , a )
                Token endToken = getToken(mark());
                // node.action: ( asdl_stmt_seq * ) _PyPegen_singleton_seq ( p , a )
                return (SSTNode[])cache.putResult(pos, STATEMENT_NEWLINE_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: simple_stmts
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmts) - should work
            // name = simple_stmts
                // generated call: (simple_stmts_var = simple_stmts_rule()) != null  // simple_stmts
            // collecting vars: SSTNode[] simple_stmts_var
            //    vars: {'simple_stmts_var': 'SSTNode[]'}
            SSTNode[] simple_stmts_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: simple_stmts
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(simple_stmts)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmts) - should work
                // name = simple_stmts
                // REMOVE result call (simple_stmts_var = simple_stmts_rule()) != null  // simple_stmts
                (simple_stmts_var = simple_stmts_rule()) != null  // simple_stmts
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("statement_newline[" + pos + ", " + mark() +" ](level: " + level + ") simple_stmts succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['simple_stmts_var']
                result = simple_stmts_var;
                return (SSTNode[])cache.putResult(pos, STATEMENT_NEWLINE_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: ( asdl_stmt_seq * ) _PyPegen_singleton_seq ( p , CHECK ( stmt_ty , _PyAST_Pass ( EXTRA ) ) )
        {
            // visiting Alt: NEWLINE
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // name = NEWLINE
                // generated call: (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            // collecting vars: Token newline_var
            //    vars: {'newline_var': 'Token'}
            Token newline_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: NEWLINE
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
                // name = NEWLINE
                // REMOVE result call (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
                (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("statement_newline[" + pos + ", " + mark() +" ](level: " + level + ") NEWLINE succeeded!");
                }
                // alt action: ( asdl_stmt_seq * ) _PyPegen_singleton_seq ( p , CHECK ( stmt_ty , _PyAST_Pass ( EXTRA ) ) )
                Token endToken = getToken(mark());
                // node.action: ( asdl_stmt_seq * ) _PyPegen_singleton_seq ( p , CHECK ( stmt_ty , _PyAST_Pass ( EXTRA ) ) )
                return (SSTNode[])cache.putResult(pos, STATEMENT_NEWLINE_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_interactive_exit ( p )
        {
            // visiting Alt: $
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf($) - should work
            // name = ENDMARKER
                // generated call: (endmarker_var = expect(Token.Kind.ENDMARKER)) != null  // token='ENDMARKER'
            // collecting vars: Token endmarker_var
            //    vars: {'endmarker_var': 'Token'}
            Token endmarker_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: $
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem($)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf($) - should work
                // name = ENDMARKER
                // REMOVE result call (endmarker_var = expect(Token.Kind.ENDMARKER)) != null  // token='ENDMARKER'
                (endmarker_var = expect(Token.Kind.ENDMARKER)) != null  // token='ENDMARKER'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("statement_newline[" + pos + ", " + mark() +" ](level: " + level + ") $ succeeded!");
                }
                // alt action: _PyPegen_interactive_exit ( p )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_interactive_exit ( p )
                return (SSTNode[])cache.putResult(pos, STATEMENT_NEWLINE_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, STATEMENT_NEWLINE_ID, null);
    }

    // simple_stmts: simple_stmt !';' NEWLINE | ';'.simple_stmt+ ';'? NEWLINE
    // TODO replacing SSTNode* --> SSTNode[]
    public SSTNode[] simple_stmts_rule() {
    // isLoop: False, isGather: False, type: SSTNode*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: simple_stmts, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, SIMPLE_STMTS_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, SIMPLE_STMTS_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: new SSTNode [ ] {a} ; // ( asdl_stmt_seq * ) _PyPegen_singleton_seq ( p , a )
        {
            // visiting Alt: simple_stmt !';' NEWLINE
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmt) - should work
            // name = simple_stmt
            // TODO replacing stmt_ty --> SSTNode
                // generated call: (simple_stmt_var = simple_stmt_rule()) != null  // simple_stmt
            // collecting vars: SSTNode a
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!';')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(';')
            // lookahead_call_helper call: (_literal = expect(Token.Kind.SEMI)) != null  // token=';'
            //    call.nodetype: GENERIC_TOKEN
                // generated call: lookahead(false, Token.Kind.SEMI)  // token=';'
            // collecting vars: boolean None
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // name = NEWLINE
                // generated call: (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            // collecting vars: Token newline_var
            //    vars: {'a': 'SSTNode', None: 'boolean', 'newline_var': 'Token'}
            SSTNode a;
            Token newline_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: simple_stmt
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(simple_stmt)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmt) - should work
                // name = simple_stmt
                // TODO replacing stmt_ty --> SSTNode
                // REMOVE result call (simple_stmt_var = simple_stmt_rule()) != null  // simple_stmt
                (a = simple_stmt_rule()) != null  // simple_stmt
                &&
                // TODO visiting JavaParserGeneratorNamedItem: !';'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!';')
                // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!';')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(';')
                // lookahead_call_helper call: (_literal = expect(Token.Kind.SEMI)) != null  // token=';'
                //    call.nodetype: GENERIC_TOKEN
                // REMOVE result call lookahead(false, Token.Kind.SEMI)  // token=';'
                lookahead(false, Token.Kind.SEMI)  // token=';'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NEWLINE
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
                // name = NEWLINE
                // REMOVE result call (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
                (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("simple_stmts[" + pos + ", " + mark() +" ](level: " + level + ") simple_stmt !';' NEWLINE succeeded!");
                }
                // alt action: new SSTNode [ ] {a} ; // ( asdl_stmt_seq * ) _PyPegen_singleton_seq ( p , a )
                Token endToken = getToken(mark());
                // node.action: new SSTNode [ ] {a} ; // ( asdl_stmt_seq * ) _PyPegen_singleton_seq ( p , a )
                result = new SSTNode[]{a};//(asdl_stmt_seq*)_PyPegen_singleton_seq(p,a);
                return (SSTNode[])cache.putResult(pos, SIMPLE_STMTS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: a
        {
            // visiting Alt: ';'.simple_stmt+ ';'? NEWLINE
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(';'.simple_stmt+)
                // generated call: (_gather_14_var = _gather_14_rule()) != null  // ';'.simple_stmt+
            // collecting vars: SSTNode* a
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(';'?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(';')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_16_var = _tmp_16_rule()) != null  // ';'
                // generated call: ((_opt_var = _tmp_16_rule()) != null || _opt_var == null)  // ';'?
            // collecting vars: None _opt_var
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // name = NEWLINE
                // generated call: (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            // collecting vars: Token newline_var
            //    vars: {'a': 'SSTNode*', '_opt_var': None, 'newline_var': 'Token'}
            Object _opt_var;
            // TODO replacing SSTNode* --> SSTNode[]
            SSTNode[] a;
            Token newline_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ';'.simple_stmt+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(';'.simple_stmt+)
                // REMOVE visiting JavaCallMakerVisitor.visit_Gather(';'.simple_stmt+)
                // REMOVE result call (_gather_14_var = _gather_14_rule()) != null  // ';'.simple_stmt+
                (a = (SSTNode[])_gather_14_rule()) != null  // ';'.simple_stmt+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ';'?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(';'?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(';'?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(';')
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_16_var = _tmp_16_rule()) != null  // ';'
                // REMOVE result call ((_opt_var = _tmp_16_rule()) != null || _opt_var == null)  // ';'?
                ((_opt_var = _tmp_16_rule()) != null || _opt_var == null)  // ';'?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NEWLINE
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
                // name = NEWLINE
                // REMOVE result call (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
                (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("simple_stmts[" + pos + ", " + mark() +" ](level: " + level + ") ';'.simple_stmt+ ';'? NEWLINE succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode[])cache.putResult(pos, SIMPLE_STMTS_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, SIMPLE_STMTS_ID, null);
    }

    // simple_stmt:
    //     | assignment
    //     | star_expressions
    //     | &'return' return_stmt
    //     | &('import' | 'from') import_stmt
    //     | &'raise' raise_stmt
    //     | 'pass'
    //     | &'del' del_stmt
    //     | &'yield' yield_stmt
    //     | &'assert' assert_stmt
    //     | 'break'
    //     | 'continue'
    //     | &'global' global_stmt
    //     | &'nonlocal' nonlocal_stmt
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode simple_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: simple_stmt, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, SIMPLE_STMT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, SIMPLE_STMT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: None
        {
            // visiting Alt: assignment
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(assignment) - should work
            // name = assignment
                // generated call: (assignment_var = assignment_rule()) != null  // assignment
            // collecting vars: SSTNode assignment_var
            //    vars: {'assignment_var': 'SSTNode'}
            SSTNode assignment_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: assignment
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(assignment)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(assignment) - should work
                // name = assignment
                // REMOVE result call (assignment_var = assignment_rule()) != null  // assignment
                (assignment_var = assignment_rule()) != null  // assignment
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("simple_stmt[" + pos + ", " + mark() +" ](level: " + level + ") assignment succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['assignment_var']
                result = assignment_var;
                return (SSTNode)cache.putResult(pos, SIMPLE_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Expr ( e , EXTRA )
        {
            // visiting Alt: star_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // name = star_expressions
                // generated call: (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            // collecting vars: SSTNode e
            //    vars: {'e': 'SSTNode'}
            SSTNode e;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_expressions
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expressions)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
                // name = star_expressions
                // REMOVE result call (star_expressions_var = star_expressions_rule()) != null  // star_expressions
                (e = star_expressions_rule()) != null  // star_expressions
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("simple_stmt[" + pos + ", " + mark() +" ](level: " + level + ") star_expressions succeeded!");
                }
                // alt action: _PyAST_Expr ( e , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Expr ( e , EXTRA )
                return (SSTNode)cache.putResult(pos, SIMPLE_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: &'return' return_stmt
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'return')
                // generated call: None
            // collecting vars: None None
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(return_stmt) - should work
            // name = return_stmt
            // TODO replacing stmt_ty --> SSTNode
                // generated call: (return_stmt_var = return_stmt_rule()) != null  // return_stmt
            // collecting vars: SSTNode return_stmt_var
            //    vars: {None: None, 'return_stmt_var': 'SSTNode'}
            SSTNode return_stmt_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: &'return'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&'return')
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'return')
                // TODO call is not created &'return' -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: return_stmt
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(return_stmt)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(return_stmt) - should work
                // name = return_stmt
                // TODO replacing stmt_ty --> SSTNode
                // REMOVE result call (return_stmt_var = return_stmt_rule()) != null  // return_stmt
                (return_stmt_var = return_stmt_rule()) != null  // return_stmt
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("simple_stmt[" + pos + ", " + mark() +" ](level: " + level + ") &'return' return_stmt succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['return_stmt_var']
                result = return_stmt_var;
                return (SSTNode)cache.putResult(pos, SIMPLE_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: &('import' | 'from') import_stmt
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('import' | 'from'))
                // generated call: None
            // collecting vars: None None
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_stmt) - should work
            // name = import_stmt
            // TODO replacing stmt_ty --> SSTNode
                // generated call: (import_stmt_var = import_stmt_rule()) != null  // import_stmt
            // collecting vars: SSTNode import_stmt_var
            //    vars: {None: None, 'import_stmt_var': 'SSTNode'}
            SSTNode import_stmt_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: &('import' | 'from')
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&('import' | 'from'))
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('import' | 'from'))
                // TODO call is not created &('import' | 'from') -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: import_stmt
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(import_stmt)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_stmt) - should work
                // name = import_stmt
                // TODO replacing stmt_ty --> SSTNode
                // REMOVE result call (import_stmt_var = import_stmt_rule()) != null  // import_stmt
                (import_stmt_var = import_stmt_rule()) != null  // import_stmt
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("simple_stmt[" + pos + ", " + mark() +" ](level: " + level + ") &('import' | 'from') import_stmt succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['import_stmt_var']
                result = import_stmt_var;
                return (SSTNode)cache.putResult(pos, SIMPLE_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: &'raise' raise_stmt
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'raise')
                // generated call: None
            // collecting vars: None None
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(raise_stmt) - should work
            // name = raise_stmt
            // TODO replacing stmt_ty --> SSTNode
                // generated call: (raise_stmt_var = raise_stmt_rule()) != null  // raise_stmt
            // collecting vars: SSTNode raise_stmt_var
            //    vars: {None: None, 'raise_stmt_var': 'SSTNode'}
            SSTNode raise_stmt_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: &'raise'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&'raise')
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'raise')
                // TODO call is not created &'raise' -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: raise_stmt
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(raise_stmt)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(raise_stmt) - should work
                // name = raise_stmt
                // TODO replacing stmt_ty --> SSTNode
                // REMOVE result call (raise_stmt_var = raise_stmt_rule()) != null  // raise_stmt
                (raise_stmt_var = raise_stmt_rule()) != null  // raise_stmt
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("simple_stmt[" + pos + ", " + mark() +" ](level: " + level + ") &'raise' raise_stmt succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['raise_stmt_var']
                result = raise_stmt_var;
                return (SSTNode)cache.putResult(pos, SIMPLE_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Pass ( EXTRA )
        {
            // visiting Alt: 'pass'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('pass')
                // generated call: (_keyword = expect(KEYWORD_PASS)) != null  // token='pass'
            // collecting vars: Token _keyword
            //    vars: {'_keyword': 'Token'}
            Token _keyword;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'pass'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('pass')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('pass')
                // REMOVE result call (_keyword = expect(KEYWORD_PASS)) != null  // token='pass'
                (_keyword = expect(KEYWORD_PASS)) != null  // token='pass'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("simple_stmt[" + pos + ", " + mark() +" ](level: " + level + ") 'pass' succeeded!");
                }
                // alt action: _PyAST_Pass ( EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Pass ( EXTRA )
                return (SSTNode)cache.putResult(pos, SIMPLE_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: &'del' del_stmt
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'del')
                // generated call: None
            // collecting vars: None None
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_stmt) - should work
            // name = del_stmt
            // TODO replacing stmt_ty --> SSTNode
                // generated call: (del_stmt_var = del_stmt_rule()) != null  // del_stmt
            // collecting vars: SSTNode del_stmt_var
            //    vars: {None: None, 'del_stmt_var': 'SSTNode'}
            SSTNode del_stmt_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: &'del'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&'del')
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'del')
                // TODO call is not created &'del' -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: del_stmt
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(del_stmt)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_stmt) - should work
                // name = del_stmt
                // TODO replacing stmt_ty --> SSTNode
                // REMOVE result call (del_stmt_var = del_stmt_rule()) != null  // del_stmt
                (del_stmt_var = del_stmt_rule()) != null  // del_stmt
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("simple_stmt[" + pos + ", " + mark() +" ](level: " + level + ") &'del' del_stmt succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['del_stmt_var']
                result = del_stmt_var;
                return (SSTNode)cache.putResult(pos, SIMPLE_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: &'yield' yield_stmt
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'yield')
                // generated call: None
            // collecting vars: None None
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_stmt) - should work
            // name = yield_stmt
            // TODO replacing stmt_ty --> SSTNode
                // generated call: (yield_stmt_var = yield_stmt_rule()) != null  // yield_stmt
            // collecting vars: SSTNode yield_stmt_var
            //    vars: {None: None, 'yield_stmt_var': 'SSTNode'}
            SSTNode yield_stmt_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: &'yield'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&'yield')
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'yield')
                // TODO call is not created &'yield' -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: yield_stmt
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(yield_stmt)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_stmt) - should work
                // name = yield_stmt
                // TODO replacing stmt_ty --> SSTNode
                // REMOVE result call (yield_stmt_var = yield_stmt_rule()) != null  // yield_stmt
                (yield_stmt_var = yield_stmt_rule()) != null  // yield_stmt
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("simple_stmt[" + pos + ", " + mark() +" ](level: " + level + ") &'yield' yield_stmt succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['yield_stmt_var']
                result = yield_stmt_var;
                return (SSTNode)cache.putResult(pos, SIMPLE_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: &'assert' assert_stmt
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'assert')
                // generated call: None
            // collecting vars: None None
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(assert_stmt) - should work
            // name = assert_stmt
            // TODO replacing stmt_ty --> SSTNode
                // generated call: (assert_stmt_var = assert_stmt_rule()) != null  // assert_stmt
            // collecting vars: SSTNode assert_stmt_var
            //    vars: {None: None, 'assert_stmt_var': 'SSTNode'}
            SSTNode assert_stmt_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: &'assert'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&'assert')
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'assert')
                // TODO call is not created &'assert' -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: assert_stmt
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(assert_stmt)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(assert_stmt) - should work
                // name = assert_stmt
                // TODO replacing stmt_ty --> SSTNode
                // REMOVE result call (assert_stmt_var = assert_stmt_rule()) != null  // assert_stmt
                (assert_stmt_var = assert_stmt_rule()) != null  // assert_stmt
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("simple_stmt[" + pos + ", " + mark() +" ](level: " + level + ") &'assert' assert_stmt succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['assert_stmt_var']
                result = assert_stmt_var;
                return (SSTNode)cache.putResult(pos, SIMPLE_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Break ( EXTRA )
        {
            // visiting Alt: 'break'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('break')
                // generated call: (_keyword = expect(KEYWORD_BREAK)) != null  // token='break'
            // collecting vars: Token _keyword
            //    vars: {'_keyword': 'Token'}
            Token _keyword;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'break'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('break')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('break')
                // REMOVE result call (_keyword = expect(KEYWORD_BREAK)) != null  // token='break'
                (_keyword = expect(KEYWORD_BREAK)) != null  // token='break'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("simple_stmt[" + pos + ", " + mark() +" ](level: " + level + ") 'break' succeeded!");
                }
                // alt action: _PyAST_Break ( EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Break ( EXTRA )
                return (SSTNode)cache.putResult(pos, SIMPLE_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Continue ( EXTRA )
        {
            // visiting Alt: 'continue'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('continue')
                // generated call: (_keyword = expect(KEYWORD_CONTINUE)) != null  // token='continue'
            // collecting vars: Token _keyword
            //    vars: {'_keyword': 'Token'}
            Token _keyword;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'continue'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('continue')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('continue')
                // REMOVE result call (_keyword = expect(KEYWORD_CONTINUE)) != null  // token='continue'
                (_keyword = expect(KEYWORD_CONTINUE)) != null  // token='continue'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("simple_stmt[" + pos + ", " + mark() +" ](level: " + level + ") 'continue' succeeded!");
                }
                // alt action: _PyAST_Continue ( EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Continue ( EXTRA )
                return (SSTNode)cache.putResult(pos, SIMPLE_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: &'global' global_stmt
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'global')
                // generated call: None
            // collecting vars: None None
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(global_stmt) - should work
            // name = global_stmt
            // TODO replacing stmt_ty --> SSTNode
                // generated call: (global_stmt_var = global_stmt_rule()) != null  // global_stmt
            // collecting vars: SSTNode global_stmt_var
            //    vars: {None: None, 'global_stmt_var': 'SSTNode'}
            SSTNode global_stmt_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: &'global'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&'global')
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'global')
                // TODO call is not created &'global' -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: global_stmt
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(global_stmt)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(global_stmt) - should work
                // name = global_stmt
                // TODO replacing stmt_ty --> SSTNode
                // REMOVE result call (global_stmt_var = global_stmt_rule()) != null  // global_stmt
                (global_stmt_var = global_stmt_rule()) != null  // global_stmt
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("simple_stmt[" + pos + ", " + mark() +" ](level: " + level + ") &'global' global_stmt succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['global_stmt_var']
                result = global_stmt_var;
                return (SSTNode)cache.putResult(pos, SIMPLE_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: &'nonlocal' nonlocal_stmt
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'nonlocal')
                // generated call: None
            // collecting vars: None None
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(nonlocal_stmt) - should work
            // name = nonlocal_stmt
            // TODO replacing stmt_ty --> SSTNode
                // generated call: (nonlocal_stmt_var = nonlocal_stmt_rule()) != null  // nonlocal_stmt
            // collecting vars: SSTNode nonlocal_stmt_var
            //    vars: {None: None, 'nonlocal_stmt_var': 'SSTNode'}
            SSTNode nonlocal_stmt_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: &'nonlocal'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&'nonlocal')
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'nonlocal')
                // TODO call is not created &'nonlocal' -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: nonlocal_stmt
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(nonlocal_stmt)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(nonlocal_stmt) - should work
                // name = nonlocal_stmt
                // TODO replacing stmt_ty --> SSTNode
                // REMOVE result call (nonlocal_stmt_var = nonlocal_stmt_rule()) != null  // nonlocal_stmt
                (nonlocal_stmt_var = nonlocal_stmt_rule()) != null  // nonlocal_stmt
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("simple_stmt[" + pos + ", " + mark() +" ](level: " + level + ") &'nonlocal' nonlocal_stmt succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['nonlocal_stmt_var']
                result = nonlocal_stmt_var;
                return (SSTNode)cache.putResult(pos, SIMPLE_STMT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, SIMPLE_STMT_ID, null);
    }

    // compound_stmt:
    //     | &('def' | '@' | ASYNC) function_def
    //     | &'if' if_stmt
    //     | &('class' | '@') class_def
    //     | &('with' | ASYNC) with_stmt
    //     | &('for' | ASYNC) for_stmt
    //     | &'try' try_stmt
    //     | &'while' while_stmt
    //     | match_stmt
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode compound_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: compound_stmt, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, COMPOUND_STMT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, COMPOUND_STMT_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: &('def' | '@' | ASYNC) function_def
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('def' | '@' | ASYNC))
                // generated call: None
            // collecting vars: None None
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(function_def) - should work
            // name = function_def
            // TODO replacing stmt_ty --> SSTNode
                // generated call: (function_def_var = function_def_rule()) != null  // function_def
            // collecting vars: SSTNode function_def_var
            //    vars: {None: None, 'function_def_var': 'SSTNode'}
            SSTNode function_def_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: &('def' | '@' | ASYNC)
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&('def' | '@' | ASYNC))
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('def' | '@' | ASYNC))
                // TODO call is not created &('def' | '@' | ASYNC) -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: function_def
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(function_def)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(function_def) - should work
                // name = function_def
                // TODO replacing stmt_ty --> SSTNode
                // REMOVE result call (function_def_var = function_def_rule()) != null  // function_def
                (function_def_var = function_def_rule()) != null  // function_def
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("compound_stmt[" + pos + ", " + mark() +" ](level: " + level + ") &('def' | '@' | ASYNC) function_def succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['function_def_var']
                result = function_def_var;
                return (SSTNode)cache.putResult(pos, COMPOUND_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: &'if' if_stmt
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'if')
                // generated call: None
            // collecting vars: None None
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(if_stmt) - should work
            // name = if_stmt
            // TODO replacing stmt_ty --> SSTNode
                // generated call: (if_stmt_var = if_stmt_rule()) != null  // if_stmt
            // collecting vars: SSTNode if_stmt_var
            //    vars: {None: None, 'if_stmt_var': 'SSTNode'}
            SSTNode if_stmt_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: &'if'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&'if')
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'if')
                // TODO call is not created &'if' -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: if_stmt
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(if_stmt)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(if_stmt) - should work
                // name = if_stmt
                // TODO replacing stmt_ty --> SSTNode
                // REMOVE result call (if_stmt_var = if_stmt_rule()) != null  // if_stmt
                (if_stmt_var = if_stmt_rule()) != null  // if_stmt
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("compound_stmt[" + pos + ", " + mark() +" ](level: " + level + ") &'if' if_stmt succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['if_stmt_var']
                result = if_stmt_var;
                return (SSTNode)cache.putResult(pos, COMPOUND_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: &('class' | '@') class_def
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('class' | '@'))
                // generated call: None
            // collecting vars: None None
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(class_def) - should work
            // name = class_def
            // TODO replacing stmt_ty --> SSTNode
                // generated call: (class_def_var = class_def_rule()) != null  // class_def
            // collecting vars: SSTNode class_def_var
            //    vars: {None: None, 'class_def_var': 'SSTNode'}
            SSTNode class_def_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: &('class' | '@')
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&('class' | '@'))
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('class' | '@'))
                // TODO call is not created &('class' | '@') -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: class_def
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(class_def)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(class_def) - should work
                // name = class_def
                // TODO replacing stmt_ty --> SSTNode
                // REMOVE result call (class_def_var = class_def_rule()) != null  // class_def
                (class_def_var = class_def_rule()) != null  // class_def
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("compound_stmt[" + pos + ", " + mark() +" ](level: " + level + ") &('class' | '@') class_def succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['class_def_var']
                result = class_def_var;
                return (SSTNode)cache.putResult(pos, COMPOUND_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: &('with' | ASYNC) with_stmt
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('with' | ASYNC))
                // generated call: None
            // collecting vars: None None
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_stmt) - should work
            // name = with_stmt
            // TODO replacing stmt_ty --> SSTNode
                // generated call: (with_stmt_var = with_stmt_rule()) != null  // with_stmt
            // collecting vars: SSTNode with_stmt_var
            //    vars: {None: None, 'with_stmt_var': 'SSTNode'}
            SSTNode with_stmt_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: &('with' | ASYNC)
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&('with' | ASYNC))
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('with' | ASYNC))
                // TODO call is not created &('with' | ASYNC) -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: with_stmt
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(with_stmt)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_stmt) - should work
                // name = with_stmt
                // TODO replacing stmt_ty --> SSTNode
                // REMOVE result call (with_stmt_var = with_stmt_rule()) != null  // with_stmt
                (with_stmt_var = with_stmt_rule()) != null  // with_stmt
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("compound_stmt[" + pos + ", " + mark() +" ](level: " + level + ") &('with' | ASYNC) with_stmt succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['with_stmt_var']
                result = with_stmt_var;
                return (SSTNode)cache.putResult(pos, COMPOUND_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: &('for' | ASYNC) for_stmt
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('for' | ASYNC))
                // generated call: None
            // collecting vars: None None
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_stmt) - should work
            // name = for_stmt
            // TODO replacing stmt_ty --> SSTNode
                // generated call: (for_stmt_var = for_stmt_rule()) != null  // for_stmt
            // collecting vars: SSTNode for_stmt_var
            //    vars: {None: None, 'for_stmt_var': 'SSTNode'}
            SSTNode for_stmt_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: &('for' | ASYNC)
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&('for' | ASYNC))
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('for' | ASYNC))
                // TODO call is not created &('for' | ASYNC) -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: for_stmt
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(for_stmt)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_stmt) - should work
                // name = for_stmt
                // TODO replacing stmt_ty --> SSTNode
                // REMOVE result call (for_stmt_var = for_stmt_rule()) != null  // for_stmt
                (for_stmt_var = for_stmt_rule()) != null  // for_stmt
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("compound_stmt[" + pos + ", " + mark() +" ](level: " + level + ") &('for' | ASYNC) for_stmt succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['for_stmt_var']
                result = for_stmt_var;
                return (SSTNode)cache.putResult(pos, COMPOUND_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: &'try' try_stmt
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'try')
                // generated call: None
            // collecting vars: None None
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(try_stmt) - should work
            // name = try_stmt
            // TODO replacing stmt_ty --> SSTNode
                // generated call: (try_stmt_var = try_stmt_rule()) != null  // try_stmt
            // collecting vars: SSTNode try_stmt_var
            //    vars: {None: None, 'try_stmt_var': 'SSTNode'}
            SSTNode try_stmt_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: &'try'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&'try')
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'try')
                // TODO call is not created &'try' -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: try_stmt
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(try_stmt)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(try_stmt) - should work
                // name = try_stmt
                // TODO replacing stmt_ty --> SSTNode
                // REMOVE result call (try_stmt_var = try_stmt_rule()) != null  // try_stmt
                (try_stmt_var = try_stmt_rule()) != null  // try_stmt
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("compound_stmt[" + pos + ", " + mark() +" ](level: " + level + ") &'try' try_stmt succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['try_stmt_var']
                result = try_stmt_var;
                return (SSTNode)cache.putResult(pos, COMPOUND_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: &'while' while_stmt
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'while')
                // generated call: None
            // collecting vars: None None
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(while_stmt) - should work
            // name = while_stmt
            // TODO replacing stmt_ty --> SSTNode
                // generated call: (while_stmt_var = while_stmt_rule()) != null  // while_stmt
            // collecting vars: SSTNode while_stmt_var
            //    vars: {None: None, 'while_stmt_var': 'SSTNode'}
            SSTNode while_stmt_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: &'while'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&'while')
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'while')
                // TODO call is not created &'while' -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: while_stmt
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(while_stmt)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(while_stmt) - should work
                // name = while_stmt
                // TODO replacing stmt_ty --> SSTNode
                // REMOVE result call (while_stmt_var = while_stmt_rule()) != null  // while_stmt
                (while_stmt_var = while_stmt_rule()) != null  // while_stmt
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("compound_stmt[" + pos + ", " + mark() +" ](level: " + level + ") &'while' while_stmt succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['while_stmt_var']
                result = while_stmt_var;
                return (SSTNode)cache.putResult(pos, COMPOUND_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: match_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(match_stmt) - should work
            // name = match_stmt
            // TODO replacing stmt_ty --> SSTNode
                // generated call: (match_stmt_var = match_stmt_rule()) != null  // match_stmt
            // collecting vars: SSTNode match_stmt_var
            //    vars: {'match_stmt_var': 'SSTNode'}
            SSTNode match_stmt_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: match_stmt
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(match_stmt)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(match_stmt) - should work
                // name = match_stmt
                // TODO replacing stmt_ty --> SSTNode
                // REMOVE result call (match_stmt_var = match_stmt_rule()) != null  // match_stmt
                (match_stmt_var = match_stmt_rule()) != null  // match_stmt
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("compound_stmt[" + pos + ", " + mark() +" ](level: " + level + ") match_stmt succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['match_stmt_var']
                result = match_stmt_var;
                return (SSTNode)cache.putResult(pos, COMPOUND_STMT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, COMPOUND_STMT_ID, null);
    }

    // assignment:
    //     | NAME ':' expression ['=' annotated_rhs]
    //     | ('(' single_target ')' | single_subscript_attribute_target) ':' expression ['=' annotated_rhs]
    //     | ((star_targets '='))+ (yield_expr | star_expressions) !'=' TYPE_COMMENT?
    //     | single_target augassign ~ (yield_expr | star_expressions)
    //     | invalid_assignment
    public SSTNode assignment_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: assignment, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, ASSIGNMENT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, ASSIGNMENT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: factory . createAssignment ( new SSTNode [ ] {factory . createVariable ( getText ( a ) , a . startOffset , a . endOffset )} , b , startToken . startOffset , endToken . endOffset ) ; // CHECK_VERSION ( // stmt_ty , // 6 , // "Variable annotation syntax is" , // _PyAST_AnnAssign ( CHECK ( expr_ty , _PyPegen_set_expr_context ( p , a , Store ) ) , b , c , 1 , EXTRA ) // )
        {
            // visiting Alt: NAME ':' expression ['=' annotated_rhs]
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode b
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['=' annotated_rhs])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('=' annotated_rhs)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_17_var = _tmp_17_rule()) != null  // '=' annotated_rhs
                // generated call: ((_opt_var = _tmp_17_rule()) != null || _opt_var == null)  // ['=' annotated_rhs]
            // collecting vars: None c
            //    vars: {'a': 'Token', '_literal': 'Token', 'b': 'SSTNode', 'c': None}
            Token _literal;
            Token a;
            SSTNode b;
            Object c;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (a = expect(Token.Kind.NAME)) != null  // NAME
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (b = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ['=' annotated_rhs]
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(['=' annotated_rhs])
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['=' annotated_rhs])
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('=' annotated_rhs)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_17_var = _tmp_17_rule()) != null  // '=' annotated_rhs
                // REMOVE result call ((_opt_var = _tmp_17_rule()) != null || _opt_var == null)  // ['=' annotated_rhs]
                ((c = _tmp_17_rule()) != null || c == null)  // ['=' annotated_rhs]
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("assignment[" + pos + ", " + mark() +" ](level: " + level + ") NAME ':' expression ['=' annotated_rhs] succeeded!");
                }
                // alt action: factory . createAssignment ( new SSTNode [ ] {factory . createVariable ( getText ( a ) , a . startOffset , a . endOffset )} , b , startToken . startOffset , endToken . endOffset ) ; // CHECK_VERSION ( // stmt_ty , // 6 , // "Variable annotation syntax is" , // _PyAST_AnnAssign ( CHECK ( expr_ty , _PyPegen_set_expr_context ( p , a , Store ) ) , b , c , 1 , EXTRA ) // )
                Token endToken = getToken(mark());
                // node.action: factory . createAssignment ( new SSTNode [ ] {factory . createVariable ( getText ( a ) , a . startOffset , a . endOffset )} , b , startToken . startOffset , endToken . endOffset ) ; // CHECK_VERSION ( // stmt_ty , // 6 , // "Variable annotation syntax is" , // _PyAST_AnnAssign ( CHECK ( expr_ty , _PyPegen_set_expr_context ( p , a , Store ) ) , b , c , 1 , EXTRA ) // )
                result = factory.createAssignment(new SSTNode[]{factory.createVariable(getText(a),a.startOffset,a.endOffset)},b,startToken.startOffset,endToken.endOffset);//CHECK_VERSION(//stmt_ty,//6,//"Variableannotationsyntaxis",//_PyAST_AnnAssign(CHECK(expr_ty,_PyPegen_set_expr_context(p,a,Store)),b,c,1,EXTRA)//);
                return (SSTNode)cache.putResult(pos, ASSIGNMENT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: CHECK_VERSION ( stmt_ty , 6 , "Variable annotations syntax is" , _PyAST_AnnAssign ( a , b , c , 0 , EXTRA ) )
        {
            // visiting Alt: ('(' single_target ')' | single_subscript_attribute_target) ':' expression ['=' annotated_rhs]
            // TODO visiting JavaCallMakerVisitor.visit_Group(('(' single_target ')' | single_subscript_attribute_target))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('(' single_target ')' | single_subscript_attribute_target)
                // generated call: (_tmp_18_var = _tmp_18_rule()) != null  // '(' single_target ')' | single_subscript_attribute_target
            // collecting vars: None a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode b
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['=' annotated_rhs])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('=' annotated_rhs)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_19_var = _tmp_19_rule()) != null  // '=' annotated_rhs
                // generated call: ((_opt_var = _tmp_19_rule()) != null || _opt_var == null)  // ['=' annotated_rhs]
            // collecting vars: None c
            //    vars: {'a': None, '_literal': 'Token', 'b': 'SSTNode', 'c': None}
            Token _literal;
            Object a;
            SSTNode b;
            Object c;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ('(' single_target ')' | single_subscript_attribute_target)
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(('(' single_target ')' | single_subscript_attribute_target))
                // TODO visiting JavaCallMakerVisitor.visit_Group(('(' single_target ')' | single_subscript_attribute_target))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('(' single_target ')' | single_subscript_attribute_target)
                // REMOVE result call (_tmp_18_var = _tmp_18_rule()) != null  // '(' single_target ')' | single_subscript_attribute_target
                (a = _tmp_18_rule()) != null  // '(' single_target ')' | single_subscript_attribute_target
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (b = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ['=' annotated_rhs]
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(['=' annotated_rhs])
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['=' annotated_rhs])
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('=' annotated_rhs)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_19_var = _tmp_19_rule()) != null  // '=' annotated_rhs
                // REMOVE result call ((_opt_var = _tmp_19_rule()) != null || _opt_var == null)  // ['=' annotated_rhs]
                ((c = _tmp_19_rule()) != null || c == null)  // ['=' annotated_rhs]
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("assignment[" + pos + ", " + mark() +" ](level: " + level + ") ('(' single_target ')' | single_subscript_attribute_target) ':' expression ['=' annotated_rhs] succeeded!");
                }
                // alt action: CHECK_VERSION ( stmt_ty , 6 , "Variable annotations syntax is" , _PyAST_AnnAssign ( a , b , c , 0 , EXTRA ) )
                Token endToken = getToken(mark());
                // node.action: CHECK_VERSION ( stmt_ty , 6 , "Variable annotations syntax is" , _PyAST_AnnAssign ( a , b , c , 0 , EXTRA ) )
                return (SSTNode)cache.putResult(pos, ASSIGNMENT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Assign ( a , b , NEW_TYPE_COMMENT ( p , tc ) , EXTRA )
        {
            // visiting Alt: ((star_targets '='))+ (yield_expr | star_expressions) !'=' TYPE_COMMENT?
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(((star_targets '='))+)
                // generated call: (_loop1_20_var = _loop1_20_rule()) != null  // ((star_targets '='))+
            // collecting vars: asdl_expr_seq* a
            // TODO visiting JavaCallMakerVisitor.visit_Group((yield_expr | star_expressions))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(yield_expr | star_expressions)
                // generated call: (_tmp_21_var = _tmp_21_rule()) != null  // yield_expr | star_expressions
            // collecting vars: None b
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!'=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
            // lookahead_call_helper call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            //    call.nodetype: GENERIC_TOKEN
                // generated call: lookahead(false, Token.Kind.EQUAL)  // token='='
            // collecting vars: boolean None
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(TYPE_COMMENT)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_22_var = _tmp_22_rule()) != null  // TYPE_COMMENT
                // generated call: ((_opt_var = _tmp_22_rule()) != null || _opt_var == null)  // TYPE_COMMENT?
            // collecting vars: None tc
            //    vars: {'a': 'asdl_expr_seq*', 'b': None, None: 'boolean', 'tc': None}
            // TODO replacing asdl_expr_seq* --> SSTNode[]
            SSTNode[] a;
            Object b;
            Object tc;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ((star_targets '='))+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(((star_targets '='))+)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat1(((star_targets '='))+)
                // REMOVE result call (_loop1_20_var = _loop1_20_rule()) != null  // ((star_targets '='))+
                (a = (SSTNode[])_loop1_20_rule()) != null  // ((star_targets '='))+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: (yield_expr | star_expressions)
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((yield_expr | star_expressions))
                // TODO visiting JavaCallMakerVisitor.visit_Group((yield_expr | star_expressions))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(yield_expr | star_expressions)
                // REMOVE result call (_tmp_21_var = _tmp_21_rule()) != null  // yield_expr | star_expressions
                (b = _tmp_21_rule()) != null  // yield_expr | star_expressions
                &&
                // TODO visiting JavaParserGeneratorNamedItem: !'='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!'=')
                // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!'=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // lookahead_call_helper call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
                //    call.nodetype: GENERIC_TOKEN
                // REMOVE result call lookahead(false, Token.Kind.EQUAL)  // token='='
                lookahead(false, Token.Kind.EQUAL)  // token='='
                &&
                // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(TYPE_COMMENT)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_22_var = _tmp_22_rule()) != null  // TYPE_COMMENT
                // REMOVE result call ((_opt_var = _tmp_22_rule()) != null || _opt_var == null)  // TYPE_COMMENT?
                ((tc = _tmp_22_rule()) != null || tc == null)  // TYPE_COMMENT?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("assignment[" + pos + ", " + mark() +" ](level: " + level + ") ((star_targets '='))+ (yield_expr | star_expressions) !'=' TYPE_COMMENT? succeeded!");
                }
                // alt action: _PyAST_Assign ( a , b , NEW_TYPE_COMMENT ( p , tc ) , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Assign ( a , b , NEW_TYPE_COMMENT ( p , tc ) , EXTRA )
                return (SSTNode)cache.putResult(pos, ASSIGNMENT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_AugAssign ( a , b -> kind , c , EXTRA )
        {
            // visiting Alt: single_target augassign ~ (yield_expr | star_expressions)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(single_target) - should work
            // name = single_target
                // generated call: (single_target_var = single_target_rule()) != null  // single_target
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(augassign) - should work
            // name = augassign
            // TODO replacing AugOperator[] --> SSTNode[]
                // generated call: (augassign_var = augassign_rule()) != null  // augassign
            // collecting vars: SSTNode[] b
            // TODO visiting JavaCallMakerVisitor.visit_Cut(~)
                // generated call: None
            // collecting vars: None None
            // TODO visiting JavaCallMakerVisitor.visit_Group((yield_expr | star_expressions))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(yield_expr | star_expressions)
                // generated call: (_tmp_23_var = _tmp_23_rule()) != null  // yield_expr | star_expressions
            // collecting vars: None c
            //    vars: {'a': 'SSTNode', 'b': 'SSTNode[]', None: None, 'c': None}
            SSTNode a;
            SSTNode[] b;
            Object c;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: single_target
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(single_target)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(single_target) - should work
                // name = single_target
                // REMOVE result call (single_target_var = single_target_rule()) != null  // single_target
                (a = single_target_rule()) != null  // single_target
                &&
                // TODO visiting JavaParserGeneratorNamedItem: augassign
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(augassign)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(augassign) - should work
                // name = augassign
                // TODO replacing AugOperator[] --> SSTNode[]
                // REMOVE result call (augassign_var = augassign_rule()) != null  // augassign
                (b = augassign_rule()) != null  // augassign
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ~
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(~)
                // TODO visiting JavaCallMakerVisitor.visit_Cut(~)
                // TODO call is not created ~ -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: (yield_expr | star_expressions)
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((yield_expr | star_expressions))
                // TODO visiting JavaCallMakerVisitor.visit_Group((yield_expr | star_expressions))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(yield_expr | star_expressions)
                // REMOVE result call (_tmp_23_var = _tmp_23_rule()) != null  // yield_expr | star_expressions
                (c = _tmp_23_rule()) != null  // yield_expr | star_expressions
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("assignment[" + pos + ", " + mark() +" ](level: " + level + ") single_target augassign ~ (yield_expr | star_expressions) succeeded!");
                }
                // alt action: _PyAST_AugAssign ( a , b -> kind , c , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_AugAssign ( a , b -> kind , c , EXTRA )
                return (SSTNode)cache.putResult(pos, ASSIGNMENT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: invalid_assignment
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_assignment) - should work
            // name = invalid_assignment
                // generated call: (invalid_assignment_var = invalid_assignment_rule()) != null  // invalid_assignment
            // collecting vars: None invalid_assignment_var
            //    vars: {'invalid_assignment_var': None}
            Object invalid_assignment_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: invalid_assignment
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_assignment)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_assignment) - should work
                // name = invalid_assignment
                // REMOVE result call (invalid_assignment_var = invalid_assignment_rule()) != null  // invalid_assignment
                (invalid_assignment_var = invalid_assignment_rule()) != null  // invalid_assignment
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("assignment[" + pos + ", " + mark() +" ](level: " + level + ") invalid_assignment succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['invalid_assignment_var']
                result = invalid_assignment_var;
                return (SSTNode)cache.putResult(pos, ASSIGNMENT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, ASSIGNMENT_ID, null);
    }

    // augassign:
    //     | '+='
    //     | '-='
    //     | '*='
    //     | '@='
    //     | '/='
    //     | '%='
    //     | '&='
    //     | '|='
    //     | '^='
    //     | '<<='
    //     | '>>='
    //     | '**='
    //     | '//='
    // TODO replacing AugOperator* --> SSTNode[]
    public SSTNode[] augassign_rule() {
    // isLoop: False, isGather: False, type: AugOperator*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: augassign, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, AUGASSIGN_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, AUGASSIGN_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_augoperator ( p , Add )
        {
            // visiting Alt: '+='
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('+=')
                // generated call: (_literal = expect(Token.Kind.PLUSEQUAL)) != null  // token='+='
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '+='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('+=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('+=')
                // REMOVE result call (_literal = expect(Token.Kind.PLUSEQUAL)) != null  // token='+='
                (_literal = expect(Token.Kind.PLUSEQUAL)) != null  // token='+='
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("augassign[" + pos + ", " + mark() +" ](level: " + level + ") '+=' succeeded!");
                }
                // alt action: _PyPegen_augoperator ( p , Add )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_augoperator ( p , Add )
                return (SSTNode[])cache.putResult(pos, AUGASSIGN_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_augoperator ( p , Sub )
        {
            // visiting Alt: '-='
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('-=')
                // generated call: (_literal = expect(Token.Kind.MINEQUAL)) != null  // token='-='
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '-='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('-=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('-=')
                // REMOVE result call (_literal = expect(Token.Kind.MINEQUAL)) != null  // token='-='
                (_literal = expect(Token.Kind.MINEQUAL)) != null  // token='-='
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("augassign[" + pos + ", " + mark() +" ](level: " + level + ") '-=' succeeded!");
                }
                // alt action: _PyPegen_augoperator ( p , Sub )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_augoperator ( p , Sub )
                return (SSTNode[])cache.putResult(pos, AUGASSIGN_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_augoperator ( p , Mult )
        {
            // visiting Alt: '*='
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*=')
                // generated call: (_literal = expect(Token.Kind.STAREQUAL)) != null  // token='*='
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '*='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*=')
                // REMOVE result call (_literal = expect(Token.Kind.STAREQUAL)) != null  // token='*='
                (_literal = expect(Token.Kind.STAREQUAL)) != null  // token='*='
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("augassign[" + pos + ", " + mark() +" ](level: " + level + ") '*=' succeeded!");
                }
                // alt action: _PyPegen_augoperator ( p , Mult )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_augoperator ( p , Mult )
                return (SSTNode[])cache.putResult(pos, AUGASSIGN_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: CHECK_VERSION ( AugOperator * , 5 , "The '@' operator is" , _PyPegen_augoperator ( p , MatMult ) )
        {
            // visiting Alt: '@='
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('@=')
                // generated call: (_literal = expect(Token.Kind.ATEQUAL)) != null  // token='@='
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '@='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('@=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('@=')
                // REMOVE result call (_literal = expect(Token.Kind.ATEQUAL)) != null  // token='@='
                (_literal = expect(Token.Kind.ATEQUAL)) != null  // token='@='
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("augassign[" + pos + ", " + mark() +" ](level: " + level + ") '@=' succeeded!");
                }
                // alt action: CHECK_VERSION ( AugOperator * , 5 , "The '@' operator is" , _PyPegen_augoperator ( p , MatMult ) )
                Token endToken = getToken(mark());
                // node.action: CHECK_VERSION ( AugOperator * , 5 , "The '@' operator is" , _PyPegen_augoperator ( p , MatMult ) )
                return (SSTNode[])cache.putResult(pos, AUGASSIGN_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_augoperator ( p , Div )
        {
            // visiting Alt: '/='
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/=')
                // generated call: (_literal = expect(Token.Kind.SLASHEQUAL)) != null  // token='/='
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '/='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('/=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/=')
                // REMOVE result call (_literal = expect(Token.Kind.SLASHEQUAL)) != null  // token='/='
                (_literal = expect(Token.Kind.SLASHEQUAL)) != null  // token='/='
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("augassign[" + pos + ", " + mark() +" ](level: " + level + ") '/=' succeeded!");
                }
                // alt action: _PyPegen_augoperator ( p , Div )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_augoperator ( p , Div )
                return (SSTNode[])cache.putResult(pos, AUGASSIGN_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_augoperator ( p , Mod )
        {
            // visiting Alt: '%='
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('%=')
                // generated call: (_literal = expect(Token.Kind.PERCENTEQUAL)) != null  // token='%='
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '%='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('%=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('%=')
                // REMOVE result call (_literal = expect(Token.Kind.PERCENTEQUAL)) != null  // token='%='
                (_literal = expect(Token.Kind.PERCENTEQUAL)) != null  // token='%='
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("augassign[" + pos + ", " + mark() +" ](level: " + level + ") '%=' succeeded!");
                }
                // alt action: _PyPegen_augoperator ( p , Mod )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_augoperator ( p , Mod )
                return (SSTNode[])cache.putResult(pos, AUGASSIGN_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_augoperator ( p , BitAnd )
        {
            // visiting Alt: '&='
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('&=')
                // generated call: (_literal = expect(Token.Kind.AMPEREQUAL)) != null  // token='&='
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '&='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('&=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('&=')
                // REMOVE result call (_literal = expect(Token.Kind.AMPEREQUAL)) != null  // token='&='
                (_literal = expect(Token.Kind.AMPEREQUAL)) != null  // token='&='
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("augassign[" + pos + ", " + mark() +" ](level: " + level + ") '&=' succeeded!");
                }
                // alt action: _PyPegen_augoperator ( p , BitAnd )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_augoperator ( p , BitAnd )
                return (SSTNode[])cache.putResult(pos, AUGASSIGN_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_augoperator ( p , BitOr )
        {
            // visiting Alt: '|='
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('|=')
                // generated call: (_literal = expect(Token.Kind.VBAREQUAL)) != null  // token='|='
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '|='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('|=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('|=')
                // REMOVE result call (_literal = expect(Token.Kind.VBAREQUAL)) != null  // token='|='
                (_literal = expect(Token.Kind.VBAREQUAL)) != null  // token='|='
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("augassign[" + pos + ", " + mark() +" ](level: " + level + ") '|=' succeeded!");
                }
                // alt action: _PyPegen_augoperator ( p , BitOr )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_augoperator ( p , BitOr )
                return (SSTNode[])cache.putResult(pos, AUGASSIGN_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_augoperator ( p , BitXor )
        {
            // visiting Alt: '^='
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('^=')
                // generated call: (_literal = expect(Token.Kind.CIRCUMFLEXEQUAL)) != null  // token='^='
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '^='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('^=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('^=')
                // REMOVE result call (_literal = expect(Token.Kind.CIRCUMFLEXEQUAL)) != null  // token='^='
                (_literal = expect(Token.Kind.CIRCUMFLEXEQUAL)) != null  // token='^='
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("augassign[" + pos + ", " + mark() +" ](level: " + level + ") '^=' succeeded!");
                }
                // alt action: _PyPegen_augoperator ( p , BitXor )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_augoperator ( p , BitXor )
                return (SSTNode[])cache.putResult(pos, AUGASSIGN_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_augoperator ( p , LShift )
        {
            // visiting Alt: '<<='
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('<<=')
                // generated call: (_literal = expect(Token.Kind.LEFTSHIFTEQUAL)) != null  // token='<<='
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '<<='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('<<=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('<<=')
                // REMOVE result call (_literal = expect(Token.Kind.LEFTSHIFTEQUAL)) != null  // token='<<='
                (_literal = expect(Token.Kind.LEFTSHIFTEQUAL)) != null  // token='<<='
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("augassign[" + pos + ", " + mark() +" ](level: " + level + ") '<<=' succeeded!");
                }
                // alt action: _PyPegen_augoperator ( p , LShift )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_augoperator ( p , LShift )
                return (SSTNode[])cache.putResult(pos, AUGASSIGN_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_augoperator ( p , RShift )
        {
            // visiting Alt: '>>='
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('>>=')
                // generated call: (_literal = expect(Token.Kind.RIGHTSHIFTEQUAL)) != null  // token='>>='
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '>>='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('>>=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('>>=')
                // REMOVE result call (_literal = expect(Token.Kind.RIGHTSHIFTEQUAL)) != null  // token='>>='
                (_literal = expect(Token.Kind.RIGHTSHIFTEQUAL)) != null  // token='>>='
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("augassign[" + pos + ", " + mark() +" ](level: " + level + ") '>>=' succeeded!");
                }
                // alt action: _PyPegen_augoperator ( p , RShift )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_augoperator ( p , RShift )
                return (SSTNode[])cache.putResult(pos, AUGASSIGN_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_augoperator ( p , Pow )
        {
            // visiting Alt: '**='
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**=')
                // generated call: (_literal = expect(Token.Kind.DOUBLESTAREQUAL)) != null  // token='**='
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '**='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('**=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**=')
                // REMOVE result call (_literal = expect(Token.Kind.DOUBLESTAREQUAL)) != null  // token='**='
                (_literal = expect(Token.Kind.DOUBLESTAREQUAL)) != null  // token='**='
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("augassign[" + pos + ", " + mark() +" ](level: " + level + ") '**=' succeeded!");
                }
                // alt action: _PyPegen_augoperator ( p , Pow )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_augoperator ( p , Pow )
                return (SSTNode[])cache.putResult(pos, AUGASSIGN_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_augoperator ( p , FloorDiv )
        {
            // visiting Alt: '//='
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('//=')
                // generated call: (_literal = expect(Token.Kind.DOUBLESLASHEQUAL)) != null  // token='//='
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '//='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('//=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('//=')
                // REMOVE result call (_literal = expect(Token.Kind.DOUBLESLASHEQUAL)) != null  // token='//='
                (_literal = expect(Token.Kind.DOUBLESLASHEQUAL)) != null  // token='//='
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("augassign[" + pos + ", " + mark() +" ](level: " + level + ") '//=' succeeded!");
                }
                // alt action: _PyPegen_augoperator ( p , FloorDiv )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_augoperator ( p , FloorDiv )
                return (SSTNode[])cache.putResult(pos, AUGASSIGN_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, AUGASSIGN_ID, null);
    }

    // global_stmt: 'global' ','.NAME+
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode global_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: global_stmt, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, GLOBAL_STMT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, GLOBAL_STMT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Global ( CHECK ( asdl_identifier_seq * , _PyPegen_map_names_to_ids ( p , a ) ) , EXTRA )
        {
            // visiting Alt: 'global' ','.NAME+
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('global')
                // generated call: (_keyword = expect(KEYWORD_GLOBAL)) != null  // token='global'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.NAME+)
                // generated call: (_gather_24_var = _gather_24_rule()) != null  // ','.NAME+
            // collecting vars: asdl_expr_seq* a
            //    vars: {'_keyword': 'Token', 'a': 'asdl_expr_seq*'}
            Token _keyword;
            // TODO replacing asdl_expr_seq* --> SSTNode[]
            SSTNode[] a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'global'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('global')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('global')
                // REMOVE result call (_keyword = expect(KEYWORD_GLOBAL)) != null  // token='global'
                (_keyword = expect(KEYWORD_GLOBAL)) != null  // token='global'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','.NAME+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.NAME+)
                // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.NAME+)
                // REMOVE result call (_gather_24_var = _gather_24_rule()) != null  // ','.NAME+
                (a = (SSTNode[])_gather_24_rule()) != null  // ','.NAME+
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("global_stmt[" + pos + ", " + mark() +" ](level: " + level + ") 'global' ','.NAME+ succeeded!");
                }
                // alt action: _PyAST_Global ( CHECK ( asdl_identifier_seq * , _PyPegen_map_names_to_ids ( p , a ) ) , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Global ( CHECK ( asdl_identifier_seq * , _PyPegen_map_names_to_ids ( p , a ) ) , EXTRA )
                return (SSTNode)cache.putResult(pos, GLOBAL_STMT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, GLOBAL_STMT_ID, null);
    }

    // nonlocal_stmt: 'nonlocal' ','.NAME+
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode nonlocal_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: nonlocal_stmt, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, NONLOCAL_STMT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, NONLOCAL_STMT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Nonlocal ( CHECK ( asdl_identifier_seq * , _PyPegen_map_names_to_ids ( p , a ) ) , EXTRA )
        {
            // visiting Alt: 'nonlocal' ','.NAME+
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('nonlocal')
                // generated call: (_keyword = expect(KEYWORD_NONLOCAL)) != null  // token='nonlocal'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.NAME+)
                // generated call: (_gather_26_var = _gather_26_rule()) != null  // ','.NAME+
            // collecting vars: asdl_expr_seq* a
            //    vars: {'_keyword': 'Token', 'a': 'asdl_expr_seq*'}
            Token _keyword;
            // TODO replacing asdl_expr_seq* --> SSTNode[]
            SSTNode[] a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'nonlocal'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('nonlocal')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('nonlocal')
                // REMOVE result call (_keyword = expect(KEYWORD_NONLOCAL)) != null  // token='nonlocal'
                (_keyword = expect(KEYWORD_NONLOCAL)) != null  // token='nonlocal'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','.NAME+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.NAME+)
                // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.NAME+)
                // REMOVE result call (_gather_26_var = _gather_26_rule()) != null  // ','.NAME+
                (a = (SSTNode[])_gather_26_rule()) != null  // ','.NAME+
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("nonlocal_stmt[" + pos + ", " + mark() +" ](level: " + level + ") 'nonlocal' ','.NAME+ succeeded!");
                }
                // alt action: _PyAST_Nonlocal ( CHECK ( asdl_identifier_seq * , _PyPegen_map_names_to_ids ( p , a ) ) , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Nonlocal ( CHECK ( asdl_identifier_seq * , _PyPegen_map_names_to_ids ( p , a ) ) , EXTRA )
                return (SSTNode)cache.putResult(pos, NONLOCAL_STMT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, NONLOCAL_STMT_ID, null);
    }

    // yield_stmt: yield_expr
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode yield_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: yield_stmt, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, YIELD_STMT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, YIELD_STMT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Expr ( y , EXTRA )
        {
            // visiting Alt: yield_expr
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
            // name = yield_expr
                // generated call: (yield_expr_var = yield_expr_rule()) != null  // yield_expr
            // collecting vars: SSTNode y
            //    vars: {'y': 'SSTNode'}
            SSTNode y;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: yield_expr
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(yield_expr)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
                // name = yield_expr
                // REMOVE result call (yield_expr_var = yield_expr_rule()) != null  // yield_expr
                (y = yield_expr_rule()) != null  // yield_expr
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("yield_stmt[" + pos + ", " + mark() +" ](level: " + level + ") yield_expr succeeded!");
                }
                // alt action: _PyAST_Expr ( y , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Expr ( y , EXTRA )
                return (SSTNode)cache.putResult(pos, YIELD_STMT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, YIELD_STMT_ID, null);
    }

    // assert_stmt: 'assert' expression [',' expression]
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode assert_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: assert_stmt, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, ASSERT_STMT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, ASSERT_STMT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Assert ( a , b , EXTRA )
        {
            // visiting Alt: 'assert' expression [',' expression]
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('assert')
                // generated call: (_keyword = expect(KEYWORD_ASSERT)) != null  // token='assert'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt([',' expression])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' expression)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_28_var = _tmp_28_rule()) != null  // ',' expression
                // generated call: ((_opt_var = _tmp_28_rule()) != null || _opt_var == null)  // [',' expression]
            // collecting vars: None b
            //    vars: {'_keyword': 'Token', 'a': 'SSTNode', 'b': None}
            Token _keyword;
            SSTNode a;
            Object b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'assert'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('assert')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('assert')
                // REMOVE result call (_keyword = expect(KEYWORD_ASSERT)) != null  // token='assert'
                (_keyword = expect(KEYWORD_ASSERT)) != null  // token='assert'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (a = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: [',' expression]
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem([',' expression])
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt([',' expression])
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' expression)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_28_var = _tmp_28_rule()) != null  // ',' expression
                // REMOVE result call ((_opt_var = _tmp_28_rule()) != null || _opt_var == null)  // [',' expression]
                ((b = _tmp_28_rule()) != null || b == null)  // [',' expression]
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("assert_stmt[" + pos + ", " + mark() +" ](level: " + level + ") 'assert' expression [',' expression] succeeded!");
                }
                // alt action: _PyAST_Assert ( a , b , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Assert ( a , b , EXTRA )
                return (SSTNode)cache.putResult(pos, ASSERT_STMT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, ASSERT_STMT_ID, null);
    }

    // del_stmt: 'del' del_targets &(';' | NEWLINE) | invalid_del_stmt
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode del_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: del_stmt, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, DEL_STMT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, DEL_STMT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Delete ( a , EXTRA )
        {
            // visiting Alt: 'del' del_targets &(';' | NEWLINE)
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('del')
                // generated call: (_keyword = expect(KEYWORD_DEL)) != null  // token='del'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_targets) - should work
            // name = del_targets
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // generated call: (del_targets_var = del_targets_rule()) != null  // del_targets
            // collecting vars: SSTNode[] a
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&(';' | NEWLINE))
                // generated call: None
            // collecting vars: None None
            //    vars: {'_keyword': 'Token', 'a': 'SSTNode[]', None: None}
            Token _keyword;
            SSTNode[] a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'del'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('del')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('del')
                // REMOVE result call (_keyword = expect(KEYWORD_DEL)) != null  // token='del'
                (_keyword = expect(KEYWORD_DEL)) != null  // token='del'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: del_targets
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(del_targets)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_targets) - should work
                // name = del_targets
                // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // REMOVE result call (del_targets_var = del_targets_rule()) != null  // del_targets
                (a = del_targets_rule()) != null  // del_targets
                &&
                // TODO visiting JavaParserGeneratorNamedItem: &(';' | NEWLINE)
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&(';' | NEWLINE))
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&(';' | NEWLINE))
                // TODO call is not created &(';' | NEWLINE) -> creates artificial
                true
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("del_stmt[" + pos + ", " + mark() +" ](level: " + level + ") 'del' del_targets &(';' | NEWLINE) succeeded!");
                }
                // alt action: _PyAST_Delete ( a , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Delete ( a , EXTRA )
                return (SSTNode)cache.putResult(pos, DEL_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: invalid_del_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_del_stmt) - should work
            // name = invalid_del_stmt
                // generated call: (invalid_del_stmt_var = invalid_del_stmt_rule()) != null  // invalid_del_stmt
            // collecting vars: None invalid_del_stmt_var
            //    vars: {'invalid_del_stmt_var': None}
            Object invalid_del_stmt_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: invalid_del_stmt
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_del_stmt)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_del_stmt) - should work
                // name = invalid_del_stmt
                // REMOVE result call (invalid_del_stmt_var = invalid_del_stmt_rule()) != null  // invalid_del_stmt
                (invalid_del_stmt_var = invalid_del_stmt_rule()) != null  // invalid_del_stmt
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("del_stmt[" + pos + ", " + mark() +" ](level: " + level + ") invalid_del_stmt succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['invalid_del_stmt_var']
                result = invalid_del_stmt_var;
                return (SSTNode)cache.putResult(pos, DEL_STMT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, DEL_STMT_ID, null);
    }

    // import_stmt: import_name | import_from
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode import_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: import_stmt, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, IMPORT_STMT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, IMPORT_STMT_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: import_name
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_name) - should work
            // name = import_name
            // TODO replacing stmt_ty --> SSTNode
                // generated call: (import_name_var = import_name_rule()) != null  // import_name
            // collecting vars: SSTNode import_name_var
            //    vars: {'import_name_var': 'SSTNode'}
            SSTNode import_name_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: import_name
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(import_name)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_name) - should work
                // name = import_name
                // TODO replacing stmt_ty --> SSTNode
                // REMOVE result call (import_name_var = import_name_rule()) != null  // import_name
                (import_name_var = import_name_rule()) != null  // import_name
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("import_stmt[" + pos + ", " + mark() +" ](level: " + level + ") import_name succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['import_name_var']
                result = import_name_var;
                return (SSTNode)cache.putResult(pos, IMPORT_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: import_from
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from) - should work
            // name = import_from
            // TODO replacing stmt_ty --> SSTNode
                // generated call: (import_from_var = import_from_rule()) != null  // import_from
            // collecting vars: SSTNode import_from_var
            //    vars: {'import_from_var': 'SSTNode'}
            SSTNode import_from_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: import_from
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(import_from)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from) - should work
                // name = import_from
                // TODO replacing stmt_ty --> SSTNode
                // REMOVE result call (import_from_var = import_from_rule()) != null  // import_from
                (import_from_var = import_from_rule()) != null  // import_from
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("import_stmt[" + pos + ", " + mark() +" ](level: " + level + ") import_from succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['import_from_var']
                result = import_from_var;
                return (SSTNode)cache.putResult(pos, IMPORT_STMT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, IMPORT_STMT_ID, null);
    }

    // import_name: 'import' dotted_as_names
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode import_name_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: import_name, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, IMPORT_NAME_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, IMPORT_NAME_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Import ( a , EXTRA )
        {
            // visiting Alt: 'import' dotted_as_names
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('import')
                // generated call: (_keyword = expect(KEYWORD_IMPORT)) != null  // token='import'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_as_names) - should work
            // name = dotted_as_names
            // TODO replacing asdl_alias_seq[] --> SSTNode[]
                // generated call: (dotted_as_names_var = dotted_as_names_rule()) != null  // dotted_as_names
            // collecting vars: SSTNode[] a
            //    vars: {'_keyword': 'Token', 'a': 'SSTNode[]'}
            Token _keyword;
            SSTNode[] a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'import'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('import')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('import')
                // REMOVE result call (_keyword = expect(KEYWORD_IMPORT)) != null  // token='import'
                (_keyword = expect(KEYWORD_IMPORT)) != null  // token='import'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: dotted_as_names
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(dotted_as_names)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_as_names) - should work
                // name = dotted_as_names
                // TODO replacing asdl_alias_seq[] --> SSTNode[]
                // REMOVE result call (dotted_as_names_var = dotted_as_names_rule()) != null  // dotted_as_names
                (a = dotted_as_names_rule()) != null  // dotted_as_names
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("import_name[" + pos + ", " + mark() +" ](level: " + level + ") 'import' dotted_as_names succeeded!");
                }
                // alt action: _PyAST_Import ( a , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Import ( a , EXTRA )
                return (SSTNode)cache.putResult(pos, IMPORT_NAME_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, IMPORT_NAME_ID, null);
    }

    // import_from:
    //     | 'from' (('.' | '...'))* dotted_name 'import' import_from_targets
    //     | 'from' (('.' | '...'))+ 'import' import_from_targets
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode import_from_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: import_from, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, IMPORT_FROM_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, IMPORT_FROM_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_ImportFrom ( b -> v . Name . id , c , _PyPegen_seq_count_dots ( a ) , EXTRA )
        {
            // visiting Alt: 'from' (('.' | '...'))* dotted_name 'import' import_from_targets
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('from')
                // generated call: (_keyword = expect(KEYWORD_FROM)) != null  // token='from'
            // collecting vars: Token _keyword
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0((('.' | '...'))*)
                // generated call: (_loop0_29_var = _loop0_29_rule()) != null  // (('.' | '...'))*
            // collecting vars: SSTNode[] a
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_name) - should work
            // name = dotted_name
                // generated call: (dotted_name_var = dotted_name_rule()) != null  // dotted_name
            // collecting vars: SSTNode b
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('import')
                // generated call: (_keyword = expect(KEYWORD_IMPORT)) != null  // token='import'
            // collecting vars: Token _keyword_1
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_targets) - should work
            // name = import_from_targets
            // TODO replacing asdl_alias_seq[] --> SSTNode[]
                // generated call: (import_from_targets_var = import_from_targets_rule()) != null  // import_from_targets
            // collecting vars: SSTNode[] c
            //    vars: {'_keyword': 'Token', 'a': 'SSTNode[]', 'b': 'SSTNode', '_keyword_1': 'Token', 'c': 'SSTNode[]'}
            Token _keyword;
            Token _keyword_1;
            SSTNode[] a;
            SSTNode b;
            SSTNode[] c;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'from'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('from')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('from')
                // REMOVE result call (_keyword = expect(KEYWORD_FROM)) != null  // token='from'
                (_keyword = expect(KEYWORD_FROM)) != null  // token='from'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: (('.' | '...'))*
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((('.' | '...'))*)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat0((('.' | '...'))*)
                // REMOVE result call (_loop0_29_var = _loop0_29_rule()) != null  // (('.' | '...'))*
                (a = _loop0_29_rule()) != null  // (('.' | '...'))*
                &&
                // TODO visiting JavaParserGeneratorNamedItem: dotted_name
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(dotted_name)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_name) - should work
                // name = dotted_name
                // REMOVE result call (dotted_name_var = dotted_name_rule()) != null  // dotted_name
                (b = dotted_name_rule()) != null  // dotted_name
                &&
                // TODO visiting JavaParserGeneratorNamedItem: 'import'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('import')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('import')
                // REMOVE result call (_keyword = expect(KEYWORD_IMPORT)) != null  // token='import'
                (_keyword_1 = expect(KEYWORD_IMPORT)) != null  // token='import'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: import_from_targets
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(import_from_targets)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_targets) - should work
                // name = import_from_targets
                // TODO replacing asdl_alias_seq[] --> SSTNode[]
                // REMOVE result call (import_from_targets_var = import_from_targets_rule()) != null  // import_from_targets
                (c = import_from_targets_rule()) != null  // import_from_targets
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("import_from[" + pos + ", " + mark() +" ](level: " + level + ") 'from' (('.' | '...'))* dotted_name 'import' import_from_targets succeeded!");
                }
                // alt action: _PyAST_ImportFrom ( b -> v . Name . id , c , _PyPegen_seq_count_dots ( a ) , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_ImportFrom ( b -> v . Name . id , c , _PyPegen_seq_count_dots ( a ) , EXTRA )
                return (SSTNode)cache.putResult(pos, IMPORT_FROM_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_ImportFrom ( NULL , b , _PyPegen_seq_count_dots ( a ) , EXTRA )
        {
            // visiting Alt: 'from' (('.' | '...'))+ 'import' import_from_targets
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('from')
                // generated call: (_keyword = expect(KEYWORD_FROM)) != null  // token='from'
            // collecting vars: Token _keyword
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1((('.' | '...'))+)
                // generated call: (_loop1_30_var = _loop1_30_rule()) != null  // (('.' | '...'))+
            // collecting vars: SSTNode[] a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('import')
                // generated call: (_keyword = expect(KEYWORD_IMPORT)) != null  // token='import'
            // collecting vars: Token _keyword_1
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_targets) - should work
            // name = import_from_targets
            // TODO replacing asdl_alias_seq[] --> SSTNode[]
                // generated call: (import_from_targets_var = import_from_targets_rule()) != null  // import_from_targets
            // collecting vars: SSTNode[] b
            //    vars: {'_keyword': 'Token', 'a': 'SSTNode[]', '_keyword_1': 'Token', 'b': 'SSTNode[]'}
            Token _keyword;
            Token _keyword_1;
            SSTNode[] a;
            SSTNode[] b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'from'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('from')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('from')
                // REMOVE result call (_keyword = expect(KEYWORD_FROM)) != null  // token='from'
                (_keyword = expect(KEYWORD_FROM)) != null  // token='from'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: (('.' | '...'))+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((('.' | '...'))+)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat1((('.' | '...'))+)
                // REMOVE result call (_loop1_30_var = _loop1_30_rule()) != null  // (('.' | '...'))+
                (a = _loop1_30_rule()) != null  // (('.' | '...'))+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: 'import'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('import')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('import')
                // REMOVE result call (_keyword = expect(KEYWORD_IMPORT)) != null  // token='import'
                (_keyword_1 = expect(KEYWORD_IMPORT)) != null  // token='import'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: import_from_targets
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(import_from_targets)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_targets) - should work
                // name = import_from_targets
                // TODO replacing asdl_alias_seq[] --> SSTNode[]
                // REMOVE result call (import_from_targets_var = import_from_targets_rule()) != null  // import_from_targets
                (b = import_from_targets_rule()) != null  // import_from_targets
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("import_from[" + pos + ", " + mark() +" ](level: " + level + ") 'from' (('.' | '...'))+ 'import' import_from_targets succeeded!");
                }
                // alt action: _PyAST_ImportFrom ( NULL , b , _PyPegen_seq_count_dots ( a ) , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_ImportFrom ( NULL , b , _PyPegen_seq_count_dots ( a ) , EXTRA )
                return (SSTNode)cache.putResult(pos, IMPORT_FROM_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, IMPORT_FROM_ID, null);
    }

    // import_from_targets:
    //     | '(' import_from_as_names ','? ')'
    //     | import_from_as_names !','
    //     | '*'
    //     | invalid_import_from_targets
    // TODO replacing asdl_alias_seq* --> SSTNode[]
    public SSTNode[] import_from_targets_rule() {
    // isLoop: False, isGather: False, type: asdl_alias_seq*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: import_from_targets, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, IMPORT_FROM_TARGETS_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, IMPORT_FROM_TARGETS_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: a
        {
            // visiting Alt: '(' import_from_as_names ','? ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_as_names) - should work
            // name = import_from_as_names
            // TODO replacing asdl_alias_seq[] --> SSTNode[]
                // generated call: (import_from_as_names_var = import_from_as_names_rule()) != null  // import_from_as_names
            // collecting vars: SSTNode[] a
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_31_var = _tmp_31_rule()) != null  // ','
                // generated call: ((_opt_var = _tmp_31_rule()) != null || _opt_var == null)  // ','?
            // collecting vars: None _opt_var
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // collecting vars: Token _literal_1
            //    vars: {'_literal': 'Token', 'a': 'SSTNode[]', '_opt_var': None, '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            Object _opt_var;
            SSTNode[] a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                &&
                // TODO visiting JavaParserGeneratorNamedItem: import_from_as_names
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(import_from_as_names)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_as_names) - should work
                // name = import_from_as_names
                // TODO replacing asdl_alias_seq[] --> SSTNode[]
                // REMOVE result call (import_from_as_names_var = import_from_as_names_rule()) != null  // import_from_as_names
                (a = import_from_as_names_rule()) != null  // import_from_as_names
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_31_var = _tmp_31_rule()) != null  // ','
                // REMOVE result call ((_opt_var = _tmp_31_rule()) != null || _opt_var == null)  // ','?
                ((_opt_var = _tmp_31_rule()) != null || _opt_var == null)  // ','?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
                (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("import_from_targets[" + pos + ", " + mark() +" ](level: " + level + ") '(' import_from_as_names ','? ')' succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode[])cache.putResult(pos, IMPORT_FROM_TARGETS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: import_from_as_names !','
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_as_names) - should work
            // name = import_from_as_names
            // TODO replacing asdl_alias_seq[] --> SSTNode[]
                // generated call: (import_from_as_names_var = import_from_as_names_rule()) != null  // import_from_as_names
            // collecting vars: SSTNode[] import_from_as_names_var
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // lookahead_call_helper call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            //    call.nodetype: GENERIC_TOKEN
                // generated call: lookahead(false, Token.Kind.COMMA)  // token=','
            // collecting vars: boolean None
            //    vars: {'import_from_as_names_var': 'SSTNode[]', None: 'boolean'}
            SSTNode[] import_from_as_names_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: import_from_as_names
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(import_from_as_names)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_as_names) - should work
                // name = import_from_as_names
                // TODO replacing asdl_alias_seq[] --> SSTNode[]
                // REMOVE result call (import_from_as_names_var = import_from_as_names_rule()) != null  // import_from_as_names
                (import_from_as_names_var = import_from_as_names_rule()) != null  // import_from_as_names
                &&
                // TODO visiting JavaParserGeneratorNamedItem: !','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!',')
                // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // lookahead_call_helper call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                //    call.nodetype: GENERIC_TOKEN
                // REMOVE result call lookahead(false, Token.Kind.COMMA)  // token=','
                lookahead(false, Token.Kind.COMMA)  // token=','
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("import_from_targets[" + pos + ", " + mark() +" ](level: " + level + ") import_from_as_names !',' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['import_from_as_names_var']
                result = import_from_as_names_var;
                return (SSTNode[])cache.putResult(pos, IMPORT_FROM_TARGETS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: ( asdl_alias_seq * ) _PyPegen_singleton_seq ( p , CHECK ( alias_ty , _PyPegen_alias_for_star ( p , EXTRA ) ) )
        {
            // visiting Alt: '*'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '*'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("import_from_targets[" + pos + ", " + mark() +" ](level: " + level + ") '*' succeeded!");
                }
                // alt action: ( asdl_alias_seq * ) _PyPegen_singleton_seq ( p , CHECK ( alias_ty , _PyPegen_alias_for_star ( p , EXTRA ) ) )
                Token endToken = getToken(mark());
                // node.action: ( asdl_alias_seq * ) _PyPegen_singleton_seq ( p , CHECK ( alias_ty , _PyPegen_alias_for_star ( p , EXTRA ) ) )
                return (SSTNode[])cache.putResult(pos, IMPORT_FROM_TARGETS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: invalid_import_from_targets
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_import_from_targets) - should work
            // name = invalid_import_from_targets
                // generated call: (invalid_import_from_targets_var = invalid_import_from_targets_rule()) != null  // invalid_import_from_targets
            // collecting vars: None invalid_import_from_targets_var
            //    vars: {'invalid_import_from_targets_var': None}
            Object invalid_import_from_targets_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: invalid_import_from_targets
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_import_from_targets)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_import_from_targets) - should work
                // name = invalid_import_from_targets
                // REMOVE result call (invalid_import_from_targets_var = invalid_import_from_targets_rule()) != null  // invalid_import_from_targets
                (invalid_import_from_targets_var = invalid_import_from_targets_rule()) != null  // invalid_import_from_targets
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("import_from_targets[" + pos + ", " + mark() +" ](level: " + level + ") invalid_import_from_targets succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['invalid_import_from_targets_var']
                result = invalid_import_from_targets_var;
                return (SSTNode[])cache.putResult(pos, IMPORT_FROM_TARGETS_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, IMPORT_FROM_TARGETS_ID, null);
    }

    // import_from_as_names: ','.import_from_as_name+
    // TODO replacing asdl_alias_seq* --> SSTNode[]
    public SSTNode[] import_from_as_names_rule() {
    // isLoop: False, isGather: False, type: asdl_alias_seq*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: import_from_as_names, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, IMPORT_FROM_AS_NAMES_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, IMPORT_FROM_AS_NAMES_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: a
        {
            // visiting Alt: ','.import_from_as_name+
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.import_from_as_name+)
                // generated call: (_gather_32_var = _gather_32_rule()) != null  // ','.import_from_as_name+
            // collecting vars: asdl_alias_seq* a
            //    vars: {'a': 'asdl_alias_seq*'}
            // TODO replacing asdl_alias_seq* --> SSTNode[]
            SSTNode[] a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','.import_from_as_name+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.import_from_as_name+)
                // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.import_from_as_name+)
                // REMOVE result call (_gather_32_var = _gather_32_rule()) != null  // ','.import_from_as_name+
                (a = (SSTNode[])_gather_32_rule()) != null  // ','.import_from_as_name+
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("import_from_as_names[" + pos + ", " + mark() +" ](level: " + level + ") ','.import_from_as_name+ succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode[])cache.putResult(pos, IMPORT_FROM_AS_NAMES_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, IMPORT_FROM_AS_NAMES_ID, null);
    }

    // import_from_as_name: NAME ['as' NAME]
    // TODO replacing alias_ty --> SSTNode
    public SSTNode import_from_as_name_rule() {
    // isLoop: False, isGather: False, type: alias_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: import_from_as_name, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, IMPORT_FROM_AS_NAME_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, IMPORT_FROM_AS_NAME_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_alias ( a -> v . Name . id , ( b ) ? ( ( expr_ty ) b ) -> v . Name . id : NULL , EXTRA )
        {
            // visiting Alt: NAME ['as' NAME]
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token a
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' NAME])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' NAME)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_34_var = _tmp_34_rule()) != null  // 'as' NAME
                // generated call: ((_opt_var = _tmp_34_rule()) != null || _opt_var == null)  // ['as' NAME]
            // collecting vars: None b
            //    vars: {'a': 'Token', 'b': None}
            Token a;
            Object b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (a = expect(Token.Kind.NAME)) != null  // NAME
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ['as' NAME]
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(['as' NAME])
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' NAME])
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' NAME)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_34_var = _tmp_34_rule()) != null  // 'as' NAME
                // REMOVE result call ((_opt_var = _tmp_34_rule()) != null || _opt_var == null)  // ['as' NAME]
                ((b = _tmp_34_rule()) != null || b == null)  // ['as' NAME]
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("import_from_as_name[" + pos + ", " + mark() +" ](level: " + level + ") NAME ['as' NAME] succeeded!");
                }
                // alt action: _PyAST_alias ( a -> v . Name . id , ( b ) ? ( ( expr_ty ) b ) -> v . Name . id : NULL , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_alias ( a -> v . Name . id , ( b ) ? ( ( expr_ty ) b ) -> v . Name . id : NULL , EXTRA )
                return (SSTNode)cache.putResult(pos, IMPORT_FROM_AS_NAME_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, IMPORT_FROM_AS_NAME_ID, null);
    }

    // dotted_as_names: ','.dotted_as_name+
    // TODO replacing asdl_alias_seq* --> SSTNode[]
    public SSTNode[] dotted_as_names_rule() {
    // isLoop: False, isGather: False, type: asdl_alias_seq*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: dotted_as_names, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, DOTTED_AS_NAMES_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, DOTTED_AS_NAMES_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: a
        {
            // visiting Alt: ','.dotted_as_name+
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.dotted_as_name+)
                // generated call: (_gather_35_var = _gather_35_rule()) != null  // ','.dotted_as_name+
            // collecting vars: asdl_alias_seq* a
            //    vars: {'a': 'asdl_alias_seq*'}
            // TODO replacing asdl_alias_seq* --> SSTNode[]
            SSTNode[] a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','.dotted_as_name+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.dotted_as_name+)
                // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.dotted_as_name+)
                // REMOVE result call (_gather_35_var = _gather_35_rule()) != null  // ','.dotted_as_name+
                (a = (SSTNode[])_gather_35_rule()) != null  // ','.dotted_as_name+
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("dotted_as_names[" + pos + ", " + mark() +" ](level: " + level + ") ','.dotted_as_name+ succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode[])cache.putResult(pos, DOTTED_AS_NAMES_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, DOTTED_AS_NAMES_ID, null);
    }

    // dotted_as_name: dotted_name ['as' NAME]
    // TODO replacing alias_ty --> SSTNode
    public SSTNode dotted_as_name_rule() {
    // isLoop: False, isGather: False, type: alias_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: dotted_as_name, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, DOTTED_AS_NAME_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, DOTTED_AS_NAME_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_alias ( a -> v . Name . id , ( b ) ? ( ( expr_ty ) b ) -> v . Name . id : NULL , EXTRA )
        {
            // visiting Alt: dotted_name ['as' NAME]
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_name) - should work
            // name = dotted_name
                // generated call: (dotted_name_var = dotted_name_rule()) != null  // dotted_name
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' NAME])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' NAME)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_37_var = _tmp_37_rule()) != null  // 'as' NAME
                // generated call: ((_opt_var = _tmp_37_rule()) != null || _opt_var == null)  // ['as' NAME]
            // collecting vars: None b
            //    vars: {'a': 'SSTNode', 'b': None}
            SSTNode a;
            Object b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: dotted_name
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(dotted_name)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_name) - should work
                // name = dotted_name
                // REMOVE result call (dotted_name_var = dotted_name_rule()) != null  // dotted_name
                (a = dotted_name_rule()) != null  // dotted_name
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ['as' NAME]
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(['as' NAME])
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' NAME])
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' NAME)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_37_var = _tmp_37_rule()) != null  // 'as' NAME
                // REMOVE result call ((_opt_var = _tmp_37_rule()) != null || _opt_var == null)  // ['as' NAME]
                ((b = _tmp_37_rule()) != null || b == null)  // ['as' NAME]
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("dotted_as_name[" + pos + ", " + mark() +" ](level: " + level + ") dotted_name ['as' NAME] succeeded!");
                }
                // alt action: _PyAST_alias ( a -> v . Name . id , ( b ) ? ( ( expr_ty ) b ) -> v . Name . id : NULL , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_alias ( a -> v . Name . id , ( b ) ? ( ( expr_ty ) b ) -> v . Name . id : NULL , EXTRA )
                return (SSTNode)cache.putResult(pos, DOTTED_AS_NAME_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, DOTTED_AS_NAME_ID, null);
    }

    // Left-recursive
    // dotted_name: dotted_name '.' NAME | NAME
    public SSTNode dotted_name_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // left recursion--
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Left Recursion Rule: dotted_name, pos: " + pos + ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, DOTTED_NAME_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, DOTTED_NAME_ID);
        }
        int lastPos = pos;
        int endPos;
        SSTNode lastResult = null;
        cache.putResult(pos, DOTTED_NAME_ID, null);
        while(true) {
            reset(pos);
            SSTNode result = dotted_name_rule_body();
            endPos = mark();
            if (endPos <= lastPos) {
                break;
            }
            lastResult = result;
            lastPos = endPos;
            cache.putResult(pos, DOTTED_NAME_ID, result);
        }
        reset(lastPos);
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: " + lastResult + ", level: " + level);
        }
        return lastResult;
    }

    // left-rersive rule body
    public SSTNode dotted_name_rule_body() {
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: dotted_name, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_join_names_with_dot ( p , a , b )
        {
            // visiting Alt: dotted_name '.' NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_name) - should work
            // name = dotted_name
                // generated call: (dotted_name_var = dotted_name_rule()) != null  // dotted_name
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
                // generated call: (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token b
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'b': 'Token'}
            Token _literal;
            SSTNode a;
            Token b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: dotted_name
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(dotted_name)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_name) - should work
                // name = dotted_name
                // REMOVE result call (dotted_name_var = dotted_name_rule()) != null  // dotted_name
                (a = dotted_name_rule()) != null  // dotted_name
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '.'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('.')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
                // REMOVE result call (_literal = expect(Token.Kind.DOT)) != null  // token='.'
                (_literal = expect(Token.Kind.DOT)) != null  // token='.'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (b = expect(Token.Kind.NAME)) != null  // NAME
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("dotted_name[" + pos + ", " + mark() +" ](level: " + level + ") dotted_name '.' NAME succeeded!");
                }
                // alt action: _PyPegen_join_names_with_dot ( p , a , b )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_join_names_with_dot ( p , a , b )
                return (SSTNode)cache.putResult(pos, DOTTED_NAME_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token name_var
            //    vars: {'name_var': 'Token'}
            Token name_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (name_var = expect(Token.Kind.NAME)) != null  // NAME
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("dotted_name[" + pos + ", " + mark() +" ](level: " + level + ") NAME succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['name_var']
                result = name_var;
                return (SSTNode)cache.putResult(pos, DOTTED_NAME_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, DOTTED_NAME_ID, null);
    }

    // if_stmt:
    //     | 'if' named_expression ':' block elif_stmt
    //     | 'if' named_expression ':' block else_block?
    //     | invalid_if_stmt
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode if_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: if_stmt, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, IF_STMT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, IF_STMT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_If ( a , b , CHECK ( asdl_stmt_seq * , _PyPegen_singleton_seq ( p , c ) ) , EXTRA )
        {
            // visiting Alt: 'if' named_expression ':' block elif_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
                // generated call: (_keyword = expect(KEYWORD_IF)) != null  // token='if'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // name = named_expression
                // generated call: (named_expression_var = named_expression_rule()) != null  // named_expression
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // name = block
                // generated call: (block_var = block_rule()) != null  // block
            // collecting vars: SSTNode[] b
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(elif_stmt) - should work
            // name = elif_stmt
            // TODO replacing stmt_ty --> SSTNode
                // generated call: (elif_stmt_var = elif_stmt_rule()) != null  // elif_stmt
            // collecting vars: SSTNode c
            //    vars: {'_keyword': 'Token', 'a': 'SSTNode', '_literal': 'Token', 'b': 'SSTNode[]', 'c': 'SSTNode'}
            Token _keyword;
            Token _literal;
            SSTNode a;
            SSTNode[] b;
            SSTNode c;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'if'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('if')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
                // REMOVE result call (_keyword = expect(KEYWORD_IF)) != null  // token='if'
                (_keyword = expect(KEYWORD_IF)) != null  // token='if'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: named_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(named_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
                // name = named_expression
                // REMOVE result call (named_expression_var = named_expression_rule()) != null  // named_expression
                (a = named_expression_rule()) != null  // named_expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
                // name = block
                // REMOVE result call (block_var = block_rule()) != null  // block
                (b = block_rule()) != null  // block
                &&
                // TODO visiting JavaParserGeneratorNamedItem: elif_stmt
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(elif_stmt)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(elif_stmt) - should work
                // name = elif_stmt
                // TODO replacing stmt_ty --> SSTNode
                // REMOVE result call (elif_stmt_var = elif_stmt_rule()) != null  // elif_stmt
                (c = elif_stmt_rule()) != null  // elif_stmt
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("if_stmt[" + pos + ", " + mark() +" ](level: " + level + ") 'if' named_expression ':' block elif_stmt succeeded!");
                }
                // alt action: _PyAST_If ( a , b , CHECK ( asdl_stmt_seq * , _PyPegen_singleton_seq ( p , c ) ) , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_If ( a , b , CHECK ( asdl_stmt_seq * , _PyPegen_singleton_seq ( p , c ) ) , EXTRA )
                return (SSTNode)cache.putResult(pos, IF_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_If ( a , b , c , EXTRA )
        {
            // visiting Alt: 'if' named_expression ':' block else_block?
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
                // generated call: (_keyword = expect(KEYWORD_IF)) != null  // token='if'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // name = named_expression
                // generated call: (named_expression_var = named_expression_rule()) != null  // named_expression
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // name = block
                // generated call: (block_var = block_rule()) != null  // block
            // collecting vars: SSTNode[] b
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_38_var = _tmp_38_rule()) != null  // else_block
                // generated call: ((_opt_var = _tmp_38_rule()) != null || _opt_var == null)  // else_block?
            // collecting vars: None c
            //    vars: {'_keyword': 'Token', 'a': 'SSTNode', '_literal': 'Token', 'b': 'SSTNode[]', 'c': None}
            Token _keyword;
            Token _literal;
            SSTNode a;
            SSTNode[] b;
            Object c;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'if'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('if')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
                // REMOVE result call (_keyword = expect(KEYWORD_IF)) != null  // token='if'
                (_keyword = expect(KEYWORD_IF)) != null  // token='if'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: named_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(named_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
                // name = named_expression
                // REMOVE result call (named_expression_var = named_expression_rule()) != null  // named_expression
                (a = named_expression_rule()) != null  // named_expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
                // name = block
                // REMOVE result call (block_var = block_rule()) != null  // block
                (b = block_rule()) != null  // block
                &&
                // TODO visiting JavaParserGeneratorNamedItem: else_block?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(else_block?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_38_var = _tmp_38_rule()) != null  // else_block
                // REMOVE result call ((_opt_var = _tmp_38_rule()) != null || _opt_var == null)  // else_block?
                ((c = _tmp_38_rule()) != null || c == null)  // else_block?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("if_stmt[" + pos + ", " + mark() +" ](level: " + level + ") 'if' named_expression ':' block else_block? succeeded!");
                }
                // alt action: _PyAST_If ( a , b , c , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_If ( a , b , c , EXTRA )
                return (SSTNode)cache.putResult(pos, IF_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: invalid_if_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_if_stmt) - should work
            // name = invalid_if_stmt
                // generated call: (invalid_if_stmt_var = invalid_if_stmt_rule()) != null  // invalid_if_stmt
            // collecting vars: None invalid_if_stmt_var
            //    vars: {'invalid_if_stmt_var': None}
            Object invalid_if_stmt_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: invalid_if_stmt
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_if_stmt)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_if_stmt) - should work
                // name = invalid_if_stmt
                // REMOVE result call (invalid_if_stmt_var = invalid_if_stmt_rule()) != null  // invalid_if_stmt
                (invalid_if_stmt_var = invalid_if_stmt_rule()) != null  // invalid_if_stmt
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("if_stmt[" + pos + ", " + mark() +" ](level: " + level + ") invalid_if_stmt succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['invalid_if_stmt_var']
                result = invalid_if_stmt_var;
                return (SSTNode)cache.putResult(pos, IF_STMT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, IF_STMT_ID, null);
    }

    // elif_stmt:
    //     | 'elif' named_expression ':' block elif_stmt
    //     | 'elif' named_expression ':' block else_block?
    //     | invalid_elif_stmt
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode elif_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: elif_stmt, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, ELIF_STMT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, ELIF_STMT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_If ( a , b , CHECK ( asdl_stmt_seq * , _PyPegen_singleton_seq ( p , c ) ) , EXTRA )
        {
            // visiting Alt: 'elif' named_expression ':' block elif_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('elif')
                // generated call: (_keyword = expect(KEYWORD_ELIF)) != null  // token='elif'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // name = named_expression
                // generated call: (named_expression_var = named_expression_rule()) != null  // named_expression
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // name = block
                // generated call: (block_var = block_rule()) != null  // block
            // collecting vars: SSTNode[] b
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(elif_stmt) - should work
            // name = elif_stmt
            // TODO replacing stmt_ty --> SSTNode
                // generated call: (elif_stmt_var = elif_stmt_rule()) != null  // elif_stmt
            // collecting vars: SSTNode c
            //    vars: {'_keyword': 'Token', 'a': 'SSTNode', '_literal': 'Token', 'b': 'SSTNode[]', 'c': 'SSTNode'}
            Token _keyword;
            Token _literal;
            SSTNode a;
            SSTNode[] b;
            SSTNode c;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'elif'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('elif')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('elif')
                // REMOVE result call (_keyword = expect(KEYWORD_ELIF)) != null  // token='elif'
                (_keyword = expect(KEYWORD_ELIF)) != null  // token='elif'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: named_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(named_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
                // name = named_expression
                // REMOVE result call (named_expression_var = named_expression_rule()) != null  // named_expression
                (a = named_expression_rule()) != null  // named_expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
                // name = block
                // REMOVE result call (block_var = block_rule()) != null  // block
                (b = block_rule()) != null  // block
                &&
                // TODO visiting JavaParserGeneratorNamedItem: elif_stmt
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(elif_stmt)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(elif_stmt) - should work
                // name = elif_stmt
                // TODO replacing stmt_ty --> SSTNode
                // REMOVE result call (elif_stmt_var = elif_stmt_rule()) != null  // elif_stmt
                (c = elif_stmt_rule()) != null  // elif_stmt
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("elif_stmt[" + pos + ", " + mark() +" ](level: " + level + ") 'elif' named_expression ':' block elif_stmt succeeded!");
                }
                // alt action: _PyAST_If ( a , b , CHECK ( asdl_stmt_seq * , _PyPegen_singleton_seq ( p , c ) ) , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_If ( a , b , CHECK ( asdl_stmt_seq * , _PyPegen_singleton_seq ( p , c ) ) , EXTRA )
                return (SSTNode)cache.putResult(pos, ELIF_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_If ( a , b , c , EXTRA )
        {
            // visiting Alt: 'elif' named_expression ':' block else_block?
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('elif')
                // generated call: (_keyword = expect(KEYWORD_ELIF)) != null  // token='elif'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // name = named_expression
                // generated call: (named_expression_var = named_expression_rule()) != null  // named_expression
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // name = block
                // generated call: (block_var = block_rule()) != null  // block
            // collecting vars: SSTNode[] b
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_39_var = _tmp_39_rule()) != null  // else_block
                // generated call: ((_opt_var = _tmp_39_rule()) != null || _opt_var == null)  // else_block?
            // collecting vars: None c
            //    vars: {'_keyword': 'Token', 'a': 'SSTNode', '_literal': 'Token', 'b': 'SSTNode[]', 'c': None}
            Token _keyword;
            Token _literal;
            SSTNode a;
            SSTNode[] b;
            Object c;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'elif'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('elif')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('elif')
                // REMOVE result call (_keyword = expect(KEYWORD_ELIF)) != null  // token='elif'
                (_keyword = expect(KEYWORD_ELIF)) != null  // token='elif'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: named_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(named_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
                // name = named_expression
                // REMOVE result call (named_expression_var = named_expression_rule()) != null  // named_expression
                (a = named_expression_rule()) != null  // named_expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
                // name = block
                // REMOVE result call (block_var = block_rule()) != null  // block
                (b = block_rule()) != null  // block
                &&
                // TODO visiting JavaParserGeneratorNamedItem: else_block?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(else_block?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_39_var = _tmp_39_rule()) != null  // else_block
                // REMOVE result call ((_opt_var = _tmp_39_rule()) != null || _opt_var == null)  // else_block?
                ((c = _tmp_39_rule()) != null || c == null)  // else_block?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("elif_stmt[" + pos + ", " + mark() +" ](level: " + level + ") 'elif' named_expression ':' block else_block? succeeded!");
                }
                // alt action: _PyAST_If ( a , b , c , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_If ( a , b , c , EXTRA )
                return (SSTNode)cache.putResult(pos, ELIF_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: invalid_elif_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_elif_stmt) - should work
            // name = invalid_elif_stmt
                // generated call: (invalid_elif_stmt_var = invalid_elif_stmt_rule()) != null  // invalid_elif_stmt
            // collecting vars: None invalid_elif_stmt_var
            //    vars: {'invalid_elif_stmt_var': None}
            Object invalid_elif_stmt_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: invalid_elif_stmt
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_elif_stmt)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_elif_stmt) - should work
                // name = invalid_elif_stmt
                // REMOVE result call (invalid_elif_stmt_var = invalid_elif_stmt_rule()) != null  // invalid_elif_stmt
                (invalid_elif_stmt_var = invalid_elif_stmt_rule()) != null  // invalid_elif_stmt
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("elif_stmt[" + pos + ", " + mark() +" ](level: " + level + ") invalid_elif_stmt succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['invalid_elif_stmt_var']
                result = invalid_elif_stmt_var;
                return (SSTNode)cache.putResult(pos, ELIF_STMT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, ELIF_STMT_ID, null);
    }

    // else_block: 'else' &&':' block
    // TODO replacing SSTNode* --> SSTNode[]
    public SSTNode[] else_block_rule() {
    // isLoop: False, isGather: False, type: SSTNode*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: else_block, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, ELSE_BLOCK_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, ELSE_BLOCK_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: b
        {
            // visiting Alt: 'else' &&':' block
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('else')
                // generated call: (_keyword = expect(KEYWORD_ELSE)) != null  // token='else'
            // collecting vars: Token _keyword
            // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
                // generated call: None
            // collecting vars: None None
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // name = block
                // generated call: (block_var = block_rule()) != null  // block
            // collecting vars: SSTNode[] b
            //    vars: {'_keyword': 'Token', None: None, 'b': 'SSTNode[]'}
            Token _keyword;
            SSTNode[] b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'else'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('else')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('else')
                // REMOVE result call (_keyword = expect(KEYWORD_ELSE)) != null  // token='else'
                (_keyword = expect(KEYWORD_ELSE)) != null  // token='else'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: &&':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&&':')
                // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
                // TODO call is not created &&':' -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
                // name = block
                // REMOVE result call (block_var = block_rule()) != null  // block
                (b = block_rule()) != null  // block
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("else_block[" + pos + ", " + mark() +" ](level: " + level + ") 'else' &&':' block succeeded!");
                }
                // alt action: b
                Token endToken = getToken(mark());
                // node.action: b
                result = b;
                return (SSTNode[])cache.putResult(pos, ELSE_BLOCK_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, ELSE_BLOCK_ID, null);
    }

    // while_stmt: 'while' named_expression ':' block else_block? | invalid_while_stmt
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode while_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: while_stmt, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, WHILE_STMT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, WHILE_STMT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_While ( a , b , c , EXTRA )
        {
            // visiting Alt: 'while' named_expression ':' block else_block?
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('while')
                // generated call: (_keyword = expect(KEYWORD_WHILE)) != null  // token='while'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // name = named_expression
                // generated call: (named_expression_var = named_expression_rule()) != null  // named_expression
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // name = block
                // generated call: (block_var = block_rule()) != null  // block
            // collecting vars: SSTNode[] b
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_40_var = _tmp_40_rule()) != null  // else_block
                // generated call: ((_opt_var = _tmp_40_rule()) != null || _opt_var == null)  // else_block?
            // collecting vars: None c
            //    vars: {'_keyword': 'Token', 'a': 'SSTNode', '_literal': 'Token', 'b': 'SSTNode[]', 'c': None}
            Token _keyword;
            Token _literal;
            SSTNode a;
            SSTNode[] b;
            Object c;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'while'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('while')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('while')
                // REMOVE result call (_keyword = expect(KEYWORD_WHILE)) != null  // token='while'
                (_keyword = expect(KEYWORD_WHILE)) != null  // token='while'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: named_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(named_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
                // name = named_expression
                // REMOVE result call (named_expression_var = named_expression_rule()) != null  // named_expression
                (a = named_expression_rule()) != null  // named_expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
                // name = block
                // REMOVE result call (block_var = block_rule()) != null  // block
                (b = block_rule()) != null  // block
                &&
                // TODO visiting JavaParserGeneratorNamedItem: else_block?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(else_block?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_40_var = _tmp_40_rule()) != null  // else_block
                // REMOVE result call ((_opt_var = _tmp_40_rule()) != null || _opt_var == null)  // else_block?
                ((c = _tmp_40_rule()) != null || c == null)  // else_block?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("while_stmt[" + pos + ", " + mark() +" ](level: " + level + ") 'while' named_expression ':' block else_block? succeeded!");
                }
                // alt action: _PyAST_While ( a , b , c , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_While ( a , b , c , EXTRA )
                return (SSTNode)cache.putResult(pos, WHILE_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: invalid_while_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_while_stmt) - should work
            // name = invalid_while_stmt
                // generated call: (invalid_while_stmt_var = invalid_while_stmt_rule()) != null  // invalid_while_stmt
            // collecting vars: None invalid_while_stmt_var
            //    vars: {'invalid_while_stmt_var': None}
            Object invalid_while_stmt_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: invalid_while_stmt
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_while_stmt)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_while_stmt) - should work
                // name = invalid_while_stmt
                // REMOVE result call (invalid_while_stmt_var = invalid_while_stmt_rule()) != null  // invalid_while_stmt
                (invalid_while_stmt_var = invalid_while_stmt_rule()) != null  // invalid_while_stmt
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("while_stmt[" + pos + ", " + mark() +" ](level: " + level + ") invalid_while_stmt succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['invalid_while_stmt_var']
                result = invalid_while_stmt_var;
                return (SSTNode)cache.putResult(pos, WHILE_STMT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, WHILE_STMT_ID, null);
    }

    // for_stmt:
    //     | 'for' star_targets 'in' ~ star_expressions &&':' TYPE_COMMENT? block else_block?
    //     | ASYNC 'for' star_targets 'in' ~ star_expressions &&':' TYPE_COMMENT? block else_block?
    //     | invalid_for_target
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode for_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: for_stmt, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, FOR_STMT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, FOR_STMT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_For ( t , ex , b , el , NEW_TYPE_COMMENT ( p , tc ) , EXTRA )
        {
            // visiting Alt: 'for' star_targets 'in' ~ star_expressions &&':' TYPE_COMMENT? block else_block?
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('for')
                // generated call: (_keyword = expect(KEYWORD_FOR)) != null  // token='for'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
            // name = star_targets
                // generated call: (star_targets_var = star_targets_rule()) != null  // star_targets
            // collecting vars: SSTNode t
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
                // generated call: (_keyword = expect(KEYWORD_IN)) != null  // token='in'
            // collecting vars: Token _keyword_1
            // TODO visiting JavaCallMakerVisitor.visit_Cut(~)
                // generated call: None
            // collecting vars: None None
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // name = star_expressions
                // generated call: (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            // collecting vars: SSTNode ex
            // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
                // generated call: None
            // collecting vars: None None
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(TYPE_COMMENT)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_41_var = _tmp_41_rule()) != null  // TYPE_COMMENT
                // generated call: ((_opt_var = _tmp_41_rule()) != null || _opt_var == null)  // TYPE_COMMENT?
            // collecting vars: None tc
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // name = block
                // generated call: (block_var = block_rule()) != null  // block
            // collecting vars: SSTNode[] b
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_42_var = _tmp_42_rule()) != null  // else_block
                // generated call: ((_opt_var = _tmp_42_rule()) != null || _opt_var == null)  // else_block?
            // collecting vars: None el
            //    vars: {'_keyword': 'Token', 't': 'SSTNode', '_keyword_1': 'Token', None: None, 'ex': 'SSTNode', 'tc': None, 'b': 'SSTNode[]', 'el': None}
            Token _keyword;
            Token _keyword_1;
            SSTNode[] b;
            Object el;
            SSTNode ex;
            SSTNode t;
            Object tc;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'for'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('for')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('for')
                // REMOVE result call (_keyword = expect(KEYWORD_FOR)) != null  // token='for'
                (_keyword = expect(KEYWORD_FOR)) != null  // token='for'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: star_targets
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_targets)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
                // name = star_targets
                // REMOVE result call (star_targets_var = star_targets_rule()) != null  // star_targets
                (t = star_targets_rule()) != null  // star_targets
                &&
                // TODO visiting JavaParserGeneratorNamedItem: 'in'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('in')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
                // REMOVE result call (_keyword = expect(KEYWORD_IN)) != null  // token='in'
                (_keyword_1 = expect(KEYWORD_IN)) != null  // token='in'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ~
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(~)
                // TODO visiting JavaCallMakerVisitor.visit_Cut(~)
                // TODO call is not created ~ -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: star_expressions
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expressions)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
                // name = star_expressions
                // REMOVE result call (star_expressions_var = star_expressions_rule()) != null  // star_expressions
                (ex = star_expressions_rule()) != null  // star_expressions
                &&
                // TODO visiting JavaParserGeneratorNamedItem: &&':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&&':')
                // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
                // TODO call is not created &&':' -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(TYPE_COMMENT)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_41_var = _tmp_41_rule()) != null  // TYPE_COMMENT
                // REMOVE result call ((_opt_var = _tmp_41_rule()) != null || _opt_var == null)  // TYPE_COMMENT?
                ((tc = _tmp_41_rule()) != null || tc == null)  // TYPE_COMMENT?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
                // name = block
                // REMOVE result call (block_var = block_rule()) != null  // block
                (b = block_rule()) != null  // block
                &&
                // TODO visiting JavaParserGeneratorNamedItem: else_block?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(else_block?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_42_var = _tmp_42_rule()) != null  // else_block
                // REMOVE result call ((_opt_var = _tmp_42_rule()) != null || _opt_var == null)  // else_block?
                ((el = _tmp_42_rule()) != null || el == null)  // else_block?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("for_stmt[" + pos + ", " + mark() +" ](level: " + level + ") 'for' star_targets 'in' ~ star_expressions &&':' TYPE_COMMENT? block else_block? succeeded!");
                }
                // alt action: _PyAST_For ( t , ex , b , el , NEW_TYPE_COMMENT ( p , tc ) , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_For ( t , ex , b , el , NEW_TYPE_COMMENT ( p , tc ) , EXTRA )
                return (SSTNode)cache.putResult(pos, FOR_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: CHECK_VERSION ( stmt_ty , 5 , "Async for loops are" , _PyAST_AsyncFor ( t , ex , b , el , NEW_TYPE_COMMENT ( p , tc ) , EXTRA ) )
        {
            // visiting Alt: ASYNC 'for' star_targets 'in' ~ star_expressions &&':' TYPE_COMMENT? block else_block?
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
            // name = ASYNC
                // generated call: (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            // collecting vars: Token async_var
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('for')
                // generated call: (_keyword = expect(KEYWORD_FOR)) != null  // token='for'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
            // name = star_targets
                // generated call: (star_targets_var = star_targets_rule()) != null  // star_targets
            // collecting vars: SSTNode t
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
                // generated call: (_keyword = expect(KEYWORD_IN)) != null  // token='in'
            // collecting vars: Token _keyword_1
            // TODO visiting JavaCallMakerVisitor.visit_Cut(~)
                // generated call: None
            // collecting vars: None None
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // name = star_expressions
                // generated call: (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            // collecting vars: SSTNode ex
            // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
                // generated call: None
            // collecting vars: None None
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(TYPE_COMMENT)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_43_var = _tmp_43_rule()) != null  // TYPE_COMMENT
                // generated call: ((_opt_var = _tmp_43_rule()) != null || _opt_var == null)  // TYPE_COMMENT?
            // collecting vars: None tc
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // name = block
                // generated call: (block_var = block_rule()) != null  // block
            // collecting vars: SSTNode[] b
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_44_var = _tmp_44_rule()) != null  // else_block
                // generated call: ((_opt_var = _tmp_44_rule()) != null || _opt_var == null)  // else_block?
            // collecting vars: None el
            //    vars: {'async_var': 'Token', '_keyword': 'Token', 't': 'SSTNode', '_keyword_1': 'Token', None: None, 'ex': 'SSTNode', 'tc': None, 'b': 'SSTNode[]', 'el': None}
            Token _keyword;
            Token _keyword_1;
            Token async_var;
            SSTNode[] b;
            Object el;
            SSTNode ex;
            SSTNode t;
            Object tc;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ASYNC
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(ASYNC)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
                // name = ASYNC
                // REMOVE result call (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
                (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: 'for'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('for')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('for')
                // REMOVE result call (_keyword = expect(KEYWORD_FOR)) != null  // token='for'
                (_keyword = expect(KEYWORD_FOR)) != null  // token='for'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: star_targets
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_targets)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
                // name = star_targets
                // REMOVE result call (star_targets_var = star_targets_rule()) != null  // star_targets
                (t = star_targets_rule()) != null  // star_targets
                &&
                // TODO visiting JavaParserGeneratorNamedItem: 'in'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('in')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
                // REMOVE result call (_keyword = expect(KEYWORD_IN)) != null  // token='in'
                (_keyword_1 = expect(KEYWORD_IN)) != null  // token='in'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ~
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(~)
                // TODO visiting JavaCallMakerVisitor.visit_Cut(~)
                // TODO call is not created ~ -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: star_expressions
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expressions)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
                // name = star_expressions
                // REMOVE result call (star_expressions_var = star_expressions_rule()) != null  // star_expressions
                (ex = star_expressions_rule()) != null  // star_expressions
                &&
                // TODO visiting JavaParserGeneratorNamedItem: &&':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&&':')
                // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
                // TODO call is not created &&':' -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(TYPE_COMMENT)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_43_var = _tmp_43_rule()) != null  // TYPE_COMMENT
                // REMOVE result call ((_opt_var = _tmp_43_rule()) != null || _opt_var == null)  // TYPE_COMMENT?
                ((tc = _tmp_43_rule()) != null || tc == null)  // TYPE_COMMENT?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
                // name = block
                // REMOVE result call (block_var = block_rule()) != null  // block
                (b = block_rule()) != null  // block
                &&
                // TODO visiting JavaParserGeneratorNamedItem: else_block?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(else_block?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_44_var = _tmp_44_rule()) != null  // else_block
                // REMOVE result call ((_opt_var = _tmp_44_rule()) != null || _opt_var == null)  // else_block?
                ((el = _tmp_44_rule()) != null || el == null)  // else_block?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("for_stmt[" + pos + ", " + mark() +" ](level: " + level + ") ASYNC 'for' star_targets 'in' ~ star_expressions &&':' TYPE_COMMENT? block else_block? succeeded!");
                }
                // alt action: CHECK_VERSION ( stmt_ty , 5 , "Async for loops are" , _PyAST_AsyncFor ( t , ex , b , el , NEW_TYPE_COMMENT ( p , tc ) , EXTRA ) )
                Token endToken = getToken(mark());
                // node.action: CHECK_VERSION ( stmt_ty , 5 , "Async for loops are" , _PyAST_AsyncFor ( t , ex , b , el , NEW_TYPE_COMMENT ( p , tc ) , EXTRA ) )
                return (SSTNode)cache.putResult(pos, FOR_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: invalid_for_target
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_for_target) - should work
            // name = invalid_for_target
                // generated call: (invalid_for_target_var = invalid_for_target_rule()) != null  // invalid_for_target
            // collecting vars: None invalid_for_target_var
            //    vars: {'invalid_for_target_var': None}
            Object invalid_for_target_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: invalid_for_target
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_for_target)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_for_target) - should work
                // name = invalid_for_target
                // REMOVE result call (invalid_for_target_var = invalid_for_target_rule()) != null  // invalid_for_target
                (invalid_for_target_var = invalid_for_target_rule()) != null  // invalid_for_target
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("for_stmt[" + pos + ", " + mark() +" ](level: " + level + ") invalid_for_target succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['invalid_for_target_var']
                result = invalid_for_target_var;
                return (SSTNode)cache.putResult(pos, FOR_STMT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, FOR_STMT_ID, null);
    }

    // with_stmt:
    //     | 'with' '(' ','.with_item+ ','? ')' ':' block
    //     | 'with' ','.with_item+ ':' TYPE_COMMENT? block
    //     | ASYNC 'with' '(' ','.with_item+ ','? ')' ':' block
    //     | ASYNC 'with' ','.with_item+ ':' TYPE_COMMENT? block
    //     | invalid_with_stmt
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode with_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: with_stmt, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, WITH_STMT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, WITH_STMT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_With ( a , b , NULL , EXTRA )
        {
            // visiting Alt: 'with' '(' ','.with_item+ ','? ')' ':' block
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
                // generated call: (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.with_item+)
                // generated call: (_gather_45_var = _gather_45_rule()) != null  // ','.with_item+
            // collecting vars: asdl_withitem_seq* a
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                // generated call: ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
            // collecting vars: None _opt_var
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // collecting vars: Token _literal_1
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // collecting vars: Token _literal_2
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // name = block
                // generated call: (block_var = block_rule()) != null  // block
            // collecting vars: SSTNode[] b
            //    vars: {'_keyword': 'Token', '_literal': 'Token', 'a': 'asdl_withitem_seq*', '_opt_var': None, '_literal_1': 'Token', '_literal_2': 'Token', 'b': 'SSTNode[]'}
            Token _keyword;
            Token _literal;
            Token _literal_1;
            Token _literal_2;
            Object _opt_var;
            // TODO replacing asdl_withitem_seq* --> SSTNode[]
            SSTNode[] a;
            SSTNode[] b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'with'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('with')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
                // REMOVE result call (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
                (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','.with_item+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.with_item+)
                // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.with_item+)
                // REMOVE result call (_gather_45_var = _gather_45_rule()) != null  // ','.with_item+
                (a = (SSTNode[])_gather_45_rule()) != null  // ','.with_item+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                // REMOVE result call ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
                ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
                (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                (_literal_2 = expect(Token.Kind.COLON)) != null  // token=':'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
                // name = block
                // REMOVE result call (block_var = block_rule()) != null  // block
                (b = block_rule()) != null  // block
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("with_stmt[" + pos + ", " + mark() +" ](level: " + level + ") 'with' '(' ','.with_item+ ','? ')' ':' block succeeded!");
                }
                // alt action: _PyAST_With ( a , b , NULL , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_With ( a , b , NULL , EXTRA )
                return (SSTNode)cache.putResult(pos, WITH_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_With ( a , b , NEW_TYPE_COMMENT ( p , tc ) , EXTRA )
        {
            // visiting Alt: 'with' ','.with_item+ ':' TYPE_COMMENT? block
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
                // generated call: (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.with_item+)
                // generated call: (_gather_47_var = _gather_47_rule()) != null  // ','.with_item+
            // collecting vars: asdl_withitem_seq* a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(TYPE_COMMENT)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_49_var = _tmp_49_rule()) != null  // TYPE_COMMENT
                // generated call: ((_opt_var = _tmp_49_rule()) != null || _opt_var == null)  // TYPE_COMMENT?
            // collecting vars: None tc
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // name = block
                // generated call: (block_var = block_rule()) != null  // block
            // collecting vars: SSTNode[] b
            //    vars: {'_keyword': 'Token', 'a': 'asdl_withitem_seq*', '_literal': 'Token', 'tc': None, 'b': 'SSTNode[]'}
            Token _keyword;
            Token _literal;
            // TODO replacing asdl_withitem_seq* --> SSTNode[]
            SSTNode[] a;
            SSTNode[] b;
            Object tc;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'with'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('with')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
                // REMOVE result call (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
                (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','.with_item+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.with_item+)
                // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.with_item+)
                // REMOVE result call (_gather_47_var = _gather_47_rule()) != null  // ','.with_item+
                (a = (SSTNode[])_gather_47_rule()) != null  // ','.with_item+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(TYPE_COMMENT)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_49_var = _tmp_49_rule()) != null  // TYPE_COMMENT
                // REMOVE result call ((_opt_var = _tmp_49_rule()) != null || _opt_var == null)  // TYPE_COMMENT?
                ((tc = _tmp_49_rule()) != null || tc == null)  // TYPE_COMMENT?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
                // name = block
                // REMOVE result call (block_var = block_rule()) != null  // block
                (b = block_rule()) != null  // block
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("with_stmt[" + pos + ", " + mark() +" ](level: " + level + ") 'with' ','.with_item+ ':' TYPE_COMMENT? block succeeded!");
                }
                // alt action: _PyAST_With ( a , b , NEW_TYPE_COMMENT ( p , tc ) , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_With ( a , b , NEW_TYPE_COMMENT ( p , tc ) , EXTRA )
                return (SSTNode)cache.putResult(pos, WITH_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: CHECK_VERSION ( stmt_ty , 5 , "Async with statements are" , _PyAST_AsyncWith ( a , b , NULL , EXTRA ) )
        {
            // visiting Alt: ASYNC 'with' '(' ','.with_item+ ','? ')' ':' block
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
            // name = ASYNC
                // generated call: (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            // collecting vars: Token async_var
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
                // generated call: (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.with_item+)
                // generated call: (_gather_50_var = _gather_50_rule()) != null  // ','.with_item+
            // collecting vars: asdl_withitem_seq* a
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                // generated call: ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
            // collecting vars: None _opt_var
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // collecting vars: Token _literal_1
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // collecting vars: Token _literal_2
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // name = block
                // generated call: (block_var = block_rule()) != null  // block
            // collecting vars: SSTNode[] b
            //    vars: {'async_var': 'Token', '_keyword': 'Token', '_literal': 'Token', 'a': 'asdl_withitem_seq*', '_opt_var': None, '_literal_1': 'Token', '_literal_2': 'Token', 'b': 'SSTNode[]'}
            Token _keyword;
            Token _literal;
            Token _literal_1;
            Token _literal_2;
            Object _opt_var;
            // TODO replacing asdl_withitem_seq* --> SSTNode[]
            SSTNode[] a;
            Token async_var;
            SSTNode[] b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ASYNC
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(ASYNC)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
                // name = ASYNC
                // REMOVE result call (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
                (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: 'with'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('with')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
                // REMOVE result call (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
                (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','.with_item+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.with_item+)
                // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.with_item+)
                // REMOVE result call (_gather_50_var = _gather_50_rule()) != null  // ','.with_item+
                (a = (SSTNode[])_gather_50_rule()) != null  // ','.with_item+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                // REMOVE result call ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
                ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
                (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                (_literal_2 = expect(Token.Kind.COLON)) != null  // token=':'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
                // name = block
                // REMOVE result call (block_var = block_rule()) != null  // block
                (b = block_rule()) != null  // block
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("with_stmt[" + pos + ", " + mark() +" ](level: " + level + ") ASYNC 'with' '(' ','.with_item+ ','? ')' ':' block succeeded!");
                }
                // alt action: CHECK_VERSION ( stmt_ty , 5 , "Async with statements are" , _PyAST_AsyncWith ( a , b , NULL , EXTRA ) )
                Token endToken = getToken(mark());
                // node.action: CHECK_VERSION ( stmt_ty , 5 , "Async with statements are" , _PyAST_AsyncWith ( a , b , NULL , EXTRA ) )
                return (SSTNode)cache.putResult(pos, WITH_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: CHECK_VERSION ( stmt_ty , 5 , "Async with statements are" , _PyAST_AsyncWith ( a , b , NEW_TYPE_COMMENT ( p , tc ) , EXTRA ) )
        {
            // visiting Alt: ASYNC 'with' ','.with_item+ ':' TYPE_COMMENT? block
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
            // name = ASYNC
                // generated call: (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            // collecting vars: Token async_var
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
                // generated call: (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.with_item+)
                // generated call: (_gather_52_var = _gather_52_rule()) != null  // ','.with_item+
            // collecting vars: asdl_withitem_seq* a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(TYPE_COMMENT)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_54_var = _tmp_54_rule()) != null  // TYPE_COMMENT
                // generated call: ((_opt_var = _tmp_54_rule()) != null || _opt_var == null)  // TYPE_COMMENT?
            // collecting vars: None tc
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // name = block
                // generated call: (block_var = block_rule()) != null  // block
            // collecting vars: SSTNode[] b
            //    vars: {'async_var': 'Token', '_keyword': 'Token', 'a': 'asdl_withitem_seq*', '_literal': 'Token', 'tc': None, 'b': 'SSTNode[]'}
            Token _keyword;
            Token _literal;
            // TODO replacing asdl_withitem_seq* --> SSTNode[]
            SSTNode[] a;
            Token async_var;
            SSTNode[] b;
            Object tc;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ASYNC
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(ASYNC)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
                // name = ASYNC
                // REMOVE result call (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
                (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: 'with'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('with')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
                // REMOVE result call (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
                (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','.with_item+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.with_item+)
                // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.with_item+)
                // REMOVE result call (_gather_52_var = _gather_52_rule()) != null  // ','.with_item+
                (a = (SSTNode[])_gather_52_rule()) != null  // ','.with_item+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(TYPE_COMMENT)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_54_var = _tmp_54_rule()) != null  // TYPE_COMMENT
                // REMOVE result call ((_opt_var = _tmp_54_rule()) != null || _opt_var == null)  // TYPE_COMMENT?
                ((tc = _tmp_54_rule()) != null || tc == null)  // TYPE_COMMENT?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
                // name = block
                // REMOVE result call (block_var = block_rule()) != null  // block
                (b = block_rule()) != null  // block
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("with_stmt[" + pos + ", " + mark() +" ](level: " + level + ") ASYNC 'with' ','.with_item+ ':' TYPE_COMMENT? block succeeded!");
                }
                // alt action: CHECK_VERSION ( stmt_ty , 5 , "Async with statements are" , _PyAST_AsyncWith ( a , b , NEW_TYPE_COMMENT ( p , tc ) , EXTRA ) )
                Token endToken = getToken(mark());
                // node.action: CHECK_VERSION ( stmt_ty , 5 , "Async with statements are" , _PyAST_AsyncWith ( a , b , NEW_TYPE_COMMENT ( p , tc ) , EXTRA ) )
                return (SSTNode)cache.putResult(pos, WITH_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: invalid_with_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_with_stmt) - should work
            // name = invalid_with_stmt
                // generated call: (invalid_with_stmt_var = invalid_with_stmt_rule()) != null  // invalid_with_stmt
            // collecting vars: None invalid_with_stmt_var
            //    vars: {'invalid_with_stmt_var': None}
            Object invalid_with_stmt_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: invalid_with_stmt
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_with_stmt)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_with_stmt) - should work
                // name = invalid_with_stmt
                // REMOVE result call (invalid_with_stmt_var = invalid_with_stmt_rule()) != null  // invalid_with_stmt
                (invalid_with_stmt_var = invalid_with_stmt_rule()) != null  // invalid_with_stmt
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("with_stmt[" + pos + ", " + mark() +" ](level: " + level + ") invalid_with_stmt succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['invalid_with_stmt_var']
                result = invalid_with_stmt_var;
                return (SSTNode)cache.putResult(pos, WITH_STMT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, WITH_STMT_ID, null);
    }

    // with_item:
    //     | expression 'as' star_target &(',' | ')' | ':')
    //     | invalid_with_item
    //     | expression
    // TODO replacing withitem_ty --> SSTNode
    public SSTNode with_item_rule() {
    // isLoop: False, isGather: False, type: withitem_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: with_item, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, WITH_ITEM_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, WITH_ITEM_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_withitem ( e , t , p -> arena )
        {
            // visiting Alt: expression 'as' star_target &(',' | ')' | ':')
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode e
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
                // generated call: (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // name = star_target
                // generated call: (star_target_var = star_target_rule()) != null  // star_target
            // collecting vars: SSTNode t
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&(',' | ')' | ':'))
                // generated call: None
            // collecting vars: None None
            //    vars: {'e': 'SSTNode', '_keyword': 'Token', 't': 'SSTNode', None: None}
            Token _keyword;
            SSTNode e;
            SSTNode t;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (e = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: 'as'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('as')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
                // REMOVE result call (_keyword = expect(KEYWORD_AS)) != null  // token='as'
                (_keyword = expect(KEYWORD_AS)) != null  // token='as'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: star_target
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_target)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
                // name = star_target
                // REMOVE result call (star_target_var = star_target_rule()) != null  // star_target
                (t = star_target_rule()) != null  // star_target
                &&
                // TODO visiting JavaParserGeneratorNamedItem: &(',' | ')' | ':')
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&(',' | ')' | ':'))
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&(',' | ')' | ':'))
                // TODO call is not created &(',' | ')' | ':') -> creates artificial
                true
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("with_item[" + pos + ", " + mark() +" ](level: " + level + ") expression 'as' star_target &(',' | ')' | ':') succeeded!");
                }
                // alt action: _PyAST_withitem ( e , t , p -> arena )
                Token endToken = getToken(mark());
                // node.action: _PyAST_withitem ( e , t , p -> arena )
                return (SSTNode)cache.putResult(pos, WITH_ITEM_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: invalid_with_item
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_with_item) - should work
            // name = invalid_with_item
                // generated call: (invalid_with_item_var = invalid_with_item_rule()) != null  // invalid_with_item
            // collecting vars: None invalid_with_item_var
            //    vars: {'invalid_with_item_var': None}
            Object invalid_with_item_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: invalid_with_item
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_with_item)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_with_item) - should work
                // name = invalid_with_item
                // REMOVE result call (invalid_with_item_var = invalid_with_item_rule()) != null  // invalid_with_item
                (invalid_with_item_var = invalid_with_item_rule()) != null  // invalid_with_item
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("with_item[" + pos + ", " + mark() +" ](level: " + level + ") invalid_with_item succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['invalid_with_item_var']
                result = invalid_with_item_var;
                return (SSTNode)cache.putResult(pos, WITH_ITEM_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_withitem ( e , NULL , p -> arena )
        {
            // visiting Alt: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode e
            //    vars: {'e': 'SSTNode'}
            SSTNode e;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (e = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("with_item[" + pos + ", " + mark() +" ](level: " + level + ") expression succeeded!");
                }
                // alt action: _PyAST_withitem ( e , NULL , p -> arena )
                Token endToken = getToken(mark());
                // node.action: _PyAST_withitem ( e , NULL , p -> arena )
                return (SSTNode)cache.putResult(pos, WITH_ITEM_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, WITH_ITEM_ID, null);
    }

    // try_stmt:
    //     | 'try' &&':' block finally_block
    //     | 'try' &&':' block except_block+ else_block? finally_block?
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode try_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: try_stmt, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, TRY_STMT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, TRY_STMT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Try ( b , NULL , NULL , f , EXTRA )
        {
            // visiting Alt: 'try' &&':' block finally_block
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('try')
                // generated call: (_keyword = expect(KEYWORD_TRY)) != null  // token='try'
            // collecting vars: Token _keyword
            // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
                // generated call: None
            // collecting vars: None None
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // name = block
                // generated call: (block_var = block_rule()) != null  // block
            // collecting vars: SSTNode[] b
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(finally_block) - should work
            // name = finally_block
                // generated call: (finally_block_var = finally_block_rule()) != null  // finally_block
            // collecting vars: SSTNode[] f
            //    vars: {'_keyword': 'Token', None: None, 'b': 'SSTNode[]', 'f': 'SSTNode[]'}
            Token _keyword;
            SSTNode[] b;
            SSTNode[] f;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'try'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('try')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('try')
                // REMOVE result call (_keyword = expect(KEYWORD_TRY)) != null  // token='try'
                (_keyword = expect(KEYWORD_TRY)) != null  // token='try'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: &&':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&&':')
                // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
                // TODO call is not created &&':' -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
                // name = block
                // REMOVE result call (block_var = block_rule()) != null  // block
                (b = block_rule()) != null  // block
                &&
                // TODO visiting JavaParserGeneratorNamedItem: finally_block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(finally_block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(finally_block) - should work
                // name = finally_block
                // REMOVE result call (finally_block_var = finally_block_rule()) != null  // finally_block
                (f = finally_block_rule()) != null  // finally_block
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("try_stmt[" + pos + ", " + mark() +" ](level: " + level + ") 'try' &&':' block finally_block succeeded!");
                }
                // alt action: _PyAST_Try ( b , NULL , NULL , f , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Try ( b , NULL , NULL , f , EXTRA )
                return (SSTNode)cache.putResult(pos, TRY_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Try ( b , ex , el , f , EXTRA )
        {
            // visiting Alt: 'try' &&':' block except_block+ else_block? finally_block?
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('try')
                // generated call: (_keyword = expect(KEYWORD_TRY)) != null  // token='try'
            // collecting vars: Token _keyword
            // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
                // generated call: None
            // collecting vars: None None
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // name = block
                // generated call: (block_var = block_rule()) != null  // block
            // collecting vars: SSTNode[] b
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(except_block+)
                // generated call: (_loop1_55_var = _loop1_55_rule()) != null  // except_block+
            // collecting vars: asdl_excepthandler_seq* ex
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_56_var = _tmp_56_rule()) != null  // else_block
                // generated call: ((_opt_var = _tmp_56_rule()) != null || _opt_var == null)  // else_block?
            // collecting vars: None el
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(finally_block?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(finally_block)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_57_var = _tmp_57_rule()) != null  // finally_block
                // generated call: ((_opt_var = _tmp_57_rule()) != null || _opt_var == null)  // finally_block?
            // collecting vars: None f
            //    vars: {'_keyword': 'Token', None: None, 'b': 'SSTNode[]', 'ex': 'asdl_excepthandler_seq*', 'el': None, 'f': None}
            Token _keyword;
            SSTNode[] b;
            Object el;
            // TODO replacing asdl_excepthandler_seq* --> SSTNode[]
            SSTNode[] ex;
            Object f;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'try'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('try')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('try')
                // REMOVE result call (_keyword = expect(KEYWORD_TRY)) != null  // token='try'
                (_keyword = expect(KEYWORD_TRY)) != null  // token='try'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: &&':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&&':')
                // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
                // TODO call is not created &&':' -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
                // name = block
                // REMOVE result call (block_var = block_rule()) != null  // block
                (b = block_rule()) != null  // block
                &&
                // TODO visiting JavaParserGeneratorNamedItem: except_block+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(except_block+)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat1(except_block+)
                // REMOVE result call (_loop1_55_var = _loop1_55_rule()) != null  // except_block+
                (ex = (SSTNode[])_loop1_55_rule()) != null  // except_block+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: else_block?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(else_block?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(else_block?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(else_block)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_56_var = _tmp_56_rule()) != null  // else_block
                // REMOVE result call ((_opt_var = _tmp_56_rule()) != null || _opt_var == null)  // else_block?
                ((el = _tmp_56_rule()) != null || el == null)  // else_block?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: finally_block?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(finally_block?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(finally_block?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(finally_block)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_57_var = _tmp_57_rule()) != null  // finally_block
                // REMOVE result call ((_opt_var = _tmp_57_rule()) != null || _opt_var == null)  // finally_block?
                ((f = _tmp_57_rule()) != null || f == null)  // finally_block?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("try_stmt[" + pos + ", " + mark() +" ](level: " + level + ") 'try' &&':' block except_block+ else_block? finally_block? succeeded!");
                }
                // alt action: _PyAST_Try ( b , ex , el , f , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Try ( b , ex , el , f , EXTRA )
                return (SSTNode)cache.putResult(pos, TRY_STMT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, TRY_STMT_ID, null);
    }

    // except_block:
    //     | 'except' expression ['as' NAME] ':' block
    //     | 'except' ':' block
    //     | invalid_except_block
    // TODO replacing excepthandler_ty --> SSTNode
    public SSTNode except_block_rule() {
    // isLoop: False, isGather: False, type: excepthandler_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: except_block, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, EXCEPT_BLOCK_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, EXCEPT_BLOCK_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_ExceptHandler ( e , ( t ) ? ( ( expr_ty ) t ) -> v . Name . id : NULL , b , EXTRA )
        {
            // visiting Alt: 'except' expression ['as' NAME] ':' block
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('except')
                // generated call: (_keyword = expect(KEYWORD_EXCEPT)) != null  // token='except'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode e
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' NAME])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' NAME)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_58_var = _tmp_58_rule()) != null  // 'as' NAME
                // generated call: ((_opt_var = _tmp_58_rule()) != null || _opt_var == null)  // ['as' NAME]
            // collecting vars: None t
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // name = block
                // generated call: (block_var = block_rule()) != null  // block
            // collecting vars: SSTNode[] b
            //    vars: {'_keyword': 'Token', 'e': 'SSTNode', 't': None, '_literal': 'Token', 'b': 'SSTNode[]'}
            Token _keyword;
            Token _literal;
            SSTNode[] b;
            SSTNode e;
            Object t;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'except'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('except')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('except')
                // REMOVE result call (_keyword = expect(KEYWORD_EXCEPT)) != null  // token='except'
                (_keyword = expect(KEYWORD_EXCEPT)) != null  // token='except'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (e = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ['as' NAME]
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(['as' NAME])
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' NAME])
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' NAME)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_58_var = _tmp_58_rule()) != null  // 'as' NAME
                // REMOVE result call ((_opt_var = _tmp_58_rule()) != null || _opt_var == null)  // ['as' NAME]
                ((t = _tmp_58_rule()) != null || t == null)  // ['as' NAME]
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
                // name = block
                // REMOVE result call (block_var = block_rule()) != null  // block
                (b = block_rule()) != null  // block
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("except_block[" + pos + ", " + mark() +" ](level: " + level + ") 'except' expression ['as' NAME] ':' block succeeded!");
                }
                // alt action: _PyAST_ExceptHandler ( e , ( t ) ? ( ( expr_ty ) t ) -> v . Name . id : NULL , b , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_ExceptHandler ( e , ( t ) ? ( ( expr_ty ) t ) -> v . Name . id : NULL , b , EXTRA )
                return (SSTNode)cache.putResult(pos, EXCEPT_BLOCK_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_ExceptHandler ( NULL , NULL , b , EXTRA )
        {
            // visiting Alt: 'except' ':' block
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('except')
                // generated call: (_keyword = expect(KEYWORD_EXCEPT)) != null  // token='except'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // name = block
                // generated call: (block_var = block_rule()) != null  // block
            // collecting vars: SSTNode[] b
            //    vars: {'_keyword': 'Token', '_literal': 'Token', 'b': 'SSTNode[]'}
            Token _keyword;
            Token _literal;
            SSTNode[] b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'except'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('except')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('except')
                // REMOVE result call (_keyword = expect(KEYWORD_EXCEPT)) != null  // token='except'
                (_keyword = expect(KEYWORD_EXCEPT)) != null  // token='except'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
                // name = block
                // REMOVE result call (block_var = block_rule()) != null  // block
                (b = block_rule()) != null  // block
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("except_block[" + pos + ", " + mark() +" ](level: " + level + ") 'except' ':' block succeeded!");
                }
                // alt action: _PyAST_ExceptHandler ( NULL , NULL , b , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_ExceptHandler ( NULL , NULL , b , EXTRA )
                return (SSTNode)cache.putResult(pos, EXCEPT_BLOCK_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: invalid_except_block
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_except_block) - should work
            // name = invalid_except_block
                // generated call: (invalid_except_block_var = invalid_except_block_rule()) != null  // invalid_except_block
            // collecting vars: None invalid_except_block_var
            //    vars: {'invalid_except_block_var': None}
            Object invalid_except_block_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: invalid_except_block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_except_block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_except_block) - should work
                // name = invalid_except_block
                // REMOVE result call (invalid_except_block_var = invalid_except_block_rule()) != null  // invalid_except_block
                (invalid_except_block_var = invalid_except_block_rule()) != null  // invalid_except_block
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("except_block[" + pos + ", " + mark() +" ](level: " + level + ") invalid_except_block succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['invalid_except_block_var']
                result = invalid_except_block_var;
                return (SSTNode)cache.putResult(pos, EXCEPT_BLOCK_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, EXCEPT_BLOCK_ID, null);
    }

    // finally_block: 'finally' ':' block
    // TODO replacing SSTNode* --> SSTNode[]
    public SSTNode[] finally_block_rule() {
    // isLoop: False, isGather: False, type: SSTNode*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: finally_block, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, FINALLY_BLOCK_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, FINALLY_BLOCK_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: a
        {
            // visiting Alt: 'finally' ':' block
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('finally')
                // generated call: (_keyword = expect(KEYWORD_FINALLY)) != null  // token='finally'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // name = block
                // generated call: (block_var = block_rule()) != null  // block
            // collecting vars: SSTNode[] a
            //    vars: {'_keyword': 'Token', '_literal': 'Token', 'a': 'SSTNode[]'}
            Token _keyword;
            Token _literal;
            SSTNode[] a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'finally'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('finally')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('finally')
                // REMOVE result call (_keyword = expect(KEYWORD_FINALLY)) != null  // token='finally'
                (_keyword = expect(KEYWORD_FINALLY)) != null  // token='finally'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
                // name = block
                // REMOVE result call (block_var = block_rule()) != null  // block
                (a = block_rule()) != null  // block
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("finally_block[" + pos + ", " + mark() +" ](level: " + level + ") 'finally' ':' block succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode[])cache.putResult(pos, FINALLY_BLOCK_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, FINALLY_BLOCK_ID, null);
    }

    // match_stmt:
    //     | "match" subject_expr ':' NEWLINE INDENT case_block+ DEDENT
    //     | invalid_match_stmt
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode match_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: match_stmt, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, MATCH_STMT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, MATCH_STMT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: CHECK_VERSION ( stmt_ty , 10 , "Pattern matching is" , _PyAST_Match ( subject , cases , EXTRA ) )
        {
            // visiting Alt: "match" subject_expr ':' NEWLINE INDENT case_block+ DEDENT
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf("match")
                // generated call: (_keyword = expect("match")) != null  // soft_keyword='"match"'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(subject_expr) - should work
            // name = subject_expr
                // generated call: (subject_expr_var = subject_expr_rule()) != null  // subject_expr
            // collecting vars: SSTNode subject
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // name = NEWLINE
                // generated call: (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            // collecting vars: Token newline_var
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(INDENT) - should work
            // name = INDENT
                // generated call: (indent_var = expect(Token.Kind.INDENT)) != null  // token='INDENT'
            // collecting vars: Token indent_var
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(case_block+)
                // generated call: (_loop1_59_var = _loop1_59_rule()) != null  // case_block+
            // collecting vars: asdl_match_case_seq* cases
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(DEDENT) - should work
            // name = DEDENT
                // generated call: (dedent_var = expect(Token.Kind.DEDENT)) != null  // token='DEDENT'
            // collecting vars: Token dedent_var
            //    vars: {'_keyword': 'Token', 'subject': 'SSTNode', '_literal': 'Token', 'newline_var': 'Token', 'indent_var': 'Token', 'cases': 'asdl_match_case_seq*', 'dedent_var': 'Token'}
            Token _keyword;
            Token _literal;
            // TODO replacing asdl_match_case_seq* --> SSTNode[]
            SSTNode[] cases;
            Token dedent_var;
            Token indent_var;
            Token newline_var;
            SSTNode subject;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: "match"
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem("match")
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf("match")
                // REMOVE result call (_keyword = expect("match")) != null  // soft_keyword='"match"'
                (_keyword = expect("match")) != null  // soft_keyword='"match"'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: subject_expr
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(subject_expr)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(subject_expr) - should work
                // name = subject_expr
                // REMOVE result call (subject_expr_var = subject_expr_rule()) != null  // subject_expr
                (subject = subject_expr_rule()) != null  // subject_expr
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NEWLINE
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
                // name = NEWLINE
                // REMOVE result call (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
                (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: INDENT
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(INDENT)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(INDENT) - should work
                // name = INDENT
                // REMOVE result call (indent_var = expect(Token.Kind.INDENT)) != null  // token='INDENT'
                (indent_var = expect(Token.Kind.INDENT)) != null  // token='INDENT'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: case_block+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(case_block+)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat1(case_block+)
                // REMOVE result call (_loop1_59_var = _loop1_59_rule()) != null  // case_block+
                (cases = (SSTNode[])_loop1_59_rule()) != null  // case_block+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: DEDENT
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(DEDENT)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(DEDENT) - should work
                // name = DEDENT
                // REMOVE result call (dedent_var = expect(Token.Kind.DEDENT)) != null  // token='DEDENT'
                (dedent_var = expect(Token.Kind.DEDENT)) != null  // token='DEDENT'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("match_stmt[" + pos + ", " + mark() +" ](level: " + level + ") \"match\" subject_expr ':' NEWLINE INDENT case_block+ DEDENT succeeded!");
                }
                // alt action: CHECK_VERSION ( stmt_ty , 10 , "Pattern matching is" , _PyAST_Match ( subject , cases , EXTRA ) )
                Token endToken = getToken(mark());
                // node.action: CHECK_VERSION ( stmt_ty , 10 , "Pattern matching is" , _PyAST_Match ( subject , cases , EXTRA ) )
                return (SSTNode)cache.putResult(pos, MATCH_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: invalid_match_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_match_stmt) - should work
            // name = invalid_match_stmt
                // generated call: (invalid_match_stmt_var = invalid_match_stmt_rule()) != null  // invalid_match_stmt
            // collecting vars: None invalid_match_stmt_var
            //    vars: {'invalid_match_stmt_var': None}
            Object invalid_match_stmt_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: invalid_match_stmt
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_match_stmt)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_match_stmt) - should work
                // name = invalid_match_stmt
                // REMOVE result call (invalid_match_stmt_var = invalid_match_stmt_rule()) != null  // invalid_match_stmt
                (invalid_match_stmt_var = invalid_match_stmt_rule()) != null  // invalid_match_stmt
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("match_stmt[" + pos + ", " + mark() +" ](level: " + level + ") invalid_match_stmt succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['invalid_match_stmt_var']
                result = invalid_match_stmt_var;
                return (SSTNode)cache.putResult(pos, MATCH_STMT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, MATCH_STMT_ID, null);
    }

    // subject_expr: star_named_expression ',' star_named_expressions? | named_expression
    public SSTNode subject_expr_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: subject_expr, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, SUBJECT_EXPR_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, SUBJECT_EXPR_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Tuple ( CHECK ( asdl_expr_seq * , _PyPegen_seq_insert_in_front ( p , value , values ) ) , Load , EXTRA )
        {
            // visiting Alt: star_named_expression ',' star_named_expressions?
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
            // name = star_named_expression
                // generated call: (star_named_expression_var = star_named_expression_rule()) != null  // star_named_expression
            // collecting vars: SSTNode value
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_named_expressions?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
            // name = star_named_expressions
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // JavaCallMakerVisitor.visit_Opt.generated call: (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
                // generated call: ((_opt_var = star_named_expressions_rule()) != null || _opt_var == null)  // star_named_expressions?
            // collecting vars: None values
            //    vars: {'value': 'SSTNode', '_literal': 'Token', 'values': None}
            Token _literal;
            SSTNode value;
            Object values;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_named_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_named_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
                // name = star_named_expression
                // REMOVE result call (star_named_expression_var = star_named_expression_rule()) != null  // star_named_expression
                (value = star_named_expression_rule()) != null  // star_named_expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: star_named_expressions?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_named_expressions?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_named_expressions?)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
                // name = star_named_expressions
                // TODO replacing asdl_expr_seq[] --> SSTNode[]
                    // JavaCallMakerVisitor.visit_Opt.generated call: (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
                // REMOVE result call ((_opt_var = star_named_expressions_rule()) != null || _opt_var == null)  // star_named_expressions?
                ((values = star_named_expressions_rule()) != null || values == null)  // star_named_expressions?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("subject_expr[" + pos + ", " + mark() +" ](level: " + level + ") star_named_expression ',' star_named_expressions? succeeded!");
                }
                // alt action: _PyAST_Tuple ( CHECK ( asdl_expr_seq * , _PyPegen_seq_insert_in_front ( p , value , values ) ) , Load , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Tuple ( CHECK ( asdl_expr_seq * , _PyPegen_seq_insert_in_front ( p , value , values ) ) , Load , EXTRA )
                return (SSTNode)cache.putResult(pos, SUBJECT_EXPR_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: named_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // name = named_expression
                // generated call: (named_expression_var = named_expression_rule()) != null  // named_expression
            // collecting vars: SSTNode named_expression_var
            //    vars: {'named_expression_var': 'SSTNode'}
            SSTNode named_expression_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: named_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(named_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
                // name = named_expression
                // REMOVE result call (named_expression_var = named_expression_rule()) != null  // named_expression
                (named_expression_var = named_expression_rule()) != null  // named_expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("subject_expr[" + pos + ", " + mark() +" ](level: " + level + ") named_expression succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['named_expression_var']
                result = named_expression_var;
                return (SSTNode)cache.putResult(pos, SUBJECT_EXPR_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, SUBJECT_EXPR_ID, null);
    }

    // case_block: "case" patterns guard? ':' block | invalid_case_block
    // TODO replacing match_case_ty --> SSTNode
    public SSTNode case_block_rule() {
    // isLoop: False, isGather: False, type: match_case_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: case_block, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, CASE_BLOCK_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, CASE_BLOCK_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_match_case ( pattern , guard , body , p -> arena )
        {
            // visiting Alt: "case" patterns guard? ':' block
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf("case")
                // generated call: (_keyword = expect("case")) != null  // soft_keyword='"case"'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(patterns) - should work
            // name = patterns
                // generated call: (patterns_var = patterns_rule()) != null  // patterns
            // collecting vars: SSTNode pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(guard?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(guard) - should work
            // name = guard
                // JavaCallMakerVisitor.visit_Opt.generated call: (guard_var = guard_rule()) != null  // guard
                // generated call: ((_opt_var = guard_rule()) != null || _opt_var == null)  // guard?
            // collecting vars: None guard
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // name = block
                // generated call: (block_var = block_rule()) != null  // block
            // collecting vars: SSTNode[] body
            //    vars: {'_keyword': 'Token', 'pattern': 'SSTNode', 'guard': None, '_literal': 'Token', 'body': 'SSTNode[]'}
            Token _keyword;
            Token _literal;
            SSTNode[] body;
            Object guard;
            SSTNode pattern;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: "case"
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem("case")
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf("case")
                // REMOVE result call (_keyword = expect("case")) != null  // soft_keyword='"case"'
                (_keyword = expect("case")) != null  // soft_keyword='"case"'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: patterns
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(patterns)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(patterns) - should work
                // name = patterns
                // REMOVE result call (patterns_var = patterns_rule()) != null  // patterns
                (pattern = patterns_rule()) != null  // patterns
                &&
                // TODO visiting JavaParserGeneratorNamedItem: guard?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(guard?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(guard?)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(guard) - should work
                // name = guard
                    // JavaCallMakerVisitor.visit_Opt.generated call: (guard_var = guard_rule()) != null  // guard
                // REMOVE result call ((_opt_var = guard_rule()) != null || _opt_var == null)  // guard?
                ((guard = guard_rule()) != null || guard == null)  // guard?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
                // name = block
                // REMOVE result call (block_var = block_rule()) != null  // block
                (body = block_rule()) != null  // block
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("case_block[" + pos + ", " + mark() +" ](level: " + level + ") \"case\" patterns guard? ':' block succeeded!");
                }
                // alt action: _PyAST_match_case ( pattern , guard , body , p -> arena )
                Token endToken = getToken(mark());
                // node.action: _PyAST_match_case ( pattern , guard , body , p -> arena )
                return (SSTNode)cache.putResult(pos, CASE_BLOCK_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: invalid_case_block
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_case_block) - should work
            // name = invalid_case_block
                // generated call: (invalid_case_block_var = invalid_case_block_rule()) != null  // invalid_case_block
            // collecting vars: None invalid_case_block_var
            //    vars: {'invalid_case_block_var': None}
            Object invalid_case_block_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: invalid_case_block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_case_block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_case_block) - should work
                // name = invalid_case_block
                // REMOVE result call (invalid_case_block_var = invalid_case_block_rule()) != null  // invalid_case_block
                (invalid_case_block_var = invalid_case_block_rule()) != null  // invalid_case_block
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("case_block[" + pos + ", " + mark() +" ](level: " + level + ") invalid_case_block succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['invalid_case_block_var']
                result = invalid_case_block_var;
                return (SSTNode)cache.putResult(pos, CASE_BLOCK_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, CASE_BLOCK_ID, null);
    }

    // guard: 'if' named_expression
    public SSTNode guard_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: guard, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, GUARD_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, GUARD_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: guard
        {
            // visiting Alt: 'if' named_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
                // generated call: (_keyword = expect(KEYWORD_IF)) != null  // token='if'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // name = named_expression
                // generated call: (named_expression_var = named_expression_rule()) != null  // named_expression
            // collecting vars: SSTNode guard
            //    vars: {'_keyword': 'Token', 'guard': 'SSTNode'}
            Token _keyword;
            SSTNode guard;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'if'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('if')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
                // REMOVE result call (_keyword = expect(KEYWORD_IF)) != null  // token='if'
                (_keyword = expect(KEYWORD_IF)) != null  // token='if'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: named_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(named_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
                // name = named_expression
                // REMOVE result call (named_expression_var = named_expression_rule()) != null  // named_expression
                (guard = named_expression_rule()) != null  // named_expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("guard[" + pos + ", " + mark() +" ](level: " + level + ") 'if' named_expression succeeded!");
                }
                // alt action: guard
                Token endToken = getToken(mark());
                // node.action: guard
                return (SSTNode)cache.putResult(pos, GUARD_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, GUARD_ID, null);
    }

    // patterns: open_sequence_pattern | pattern
    public SSTNode patterns_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: patterns, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, PATTERNS_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, PATTERNS_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Tuple ( values , Load , EXTRA )
        {
            // visiting Alt: open_sequence_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(open_sequence_pattern) - should work
            // name = open_sequence_pattern
            // TODO replacing asdl_seq[] --> SSTNode[]
                // generated call: (open_sequence_pattern_var = open_sequence_pattern_rule()) != null  // open_sequence_pattern
            // collecting vars: asdl_expr_seq* values
            //    vars: {'values': 'asdl_expr_seq*'}
            // TODO replacing asdl_expr_seq* --> SSTNode[]
            SSTNode[] values;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: open_sequence_pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(open_sequence_pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(open_sequence_pattern) - should work
                // name = open_sequence_pattern
                // TODO replacing asdl_seq[] --> SSTNode[]
                // REMOVE result call (open_sequence_pattern_var = open_sequence_pattern_rule()) != null  // open_sequence_pattern
                (values = (SSTNode[])open_sequence_pattern_rule()) != null  // open_sequence_pattern
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("patterns[" + pos + ", " + mark() +" ](level: " + level + ") open_sequence_pattern succeeded!");
                }
                // alt action: _PyAST_Tuple ( values , Load , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Tuple ( values , Load , EXTRA )
                return (SSTNode)cache.putResult(pos, PATTERNS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
            // name = pattern
                // generated call: (pattern_var = pattern_rule()) != null  // pattern
            // collecting vars: SSTNode pattern_var
            //    vars: {'pattern_var': 'SSTNode'}
            SSTNode pattern_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
                // name = pattern
                // REMOVE result call (pattern_var = pattern_rule()) != null  // pattern
                (pattern_var = pattern_rule()) != null  // pattern
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("patterns[" + pos + ", " + mark() +" ](level: " + level + ") pattern succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['pattern_var']
                result = pattern_var;
                return (SSTNode)cache.putResult(pos, PATTERNS_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, PATTERNS_ID, null);
    }

    // pattern: as_pattern | or_pattern
    public SSTNode pattern_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: pattern, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, PATTERN_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, PATTERN_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: as_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(as_pattern) - should work
            // name = as_pattern
                // generated call: (as_pattern_var = as_pattern_rule()) != null  // as_pattern
            // collecting vars: SSTNode as_pattern_var
            //    vars: {'as_pattern_var': 'SSTNode'}
            SSTNode as_pattern_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: as_pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(as_pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(as_pattern) - should work
                // name = as_pattern
                // REMOVE result call (as_pattern_var = as_pattern_rule()) != null  // as_pattern
                (as_pattern_var = as_pattern_rule()) != null  // as_pattern
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("pattern[" + pos + ", " + mark() +" ](level: " + level + ") as_pattern succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['as_pattern_var']
                result = as_pattern_var;
                return (SSTNode)cache.putResult(pos, PATTERN_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: or_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(or_pattern) - should work
            // name = or_pattern
                // generated call: (or_pattern_var = or_pattern_rule()) != null  // or_pattern
            // collecting vars: SSTNode or_pattern_var
            //    vars: {'or_pattern_var': 'SSTNode'}
            SSTNode or_pattern_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: or_pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(or_pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(or_pattern) - should work
                // name = or_pattern
                // REMOVE result call (or_pattern_var = or_pattern_rule()) != null  // or_pattern
                (or_pattern_var = or_pattern_rule()) != null  // or_pattern
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("pattern[" + pos + ", " + mark() +" ](level: " + level + ") or_pattern succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['or_pattern_var']
                result = or_pattern_var;
                return (SSTNode)cache.putResult(pos, PATTERN_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, PATTERN_ID, null);
    }

    // as_pattern: or_pattern 'as' capture_pattern
    public SSTNode as_pattern_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: as_pattern, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, AS_PATTERN_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, AS_PATTERN_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_MatchAs ( pattern , target -> v . Name . id , EXTRA )
        {
            // visiting Alt: or_pattern 'as' capture_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(or_pattern) - should work
            // name = or_pattern
                // generated call: (or_pattern_var = or_pattern_rule()) != null  // or_pattern
            // collecting vars: SSTNode pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
                // generated call: (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(capture_pattern) - should work
            // name = capture_pattern
                // generated call: (capture_pattern_var = capture_pattern_rule()) != null  // capture_pattern
            // collecting vars: SSTNode target
            //    vars: {'pattern': 'SSTNode', '_keyword': 'Token', 'target': 'SSTNode'}
            Token _keyword;
            SSTNode pattern;
            SSTNode target;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: or_pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(or_pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(or_pattern) - should work
                // name = or_pattern
                // REMOVE result call (or_pattern_var = or_pattern_rule()) != null  // or_pattern
                (pattern = or_pattern_rule()) != null  // or_pattern
                &&
                // TODO visiting JavaParserGeneratorNamedItem: 'as'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('as')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
                // REMOVE result call (_keyword = expect(KEYWORD_AS)) != null  // token='as'
                (_keyword = expect(KEYWORD_AS)) != null  // token='as'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: capture_pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(capture_pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(capture_pattern) - should work
                // name = capture_pattern
                // REMOVE result call (capture_pattern_var = capture_pattern_rule()) != null  // capture_pattern
                (target = capture_pattern_rule()) != null  // capture_pattern
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("as_pattern[" + pos + ", " + mark() +" ](level: " + level + ") or_pattern 'as' capture_pattern succeeded!");
                }
                // alt action: _PyAST_MatchAs ( pattern , target -> v . Name . id , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_MatchAs ( pattern , target -> v . Name . id , EXTRA )
                return (SSTNode)cache.putResult(pos, AS_PATTERN_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, AS_PATTERN_ID, null);
    }

    // or_pattern: '|'.closed_pattern+
    public SSTNode or_pattern_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: or_pattern, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, OR_PATTERN_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, OR_PATTERN_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: asdl_seq_LEN ( patterns ) == 1 ? asdl_seq_GET ( patterns , 0 ) : _PyAST_MatchOr ( patterns , EXTRA )
        {
            // visiting Alt: '|'.closed_pattern+
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather('|'.closed_pattern+)
                // generated call: (_gather_60_var = _gather_60_rule()) != null  // '|'.closed_pattern+
            // collecting vars: asdl_expr_seq* patterns
            //    vars: {'patterns': 'asdl_expr_seq*'}
            // TODO replacing asdl_expr_seq* --> SSTNode[]
            SSTNode[] patterns;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '|'.closed_pattern+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('|'.closed_pattern+)
                // REMOVE visiting JavaCallMakerVisitor.visit_Gather('|'.closed_pattern+)
                // REMOVE result call (_gather_60_var = _gather_60_rule()) != null  // '|'.closed_pattern+
                (patterns = (SSTNode[])_gather_60_rule()) != null  // '|'.closed_pattern+
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("or_pattern[" + pos + ", " + mark() +" ](level: " + level + ") '|'.closed_pattern+ succeeded!");
                }
                // alt action: asdl_seq_LEN ( patterns ) == 1 ? asdl_seq_GET ( patterns , 0 ) : _PyAST_MatchOr ( patterns , EXTRA )
                Token endToken = getToken(mark());
                // node.action: asdl_seq_LEN ( patterns ) == 1 ? asdl_seq_GET ( patterns , 0 ) : _PyAST_MatchOr ( patterns , EXTRA )
                return (SSTNode)cache.putResult(pos, OR_PATTERN_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, OR_PATTERN_ID, null);
    }

    // closed_pattern:
    //     | literal_pattern
    //     | capture_pattern
    //     | wildcard_pattern
    //     | value_pattern
    //     | group_pattern
    //     | sequence_pattern
    //     | mapping_pattern
    //     | class_pattern
    public SSTNode closed_pattern_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: closed_pattern, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, CLOSED_PATTERN_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, CLOSED_PATTERN_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: literal_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(literal_pattern) - should work
            // name = literal_pattern
                // generated call: (literal_pattern_var = literal_pattern_rule()) != null  // literal_pattern
            // collecting vars: SSTNode literal_pattern_var
            //    vars: {'literal_pattern_var': 'SSTNode'}
            SSTNode literal_pattern_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: literal_pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(literal_pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(literal_pattern) - should work
                // name = literal_pattern
                // REMOVE result call (literal_pattern_var = literal_pattern_rule()) != null  // literal_pattern
                (literal_pattern_var = literal_pattern_rule()) != null  // literal_pattern
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("closed_pattern[" + pos + ", " + mark() +" ](level: " + level + ") literal_pattern succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['literal_pattern_var']
                result = literal_pattern_var;
                return (SSTNode)cache.putResult(pos, CLOSED_PATTERN_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: capture_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(capture_pattern) - should work
            // name = capture_pattern
                // generated call: (capture_pattern_var = capture_pattern_rule()) != null  // capture_pattern
            // collecting vars: SSTNode capture_pattern_var
            //    vars: {'capture_pattern_var': 'SSTNode'}
            SSTNode capture_pattern_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: capture_pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(capture_pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(capture_pattern) - should work
                // name = capture_pattern
                // REMOVE result call (capture_pattern_var = capture_pattern_rule()) != null  // capture_pattern
                (capture_pattern_var = capture_pattern_rule()) != null  // capture_pattern
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("closed_pattern[" + pos + ", " + mark() +" ](level: " + level + ") capture_pattern succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['capture_pattern_var']
                result = capture_pattern_var;
                return (SSTNode)cache.putResult(pos, CLOSED_PATTERN_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: wildcard_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(wildcard_pattern) - should work
            // name = wildcard_pattern
                // generated call: (wildcard_pattern_var = wildcard_pattern_rule()) != null  // wildcard_pattern
            // collecting vars: SSTNode wildcard_pattern_var
            //    vars: {'wildcard_pattern_var': 'SSTNode'}
            SSTNode wildcard_pattern_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: wildcard_pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(wildcard_pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(wildcard_pattern) - should work
                // name = wildcard_pattern
                // REMOVE result call (wildcard_pattern_var = wildcard_pattern_rule()) != null  // wildcard_pattern
                (wildcard_pattern_var = wildcard_pattern_rule()) != null  // wildcard_pattern
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("closed_pattern[" + pos + ", " + mark() +" ](level: " + level + ") wildcard_pattern succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['wildcard_pattern_var']
                result = wildcard_pattern_var;
                return (SSTNode)cache.putResult(pos, CLOSED_PATTERN_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: value_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(value_pattern) - should work
            // name = value_pattern
                // generated call: (value_pattern_var = value_pattern_rule()) != null  // value_pattern
            // collecting vars: SSTNode value_pattern_var
            //    vars: {'value_pattern_var': 'SSTNode'}
            SSTNode value_pattern_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: value_pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(value_pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(value_pattern) - should work
                // name = value_pattern
                // REMOVE result call (value_pattern_var = value_pattern_rule()) != null  // value_pattern
                (value_pattern_var = value_pattern_rule()) != null  // value_pattern
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("closed_pattern[" + pos + ", " + mark() +" ](level: " + level + ") value_pattern succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['value_pattern_var']
                result = value_pattern_var;
                return (SSTNode)cache.putResult(pos, CLOSED_PATTERN_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: group_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(group_pattern) - should work
            // name = group_pattern
                // generated call: (group_pattern_var = group_pattern_rule()) != null  // group_pattern
            // collecting vars: SSTNode group_pattern_var
            //    vars: {'group_pattern_var': 'SSTNode'}
            SSTNode group_pattern_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: group_pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(group_pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(group_pattern) - should work
                // name = group_pattern
                // REMOVE result call (group_pattern_var = group_pattern_rule()) != null  // group_pattern
                (group_pattern_var = group_pattern_rule()) != null  // group_pattern
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("closed_pattern[" + pos + ", " + mark() +" ](level: " + level + ") group_pattern succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['group_pattern_var']
                result = group_pattern_var;
                return (SSTNode)cache.putResult(pos, CLOSED_PATTERN_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: sequence_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sequence_pattern) - should work
            // name = sequence_pattern
                // generated call: (sequence_pattern_var = sequence_pattern_rule()) != null  // sequence_pattern
            // collecting vars: SSTNode sequence_pattern_var
            //    vars: {'sequence_pattern_var': 'SSTNode'}
            SSTNode sequence_pattern_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: sequence_pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(sequence_pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sequence_pattern) - should work
                // name = sequence_pattern
                // REMOVE result call (sequence_pattern_var = sequence_pattern_rule()) != null  // sequence_pattern
                (sequence_pattern_var = sequence_pattern_rule()) != null  // sequence_pattern
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("closed_pattern[" + pos + ", " + mark() +" ](level: " + level + ") sequence_pattern succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['sequence_pattern_var']
                result = sequence_pattern_var;
                return (SSTNode)cache.putResult(pos, CLOSED_PATTERN_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: mapping_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(mapping_pattern) - should work
            // name = mapping_pattern
                // generated call: (mapping_pattern_var = mapping_pattern_rule()) != null  // mapping_pattern
            // collecting vars: SSTNode mapping_pattern_var
            //    vars: {'mapping_pattern_var': 'SSTNode'}
            SSTNode mapping_pattern_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: mapping_pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(mapping_pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(mapping_pattern) - should work
                // name = mapping_pattern
                // REMOVE result call (mapping_pattern_var = mapping_pattern_rule()) != null  // mapping_pattern
                (mapping_pattern_var = mapping_pattern_rule()) != null  // mapping_pattern
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("closed_pattern[" + pos + ", " + mark() +" ](level: " + level + ") mapping_pattern succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['mapping_pattern_var']
                result = mapping_pattern_var;
                return (SSTNode)cache.putResult(pos, CLOSED_PATTERN_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: class_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(class_pattern) - should work
            // name = class_pattern
                // generated call: (class_pattern_var = class_pattern_rule()) != null  // class_pattern
            // collecting vars: SSTNode class_pattern_var
            //    vars: {'class_pattern_var': 'SSTNode'}
            SSTNode class_pattern_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: class_pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(class_pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(class_pattern) - should work
                // name = class_pattern
                // REMOVE result call (class_pattern_var = class_pattern_rule()) != null  // class_pattern
                (class_pattern_var = class_pattern_rule()) != null  // class_pattern
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("closed_pattern[" + pos + ", " + mark() +" ](level: " + level + ") class_pattern succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['class_pattern_var']
                result = class_pattern_var;
                return (SSTNode)cache.putResult(pos, CLOSED_PATTERN_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, CLOSED_PATTERN_ID, null);
    }

    // literal_pattern:
    //     | signed_number !('+' | '-')
    //     | signed_number '+' NUMBER
    //     | signed_number '-' NUMBER
    //     | strings
    //     | 'None'
    //     | 'True'
    //     | 'False'
    public SSTNode literal_pattern_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: literal_pattern, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, LITERAL_PATTERN_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, LITERAL_PATTERN_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: None
        {
            // visiting Alt: signed_number !('+' | '-')
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(signed_number) - should work
            // name = signed_number
                // generated call: (signed_number_var = signed_number_rule()) != null  // signed_number
            // collecting vars: SSTNode signed_number_var
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!('+' | '-'))
            // TODO visiting JavaCallMakerVisitor.visit_Group(('+' | '-'))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('+' | '-')
            // lookahead_call_helper call: (_tmp_62_var = _tmp_62_rule()) != null  // '+' | '-'
            //    call.nodetype: None
                // generated call: lookahed_tmp_62_rule(false)
            // collecting vars: boolean None
            //    vars: {'signed_number_var': 'SSTNode', None: 'boolean'}
            SSTNode signed_number_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: signed_number
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(signed_number)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(signed_number) - should work
                // name = signed_number
                // REMOVE result call (signed_number_var = signed_number_rule()) != null  // signed_number
                (signed_number_var = signed_number_rule()) != null  // signed_number
                &&
                // TODO visiting JavaParserGeneratorNamedItem: !('+' | '-')
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!('+' | '-'))
                // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!('+' | '-'))
                // TODO visiting JavaCallMakerVisitor.visit_Group(('+' | '-'))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('+' | '-')
                // lookahead_call_helper call: (_tmp_62_var = _tmp_62_rule()) != null  // '+' | '-'
                //    call.nodetype: None
                // REMOVE result call lookahed_tmp_62_rule(false)
                lookahed_tmp_62_rule(false)
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("literal_pattern[" + pos + ", " + mark() +" ](level: " + level + ") signed_number !('+' | '-') succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['signed_number_var']
                result = signed_number_var;
                return (SSTNode)cache.putResult(pos, LITERAL_PATTERN_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_BinOp ( real , Add , imag , EXTRA )
        {
            // visiting Alt: signed_number '+' NUMBER
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(signed_number) - should work
            // name = signed_number
                // generated call: (signed_number_var = signed_number_rule()) != null  // signed_number
            // collecting vars: SSTNode real
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('+')
                // generated call: (_literal = expect(Token.Kind.PLUS)) != null  // token='+'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NUMBER) - should work
            // name = NUMBER
                // generated call: (number_var = expect(Token.Kind.NUMBER)) != null  // NUMBER
            // collecting vars: Token imag
            //    vars: {'real': 'SSTNode', '_literal': 'Token', 'imag': 'Token'}
            Token _literal;
            Token imag;
            SSTNode real;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: signed_number
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(signed_number)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(signed_number) - should work
                // name = signed_number
                // REMOVE result call (signed_number_var = signed_number_rule()) != null  // signed_number
                (real = signed_number_rule()) != null  // signed_number
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '+'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('+')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('+')
                // REMOVE result call (_literal = expect(Token.Kind.PLUS)) != null  // token='+'
                (_literal = expect(Token.Kind.PLUS)) != null  // token='+'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NUMBER
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NUMBER)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NUMBER) - should work
                // name = NUMBER
                // REMOVE result call (number_var = expect(Token.Kind.NUMBER)) != null  // NUMBER
                (imag = expect(Token.Kind.NUMBER)) != null  // NUMBER
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("literal_pattern[" + pos + ", " + mark() +" ](level: " + level + ") signed_number '+' NUMBER succeeded!");
                }
                // alt action: _PyAST_BinOp ( real , Add , imag , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_BinOp ( real , Add , imag , EXTRA )
                return (SSTNode)cache.putResult(pos, LITERAL_PATTERN_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_BinOp ( real , Sub , imag , EXTRA )
        {
            // visiting Alt: signed_number '-' NUMBER
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(signed_number) - should work
            // name = signed_number
                // generated call: (signed_number_var = signed_number_rule()) != null  // signed_number
            // collecting vars: SSTNode real
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('-')
                // generated call: (_literal = expect(Token.Kind.MINUS)) != null  // token='-'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NUMBER) - should work
            // name = NUMBER
                // generated call: (number_var = expect(Token.Kind.NUMBER)) != null  // NUMBER
            // collecting vars: Token imag
            //    vars: {'real': 'SSTNode', '_literal': 'Token', 'imag': 'Token'}
            Token _literal;
            Token imag;
            SSTNode real;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: signed_number
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(signed_number)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(signed_number) - should work
                // name = signed_number
                // REMOVE result call (signed_number_var = signed_number_rule()) != null  // signed_number
                (real = signed_number_rule()) != null  // signed_number
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '-'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('-')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('-')
                // REMOVE result call (_literal = expect(Token.Kind.MINUS)) != null  // token='-'
                (_literal = expect(Token.Kind.MINUS)) != null  // token='-'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NUMBER
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NUMBER)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NUMBER) - should work
                // name = NUMBER
                // REMOVE result call (number_var = expect(Token.Kind.NUMBER)) != null  // NUMBER
                (imag = expect(Token.Kind.NUMBER)) != null  // NUMBER
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("literal_pattern[" + pos + ", " + mark() +" ](level: " + level + ") signed_number '-' NUMBER succeeded!");
                }
                // alt action: _PyAST_BinOp ( real , Sub , imag , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_BinOp ( real , Sub , imag , EXTRA )
                return (SSTNode)cache.putResult(pos, LITERAL_PATTERN_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: strings
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(strings) - should work
            // name = strings
                // generated call: (strings_var = strings_rule()) != null  // strings
            // collecting vars: SSTNode strings_var
            //    vars: {'strings_var': 'SSTNode'}
            SSTNode strings_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: strings
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(strings)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(strings) - should work
                // name = strings
                // REMOVE result call (strings_var = strings_rule()) != null  // strings
                (strings_var = strings_rule()) != null  // strings
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("literal_pattern[" + pos + ", " + mark() +" ](level: " + level + ") strings succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['strings_var']
                result = strings_var;
                return (SSTNode)cache.putResult(pos, LITERAL_PATTERN_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Constant ( Py_None , NULL , EXTRA )
        {
            // visiting Alt: 'None'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('None')
                // generated call: (_keyword = expect(KEYWORD_NONE)) != null  // token='None'
            // collecting vars: Token _keyword
            //    vars: {'_keyword': 'Token'}
            Token _keyword;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'None'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('None')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('None')
                // REMOVE result call (_keyword = expect(KEYWORD_NONE)) != null  // token='None'
                (_keyword = expect(KEYWORD_NONE)) != null  // token='None'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("literal_pattern[" + pos + ", " + mark() +" ](level: " + level + ") 'None' succeeded!");
                }
                // alt action: _PyAST_Constant ( Py_None , NULL , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Constant ( Py_None , NULL , EXTRA )
                return (SSTNode)cache.putResult(pos, LITERAL_PATTERN_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Constant ( Py_True , NULL , EXTRA )
        {
            // visiting Alt: 'True'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('True')
                // generated call: (_keyword = expect(KEYWORD_TRUE)) != null  // token='True'
            // collecting vars: Token _keyword
            //    vars: {'_keyword': 'Token'}
            Token _keyword;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'True'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('True')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('True')
                // REMOVE result call (_keyword = expect(KEYWORD_TRUE)) != null  // token='True'
                (_keyword = expect(KEYWORD_TRUE)) != null  // token='True'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("literal_pattern[" + pos + ", " + mark() +" ](level: " + level + ") 'True' succeeded!");
                }
                // alt action: _PyAST_Constant ( Py_True , NULL , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Constant ( Py_True , NULL , EXTRA )
                return (SSTNode)cache.putResult(pos, LITERAL_PATTERN_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Constant ( Py_False , NULL , EXTRA )
        {
            // visiting Alt: 'False'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('False')
                // generated call: (_keyword = expect(KEYWORD_FALSE)) != null  // token='False'
            // collecting vars: Token _keyword
            //    vars: {'_keyword': 'Token'}
            Token _keyword;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'False'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('False')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('False')
                // REMOVE result call (_keyword = expect(KEYWORD_FALSE)) != null  // token='False'
                (_keyword = expect(KEYWORD_FALSE)) != null  // token='False'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("literal_pattern[" + pos + ", " + mark() +" ](level: " + level + ") 'False' succeeded!");
                }
                // alt action: _PyAST_Constant ( Py_False , NULL , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Constant ( Py_False , NULL , EXTRA )
                return (SSTNode)cache.putResult(pos, LITERAL_PATTERN_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, LITERAL_PATTERN_ID, null);
    }

    // signed_number: NUMBER | '-' NUMBER
    public SSTNode signed_number_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: signed_number, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, SIGNED_NUMBER_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, SIGNED_NUMBER_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: None
        {
            // visiting Alt: NUMBER
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NUMBER) - should work
            // name = NUMBER
                // generated call: (number_var = expect(Token.Kind.NUMBER)) != null  // NUMBER
            // collecting vars: Token number_var
            //    vars: {'number_var': 'Token'}
            Token number_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: NUMBER
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NUMBER)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NUMBER) - should work
                // name = NUMBER
                // REMOVE result call (number_var = expect(Token.Kind.NUMBER)) != null  // NUMBER
                (number_var = expect(Token.Kind.NUMBER)) != null  // NUMBER
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("signed_number[" + pos + ", " + mark() +" ](level: " + level + ") NUMBER succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['number_var']
                result = number_var;
                return (SSTNode)cache.putResult(pos, SIGNED_NUMBER_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_UnaryOp ( USub , number , EXTRA )
        {
            // visiting Alt: '-' NUMBER
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('-')
                // generated call: (_literal = expect(Token.Kind.MINUS)) != null  // token='-'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NUMBER) - should work
            // name = NUMBER
                // generated call: (number_var = expect(Token.Kind.NUMBER)) != null  // NUMBER
            // collecting vars: Token number
            //    vars: {'_literal': 'Token', 'number': 'Token'}
            Token _literal;
            Token number;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '-'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('-')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('-')
                // REMOVE result call (_literal = expect(Token.Kind.MINUS)) != null  // token='-'
                (_literal = expect(Token.Kind.MINUS)) != null  // token='-'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NUMBER
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NUMBER)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NUMBER) - should work
                // name = NUMBER
                // REMOVE result call (number_var = expect(Token.Kind.NUMBER)) != null  // NUMBER
                (number = expect(Token.Kind.NUMBER)) != null  // NUMBER
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("signed_number[" + pos + ", " + mark() +" ](level: " + level + ") '-' NUMBER succeeded!");
                }
                // alt action: _PyAST_UnaryOp ( USub , number , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_UnaryOp ( USub , number , EXTRA )
                return (SSTNode)cache.putResult(pos, SIGNED_NUMBER_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, SIGNED_NUMBER_ID, null);
    }

    // capture_pattern: !"_" NAME !('.' | '(' | '=')
    public SSTNode capture_pattern_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: capture_pattern, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, CAPTURE_PATTERN_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, CAPTURE_PATTERN_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_set_expr_context ( p , name , Store )
        {
            // visiting Alt: !"_" NAME !('.' | '(' | '=')
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!"_")
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf("_")
            // lookahead_call_helper call: (_keyword = expect("_")) != null  // soft_keyword='"_"'
            //    call.nodetype: SOFT_KEYWORD
                // generated call: lookahead(false, "_")
            // collecting vars: boolean None
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token name
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!('.' | '(' | '='))
            // TODO visiting JavaCallMakerVisitor.visit_Group(('.' | '(' | '='))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('.' | '(' | '=')
            // lookahead_call_helper call: (_tmp_63_var = _tmp_63_rule()) != null  // '.' | '(' | '='
            //    call.nodetype: None
                // generated call: lookahed_tmp_63_rule(false)
            // collecting vars: boolean None
            //    vars: {None: 'boolean', 'name': 'Token'}
            Token name;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: !"_"
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!"_")
                // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!"_")
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf("_")
                // lookahead_call_helper call: (_keyword = expect("_")) != null  // soft_keyword='"_"'
                //    call.nodetype: SOFT_KEYWORD
                // REMOVE result call lookahead(false, "_")
                lookahead(false, "_")
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (name = expect(Token.Kind.NAME)) != null  // NAME
                &&
                // TODO visiting JavaParserGeneratorNamedItem: !('.' | '(' | '=')
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!('.' | '(' | '='))
                // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!('.' | '(' | '='))
                // TODO visiting JavaCallMakerVisitor.visit_Group(('.' | '(' | '='))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('.' | '(' | '=')
                // lookahead_call_helper call: (_tmp_63_var = _tmp_63_rule()) != null  // '.' | '(' | '='
                //    call.nodetype: None
                // REMOVE result call lookahed_tmp_63_rule(false)
                lookahed_tmp_63_rule(false)
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("capture_pattern[" + pos + ", " + mark() +" ](level: " + level + ") !\"_\" NAME !('.' | '(' | '=') succeeded!");
                }
                // alt action: _PyPegen_set_expr_context ( p , name , Store )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_set_expr_context ( p , name , Store )
                return (SSTNode)cache.putResult(pos, CAPTURE_PATTERN_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, CAPTURE_PATTERN_ID, null);
    }

    // wildcard_pattern: "_"
    public SSTNode wildcard_pattern_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: wildcard_pattern, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, WILDCARD_PATTERN_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, WILDCARD_PATTERN_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Name ( CHECK ( PyObject * , _PyPegen_new_identifier ( p , "_" ) ) , Store , EXTRA )
        {
            // visiting Alt: "_"
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf("_")
                // generated call: (_keyword = expect("_")) != null  // soft_keyword='"_"'
            // collecting vars: Token _keyword
            //    vars: {'_keyword': 'Token'}
            Token _keyword;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: "_"
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem("_")
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf("_")
                // REMOVE result call (_keyword = expect("_")) != null  // soft_keyword='"_"'
                (_keyword = expect("_")) != null  // soft_keyword='"_"'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("wildcard_pattern[" + pos + ", " + mark() +" ](level: " + level + ") \"_\" succeeded!");
                }
                // alt action: _PyAST_Name ( CHECK ( PyObject * , _PyPegen_new_identifier ( p , "_" ) ) , Store , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Name ( CHECK ( PyObject * , _PyPegen_new_identifier ( p , "_" ) ) , Store , EXTRA )
                return (SSTNode)cache.putResult(pos, WILDCARD_PATTERN_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, WILDCARD_PATTERN_ID, null);
    }

    // value_pattern: attr !('.' | '(' | '=')
    public SSTNode value_pattern_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: value_pattern, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, VALUE_PATTERN_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, VALUE_PATTERN_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: attr
        {
            // visiting Alt: attr !('.' | '(' | '=')
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(attr) - should work
            // name = attr
                // generated call: (attr_var = attr_rule()) != null  // attr
            // collecting vars: SSTNode attr
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!('.' | '(' | '='))
            // TODO visiting JavaCallMakerVisitor.visit_Group(('.' | '(' | '='))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('.' | '(' | '=')
            // lookahead_call_helper call: (_tmp_64_var = _tmp_64_rule()) != null  // '.' | '(' | '='
            //    call.nodetype: None
                // generated call: lookahed_tmp_64_rule(false)
            // collecting vars: boolean None
            //    vars: {'attr': 'SSTNode', None: 'boolean'}
            SSTNode attr;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: attr
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(attr)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(attr) - should work
                // name = attr
                // REMOVE result call (attr_var = attr_rule()) != null  // attr
                (attr = attr_rule()) != null  // attr
                &&
                // TODO visiting JavaParserGeneratorNamedItem: !('.' | '(' | '=')
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!('.' | '(' | '='))
                // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!('.' | '(' | '='))
                // TODO visiting JavaCallMakerVisitor.visit_Group(('.' | '(' | '='))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('.' | '(' | '=')
                // lookahead_call_helper call: (_tmp_64_var = _tmp_64_rule()) != null  // '.' | '(' | '='
                //    call.nodetype: None
                // REMOVE result call lookahed_tmp_64_rule(false)
                lookahed_tmp_64_rule(false)
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("value_pattern[" + pos + ", " + mark() +" ](level: " + level + ") attr !('.' | '(' | '=') succeeded!");
                }
                // alt action: attr
                Token endToken = getToken(mark());
                // node.action: attr
                return (SSTNode)cache.putResult(pos, VALUE_PATTERN_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, VALUE_PATTERN_ID, null);
    }

    // Left-recursive
    // attr: name_or_attr '.' NAME
    public SSTNode attr_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // left recursion--
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Left Recursion Rule: attr, pos: " + pos + ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, ATTR_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, ATTR_ID);
        }
        int lastPos = pos;
        int endPos;
        SSTNode lastResult = null;
        cache.putResult(pos, ATTR_ID, null);
        while(true) {
            reset(pos);
            SSTNode result = attr_rule_body();
            endPos = mark();
            if (endPos <= lastPos) {
                break;
            }
            lastResult = result;
            lastPos = endPos;
            cache.putResult(pos, ATTR_ID, result);
        }
        reset(lastPos);
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: " + lastResult + ", level: " + level);
        }
        return lastResult;
    }

    // left-rersive rule body
    public SSTNode attr_rule_body() {
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: attr, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Attribute ( value , attr -> v . Name . id , Load , EXTRA )
        {
            // visiting Alt: name_or_attr '.' NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(name_or_attr) - should work
            // name = name_or_attr
                // generated call: (name_or_attr_var = name_or_attr_rule()) != null  // name_or_attr
            // collecting vars: SSTNode value
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
                // generated call: (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token attr
            //    vars: {'value': 'SSTNode', '_literal': 'Token', 'attr': 'Token'}
            Token _literal;
            Token attr;
            SSTNode value;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: name_or_attr
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(name_or_attr)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(name_or_attr) - should work
                // name = name_or_attr
                // REMOVE result call (name_or_attr_var = name_or_attr_rule()) != null  // name_or_attr
                (value = name_or_attr_rule()) != null  // name_or_attr
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '.'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('.')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
                // REMOVE result call (_literal = expect(Token.Kind.DOT)) != null  // token='.'
                (_literal = expect(Token.Kind.DOT)) != null  // token='.'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (attr = expect(Token.Kind.NAME)) != null  // NAME
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("attr[" + pos + ", " + mark() +" ](level: " + level + ") name_or_attr '.' NAME succeeded!");
                }
                // alt action: _PyAST_Attribute ( value , attr -> v . Name . id , Load , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Attribute ( value , attr -> v . Name . id , Load , EXTRA )
                return (SSTNode)cache.putResult(pos, ATTR_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, ATTR_ID, null);
    }

    // Left-recursive
    // name_or_attr: attr | NAME
    public SSTNode name_or_attr_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: name_or_attr, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, NAME_OR_ATTR_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, NAME_OR_ATTR_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: attr
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(attr) - should work
            // name = attr
                // generated call: (attr_var = attr_rule()) != null  // attr
            // collecting vars: SSTNode attr_var
            //    vars: {'attr_var': 'SSTNode'}
            SSTNode attr_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: attr
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(attr)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(attr) - should work
                // name = attr
                // REMOVE result call (attr_var = attr_rule()) != null  // attr
                (attr_var = attr_rule()) != null  // attr
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("name_or_attr[" + pos + ", " + mark() +" ](level: " + level + ") attr succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['attr_var']
                result = attr_var;
                return (SSTNode)cache.putResult(pos, NAME_OR_ATTR_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token name_var
            //    vars: {'name_var': 'Token'}
            Token name_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (name_var = expect(Token.Kind.NAME)) != null  // NAME
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("name_or_attr[" + pos + ", " + mark() +" ](level: " + level + ") NAME succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['name_var']
                result = name_var;
                return (SSTNode)cache.putResult(pos, NAME_OR_ATTR_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, NAME_OR_ATTR_ID, null);
    }

    // group_pattern: '(' pattern ')'
    public SSTNode group_pattern_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: group_pattern, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, GROUP_PATTERN_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, GROUP_PATTERN_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: pattern
        {
            // visiting Alt: '(' pattern ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
            // name = pattern
                // generated call: (pattern_var = pattern_rule()) != null  // pattern
            // collecting vars: SSTNode pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // collecting vars: Token _literal_1
            //    vars: {'_literal': 'Token', 'pattern': 'SSTNode', '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            SSTNode pattern;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                &&
                // TODO visiting JavaParserGeneratorNamedItem: pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
                // name = pattern
                // REMOVE result call (pattern_var = pattern_rule()) != null  // pattern
                (pattern = pattern_rule()) != null  // pattern
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
                (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("group_pattern[" + pos + ", " + mark() +" ](level: " + level + ") '(' pattern ')' succeeded!");
                }
                // alt action: pattern
                Token endToken = getToken(mark());
                // node.action: pattern
                return (SSTNode)cache.putResult(pos, GROUP_PATTERN_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, GROUP_PATTERN_ID, null);
    }

    // sequence_pattern: '[' maybe_sequence_pattern? ']' | '(' open_sequence_pattern? ')'
    public SSTNode sequence_pattern_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: sequence_pattern, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, SEQUENCE_PATTERN_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, SEQUENCE_PATTERN_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_List ( values , Load , EXTRA )
        {
            // visiting Alt: '[' maybe_sequence_pattern? ']'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
                // generated call: (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(maybe_sequence_pattern?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(maybe_sequence_pattern) - should work
            // name = maybe_sequence_pattern
            // TODO replacing asdl_seq[] --> SSTNode[]
                // JavaCallMakerVisitor.visit_Opt.generated call: (maybe_sequence_pattern_var = maybe_sequence_pattern_rule()) != null  // maybe_sequence_pattern
                // generated call: ((_opt_var = maybe_sequence_pattern_rule()) != null || _opt_var == null)  // maybe_sequence_pattern?
            // collecting vars: None values
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
                // generated call: (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            // collecting vars: Token _literal_1
            //    vars: {'_literal': 'Token', 'values': None, '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            Object values;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '['
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('[')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
                // REMOVE result call (_literal = expect(Token.Kind.LSQB)) != null  // token='['
                (_literal = expect(Token.Kind.LSQB)) != null  // token='['
                &&
                // TODO visiting JavaParserGeneratorNamedItem: maybe_sequence_pattern?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(maybe_sequence_pattern?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(maybe_sequence_pattern?)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(maybe_sequence_pattern) - should work
                // name = maybe_sequence_pattern
                // TODO replacing asdl_seq[] --> SSTNode[]
                    // JavaCallMakerVisitor.visit_Opt.generated call: (maybe_sequence_pattern_var = maybe_sequence_pattern_rule()) != null  // maybe_sequence_pattern
                // REMOVE result call ((_opt_var = maybe_sequence_pattern_rule()) != null || _opt_var == null)  // maybe_sequence_pattern?
                ((values = maybe_sequence_pattern_rule()) != null || values == null)  // maybe_sequence_pattern?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ']'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(']')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
                // REMOVE result call (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
                (_literal_1 = expect(Token.Kind.RSQB)) != null  // token=']'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("sequence_pattern[" + pos + ", " + mark() +" ](level: " + level + ") '[' maybe_sequence_pattern? ']' succeeded!");
                }
                // alt action: _PyAST_List ( values , Load , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_List ( values , Load , EXTRA )
                return (SSTNode)cache.putResult(pos, SEQUENCE_PATTERN_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Tuple ( values , Load , EXTRA )
        {
            // visiting Alt: '(' open_sequence_pattern? ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(open_sequence_pattern?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(open_sequence_pattern) - should work
            // name = open_sequence_pattern
            // TODO replacing asdl_seq[] --> SSTNode[]
                // JavaCallMakerVisitor.visit_Opt.generated call: (open_sequence_pattern_var = open_sequence_pattern_rule()) != null  // open_sequence_pattern
                // generated call: ((_opt_var = open_sequence_pattern_rule()) != null || _opt_var == null)  // open_sequence_pattern?
            // collecting vars: None values
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // collecting vars: Token _literal_1
            //    vars: {'_literal': 'Token', 'values': None, '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            Object values;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                &&
                // TODO visiting JavaParserGeneratorNamedItem: open_sequence_pattern?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(open_sequence_pattern?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(open_sequence_pattern?)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(open_sequence_pattern) - should work
                // name = open_sequence_pattern
                // TODO replacing asdl_seq[] --> SSTNode[]
                    // JavaCallMakerVisitor.visit_Opt.generated call: (open_sequence_pattern_var = open_sequence_pattern_rule()) != null  // open_sequence_pattern
                // REMOVE result call ((_opt_var = open_sequence_pattern_rule()) != null || _opt_var == null)  // open_sequence_pattern?
                ((values = open_sequence_pattern_rule()) != null || values == null)  // open_sequence_pattern?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
                (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("sequence_pattern[" + pos + ", " + mark() +" ](level: " + level + ") '(' open_sequence_pattern? ')' succeeded!");
                }
                // alt action: _PyAST_Tuple ( values , Load , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Tuple ( values , Load , EXTRA )
                return (SSTNode)cache.putResult(pos, SEQUENCE_PATTERN_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, SEQUENCE_PATTERN_ID, null);
    }

    // open_sequence_pattern: maybe_star_pattern ',' maybe_sequence_pattern?
    // TODO replacing asdl_seq* --> SSTNode[]
    public SSTNode[] open_sequence_pattern_rule() {
    // isLoop: False, isGather: False, type: asdl_seq*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: open_sequence_pattern, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, OPEN_SEQUENCE_PATTERN_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, OPEN_SEQUENCE_PATTERN_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_seq_insert_in_front ( p , value , values )
        {
            // visiting Alt: maybe_star_pattern ',' maybe_sequence_pattern?
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(maybe_star_pattern) - should work
            // name = maybe_star_pattern
                // generated call: (maybe_star_pattern_var = maybe_star_pattern_rule()) != null  // maybe_star_pattern
            // collecting vars: SSTNode value
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(maybe_sequence_pattern?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(maybe_sequence_pattern) - should work
            // name = maybe_sequence_pattern
            // TODO replacing asdl_seq[] --> SSTNode[]
                // JavaCallMakerVisitor.visit_Opt.generated call: (maybe_sequence_pattern_var = maybe_sequence_pattern_rule()) != null  // maybe_sequence_pattern
                // generated call: ((_opt_var = maybe_sequence_pattern_rule()) != null || _opt_var == null)  // maybe_sequence_pattern?
            // collecting vars: None values
            //    vars: {'value': 'SSTNode', '_literal': 'Token', 'values': None}
            Token _literal;
            SSTNode value;
            Object values;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: maybe_star_pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(maybe_star_pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(maybe_star_pattern) - should work
                // name = maybe_star_pattern
                // REMOVE result call (maybe_star_pattern_var = maybe_star_pattern_rule()) != null  // maybe_star_pattern
                (value = maybe_star_pattern_rule()) != null  // maybe_star_pattern
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: maybe_sequence_pattern?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(maybe_sequence_pattern?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(maybe_sequence_pattern?)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(maybe_sequence_pattern) - should work
                // name = maybe_sequence_pattern
                // TODO replacing asdl_seq[] --> SSTNode[]
                    // JavaCallMakerVisitor.visit_Opt.generated call: (maybe_sequence_pattern_var = maybe_sequence_pattern_rule()) != null  // maybe_sequence_pattern
                // REMOVE result call ((_opt_var = maybe_sequence_pattern_rule()) != null || _opt_var == null)  // maybe_sequence_pattern?
                ((values = maybe_sequence_pattern_rule()) != null || values == null)  // maybe_sequence_pattern?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("open_sequence_pattern[" + pos + ", " + mark() +" ](level: " + level + ") maybe_star_pattern ',' maybe_sequence_pattern? succeeded!");
                }
                // alt action: _PyPegen_seq_insert_in_front ( p , value , values )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_seq_insert_in_front ( p , value , values )
                return (SSTNode[])cache.putResult(pos, OPEN_SEQUENCE_PATTERN_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, OPEN_SEQUENCE_PATTERN_ID, null);
    }

    // maybe_sequence_pattern: ','.maybe_star_pattern+ ','?
    // TODO replacing asdl_seq* --> SSTNode[]
    public SSTNode[] maybe_sequence_pattern_rule() {
    // isLoop: False, isGather: False, type: asdl_seq*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: maybe_sequence_pattern, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, MAYBE_SEQUENCE_PATTERN_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, MAYBE_SEQUENCE_PATTERN_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: values
        {
            // visiting Alt: ','.maybe_star_pattern+ ','?
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.maybe_star_pattern+)
                // generated call: (_gather_65_var = _gather_65_rule()) != null  // ','.maybe_star_pattern+
            // collecting vars: SSTNode[] values
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                // generated call: ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
            // collecting vars: None _opt_var
            //    vars: {'values': 'SSTNode[]', '_opt_var': None}
            Object _opt_var;
            SSTNode[] values;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','.maybe_star_pattern+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.maybe_star_pattern+)
                // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.maybe_star_pattern+)
                // REMOVE result call (_gather_65_var = _gather_65_rule()) != null  // ','.maybe_star_pattern+
                (values = _gather_65_rule()) != null  // ','.maybe_star_pattern+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                // REMOVE result call ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
                ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("maybe_sequence_pattern[" + pos + ", " + mark() +" ](level: " + level + ") ','.maybe_star_pattern+ ','? succeeded!");
                }
                // alt action: values
                Token endToken = getToken(mark());
                // node.action: values
                return (SSTNode[])cache.putResult(pos, MAYBE_SEQUENCE_PATTERN_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, MAYBE_SEQUENCE_PATTERN_ID, null);
    }

    // maybe_star_pattern: star_pattern | pattern
    public SSTNode maybe_star_pattern_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: maybe_star_pattern, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, MAYBE_STAR_PATTERN_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, MAYBE_STAR_PATTERN_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: star_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_pattern) - should work
            // name = star_pattern
                // generated call: (star_pattern_var = star_pattern_rule()) != null  // star_pattern
            // collecting vars: SSTNode star_pattern_var
            //    vars: {'star_pattern_var': 'SSTNode'}
            SSTNode star_pattern_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_pattern) - should work
                // name = star_pattern
                // REMOVE result call (star_pattern_var = star_pattern_rule()) != null  // star_pattern
                (star_pattern_var = star_pattern_rule()) != null  // star_pattern
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("maybe_star_pattern[" + pos + ", " + mark() +" ](level: " + level + ") star_pattern succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['star_pattern_var']
                result = star_pattern_var;
                return (SSTNode)cache.putResult(pos, MAYBE_STAR_PATTERN_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
            // name = pattern
                // generated call: (pattern_var = pattern_rule()) != null  // pattern
            // collecting vars: SSTNode pattern_var
            //    vars: {'pattern_var': 'SSTNode'}
            SSTNode pattern_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
                // name = pattern
                // REMOVE result call (pattern_var = pattern_rule()) != null  // pattern
                (pattern_var = pattern_rule()) != null  // pattern
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("maybe_star_pattern[" + pos + ", " + mark() +" ](level: " + level + ") pattern succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['pattern_var']
                result = pattern_var;
                return (SSTNode)cache.putResult(pos, MAYBE_STAR_PATTERN_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, MAYBE_STAR_PATTERN_ID, null);
    }

    // star_pattern: '*' (capture_pattern | wildcard_pattern)
    public SSTNode star_pattern_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: star_pattern, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, STAR_PATTERN_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, STAR_PATTERN_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Starred ( value , Store , EXTRA )
        {
            // visiting Alt: '*' (capture_pattern | wildcard_pattern)
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // collecting vars: Token _literal
            // TODO visiting JavaCallMakerVisitor.visit_Group((capture_pattern | wildcard_pattern))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(capture_pattern | wildcard_pattern)
                // generated call: (_tmp_67_var = _tmp_67_rule()) != null  // capture_pattern | wildcard_pattern
            // collecting vars: None value
            //    vars: {'_literal': 'Token', 'value': None}
            Token _literal;
            Object value;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '*'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: (capture_pattern | wildcard_pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((capture_pattern | wildcard_pattern))
                // TODO visiting JavaCallMakerVisitor.visit_Group((capture_pattern | wildcard_pattern))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(capture_pattern | wildcard_pattern)
                // REMOVE result call (_tmp_67_var = _tmp_67_rule()) != null  // capture_pattern | wildcard_pattern
                (value = _tmp_67_rule()) != null  // capture_pattern | wildcard_pattern
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("star_pattern[" + pos + ", " + mark() +" ](level: " + level + ") '*' (capture_pattern | wildcard_pattern) succeeded!");
                }
                // alt action: _PyAST_Starred ( value , Store , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Starred ( value , Store , EXTRA )
                return (SSTNode)cache.putResult(pos, STAR_PATTERN_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, STAR_PATTERN_ID, null);
    }

    // mapping_pattern: '{' items_pattern? '}'
    public SSTNode mapping_pattern_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: mapping_pattern, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, MAPPING_PATTERN_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, MAPPING_PATTERN_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Dict ( CHECK ( asdl_expr_seq * , _PyPegen_get_keys ( p , items ) ) , CHECK ( asdl_expr_seq * , _PyPegen_get_values ( p , items ) ) , EXTRA )
        {
            // visiting Alt: '{' items_pattern? '}'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
                // generated call: (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(items_pattern?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(items_pattern) - should work
            // name = items_pattern
            // TODO replacing asdl_seq[] --> SSTNode[]
                // JavaCallMakerVisitor.visit_Opt.generated call: (items_pattern_var = items_pattern_rule()) != null  // items_pattern
                // generated call: ((_opt_var = items_pattern_rule()) != null || _opt_var == null)  // items_pattern?
            // collecting vars: None items
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
                // generated call: (_literal = expect(Token.Kind.RBRACE)) != null  // token='}'
            // collecting vars: Token _literal_1
            //    vars: {'_literal': 'Token', 'items': None, '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            Object items;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '{'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('{')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
                // REMOVE result call (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
                (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: items_pattern?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(items_pattern?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(items_pattern?)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(items_pattern) - should work
                // name = items_pattern
                // TODO replacing asdl_seq[] --> SSTNode[]
                    // JavaCallMakerVisitor.visit_Opt.generated call: (items_pattern_var = items_pattern_rule()) != null  // items_pattern
                // REMOVE result call ((_opt_var = items_pattern_rule()) != null || _opt_var == null)  // items_pattern?
                ((items = items_pattern_rule()) != null || items == null)  // items_pattern?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '}'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('}')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
                // REMOVE result call (_literal = expect(Token.Kind.RBRACE)) != null  // token='}'
                (_literal_1 = expect(Token.Kind.RBRACE)) != null  // token='}'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("mapping_pattern[" + pos + ", " + mark() +" ](level: " + level + ") '{' items_pattern? '}' succeeded!");
                }
                // alt action: _PyAST_Dict ( CHECK ( asdl_expr_seq * , _PyPegen_get_keys ( p , items ) ) , CHECK ( asdl_expr_seq * , _PyPegen_get_values ( p , items ) ) , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Dict ( CHECK ( asdl_expr_seq * , _PyPegen_get_keys ( p , items ) ) , CHECK ( asdl_expr_seq * , _PyPegen_get_values ( p , items ) ) , EXTRA )
                return (SSTNode)cache.putResult(pos, MAPPING_PATTERN_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, MAPPING_PATTERN_ID, null);
    }

    // items_pattern: ','.key_value_pattern+ ','?
    // TODO replacing asdl_seq* --> SSTNode[]
    public SSTNode[] items_pattern_rule() {
    // isLoop: False, isGather: False, type: asdl_seq*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: items_pattern, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, ITEMS_PATTERN_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, ITEMS_PATTERN_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: items
        {
            // visiting Alt: ','.key_value_pattern+ ','?
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.key_value_pattern+)
                // generated call: (_gather_68_var = _gather_68_rule()) != null  // ','.key_value_pattern+
            // collecting vars: SSTNode[] items
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                // generated call: ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
            // collecting vars: None _opt_var
            //    vars: {'items': 'SSTNode[]', '_opt_var': None}
            Object _opt_var;
            SSTNode[] items;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','.key_value_pattern+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.key_value_pattern+)
                // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.key_value_pattern+)
                // REMOVE result call (_gather_68_var = _gather_68_rule()) != null  // ','.key_value_pattern+
                (items = _gather_68_rule()) != null  // ','.key_value_pattern+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                // REMOVE result call ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
                ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("items_pattern[" + pos + ", " + mark() +" ](level: " + level + ") ','.key_value_pattern+ ','? succeeded!");
                }
                // alt action: items
                Token endToken = getToken(mark());
                // node.action: items
                return (SSTNode[])cache.putResult(pos, ITEMS_PATTERN_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, ITEMS_PATTERN_ID, null);
    }

    // key_value_pattern: (literal_pattern | value_pattern) ':' pattern | double_star_pattern
    // TODO replacing KeyValuePair* --> SSTNode[]
    public SSTNode[] key_value_pattern_rule() {
    // isLoop: False, isGather: False, type: KeyValuePair*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: key_value_pattern, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, KEY_VALUE_PATTERN_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, KEY_VALUE_PATTERN_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_key_value_pair ( p , key , value )
        {
            // visiting Alt: (literal_pattern | value_pattern) ':' pattern
            // TODO visiting JavaCallMakerVisitor.visit_Group((literal_pattern | value_pattern))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(literal_pattern | value_pattern)
                // generated call: (_tmp_70_var = _tmp_70_rule()) != null  // literal_pattern | value_pattern
            // collecting vars: None key
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
            // name = pattern
                // generated call: (pattern_var = pattern_rule()) != null  // pattern
            // collecting vars: SSTNode value
            //    vars: {'key': None, '_literal': 'Token', 'value': 'SSTNode'}
            Token _literal;
            Object key;
            SSTNode value;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: (literal_pattern | value_pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((literal_pattern | value_pattern))
                // TODO visiting JavaCallMakerVisitor.visit_Group((literal_pattern | value_pattern))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(literal_pattern | value_pattern)
                // REMOVE result call (_tmp_70_var = _tmp_70_rule()) != null  // literal_pattern | value_pattern
                (key = _tmp_70_rule()) != null  // literal_pattern | value_pattern
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
                // name = pattern
                // REMOVE result call (pattern_var = pattern_rule()) != null  // pattern
                (value = pattern_rule()) != null  // pattern
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("key_value_pattern[" + pos + ", " + mark() +" ](level: " + level + ") (literal_pattern | value_pattern) ':' pattern succeeded!");
                }
                // alt action: _PyPegen_key_value_pair ( p , key , value )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_key_value_pair ( p , key , value )
                return (SSTNode[])cache.putResult(pos, KEY_VALUE_PATTERN_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: double_star_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_star_pattern) - should work
            // name = double_star_pattern
            // TODO replacing KeyValuePair[] --> SSTNode[]
                // generated call: (double_star_pattern_var = double_star_pattern_rule()) != null  // double_star_pattern
            // collecting vars: SSTNode[] double_star_pattern_var
            //    vars: {'double_star_pattern_var': 'SSTNode[]'}
            SSTNode[] double_star_pattern_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: double_star_pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(double_star_pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_star_pattern) - should work
                // name = double_star_pattern
                // TODO replacing KeyValuePair[] --> SSTNode[]
                // REMOVE result call (double_star_pattern_var = double_star_pattern_rule()) != null  // double_star_pattern
                (double_star_pattern_var = double_star_pattern_rule()) != null  // double_star_pattern
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("key_value_pattern[" + pos + ", " + mark() +" ](level: " + level + ") double_star_pattern succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['double_star_pattern_var']
                result = double_star_pattern_var;
                return (SSTNode[])cache.putResult(pos, KEY_VALUE_PATTERN_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, KEY_VALUE_PATTERN_ID, null);
    }

    // double_star_pattern: '**' capture_pattern
    // TODO replacing KeyValuePair* --> SSTNode[]
    public SSTNode[] double_star_pattern_rule() {
    // isLoop: False, isGather: False, type: KeyValuePair*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: double_star_pattern, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, DOUBLE_STAR_PATTERN_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, DOUBLE_STAR_PATTERN_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_key_value_pair ( p , NULL , value )
        {
            // visiting Alt: '**' capture_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
                // generated call: (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(capture_pattern) - should work
            // name = capture_pattern
                // generated call: (capture_pattern_var = capture_pattern_rule()) != null  // capture_pattern
            // collecting vars: SSTNode value
            //    vars: {'_literal': 'Token', 'value': 'SSTNode'}
            Token _literal;
            SSTNode value;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '**'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('**')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
                // REMOVE result call (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
                (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: capture_pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(capture_pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(capture_pattern) - should work
                // name = capture_pattern
                // REMOVE result call (capture_pattern_var = capture_pattern_rule()) != null  // capture_pattern
                (value = capture_pattern_rule()) != null  // capture_pattern
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("double_star_pattern[" + pos + ", " + mark() +" ](level: " + level + ") '**' capture_pattern succeeded!");
                }
                // alt action: _PyPegen_key_value_pair ( p , NULL , value )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_key_value_pair ( p , NULL , value )
                return (SSTNode[])cache.putResult(pos, DOUBLE_STAR_PATTERN_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, DOUBLE_STAR_PATTERN_ID, null);
    }

    // class_pattern:
    //     | name_or_attr '(' ')'
    //     | name_or_attr '(' positional_patterns ','? ')'
    //     | name_or_attr '(' keyword_patterns ','? ')'
    //     | name_or_attr '(' positional_patterns ',' keyword_patterns ','? ')'
    public SSTNode class_pattern_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: class_pattern, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, CLASS_PATTERN_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, CLASS_PATTERN_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Call ( func , NULL , NULL , EXTRA )
        {
            // visiting Alt: name_or_attr '(' ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(name_or_attr) - should work
            // name = name_or_attr
                // generated call: (name_or_attr_var = name_or_attr_rule()) != null  // name_or_attr
            // collecting vars: SSTNode func
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // collecting vars: Token _literal_1
            //    vars: {'func': 'SSTNode', '_literal': 'Token', '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            SSTNode func;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: name_or_attr
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(name_or_attr)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(name_or_attr) - should work
                // name = name_or_attr
                // REMOVE result call (name_or_attr_var = name_or_attr_rule()) != null  // name_or_attr
                (func = name_or_attr_rule()) != null  // name_or_attr
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
                (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("class_pattern[" + pos + ", " + mark() +" ](level: " + level + ") name_or_attr '(' ')' succeeded!");
                }
                // alt action: _PyAST_Call ( func , NULL , NULL , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Call ( func , NULL , NULL , EXTRA )
                return (SSTNode)cache.putResult(pos, CLASS_PATTERN_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Call ( func , args , NULL , EXTRA )
        {
            // visiting Alt: name_or_attr '(' positional_patterns ','? ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(name_or_attr) - should work
            // name = name_or_attr
                // generated call: (name_or_attr_var = name_or_attr_rule()) != null  // name_or_attr
            // collecting vars: SSTNode func
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(positional_patterns) - should work
            // name = positional_patterns
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // generated call: (positional_patterns_var = positional_patterns_rule()) != null  // positional_patterns
            // collecting vars: SSTNode[] args
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                // generated call: ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
            // collecting vars: None _opt_var
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // collecting vars: Token _literal_1
            //    vars: {'func': 'SSTNode', '_literal': 'Token', 'args': 'SSTNode[]', '_opt_var': None, '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            Object _opt_var;
            SSTNode[] args;
            SSTNode func;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: name_or_attr
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(name_or_attr)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(name_or_attr) - should work
                // name = name_or_attr
                // REMOVE result call (name_or_attr_var = name_or_attr_rule()) != null  // name_or_attr
                (func = name_or_attr_rule()) != null  // name_or_attr
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                &&
                // TODO visiting JavaParserGeneratorNamedItem: positional_patterns
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(positional_patterns)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(positional_patterns) - should work
                // name = positional_patterns
                // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // REMOVE result call (positional_patterns_var = positional_patterns_rule()) != null  // positional_patterns
                (args = positional_patterns_rule()) != null  // positional_patterns
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                // REMOVE result call ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
                ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
                (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("class_pattern[" + pos + ", " + mark() +" ](level: " + level + ") name_or_attr '(' positional_patterns ','? ')' succeeded!");
                }
                // alt action: _PyAST_Call ( func , args , NULL , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Call ( func , args , NULL , EXTRA )
                return (SSTNode)cache.putResult(pos, CLASS_PATTERN_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Call ( func , NULL , keywords , EXTRA )
        {
            // visiting Alt: name_or_attr '(' keyword_patterns ','? ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(name_or_attr) - should work
            // name = name_or_attr
                // generated call: (name_or_attr_var = name_or_attr_rule()) != null  // name_or_attr
            // collecting vars: SSTNode func
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(keyword_patterns) - should work
            // name = keyword_patterns
            // TODO replacing asdl_keyword_seq[] --> SSTNode[]
                // generated call: (keyword_patterns_var = keyword_patterns_rule()) != null  // keyword_patterns
            // collecting vars: SSTNode[] keywords
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                // generated call: ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
            // collecting vars: None _opt_var
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // collecting vars: Token _literal_1
            //    vars: {'func': 'SSTNode', '_literal': 'Token', 'keywords': 'SSTNode[]', '_opt_var': None, '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            Object _opt_var;
            SSTNode func;
            SSTNode[] keywords;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: name_or_attr
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(name_or_attr)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(name_or_attr) - should work
                // name = name_or_attr
                // REMOVE result call (name_or_attr_var = name_or_attr_rule()) != null  // name_or_attr
                (func = name_or_attr_rule()) != null  // name_or_attr
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                &&
                // TODO visiting JavaParserGeneratorNamedItem: keyword_patterns
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(keyword_patterns)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(keyword_patterns) - should work
                // name = keyword_patterns
                // TODO replacing asdl_keyword_seq[] --> SSTNode[]
                // REMOVE result call (keyword_patterns_var = keyword_patterns_rule()) != null  // keyword_patterns
                (keywords = keyword_patterns_rule()) != null  // keyword_patterns
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                // REMOVE result call ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
                ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
                (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("class_pattern[" + pos + ", " + mark() +" ](level: " + level + ") name_or_attr '(' keyword_patterns ','? ')' succeeded!");
                }
                // alt action: _PyAST_Call ( func , NULL , keywords , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Call ( func , NULL , keywords , EXTRA )
                return (SSTNode)cache.putResult(pos, CLASS_PATTERN_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Call ( func , args , keywords , EXTRA )
        {
            // visiting Alt: name_or_attr '(' positional_patterns ',' keyword_patterns ','? ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(name_or_attr) - should work
            // name = name_or_attr
                // generated call: (name_or_attr_var = name_or_attr_rule()) != null  // name_or_attr
            // collecting vars: SSTNode func
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(positional_patterns) - should work
            // name = positional_patterns
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // generated call: (positional_patterns_var = positional_patterns_rule()) != null  // positional_patterns
            // collecting vars: SSTNode[] args
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal_1
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(keyword_patterns) - should work
            // name = keyword_patterns
            // TODO replacing asdl_keyword_seq[] --> SSTNode[]
                // generated call: (keyword_patterns_var = keyword_patterns_rule()) != null  // keyword_patterns
            // collecting vars: SSTNode[] keywords
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                // generated call: ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
            // collecting vars: None _opt_var
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // collecting vars: Token _literal_2
            //    vars: {'func': 'SSTNode', '_literal': 'Token', 'args': 'SSTNode[]', '_literal_1': 'Token', 'keywords': 'SSTNode[]', '_opt_var': None, '_literal_2': 'Token'}
            Token _literal;
            Token _literal_1;
            Token _literal_2;
            Object _opt_var;
            SSTNode[] args;
            SSTNode func;
            SSTNode[] keywords;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: name_or_attr
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(name_or_attr)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(name_or_attr) - should work
                // name = name_or_attr
                // REMOVE result call (name_or_attr_var = name_or_attr_rule()) != null  // name_or_attr
                (func = name_or_attr_rule()) != null  // name_or_attr
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                &&
                // TODO visiting JavaParserGeneratorNamedItem: positional_patterns
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(positional_patterns)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(positional_patterns) - should work
                // name = positional_patterns
                // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // REMOVE result call (positional_patterns_var = positional_patterns_rule()) != null  // positional_patterns
                (args = positional_patterns_rule()) != null  // positional_patterns
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal_1 = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: keyword_patterns
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(keyword_patterns)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(keyword_patterns) - should work
                // name = keyword_patterns
                // TODO replacing asdl_keyword_seq[] --> SSTNode[]
                // REMOVE result call (keyword_patterns_var = keyword_patterns_rule()) != null  // keyword_patterns
                (keywords = keyword_patterns_rule()) != null  // keyword_patterns
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                // REMOVE result call ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
                ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
                (_literal_2 = expect(Token.Kind.RPAR)) != null  // token=')'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("class_pattern[" + pos + ", " + mark() +" ](level: " + level + ") name_or_attr '(' positional_patterns ',' keyword_patterns ','? ')' succeeded!");
                }
                // alt action: _PyAST_Call ( func , args , keywords , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Call ( func , args , keywords , EXTRA )
                return (SSTNode)cache.putResult(pos, CLASS_PATTERN_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, CLASS_PATTERN_ID, null);
    }

    // positional_patterns: ','.pattern+
    // TODO replacing asdl_expr_seq* --> SSTNode[]
    public SSTNode[] positional_patterns_rule() {
    // isLoop: False, isGather: False, type: asdl_expr_seq*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: positional_patterns, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, POSITIONAL_PATTERNS_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, POSITIONAL_PATTERNS_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: args
        {
            // visiting Alt: ','.pattern+
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.pattern+)
                // generated call: (_gather_71_var = _gather_71_rule()) != null  // ','.pattern+
            // collecting vars: asdl_expr_seq* args
            //    vars: {'args': 'asdl_expr_seq*'}
            // TODO replacing asdl_expr_seq* --> SSTNode[]
            SSTNode[] args;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','.pattern+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.pattern+)
                // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.pattern+)
                // REMOVE result call (_gather_71_var = _gather_71_rule()) != null  // ','.pattern+
                (args = (SSTNode[])_gather_71_rule()) != null  // ','.pattern+
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("positional_patterns[" + pos + ", " + mark() +" ](level: " + level + ") ','.pattern+ succeeded!");
                }
                // alt action: args
                Token endToken = getToken(mark());
                // node.action: args
                return (SSTNode[])cache.putResult(pos, POSITIONAL_PATTERNS_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, POSITIONAL_PATTERNS_ID, null);
    }

    // keyword_patterns: ','.keyword_pattern+
    // TODO replacing asdl_keyword_seq* --> SSTNode[]
    public SSTNode[] keyword_patterns_rule() {
    // isLoop: False, isGather: False, type: asdl_keyword_seq*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: keyword_patterns, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, KEYWORD_PATTERNS_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, KEYWORD_PATTERNS_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: keywords
        {
            // visiting Alt: ','.keyword_pattern+
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.keyword_pattern+)
                // generated call: (_gather_73_var = _gather_73_rule()) != null  // ','.keyword_pattern+
            // collecting vars: asdl_keyword_seq* keywords
            //    vars: {'keywords': 'asdl_keyword_seq*'}
            // TODO replacing asdl_keyword_seq* --> SSTNode[]
            SSTNode[] keywords;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','.keyword_pattern+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.keyword_pattern+)
                // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.keyword_pattern+)
                // REMOVE result call (_gather_73_var = _gather_73_rule()) != null  // ','.keyword_pattern+
                (keywords = (SSTNode[])_gather_73_rule()) != null  // ','.keyword_pattern+
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("keyword_patterns[" + pos + ", " + mark() +" ](level: " + level + ") ','.keyword_pattern+ succeeded!");
                }
                // alt action: keywords
                Token endToken = getToken(mark());
                // node.action: keywords
                return (SSTNode[])cache.putResult(pos, KEYWORD_PATTERNS_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, KEYWORD_PATTERNS_ID, null);
    }

    // keyword_pattern: NAME '=' pattern
    // TODO replacing keyword_ty --> SSTNode
    public SSTNode keyword_pattern_rule() {
    // isLoop: False, isGather: False, type: keyword_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: keyword_pattern, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, KEYWORD_PATTERN_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, KEYWORD_PATTERN_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_keyword ( arg -> v . Name . id , value , EXTRA )
        {
            // visiting Alt: NAME '=' pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token arg
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // generated call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
            // name = pattern
                // generated call: (pattern_var = pattern_rule()) != null  // pattern
            // collecting vars: SSTNode value
            //    vars: {'arg': 'Token', '_literal': 'Token', 'value': 'SSTNode'}
            Token _literal;
            Token arg;
            SSTNode value;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (arg = expect(Token.Kind.NAME)) != null  // NAME
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // REMOVE result call (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
                (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
                &&
                // TODO visiting JavaParserGeneratorNamedItem: pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
                // name = pattern
                // REMOVE result call (pattern_var = pattern_rule()) != null  // pattern
                (value = pattern_rule()) != null  // pattern
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("keyword_pattern[" + pos + ", " + mark() +" ](level: " + level + ") NAME '=' pattern succeeded!");
                }
                // alt action: _PyAST_keyword ( arg -> v . Name . id , value , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_keyword ( arg -> v . Name . id , value , EXTRA )
                return (SSTNode)cache.putResult(pos, KEYWORD_PATTERN_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, KEYWORD_PATTERN_ID, null);
    }

    // return_stmt: 'return' star_expressions?
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode return_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: return_stmt, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, RETURN_STMT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, RETURN_STMT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Return ( a , EXTRA )
        {
            // visiting Alt: 'return' star_expressions?
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('return')
                // generated call: (_keyword = expect(KEYWORD_RETURN)) != null  // token='return'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_expressions?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_expressions)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_75_var = _tmp_75_rule()) != null  // star_expressions
                // generated call: ((_opt_var = _tmp_75_rule()) != null || _opt_var == null)  // star_expressions?
            // collecting vars: None a
            //    vars: {'_keyword': 'Token', 'a': None}
            Token _keyword;
            Object a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'return'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('return')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('return')
                // REMOVE result call (_keyword = expect(KEYWORD_RETURN)) != null  // token='return'
                (_keyword = expect(KEYWORD_RETURN)) != null  // token='return'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: star_expressions?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expressions?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_expressions?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_expressions)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_75_var = _tmp_75_rule()) != null  // star_expressions
                // REMOVE result call ((_opt_var = _tmp_75_rule()) != null || _opt_var == null)  // star_expressions?
                ((a = _tmp_75_rule()) != null || a == null)  // star_expressions?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("return_stmt[" + pos + ", " + mark() +" ](level: " + level + ") 'return' star_expressions? succeeded!");
                }
                // alt action: _PyAST_Return ( a , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Return ( a , EXTRA )
                return (SSTNode)cache.putResult(pos, RETURN_STMT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, RETURN_STMT_ID, null);
    }

    // raise_stmt: 'raise' expression ['from' expression] | 'raise'
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode raise_stmt_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: raise_stmt, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, RAISE_STMT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, RAISE_STMT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Raise ( a , b , EXTRA )
        {
            // visiting Alt: 'raise' expression ['from' expression]
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('raise')
                // generated call: (_keyword = expect(KEYWORD_RAISE)) != null  // token='raise'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['from' expression])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('from' expression)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_76_var = _tmp_76_rule()) != null  // 'from' expression
                // generated call: ((_opt_var = _tmp_76_rule()) != null || _opt_var == null)  // ['from' expression]
            // collecting vars: None b
            //    vars: {'_keyword': 'Token', 'a': 'SSTNode', 'b': None}
            Token _keyword;
            SSTNode a;
            Object b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'raise'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('raise')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('raise')
                // REMOVE result call (_keyword = expect(KEYWORD_RAISE)) != null  // token='raise'
                (_keyword = expect(KEYWORD_RAISE)) != null  // token='raise'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (a = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ['from' expression]
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(['from' expression])
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['from' expression])
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('from' expression)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_76_var = _tmp_76_rule()) != null  // 'from' expression
                // REMOVE result call ((_opt_var = _tmp_76_rule()) != null || _opt_var == null)  // ['from' expression]
                ((b = _tmp_76_rule()) != null || b == null)  // ['from' expression]
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("raise_stmt[" + pos + ", " + mark() +" ](level: " + level + ") 'raise' expression ['from' expression] succeeded!");
                }
                // alt action: _PyAST_Raise ( a , b , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Raise ( a , b , EXTRA )
                return (SSTNode)cache.putResult(pos, RAISE_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Raise ( NULL , NULL , EXTRA )
        {
            // visiting Alt: 'raise'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('raise')
                // generated call: (_keyword = expect(KEYWORD_RAISE)) != null  // token='raise'
            // collecting vars: Token _keyword
            //    vars: {'_keyword': 'Token'}
            Token _keyword;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'raise'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('raise')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('raise')
                // REMOVE result call (_keyword = expect(KEYWORD_RAISE)) != null  // token='raise'
                (_keyword = expect(KEYWORD_RAISE)) != null  // token='raise'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("raise_stmt[" + pos + ", " + mark() +" ](level: " + level + ") 'raise' succeeded!");
                }
                // alt action: _PyAST_Raise ( NULL , NULL , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Raise ( NULL , NULL , EXTRA )
                return (SSTNode)cache.putResult(pos, RAISE_STMT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, RAISE_STMT_ID, null);
    }

    // function_def: decorators function_def_raw | function_def_raw
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode function_def_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: function_def, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, FUNCTION_DEF_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, FUNCTION_DEF_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_function_def_decorators ( p , d , f )
        {
            // visiting Alt: decorators function_def_raw
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(decorators) - should work
            // name = decorators
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // generated call: (decorators_var = decorators_rule()) != null  // decorators
            // collecting vars: SSTNode[] d
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(function_def_raw) - should work
            // name = function_def_raw
            // TODO replacing stmt_ty --> SSTNode
                // generated call: (function_def_raw_var = function_def_raw_rule()) != null  // function_def_raw
            // collecting vars: SSTNode f
            //    vars: {'d': 'SSTNode[]', 'f': 'SSTNode'}
            SSTNode[] d;
            SSTNode f;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: decorators
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(decorators)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(decorators) - should work
                // name = decorators
                // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // REMOVE result call (decorators_var = decorators_rule()) != null  // decorators
                (d = decorators_rule()) != null  // decorators
                &&
                // TODO visiting JavaParserGeneratorNamedItem: function_def_raw
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(function_def_raw)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(function_def_raw) - should work
                // name = function_def_raw
                // TODO replacing stmt_ty --> SSTNode
                // REMOVE result call (function_def_raw_var = function_def_raw_rule()) != null  // function_def_raw
                (f = function_def_raw_rule()) != null  // function_def_raw
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("function_def[" + pos + ", " + mark() +" ](level: " + level + ") decorators function_def_raw succeeded!");
                }
                // alt action: _PyPegen_function_def_decorators ( p , d , f )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_function_def_decorators ( p , d , f )
                return (SSTNode)cache.putResult(pos, FUNCTION_DEF_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: function_def_raw
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(function_def_raw) - should work
            // name = function_def_raw
            // TODO replacing stmt_ty --> SSTNode
                // generated call: (function_def_raw_var = function_def_raw_rule()) != null  // function_def_raw
            // collecting vars: SSTNode function_def_raw_var
            //    vars: {'function_def_raw_var': 'SSTNode'}
            SSTNode function_def_raw_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: function_def_raw
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(function_def_raw)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(function_def_raw) - should work
                // name = function_def_raw
                // TODO replacing stmt_ty --> SSTNode
                // REMOVE result call (function_def_raw_var = function_def_raw_rule()) != null  // function_def_raw
                (function_def_raw_var = function_def_raw_rule()) != null  // function_def_raw
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("function_def[" + pos + ", " + mark() +" ](level: " + level + ") function_def_raw succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['function_def_raw_var']
                result = function_def_raw_var;
                return (SSTNode)cache.putResult(pos, FUNCTION_DEF_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, FUNCTION_DEF_ID, null);
    }

    // function_def_raw:
    //     | 'def' NAME '(' params? ')' ['->' expression] &&':' func_type_comment? block
    //     | ASYNC 'def' NAME '(' params? ')' ['->' expression] &&':' func_type_comment? block
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode function_def_raw_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: function_def_raw, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, FUNCTION_DEF_RAW_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, FUNCTION_DEF_RAW_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_FunctionDef ( n -> v . Name . id , ( params ) ? params : CHECK ( arguments_ty , _PyPegen_empty_arguments ( p ) ) , b , NULL , a , NEW_TYPE_COMMENT ( p , tc ) , EXTRA )
        {
            // visiting Alt: 'def' NAME '(' params? ')' ['->' expression] &&':' func_type_comment? block
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('def')
                // generated call: (_keyword = expect(KEYWORD_DEF)) != null  // token='def'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token n
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(params?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(params)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_77_var = _tmp_77_rule()) != null  // params
                // generated call: ((_opt_var = _tmp_77_rule()) != null || _opt_var == null)  // params?
            // collecting vars: None params
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // collecting vars: Token _literal_1
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['->' expression])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('->' expression)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_78_var = _tmp_78_rule()) != null  // '->' expression
                // generated call: ((_opt_var = _tmp_78_rule()) != null || _opt_var == null)  // ['->' expression]
            // collecting vars: None a
            // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
                // generated call: None
            // collecting vars: None None
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(func_type_comment?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(func_type_comment)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_79_var = _tmp_79_rule()) != null  // func_type_comment
                // generated call: ((_opt_var = _tmp_79_rule()) != null || _opt_var == null)  // func_type_comment?
            // collecting vars: None tc
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // name = block
                // generated call: (block_var = block_rule()) != null  // block
            // collecting vars: SSTNode[] b
            //    vars: {'_keyword': 'Token', 'n': 'Token', '_literal': 'Token', 'params': None, '_literal_1': 'Token', 'a': None, None: None, 'tc': None, 'b': 'SSTNode[]'}
            Token _keyword;
            Token _literal;
            Token _literal_1;
            Object a;
            SSTNode[] b;
            Token n;
            Object params;
            Object tc;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'def'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('def')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('def')
                // REMOVE result call (_keyword = expect(KEYWORD_DEF)) != null  // token='def'
                (_keyword = expect(KEYWORD_DEF)) != null  // token='def'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (n = expect(Token.Kind.NAME)) != null  // NAME
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                &&
                // TODO visiting JavaParserGeneratorNamedItem: params?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(params?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(params?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(params)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_77_var = _tmp_77_rule()) != null  // params
                // REMOVE result call ((_opt_var = _tmp_77_rule()) != null || _opt_var == null)  // params?
                ((params = _tmp_77_rule()) != null || params == null)  // params?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
                (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ['->' expression]
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(['->' expression])
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['->' expression])
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('->' expression)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_78_var = _tmp_78_rule()) != null  // '->' expression
                // REMOVE result call ((_opt_var = _tmp_78_rule()) != null || _opt_var == null)  // ['->' expression]
                ((a = _tmp_78_rule()) != null || a == null)  // ['->' expression]
                &&
                // TODO visiting JavaParserGeneratorNamedItem: &&':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&&':')
                // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
                // TODO call is not created &&':' -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: func_type_comment?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(func_type_comment?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(func_type_comment?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(func_type_comment)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_79_var = _tmp_79_rule()) != null  // func_type_comment
                // REMOVE result call ((_opt_var = _tmp_79_rule()) != null || _opt_var == null)  // func_type_comment?
                ((tc = _tmp_79_rule()) != null || tc == null)  // func_type_comment?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
                // name = block
                // REMOVE result call (block_var = block_rule()) != null  // block
                (b = block_rule()) != null  // block
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("function_def_raw[" + pos + ", " + mark() +" ](level: " + level + ") 'def' NAME '(' params? ')' ['->' expression] &&':' func_type_comment? block succeeded!");
                }
                // alt action: _PyAST_FunctionDef ( n -> v . Name . id , ( params ) ? params : CHECK ( arguments_ty , _PyPegen_empty_arguments ( p ) ) , b , NULL , a , NEW_TYPE_COMMENT ( p , tc ) , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_FunctionDef ( n -> v . Name . id , ( params ) ? params : CHECK ( arguments_ty , _PyPegen_empty_arguments ( p ) ) , b , NULL , a , NEW_TYPE_COMMENT ( p , tc ) , EXTRA )
                return (SSTNode)cache.putResult(pos, FUNCTION_DEF_RAW_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: CHECK_VERSION ( stmt_ty , 5 , "Async functions are" , _PyAST_AsyncFunctionDef ( n -> v . Name . id , ( params ) ? params : CHECK ( arguments_ty , _PyPegen_empty_arguments ( p ) ) , b , NULL , a , NEW_TYPE_COMMENT ( p , tc ) , EXTRA ) )
        {
            // visiting Alt: ASYNC 'def' NAME '(' params? ')' ['->' expression] &&':' func_type_comment? block
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
            // name = ASYNC
                // generated call: (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            // collecting vars: Token async_var
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('def')
                // generated call: (_keyword = expect(KEYWORD_DEF)) != null  // token='def'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token n
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(params?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(params)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_80_var = _tmp_80_rule()) != null  // params
                // generated call: ((_opt_var = _tmp_80_rule()) != null || _opt_var == null)  // params?
            // collecting vars: None params
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // collecting vars: Token _literal_1
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['->' expression])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('->' expression)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_81_var = _tmp_81_rule()) != null  // '->' expression
                // generated call: ((_opt_var = _tmp_81_rule()) != null || _opt_var == null)  // ['->' expression]
            // collecting vars: None a
            // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
                // generated call: None
            // collecting vars: None None
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(func_type_comment?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(func_type_comment)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_82_var = _tmp_82_rule()) != null  // func_type_comment
                // generated call: ((_opt_var = _tmp_82_rule()) != null || _opt_var == null)  // func_type_comment?
            // collecting vars: None tc
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // name = block
                // generated call: (block_var = block_rule()) != null  // block
            // collecting vars: SSTNode[] b
            //    vars: {'async_var': 'Token', '_keyword': 'Token', 'n': 'Token', '_literal': 'Token', 'params': None, '_literal_1': 'Token', 'a': None, None: None, 'tc': None, 'b': 'SSTNode[]'}
            Token _keyword;
            Token _literal;
            Token _literal_1;
            Object a;
            Token async_var;
            SSTNode[] b;
            Token n;
            Object params;
            Object tc;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ASYNC
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(ASYNC)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
                // name = ASYNC
                // REMOVE result call (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
                (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: 'def'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('def')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('def')
                // REMOVE result call (_keyword = expect(KEYWORD_DEF)) != null  // token='def'
                (_keyword = expect(KEYWORD_DEF)) != null  // token='def'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (n = expect(Token.Kind.NAME)) != null  // NAME
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                &&
                // TODO visiting JavaParserGeneratorNamedItem: params?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(params?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(params?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(params)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_80_var = _tmp_80_rule()) != null  // params
                // REMOVE result call ((_opt_var = _tmp_80_rule()) != null || _opt_var == null)  // params?
                ((params = _tmp_80_rule()) != null || params == null)  // params?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
                (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ['->' expression]
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(['->' expression])
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['->' expression])
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('->' expression)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_81_var = _tmp_81_rule()) != null  // '->' expression
                // REMOVE result call ((_opt_var = _tmp_81_rule()) != null || _opt_var == null)  // ['->' expression]
                ((a = _tmp_81_rule()) != null || a == null)  // ['->' expression]
                &&
                // TODO visiting JavaParserGeneratorNamedItem: &&':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&&':')
                // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
                // TODO call is not created &&':' -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: func_type_comment?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(func_type_comment?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(func_type_comment?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(func_type_comment)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_82_var = _tmp_82_rule()) != null  // func_type_comment
                // REMOVE result call ((_opt_var = _tmp_82_rule()) != null || _opt_var == null)  // func_type_comment?
                ((tc = _tmp_82_rule()) != null || tc == null)  // func_type_comment?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
                // name = block
                // REMOVE result call (block_var = block_rule()) != null  // block
                (b = block_rule()) != null  // block
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("function_def_raw[" + pos + ", " + mark() +" ](level: " + level + ") ASYNC 'def' NAME '(' params? ')' ['->' expression] &&':' func_type_comment? block succeeded!");
                }
                // alt action: CHECK_VERSION ( stmt_ty , 5 , "Async functions are" , _PyAST_AsyncFunctionDef ( n -> v . Name . id , ( params ) ? params : CHECK ( arguments_ty , _PyPegen_empty_arguments ( p ) ) , b , NULL , a , NEW_TYPE_COMMENT ( p , tc ) , EXTRA ) )
                Token endToken = getToken(mark());
                // node.action: CHECK_VERSION ( stmt_ty , 5 , "Async functions are" , _PyAST_AsyncFunctionDef ( n -> v . Name . id , ( params ) ? params : CHECK ( arguments_ty , _PyPegen_empty_arguments ( p ) ) , b , NULL , a , NEW_TYPE_COMMENT ( p , tc ) , EXTRA ) )
                return (SSTNode)cache.putResult(pos, FUNCTION_DEF_RAW_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, FUNCTION_DEF_RAW_ID, null);
    }

    // func_type_comment:
    //     | NEWLINE TYPE_COMMENT &(NEWLINE INDENT)
    //     | invalid_double_type_comments
    //     | TYPE_COMMENT
    // TODO replacing Token* --> SSTNode[]
    public SSTNode[] func_type_comment_rule() {
    // isLoop: False, isGather: False, type: Token*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: func_type_comment, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, FUNC_TYPE_COMMENT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, FUNC_TYPE_COMMENT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: t
        {
            // visiting Alt: NEWLINE TYPE_COMMENT &(NEWLINE INDENT)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // name = NEWLINE
                // generated call: (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            // collecting vars: Token newline_var
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // name = TYPE_COMMENT
                // generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            // collecting vars: Token t
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&(NEWLINE INDENT))
                // generated call: None
            // collecting vars: None None
            //    vars: {'newline_var': 'Token', 't': 'Token', None: None}
            Token newline_var;
            Token t;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: NEWLINE
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
                // name = NEWLINE
                // REMOVE result call (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
                (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
                // name = TYPE_COMMENT
                // REMOVE result call (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
                (t = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: &(NEWLINE INDENT)
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&(NEWLINE INDENT))
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&(NEWLINE INDENT))
                // TODO call is not created &(NEWLINE INDENT) -> creates artificial
                true
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("func_type_comment[" + pos + ", " + mark() +" ](level: " + level + ") NEWLINE TYPE_COMMENT &(NEWLINE INDENT) succeeded!");
                }
                // alt action: t
                Token endToken = getToken(mark());
                // node.action: t
                result = t;
                return (SSTNode[])cache.putResult(pos, FUNC_TYPE_COMMENT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: invalid_double_type_comments
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_double_type_comments) - should work
            // name = invalid_double_type_comments
                // generated call: (invalid_double_type_comments_var = invalid_double_type_comments_rule()) != null  // invalid_double_type_comments
            // collecting vars: None invalid_double_type_comments_var
            //    vars: {'invalid_double_type_comments_var': None}
            Object invalid_double_type_comments_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: invalid_double_type_comments
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_double_type_comments)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_double_type_comments) - should work
                // name = invalid_double_type_comments
                // REMOVE result call (invalid_double_type_comments_var = invalid_double_type_comments_rule()) != null  // invalid_double_type_comments
                (invalid_double_type_comments_var = invalid_double_type_comments_rule()) != null  // invalid_double_type_comments
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("func_type_comment[" + pos + ", " + mark() +" ](level: " + level + ") invalid_double_type_comments succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['invalid_double_type_comments_var']
                result = invalid_double_type_comments_var;
                return (SSTNode[])cache.putResult(pos, FUNC_TYPE_COMMENT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: TYPE_COMMENT
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // name = TYPE_COMMENT
                // generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            // collecting vars: Token type_comment_var
            //    vars: {'type_comment_var': 'Token'}
            Token type_comment_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
                // name = TYPE_COMMENT
                // REMOVE result call (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
                (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("func_type_comment[" + pos + ", " + mark() +" ](level: " + level + ") TYPE_COMMENT succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['type_comment_var']
                result = type_comment_var;
                return (SSTNode[])cache.putResult(pos, FUNC_TYPE_COMMENT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, FUNC_TYPE_COMMENT_ID, null);
    }

    // params: invalid_parameters | parameters
    // TODO replacing arguments_ty --> SSTNode
    public SSTNode params_rule() {
    // isLoop: False, isGather: False, type: arguments_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: params, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, PARAMS_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, PARAMS_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: invalid_parameters
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_parameters) - should work
            // name = invalid_parameters
                // generated call: (invalid_parameters_var = invalid_parameters_rule()) != null  // invalid_parameters
            // collecting vars: None invalid_parameters_var
            //    vars: {'invalid_parameters_var': None}
            Object invalid_parameters_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: invalid_parameters
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_parameters)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_parameters) - should work
                // name = invalid_parameters
                // REMOVE result call (invalid_parameters_var = invalid_parameters_rule()) != null  // invalid_parameters
                (invalid_parameters_var = invalid_parameters_rule()) != null  // invalid_parameters
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("params[" + pos + ", " + mark() +" ](level: " + level + ") invalid_parameters succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['invalid_parameters_var']
                result = invalid_parameters_var;
                return (SSTNode)cache.putResult(pos, PARAMS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: parameters
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(parameters) - should work
            // name = parameters
            // TODO replacing arguments_ty --> SSTNode
                // generated call: (parameters_var = parameters_rule()) != null  // parameters
            // collecting vars: SSTNode parameters_var
            //    vars: {'parameters_var': 'SSTNode'}
            SSTNode parameters_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: parameters
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(parameters)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(parameters) - should work
                // name = parameters
                // TODO replacing arguments_ty --> SSTNode
                // REMOVE result call (parameters_var = parameters_rule()) != null  // parameters
                (parameters_var = parameters_rule()) != null  // parameters
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("params[" + pos + ", " + mark() +" ](level: " + level + ") parameters succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['parameters_var']
                result = parameters_var;
                return (SSTNode)cache.putResult(pos, PARAMS_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, PARAMS_ID, null);
    }

    // parameters:
    //     | slash_no_default param_no_default* param_with_default* star_etc?
    //     | slash_with_default param_with_default* star_etc?
    //     | param_no_default+ param_with_default* star_etc?
    //     | param_with_default+ star_etc?
    //     | star_etc
    // TODO replacing arguments_ty --> SSTNode
    public SSTNode parameters_rule() {
    // isLoop: False, isGather: False, type: arguments_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: parameters, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, PARAMETERS_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, PARAMETERS_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_make_arguments ( p , a , NULL , b , c , d )
        {
            // visiting Alt: slash_no_default param_no_default* param_with_default* star_etc?
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slash_no_default) - should work
            // name = slash_no_default
            // TODO replacing asdl_arg_seq[] --> SSTNode[]
                // generated call: (slash_no_default_var = slash_no_default_rule()) != null  // slash_no_default
            // collecting vars: SSTNode[] a
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_no_default*)
                // generated call: (_loop0_83_var = _loop0_83_rule()) != null  // param_no_default*
            // collecting vars: asdl_arg_seq* b
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_with_default*)
                // generated call: (_loop0_84_var = _loop0_84_rule()) != null  // param_with_default*
            // collecting vars: SSTNode[] c
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_etc?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_etc)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_85_var = _tmp_85_rule()) != null  // star_etc
                // generated call: ((_opt_var = _tmp_85_rule()) != null || _opt_var == null)  // star_etc?
            // collecting vars: None d
            //    vars: {'a': 'SSTNode[]', 'b': 'asdl_arg_seq*', 'c': 'SSTNode[]', 'd': None}
            SSTNode[] a;
            // TODO replacing asdl_arg_seq* --> SSTNode[]
            SSTNode[] b;
            SSTNode[] c;
            Object d;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: slash_no_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(slash_no_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slash_no_default) - should work
                // name = slash_no_default
                // TODO replacing asdl_arg_seq[] --> SSTNode[]
                // REMOVE result call (slash_no_default_var = slash_no_default_rule()) != null  // slash_no_default
                (a = slash_no_default_rule()) != null  // slash_no_default
                &&
                // TODO visiting JavaParserGeneratorNamedItem: param_no_default*
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default*)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_no_default*)
                // REMOVE result call (_loop0_83_var = _loop0_83_rule()) != null  // param_no_default*
                (b = (SSTNode[])_loop0_83_rule()) != null  // param_no_default*
                &&
                // TODO visiting JavaParserGeneratorNamedItem: param_with_default*
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_with_default*)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_with_default*)
                // REMOVE result call (_loop0_84_var = _loop0_84_rule()) != null  // param_with_default*
                (c = _loop0_84_rule()) != null  // param_with_default*
                &&
                // TODO visiting JavaParserGeneratorNamedItem: star_etc?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_etc?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_etc?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_etc)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_85_var = _tmp_85_rule()) != null  // star_etc
                // REMOVE result call ((_opt_var = _tmp_85_rule()) != null || _opt_var == null)  // star_etc?
                ((d = _tmp_85_rule()) != null || d == null)  // star_etc?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("parameters[" + pos + ", " + mark() +" ](level: " + level + ") slash_no_default param_no_default* param_with_default* star_etc? succeeded!");
                }
                // alt action: _PyPegen_make_arguments ( p , a , NULL , b , c , d )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_make_arguments ( p , a , NULL , b , c , d )
                return (SSTNode)cache.putResult(pos, PARAMETERS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_make_arguments ( p , NULL , a , NULL , b , c )
        {
            // visiting Alt: slash_with_default param_with_default* star_etc?
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slash_with_default) - should work
            // name = slash_with_default
            // TODO replacing SlashWithDefault[] --> SSTNode[]
                // generated call: (slash_with_default_var = slash_with_default_rule()) != null  // slash_with_default
            // collecting vars: SSTNode[] a
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_with_default*)
                // generated call: (_loop0_86_var = _loop0_86_rule()) != null  // param_with_default*
            // collecting vars: SSTNode[] b
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_etc?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_etc)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_87_var = _tmp_87_rule()) != null  // star_etc
                // generated call: ((_opt_var = _tmp_87_rule()) != null || _opt_var == null)  // star_etc?
            // collecting vars: None c
            //    vars: {'a': 'SSTNode[]', 'b': 'SSTNode[]', 'c': None}
            SSTNode[] a;
            SSTNode[] b;
            Object c;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: slash_with_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(slash_with_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slash_with_default) - should work
                // name = slash_with_default
                // TODO replacing SlashWithDefault[] --> SSTNode[]
                // REMOVE result call (slash_with_default_var = slash_with_default_rule()) != null  // slash_with_default
                (a = slash_with_default_rule()) != null  // slash_with_default
                &&
                // TODO visiting JavaParserGeneratorNamedItem: param_with_default*
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_with_default*)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_with_default*)
                // REMOVE result call (_loop0_86_var = _loop0_86_rule()) != null  // param_with_default*
                (b = _loop0_86_rule()) != null  // param_with_default*
                &&
                // TODO visiting JavaParserGeneratorNamedItem: star_etc?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_etc?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_etc?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_etc)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_87_var = _tmp_87_rule()) != null  // star_etc
                // REMOVE result call ((_opt_var = _tmp_87_rule()) != null || _opt_var == null)  // star_etc?
                ((c = _tmp_87_rule()) != null || c == null)  // star_etc?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("parameters[" + pos + ", " + mark() +" ](level: " + level + ") slash_with_default param_with_default* star_etc? succeeded!");
                }
                // alt action: _PyPegen_make_arguments ( p , NULL , a , NULL , b , c )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_make_arguments ( p , NULL , a , NULL , b , c )
                return (SSTNode)cache.putResult(pos, PARAMETERS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_make_arguments ( p , NULL , NULL , a , b , c )
        {
            // visiting Alt: param_no_default+ param_with_default* star_etc?
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_no_default+)
                // generated call: (_loop1_88_var = _loop1_88_rule()) != null  // param_no_default+
            // collecting vars: asdl_arg_seq* a
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_with_default*)
                // generated call: (_loop0_89_var = _loop0_89_rule()) != null  // param_with_default*
            // collecting vars: SSTNode[] b
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_etc?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_etc)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_90_var = _tmp_90_rule()) != null  // star_etc
                // generated call: ((_opt_var = _tmp_90_rule()) != null || _opt_var == null)  // star_etc?
            // collecting vars: None c
            //    vars: {'a': 'asdl_arg_seq*', 'b': 'SSTNode[]', 'c': None}
            // TODO replacing asdl_arg_seq* --> SSTNode[]
            SSTNode[] a;
            SSTNode[] b;
            Object c;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: param_no_default+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default+)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_no_default+)
                // REMOVE result call (_loop1_88_var = _loop1_88_rule()) != null  // param_no_default+
                (a = (SSTNode[])_loop1_88_rule()) != null  // param_no_default+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: param_with_default*
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_with_default*)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_with_default*)
                // REMOVE result call (_loop0_89_var = _loop0_89_rule()) != null  // param_with_default*
                (b = _loop0_89_rule()) != null  // param_with_default*
                &&
                // TODO visiting JavaParserGeneratorNamedItem: star_etc?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_etc?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_etc?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_etc)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_90_var = _tmp_90_rule()) != null  // star_etc
                // REMOVE result call ((_opt_var = _tmp_90_rule()) != null || _opt_var == null)  // star_etc?
                ((c = _tmp_90_rule()) != null || c == null)  // star_etc?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("parameters[" + pos + ", " + mark() +" ](level: " + level + ") param_no_default+ param_with_default* star_etc? succeeded!");
                }
                // alt action: _PyPegen_make_arguments ( p , NULL , NULL , a , b , c )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_make_arguments ( p , NULL , NULL , a , b , c )
                return (SSTNode)cache.putResult(pos, PARAMETERS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_make_arguments ( p , NULL , NULL , NULL , a , b )
        {
            // visiting Alt: param_with_default+ star_etc?
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_with_default+)
                // generated call: (_loop1_91_var = _loop1_91_rule()) != null  // param_with_default+
            // collecting vars: SSTNode[] a
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_etc?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_etc)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_92_var = _tmp_92_rule()) != null  // star_etc
                // generated call: ((_opt_var = _tmp_92_rule()) != null || _opt_var == null)  // star_etc?
            // collecting vars: None b
            //    vars: {'a': 'SSTNode[]', 'b': None}
            SSTNode[] a;
            Object b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: param_with_default+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_with_default+)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_with_default+)
                // REMOVE result call (_loop1_91_var = _loop1_91_rule()) != null  // param_with_default+
                (a = _loop1_91_rule()) != null  // param_with_default+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: star_etc?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_etc?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_etc?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_etc)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_92_var = _tmp_92_rule()) != null  // star_etc
                // REMOVE result call ((_opt_var = _tmp_92_rule()) != null || _opt_var == null)  // star_etc?
                ((b = _tmp_92_rule()) != null || b == null)  // star_etc?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("parameters[" + pos + ", " + mark() +" ](level: " + level + ") param_with_default+ star_etc? succeeded!");
                }
                // alt action: _PyPegen_make_arguments ( p , NULL , NULL , NULL , a , b )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_make_arguments ( p , NULL , NULL , NULL , a , b )
                return (SSTNode)cache.putResult(pos, PARAMETERS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_make_arguments ( p , NULL , NULL , NULL , NULL , a )
        {
            // visiting Alt: star_etc
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_etc) - should work
            // name = star_etc
            // TODO replacing StarEtc[] --> SSTNode[]
                // generated call: (star_etc_var = star_etc_rule()) != null  // star_etc
            // collecting vars: SSTNode[] a
            //    vars: {'a': 'SSTNode[]'}
            SSTNode[] a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_etc
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_etc)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_etc) - should work
                // name = star_etc
                // TODO replacing StarEtc[] --> SSTNode[]
                // REMOVE result call (star_etc_var = star_etc_rule()) != null  // star_etc
                (a = star_etc_rule()) != null  // star_etc
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("parameters[" + pos + ", " + mark() +" ](level: " + level + ") star_etc succeeded!");
                }
                // alt action: _PyPegen_make_arguments ( p , NULL , NULL , NULL , NULL , a )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_make_arguments ( p , NULL , NULL , NULL , NULL , a )
                return (SSTNode)cache.putResult(pos, PARAMETERS_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, PARAMETERS_ID, null);
    }

    // slash_no_default: param_no_default+ '/' ',' | param_no_default+ '/' &')'
    // TODO replacing asdl_arg_seq* --> SSTNode[]
    public SSTNode[] slash_no_default_rule() {
    // isLoop: False, isGather: False, type: asdl_arg_seq*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: slash_no_default, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, SLASH_NO_DEFAULT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, SLASH_NO_DEFAULT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: a
        {
            // visiting Alt: param_no_default+ '/' ','
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_no_default+)
                // generated call: (_loop1_93_var = _loop1_93_rule()) != null  // param_no_default+
            // collecting vars: asdl_arg_seq* a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
                // generated call: (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal_1
            //    vars: {'a': 'asdl_arg_seq*', '_literal': 'Token', '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            // TODO replacing asdl_arg_seq* --> SSTNode[]
            SSTNode[] a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: param_no_default+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default+)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_no_default+)
                // REMOVE result call (_loop1_93_var = _loop1_93_rule()) != null  // param_no_default+
                (a = (SSTNode[])_loop1_93_rule()) != null  // param_no_default+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '/'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('/')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
                // REMOVE result call (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
                (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal_1 = expect(Token.Kind.COMMA)) != null  // token=','
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("slash_no_default[" + pos + ", " + mark() +" ](level: " + level + ") param_no_default+ '/' ',' succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode[])cache.putResult(pos, SLASH_NO_DEFAULT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: a
        {
            // visiting Alt: param_no_default+ '/' &')'
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_no_default+)
                // generated call: (_loop1_94_var = _loop1_94_rule()) != null  // param_no_default+
            // collecting vars: asdl_arg_seq* a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
                // generated call: (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            // collecting vars: Token _literal
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
                // generated call: None
            // collecting vars: None None
            //    vars: {'a': 'asdl_arg_seq*', '_literal': 'Token', None: None}
            Token _literal;
            // TODO replacing asdl_arg_seq* --> SSTNode[]
            SSTNode[] a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: param_no_default+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default+)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_no_default+)
                // REMOVE result call (_loop1_94_var = _loop1_94_rule()) != null  // param_no_default+
                (a = (SSTNode[])_loop1_94_rule()) != null  // param_no_default+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '/'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('/')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
                // REMOVE result call (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
                (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: &')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&')')
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
                // TODO call is not created &')' -> creates artificial
                true
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("slash_no_default[" + pos + ", " + mark() +" ](level: " + level + ") param_no_default+ '/' &')' succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode[])cache.putResult(pos, SLASH_NO_DEFAULT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, SLASH_NO_DEFAULT_ID, null);
    }

    // slash_with_default:
    //     | param_no_default* param_with_default+ '/' ','
    //     | param_no_default* param_with_default+ '/' &')'
    // TODO replacing SlashWithDefault* --> SSTNode[]
    public SSTNode[] slash_with_default_rule() {
    // isLoop: False, isGather: False, type: SlashWithDefault*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: slash_with_default, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, SLASH_WITH_DEFAULT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, SLASH_WITH_DEFAULT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_slash_with_default ( p , ( asdl_arg_seq * ) a , b )
        {
            // visiting Alt: param_no_default* param_with_default+ '/' ','
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_no_default*)
                // generated call: (_loop0_95_var = _loop0_95_rule()) != null  // param_no_default*
            // collecting vars: SSTNode[] a
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_with_default+)
                // generated call: (_loop1_96_var = _loop1_96_rule()) != null  // param_with_default+
            // collecting vars: SSTNode[] b
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
                // generated call: (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal_1
            //    vars: {'a': 'SSTNode[]', 'b': 'SSTNode[]', '_literal': 'Token', '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            SSTNode[] a;
            SSTNode[] b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: param_no_default*
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default*)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_no_default*)
                // REMOVE result call (_loop0_95_var = _loop0_95_rule()) != null  // param_no_default*
                (a = _loop0_95_rule()) != null  // param_no_default*
                &&
                // TODO visiting JavaParserGeneratorNamedItem: param_with_default+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_with_default+)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_with_default+)
                // REMOVE result call (_loop1_96_var = _loop1_96_rule()) != null  // param_with_default+
                (b = _loop1_96_rule()) != null  // param_with_default+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '/'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('/')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
                // REMOVE result call (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
                (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal_1 = expect(Token.Kind.COMMA)) != null  // token=','
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("slash_with_default[" + pos + ", " + mark() +" ](level: " + level + ") param_no_default* param_with_default+ '/' ',' succeeded!");
                }
                // alt action: _PyPegen_slash_with_default ( p , ( asdl_arg_seq * ) a , b )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_slash_with_default ( p , ( asdl_arg_seq * ) a , b )
                return (SSTNode[])cache.putResult(pos, SLASH_WITH_DEFAULT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_slash_with_default ( p , ( asdl_arg_seq * ) a , b )
        {
            // visiting Alt: param_no_default* param_with_default+ '/' &')'
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_no_default*)
                // generated call: (_loop0_97_var = _loop0_97_rule()) != null  // param_no_default*
            // collecting vars: SSTNode[] a
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_with_default+)
                // generated call: (_loop1_98_var = _loop1_98_rule()) != null  // param_with_default+
            // collecting vars: SSTNode[] b
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
                // generated call: (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            // collecting vars: Token _literal
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
                // generated call: None
            // collecting vars: None None
            //    vars: {'a': 'SSTNode[]', 'b': 'SSTNode[]', '_literal': 'Token', None: None}
            Token _literal;
            SSTNode[] a;
            SSTNode[] b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: param_no_default*
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default*)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_no_default*)
                // REMOVE result call (_loop0_97_var = _loop0_97_rule()) != null  // param_no_default*
                (a = _loop0_97_rule()) != null  // param_no_default*
                &&
                // TODO visiting JavaParserGeneratorNamedItem: param_with_default+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_with_default+)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_with_default+)
                // REMOVE result call (_loop1_98_var = _loop1_98_rule()) != null  // param_with_default+
                (b = _loop1_98_rule()) != null  // param_with_default+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '/'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('/')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
                // REMOVE result call (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
                (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: &')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&')')
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
                // TODO call is not created &')' -> creates artificial
                true
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("slash_with_default[" + pos + ", " + mark() +" ](level: " + level + ") param_no_default* param_with_default+ '/' &')' succeeded!");
                }
                // alt action: _PyPegen_slash_with_default ( p , ( asdl_arg_seq * ) a , b )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_slash_with_default ( p , ( asdl_arg_seq * ) a , b )
                return (SSTNode[])cache.putResult(pos, SLASH_WITH_DEFAULT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, SLASH_WITH_DEFAULT_ID, null);
    }

    // star_etc:
    //     | '*' param_no_default param_maybe_default* kwds?
    //     | '*' ',' param_maybe_default+ kwds?
    //     | kwds
    //     | invalid_star_etc
    // TODO replacing StarEtc* --> SSTNode[]
    public SSTNode[] star_etc_rule() {
    // isLoop: False, isGather: False, type: StarEtc*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: star_etc, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, STAR_ETC_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, STAR_ETC_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_star_etc ( p , a , b , c )
        {
            // visiting Alt: '*' param_no_default param_maybe_default* kwds?
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
            // name = param_no_default
            // TODO replacing arg_ty --> SSTNode
                // generated call: (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            // collecting vars: SSTNode a
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_maybe_default*)
                // generated call: (_loop0_99_var = _loop0_99_rule()) != null  // param_maybe_default*
            // collecting vars: SSTNode[] b
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(kwds?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(kwds)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_100_var = _tmp_100_rule()) != null  // kwds
                // generated call: ((_opt_var = _tmp_100_rule()) != null || _opt_var == null)  // kwds?
            // collecting vars: None c
            //    vars: {'_literal': 'Token', 'a': 'SSTNode', 'b': 'SSTNode[]', 'c': None}
            Token _literal;
            SSTNode a;
            SSTNode[] b;
            Object c;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '*'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: param_no_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
                // name = param_no_default
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (param_no_default_var = param_no_default_rule()) != null  // param_no_default
                (a = param_no_default_rule()) != null  // param_no_default
                &&
                // TODO visiting JavaParserGeneratorNamedItem: param_maybe_default*
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_maybe_default*)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_maybe_default*)
                // REMOVE result call (_loop0_99_var = _loop0_99_rule()) != null  // param_maybe_default*
                (b = _loop0_99_rule()) != null  // param_maybe_default*
                &&
                // TODO visiting JavaParserGeneratorNamedItem: kwds?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kwds?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(kwds?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(kwds)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_100_var = _tmp_100_rule()) != null  // kwds
                // REMOVE result call ((_opt_var = _tmp_100_rule()) != null || _opt_var == null)  // kwds?
                ((c = _tmp_100_rule()) != null || c == null)  // kwds?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("star_etc[" + pos + ", " + mark() +" ](level: " + level + ") '*' param_no_default param_maybe_default* kwds? succeeded!");
                }
                // alt action: _PyPegen_star_etc ( p , a , b , c )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_star_etc ( p , a , b , c )
                return (SSTNode[])cache.putResult(pos, STAR_ETC_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_star_etc ( p , NULL , b , c )
        {
            // visiting Alt: '*' ',' param_maybe_default+ kwds?
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal_1
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_maybe_default+)
                // generated call: (_loop1_101_var = _loop1_101_rule()) != null  // param_maybe_default+
            // collecting vars: SSTNode[] b
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(kwds?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(kwds)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_102_var = _tmp_102_rule()) != null  // kwds
                // generated call: ((_opt_var = _tmp_102_rule()) != null || _opt_var == null)  // kwds?
            // collecting vars: None c
            //    vars: {'_literal': 'Token', '_literal_1': 'Token', 'b': 'SSTNode[]', 'c': None}
            Token _literal;
            Token _literal_1;
            SSTNode[] b;
            Object c;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '*'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal_1 = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: param_maybe_default+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_maybe_default+)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_maybe_default+)
                // REMOVE result call (_loop1_101_var = _loop1_101_rule()) != null  // param_maybe_default+
                (b = _loop1_101_rule()) != null  // param_maybe_default+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: kwds?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kwds?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(kwds?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(kwds)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_102_var = _tmp_102_rule()) != null  // kwds
                // REMOVE result call ((_opt_var = _tmp_102_rule()) != null || _opt_var == null)  // kwds?
                ((c = _tmp_102_rule()) != null || c == null)  // kwds?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("star_etc[" + pos + ", " + mark() +" ](level: " + level + ") '*' ',' param_maybe_default+ kwds? succeeded!");
                }
                // alt action: _PyPegen_star_etc ( p , NULL , b , c )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_star_etc ( p , NULL , b , c )
                return (SSTNode[])cache.putResult(pos, STAR_ETC_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_star_etc ( p , NULL , NULL , a )
        {
            // visiting Alt: kwds
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwds) - should work
            // name = kwds
            // TODO replacing arg_ty --> SSTNode
                // generated call: (kwds_var = kwds_rule()) != null  // kwds
            // collecting vars: SSTNode a
            //    vars: {'a': 'SSTNode'}
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: kwds
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kwds)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwds) - should work
                // name = kwds
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (kwds_var = kwds_rule()) != null  // kwds
                (a = kwds_rule()) != null  // kwds
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("star_etc[" + pos + ", " + mark() +" ](level: " + level + ") kwds succeeded!");
                }
                // alt action: _PyPegen_star_etc ( p , NULL , NULL , a )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_star_etc ( p , NULL , NULL , a )
                return (SSTNode[])cache.putResult(pos, STAR_ETC_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: invalid_star_etc
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_star_etc) - should work
            // name = invalid_star_etc
                // generated call: (invalid_star_etc_var = invalid_star_etc_rule()) != null  // invalid_star_etc
            // collecting vars: None invalid_star_etc_var
            //    vars: {'invalid_star_etc_var': None}
            Object invalid_star_etc_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: invalid_star_etc
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_star_etc)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_star_etc) - should work
                // name = invalid_star_etc
                // REMOVE result call (invalid_star_etc_var = invalid_star_etc_rule()) != null  // invalid_star_etc
                (invalid_star_etc_var = invalid_star_etc_rule()) != null  // invalid_star_etc
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("star_etc[" + pos + ", " + mark() +" ](level: " + level + ") invalid_star_etc succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['invalid_star_etc_var']
                result = invalid_star_etc_var;
                return (SSTNode[])cache.putResult(pos, STAR_ETC_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, STAR_ETC_ID, null);
    }

    // kwds: '**' param_no_default
    // TODO replacing arg_ty --> SSTNode
    public SSTNode kwds_rule() {
    // isLoop: False, isGather: False, type: arg_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: kwds, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, KWDS_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, KWDS_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: a
        {
            // visiting Alt: '**' param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
                // generated call: (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
            // name = param_no_default
            // TODO replacing arg_ty --> SSTNode
                // generated call: (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            // collecting vars: SSTNode a
            //    vars: {'_literal': 'Token', 'a': 'SSTNode'}
            Token _literal;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '**'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('**')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
                // REMOVE result call (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
                (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: param_no_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
                // name = param_no_default
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (param_no_default_var = param_no_default_rule()) != null  // param_no_default
                (a = param_no_default_rule()) != null  // param_no_default
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("kwds[" + pos + ", " + mark() +" ](level: " + level + ") '**' param_no_default succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode)cache.putResult(pos, KWDS_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, KWDS_ID, null);
    }

    // param_no_default: param ',' TYPE_COMMENT? | param TYPE_COMMENT? &')'
    // TODO replacing arg_ty --> SSTNode
    public SSTNode param_no_default_rule() {
    // isLoop: False, isGather: False, type: arg_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: param_no_default, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, PARAM_NO_DEFAULT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, PARAM_NO_DEFAULT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_add_type_comment_to_arg ( p , a , tc )
        {
            // visiting Alt: param ',' TYPE_COMMENT?
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
            // name = param
            // TODO replacing arg_ty --> SSTNode
                // generated call: (param_var = param_rule()) != null  // param
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // name = TYPE_COMMENT
                // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
                // generated call: ((_opt_var = expect(Token.Kind.TYPE_COMMENT)) != null || _opt_var == null)  // TYPE_COMMENT?
            // collecting vars: None tc
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'tc': None}
            Token _literal;
            SSTNode a;
            Object tc;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: param
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
                // name = param
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (param_var = param_rule()) != null  // param
                (a = param_rule()) != null  // param
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
                // name = TYPE_COMMENT
                    // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
                // REMOVE result call ((_opt_var = expect(Token.Kind.TYPE_COMMENT)) != null || _opt_var == null)  // TYPE_COMMENT?
                ((tc = expect(Token.Kind.TYPE_COMMENT)) != null || tc == null)  // TYPE_COMMENT?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("param_no_default[" + pos + ", " + mark() +" ](level: " + level + ") param ',' TYPE_COMMENT? succeeded!");
                }
                // alt action: _PyPegen_add_type_comment_to_arg ( p , a , tc )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_add_type_comment_to_arg ( p , a , tc )
                return (SSTNode)cache.putResult(pos, PARAM_NO_DEFAULT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_add_type_comment_to_arg ( p , a , tc )
        {
            // visiting Alt: param TYPE_COMMENT? &')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
            // name = param
            // TODO replacing arg_ty --> SSTNode
                // generated call: (param_var = param_rule()) != null  // param
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // name = TYPE_COMMENT
                // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
                // generated call: ((_opt_var = expect(Token.Kind.TYPE_COMMENT)) != null || _opt_var == null)  // TYPE_COMMENT?
            // collecting vars: None tc
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
                // generated call: None
            // collecting vars: None None
            //    vars: {'a': 'SSTNode', 'tc': None, None: None}
            SSTNode a;
            Object tc;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: param
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
                // name = param
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (param_var = param_rule()) != null  // param
                (a = param_rule()) != null  // param
                &&
                // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
                // name = TYPE_COMMENT
                    // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
                // REMOVE result call ((_opt_var = expect(Token.Kind.TYPE_COMMENT)) != null || _opt_var == null)  // TYPE_COMMENT?
                ((tc = expect(Token.Kind.TYPE_COMMENT)) != null || tc == null)  // TYPE_COMMENT?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: &')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&')')
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
                // TODO call is not created &')' -> creates artificial
                true
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("param_no_default[" + pos + ", " + mark() +" ](level: " + level + ") param TYPE_COMMENT? &')' succeeded!");
                }
                // alt action: _PyPegen_add_type_comment_to_arg ( p , a , tc )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_add_type_comment_to_arg ( p , a , tc )
                return (SSTNode)cache.putResult(pos, PARAM_NO_DEFAULT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, PARAM_NO_DEFAULT_ID, null);
    }

    // param_with_default:
    //     | param default_param ',' TYPE_COMMENT?
    //     | param default_param TYPE_COMMENT? &')'
    // TODO replacing NameDefaultPair* --> SSTNode[]
    public SSTNode[] param_with_default_rule() {
    // isLoop: False, isGather: False, type: NameDefaultPair*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: param_with_default, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, PARAM_WITH_DEFAULT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, PARAM_WITH_DEFAULT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_name_default_pair ( p , a , c , tc )
        {
            // visiting Alt: param default_param ',' TYPE_COMMENT?
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
            // name = param
            // TODO replacing arg_ty --> SSTNode
                // generated call: (param_var = param_rule()) != null  // param
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
            // name = default_param
                // generated call: (default_param_var = default_param_rule()) != null  // default_param
            // collecting vars: SSTNode c
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // name = TYPE_COMMENT
                // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
                // generated call: ((_opt_var = expect(Token.Kind.TYPE_COMMENT)) != null || _opt_var == null)  // TYPE_COMMENT?
            // collecting vars: None tc
            //    vars: {'a': 'SSTNode', 'c': 'SSTNode', '_literal': 'Token', 'tc': None}
            Token _literal;
            SSTNode a;
            SSTNode c;
            Object tc;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: param
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
                // name = param
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (param_var = param_rule()) != null  // param
                (a = param_rule()) != null  // param
                &&
                // TODO visiting JavaParserGeneratorNamedItem: default_param
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(default_param)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
                // name = default_param
                // REMOVE result call (default_param_var = default_param_rule()) != null  // default_param
                (c = default_param_rule()) != null  // default_param
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
                // name = TYPE_COMMENT
                    // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
                // REMOVE result call ((_opt_var = expect(Token.Kind.TYPE_COMMENT)) != null || _opt_var == null)  // TYPE_COMMENT?
                ((tc = expect(Token.Kind.TYPE_COMMENT)) != null || tc == null)  // TYPE_COMMENT?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("param_with_default[" + pos + ", " + mark() +" ](level: " + level + ") param default_param ',' TYPE_COMMENT? succeeded!");
                }
                // alt action: _PyPegen_name_default_pair ( p , a , c , tc )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_name_default_pair ( p , a , c , tc )
                return (SSTNode[])cache.putResult(pos, PARAM_WITH_DEFAULT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_name_default_pair ( p , a , c , tc )
        {
            // visiting Alt: param default_param TYPE_COMMENT? &')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
            // name = param
            // TODO replacing arg_ty --> SSTNode
                // generated call: (param_var = param_rule()) != null  // param
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
            // name = default_param
                // generated call: (default_param_var = default_param_rule()) != null  // default_param
            // collecting vars: SSTNode c
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // name = TYPE_COMMENT
                // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
                // generated call: ((_opt_var = expect(Token.Kind.TYPE_COMMENT)) != null || _opt_var == null)  // TYPE_COMMENT?
            // collecting vars: None tc
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
                // generated call: None
            // collecting vars: None None
            //    vars: {'a': 'SSTNode', 'c': 'SSTNode', 'tc': None, None: None}
            SSTNode a;
            SSTNode c;
            Object tc;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: param
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
                // name = param
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (param_var = param_rule()) != null  // param
                (a = param_rule()) != null  // param
                &&
                // TODO visiting JavaParserGeneratorNamedItem: default_param
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(default_param)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
                // name = default_param
                // REMOVE result call (default_param_var = default_param_rule()) != null  // default_param
                (c = default_param_rule()) != null  // default_param
                &&
                // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
                // name = TYPE_COMMENT
                    // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
                // REMOVE result call ((_opt_var = expect(Token.Kind.TYPE_COMMENT)) != null || _opt_var == null)  // TYPE_COMMENT?
                ((tc = expect(Token.Kind.TYPE_COMMENT)) != null || tc == null)  // TYPE_COMMENT?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: &')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&')')
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
                // TODO call is not created &')' -> creates artificial
                true
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("param_with_default[" + pos + ", " + mark() +" ](level: " + level + ") param default_param TYPE_COMMENT? &')' succeeded!");
                }
                // alt action: _PyPegen_name_default_pair ( p , a , c , tc )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_name_default_pair ( p , a , c , tc )
                return (SSTNode[])cache.putResult(pos, PARAM_WITH_DEFAULT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, PARAM_WITH_DEFAULT_ID, null);
    }

    // param_maybe_default:
    //     | param default_param? ',' TYPE_COMMENT?
    //     | param default_param? TYPE_COMMENT? &')'
    // TODO replacing NameDefaultPair* --> SSTNode[]
    public SSTNode[] param_maybe_default_rule() {
    // isLoop: False, isGather: False, type: NameDefaultPair*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: param_maybe_default, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, PARAM_MAYBE_DEFAULT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, PARAM_MAYBE_DEFAULT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_name_default_pair ( p , a , c , tc )
        {
            // visiting Alt: param default_param? ',' TYPE_COMMENT?
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
            // name = param
            // TODO replacing arg_ty --> SSTNode
                // generated call: (param_var = param_rule()) != null  // param
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(default_param?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
            // name = default_param
                // JavaCallMakerVisitor.visit_Opt.generated call: (default_param_var = default_param_rule()) != null  // default_param
                // generated call: ((_opt_var = default_param_rule()) != null || _opt_var == null)  // default_param?
            // collecting vars: None c
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // name = TYPE_COMMENT
                // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
                // generated call: ((_opt_var = expect(Token.Kind.TYPE_COMMENT)) != null || _opt_var == null)  // TYPE_COMMENT?
            // collecting vars: None tc
            //    vars: {'a': 'SSTNode', 'c': None, '_literal': 'Token', 'tc': None}
            Token _literal;
            SSTNode a;
            Object c;
            Object tc;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: param
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
                // name = param
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (param_var = param_rule()) != null  // param
                (a = param_rule()) != null  // param
                &&
                // TODO visiting JavaParserGeneratorNamedItem: default_param?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(default_param?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(default_param?)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
                // name = default_param
                    // JavaCallMakerVisitor.visit_Opt.generated call: (default_param_var = default_param_rule()) != null  // default_param
                // REMOVE result call ((_opt_var = default_param_rule()) != null || _opt_var == null)  // default_param?
                ((c = default_param_rule()) != null || c == null)  // default_param?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
                // name = TYPE_COMMENT
                    // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
                // REMOVE result call ((_opt_var = expect(Token.Kind.TYPE_COMMENT)) != null || _opt_var == null)  // TYPE_COMMENT?
                ((tc = expect(Token.Kind.TYPE_COMMENT)) != null || tc == null)  // TYPE_COMMENT?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("param_maybe_default[" + pos + ", " + mark() +" ](level: " + level + ") param default_param? ',' TYPE_COMMENT? succeeded!");
                }
                // alt action: _PyPegen_name_default_pair ( p , a , c , tc )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_name_default_pair ( p , a , c , tc )
                return (SSTNode[])cache.putResult(pos, PARAM_MAYBE_DEFAULT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_name_default_pair ( p , a , c , tc )
        {
            // visiting Alt: param default_param? TYPE_COMMENT? &')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
            // name = param
            // TODO replacing arg_ty --> SSTNode
                // generated call: (param_var = param_rule()) != null  // param
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(default_param?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
            // name = default_param
                // JavaCallMakerVisitor.visit_Opt.generated call: (default_param_var = default_param_rule()) != null  // default_param
                // generated call: ((_opt_var = default_param_rule()) != null || _opt_var == null)  // default_param?
            // collecting vars: None c
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // name = TYPE_COMMENT
                // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
                // generated call: ((_opt_var = expect(Token.Kind.TYPE_COMMENT)) != null || _opt_var == null)  // TYPE_COMMENT?
            // collecting vars: None tc
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
                // generated call: None
            // collecting vars: None None
            //    vars: {'a': 'SSTNode', 'c': None, 'tc': None, None: None}
            SSTNode a;
            Object c;
            Object tc;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: param
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param) - should work
                // name = param
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (param_var = param_rule()) != null  // param
                (a = param_rule()) != null  // param
                &&
                // TODO visiting JavaParserGeneratorNamedItem: default_param?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(default_param?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(default_param?)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
                // name = default_param
                    // JavaCallMakerVisitor.visit_Opt.generated call: (default_param_var = default_param_rule()) != null  // default_param
                // REMOVE result call ((_opt_var = default_param_rule()) != null || _opt_var == null)  // default_param?
                ((c = default_param_rule()) != null || c == null)  // default_param?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(TYPE_COMMENT?)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
                // name = TYPE_COMMENT
                    // JavaCallMakerVisitor.visit_Opt.generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
                // REMOVE result call ((_opt_var = expect(Token.Kind.TYPE_COMMENT)) != null || _opt_var == null)  // TYPE_COMMENT?
                ((tc = expect(Token.Kind.TYPE_COMMENT)) != null || tc == null)  // TYPE_COMMENT?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: &')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&')')
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
                // TODO call is not created &')' -> creates artificial
                true
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("param_maybe_default[" + pos + ", " + mark() +" ](level: " + level + ") param default_param? TYPE_COMMENT? &')' succeeded!");
                }
                // alt action: _PyPegen_name_default_pair ( p , a , c , tc )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_name_default_pair ( p , a , c , tc )
                return (SSTNode[])cache.putResult(pos, PARAM_MAYBE_DEFAULT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, PARAM_MAYBE_DEFAULT_ID, null);
    }

    // param: NAME annotation?
    // TODO replacing arg_ty --> SSTNode
    public SSTNode param_rule() {
    // isLoop: False, isGather: False, type: arg_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: param, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, PARAM_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, PARAM_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_arg ( a -> v . Name . id , b , NULL , EXTRA )
        {
            // visiting Alt: NAME annotation?
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token a
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(annotation?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(annotation) - should work
            // name = annotation
                // JavaCallMakerVisitor.visit_Opt.generated call: (annotation_var = annotation_rule()) != null  // annotation
                // generated call: ((_opt_var = annotation_rule()) != null || _opt_var == null)  // annotation?
            // collecting vars: None b
            //    vars: {'a': 'Token', 'b': None}
            Token a;
            Object b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (a = expect(Token.Kind.NAME)) != null  // NAME
                &&
                // TODO visiting JavaParserGeneratorNamedItem: annotation?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(annotation?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(annotation?)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(annotation) - should work
                // name = annotation
                    // JavaCallMakerVisitor.visit_Opt.generated call: (annotation_var = annotation_rule()) != null  // annotation
                // REMOVE result call ((_opt_var = annotation_rule()) != null || _opt_var == null)  // annotation?
                ((b = annotation_rule()) != null || b == null)  // annotation?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("param[" + pos + ", " + mark() +" ](level: " + level + ") NAME annotation? succeeded!");
                }
                // alt action: _PyAST_arg ( a -> v . Name . id , b , NULL , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_arg ( a -> v . Name . id , b , NULL , EXTRA )
                return (SSTNode)cache.putResult(pos, PARAM_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, PARAM_ID, null);
    }

    // annotation: ':' expression
    public SSTNode annotation_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: annotation, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, ANNOTATION_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, ANNOTATION_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: a
        {
            // visiting Alt: ':' expression
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode a
            //    vars: {'_literal': 'Token', 'a': 'SSTNode'}
            Token _literal;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (a = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("annotation[" + pos + ", " + mark() +" ](level: " + level + ") ':' expression succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode)cache.putResult(pos, ANNOTATION_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, ANNOTATION_ID, null);
    }

    // default_param: '=' expression
    public SSTNode default_param_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: default_param, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, DEFAULT_PARAM_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, DEFAULT_PARAM_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: a
        {
            // visiting Alt: '=' expression
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // generated call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode a
            //    vars: {'_literal': 'Token', 'a': 'SSTNode'}
            Token _literal;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // REMOVE result call (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
                (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (a = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("default_param[" + pos + ", " + mark() +" ](level: " + level + ") '=' expression succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode)cache.putResult(pos, DEFAULT_PARAM_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, DEFAULT_PARAM_ID, null);
    }

    // decorators: (('@' named_expression NEWLINE))+
    // TODO replacing asdl_expr_seq* --> SSTNode[]
    public SSTNode[] decorators_rule() {
    // isLoop: False, isGather: False, type: asdl_expr_seq*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: decorators, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, DECORATORS_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, DECORATORS_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: a
        {
            // visiting Alt: (('@' named_expression NEWLINE))+
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1((('@' named_expression NEWLINE))+)
                // generated call: (_loop1_103_var = _loop1_103_rule()) != null  // (('@' named_expression NEWLINE))+
            // collecting vars: asdl_expr_seq* a
            //    vars: {'a': 'asdl_expr_seq*'}
            // TODO replacing asdl_expr_seq* --> SSTNode[]
            SSTNode[] a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: (('@' named_expression NEWLINE))+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((('@' named_expression NEWLINE))+)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat1((('@' named_expression NEWLINE))+)
                // REMOVE result call (_loop1_103_var = _loop1_103_rule()) != null  // (('@' named_expression NEWLINE))+
                (a = (SSTNode[])_loop1_103_rule()) != null  // (('@' named_expression NEWLINE))+
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("decorators[" + pos + ", " + mark() +" ](level: " + level + ") (('@' named_expression NEWLINE))+ succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode[])cache.putResult(pos, DECORATORS_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, DECORATORS_ID, null);
    }

    // class_def: decorators class_def_raw | class_def_raw
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode class_def_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: class_def, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, CLASS_DEF_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, CLASS_DEF_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_class_def_decorators ( p , a , b )
        {
            // visiting Alt: decorators class_def_raw
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(decorators) - should work
            // name = decorators
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // generated call: (decorators_var = decorators_rule()) != null  // decorators
            // collecting vars: SSTNode[] a
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(class_def_raw) - should work
            // name = class_def_raw
            // TODO replacing stmt_ty --> SSTNode
                // generated call: (class_def_raw_var = class_def_raw_rule()) != null  // class_def_raw
            // collecting vars: SSTNode b
            //    vars: {'a': 'SSTNode[]', 'b': 'SSTNode'}
            SSTNode[] a;
            SSTNode b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: decorators
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(decorators)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(decorators) - should work
                // name = decorators
                // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // REMOVE result call (decorators_var = decorators_rule()) != null  // decorators
                (a = decorators_rule()) != null  // decorators
                &&
                // TODO visiting JavaParserGeneratorNamedItem: class_def_raw
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(class_def_raw)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(class_def_raw) - should work
                // name = class_def_raw
                // TODO replacing stmt_ty --> SSTNode
                // REMOVE result call (class_def_raw_var = class_def_raw_rule()) != null  // class_def_raw
                (b = class_def_raw_rule()) != null  // class_def_raw
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("class_def[" + pos + ", " + mark() +" ](level: " + level + ") decorators class_def_raw succeeded!");
                }
                // alt action: _PyPegen_class_def_decorators ( p , a , b )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_class_def_decorators ( p , a , b )
                return (SSTNode)cache.putResult(pos, CLASS_DEF_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: class_def_raw
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(class_def_raw) - should work
            // name = class_def_raw
            // TODO replacing stmt_ty --> SSTNode
                // generated call: (class_def_raw_var = class_def_raw_rule()) != null  // class_def_raw
            // collecting vars: SSTNode class_def_raw_var
            //    vars: {'class_def_raw_var': 'SSTNode'}
            SSTNode class_def_raw_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: class_def_raw
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(class_def_raw)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(class_def_raw) - should work
                // name = class_def_raw
                // TODO replacing stmt_ty --> SSTNode
                // REMOVE result call (class_def_raw_var = class_def_raw_rule()) != null  // class_def_raw
                (class_def_raw_var = class_def_raw_rule()) != null  // class_def_raw
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("class_def[" + pos + ", " + mark() +" ](level: " + level + ") class_def_raw succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['class_def_raw_var']
                result = class_def_raw_var;
                return (SSTNode)cache.putResult(pos, CLASS_DEF_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, CLASS_DEF_ID, null);
    }

    // class_def_raw: 'class' NAME ['(' arguments? ')'] &&':' block
    // TODO replacing stmt_ty --> SSTNode
    public SSTNode class_def_raw_rule() {
    // isLoop: False, isGather: False, type: stmt_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: class_def_raw, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, CLASS_DEF_RAW_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, CLASS_DEF_RAW_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_ClassDef ( a -> v . Name . id , ( b ) ? ( ( expr_ty ) b ) -> v . Call . args : NULL , ( b ) ? ( ( expr_ty ) b ) -> v . Call . keywords : NULL , c , NULL , EXTRA )
        {
            // visiting Alt: 'class' NAME ['(' arguments? ')'] &&':' block
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('class')
                // generated call: (_keyword = expect(KEYWORD_CLASS)) != null  // token='class'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token a
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['(' arguments? ')'])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('(' arguments? ')')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_104_var = _tmp_104_rule()) != null  // '(' arguments? ')'
                // generated call: ((_opt_var = _tmp_104_rule()) != null || _opt_var == null)  // ['(' arguments? ')']
            // collecting vars: None b
            // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
                // generated call: None
            // collecting vars: None None
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
            // name = block
                // generated call: (block_var = block_rule()) != null  // block
            // collecting vars: SSTNode[] c
            //    vars: {'_keyword': 'Token', 'a': 'Token', 'b': None, None: None, 'c': 'SSTNode[]'}
            Token _keyword;
            Token a;
            Object b;
            SSTNode[] c;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'class'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('class')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('class')
                // REMOVE result call (_keyword = expect(KEYWORD_CLASS)) != null  // token='class'
                (_keyword = expect(KEYWORD_CLASS)) != null  // token='class'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (a = expect(Token.Kind.NAME)) != null  // NAME
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ['(' arguments? ')']
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(['(' arguments? ')'])
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['(' arguments? ')'])
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('(' arguments? ')')
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_104_var = _tmp_104_rule()) != null  // '(' arguments? ')'
                // REMOVE result call ((_opt_var = _tmp_104_rule()) != null || _opt_var == null)  // ['(' arguments? ')']
                ((b = _tmp_104_rule()) != null || b == null)  // ['(' arguments? ')']
                &&
                // TODO visiting JavaParserGeneratorNamedItem: &&':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&&':')
                // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
                // TODO call is not created &&':' -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(block) - should work
                // name = block
                // REMOVE result call (block_var = block_rule()) != null  // block
                (c = block_rule()) != null  // block
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("class_def_raw[" + pos + ", " + mark() +" ](level: " + level + ") 'class' NAME ['(' arguments? ')'] &&':' block succeeded!");
                }
                // alt action: _PyAST_ClassDef ( a -> v . Name . id , ( b ) ? ( ( expr_ty ) b ) -> v . Call . args : NULL , ( b ) ? ( ( expr_ty ) b ) -> v . Call . keywords : NULL , c , NULL , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_ClassDef ( a -> v . Name . id , ( b ) ? ( ( expr_ty ) b ) -> v . Call . args : NULL , ( b ) ? ( ( expr_ty ) b ) -> v . Call . keywords : NULL , c , NULL , EXTRA )
                return (SSTNode)cache.putResult(pos, CLASS_DEF_RAW_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, CLASS_DEF_RAW_ID, null);
    }

    // block: NEWLINE INDENT statements DEDENT | simple_stmts | invalid_block
    // TODO replacing SSTNode* --> SSTNode[]
    public SSTNode[] block_rule() {
    // isLoop: False, isGather: False, type: SSTNode*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: block, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, BLOCK_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, BLOCK_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: a
        {
            // visiting Alt: NEWLINE INDENT statements DEDENT
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // name = NEWLINE
                // generated call: (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            // collecting vars: Token newline_var
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(INDENT) - should work
            // name = INDENT
                // generated call: (indent_var = expect(Token.Kind.INDENT)) != null  // token='INDENT'
            // collecting vars: Token indent_var
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(statements) - should work
            // name = statements
                // generated call: (statements_var = statements_rule()) != null  // statements
            // collecting vars: SSTNode[] a
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(DEDENT) - should work
            // name = DEDENT
                // generated call: (dedent_var = expect(Token.Kind.DEDENT)) != null  // token='DEDENT'
            // collecting vars: Token dedent_var
            //    vars: {'newline_var': 'Token', 'indent_var': 'Token', 'a': 'SSTNode[]', 'dedent_var': 'Token'}
            SSTNode[] a;
            Token dedent_var;
            Token indent_var;
            Token newline_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: NEWLINE
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
                // name = NEWLINE
                // REMOVE result call (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
                (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: INDENT
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(INDENT)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(INDENT) - should work
                // name = INDENT
                // REMOVE result call (indent_var = expect(Token.Kind.INDENT)) != null  // token='INDENT'
                (indent_var = expect(Token.Kind.INDENT)) != null  // token='INDENT'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: statements
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(statements)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(statements) - should work
                // name = statements
                // REMOVE result call (statements_var = statements_rule()) != null  // statements
                (a = statements_rule()) != null  // statements
                &&
                // TODO visiting JavaParserGeneratorNamedItem: DEDENT
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(DEDENT)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(DEDENT) - should work
                // name = DEDENT
                // REMOVE result call (dedent_var = expect(Token.Kind.DEDENT)) != null  // token='DEDENT'
                (dedent_var = expect(Token.Kind.DEDENT)) != null  // token='DEDENT'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("block[" + pos + ", " + mark() +" ](level: " + level + ") NEWLINE INDENT statements DEDENT succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode[])cache.putResult(pos, BLOCK_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: simple_stmts
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmts) - should work
            // name = simple_stmts
                // generated call: (simple_stmts_var = simple_stmts_rule()) != null  // simple_stmts
            // collecting vars: SSTNode[] simple_stmts_var
            //    vars: {'simple_stmts_var': 'SSTNode[]'}
            SSTNode[] simple_stmts_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: simple_stmts
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(simple_stmts)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmts) - should work
                // name = simple_stmts
                // REMOVE result call (simple_stmts_var = simple_stmts_rule()) != null  // simple_stmts
                (simple_stmts_var = simple_stmts_rule()) != null  // simple_stmts
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("block[" + pos + ", " + mark() +" ](level: " + level + ") simple_stmts succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['simple_stmts_var']
                result = simple_stmts_var;
                return (SSTNode[])cache.putResult(pos, BLOCK_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: invalid_block
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_block) - should work
            // name = invalid_block
                // generated call: (invalid_block_var = invalid_block_rule()) != null  // invalid_block
            // collecting vars: None invalid_block_var
            //    vars: {'invalid_block_var': None}
            Object invalid_block_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: invalid_block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_block) - should work
                // name = invalid_block
                // REMOVE result call (invalid_block_var = invalid_block_rule()) != null  // invalid_block
                (invalid_block_var = invalid_block_rule()) != null  // invalid_block
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("block[" + pos + ", " + mark() +" ](level: " + level + ") invalid_block succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['invalid_block_var']
                result = invalid_block_var;
                return (SSTNode[])cache.putResult(pos, BLOCK_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, BLOCK_ID, null);
    }

    // star_expressions:
    //     | star_expression ((',' star_expression))+ ','?
    //     | star_expression ','
    //     | star_expression
    public SSTNode star_expressions_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: star_expressions, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, STAR_EXPRESSIONS_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, STAR_EXPRESSIONS_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Tuple ( CHECK ( asdl_expr_seq * , _PyPegen_seq_insert_in_front ( p , a , b ) ) , Load , EXTRA )
        {
            // visiting Alt: star_expression ((',' star_expression))+ ','?
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expression) - should work
            // name = star_expression
                // generated call: (star_expression_var = star_expression_rule()) != null  // star_expression
            // collecting vars: SSTNode a
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(((',' star_expression))+)
                // generated call: (_loop1_105_var = _loop1_105_rule()) != null  // ((',' star_expression))+
            // collecting vars: SSTNode[] b
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_106_var = _tmp_106_rule()) != null  // ','
                // generated call: ((_opt_var = _tmp_106_rule()) != null || _opt_var == null)  // ','?
            // collecting vars: None _opt_var
            //    vars: {'a': 'SSTNode', 'b': 'SSTNode[]', '_opt_var': None}
            Object _opt_var;
            SSTNode a;
            SSTNode[] b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expression) - should work
                // name = star_expression
                // REMOVE result call (star_expression_var = star_expression_rule()) != null  // star_expression
                (a = star_expression_rule()) != null  // star_expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ((',' star_expression))+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(((',' star_expression))+)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat1(((',' star_expression))+)
                // REMOVE result call (_loop1_105_var = _loop1_105_rule()) != null  // ((',' star_expression))+
                (b = _loop1_105_rule()) != null  // ((',' star_expression))+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_106_var = _tmp_106_rule()) != null  // ','
                // REMOVE result call ((_opt_var = _tmp_106_rule()) != null || _opt_var == null)  // ','?
                ((_opt_var = _tmp_106_rule()) != null || _opt_var == null)  // ','?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("star_expressions[" + pos + ", " + mark() +" ](level: " + level + ") star_expression ((',' star_expression))+ ','? succeeded!");
                }
                // alt action: _PyAST_Tuple ( CHECK ( asdl_expr_seq * , _PyPegen_seq_insert_in_front ( p , a , b ) ) , Load , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Tuple ( CHECK ( asdl_expr_seq * , _PyPegen_seq_insert_in_front ( p , a , b ) ) , Load , EXTRA )
                return (SSTNode)cache.putResult(pos, STAR_EXPRESSIONS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Tuple ( CHECK ( asdl_expr_seq * , _PyPegen_singleton_seq ( p , a ) ) , Load , EXTRA )
        {
            // visiting Alt: star_expression ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expression) - should work
            // name = star_expression
                // generated call: (star_expression_var = star_expression_rule()) != null  // star_expression
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            //    vars: {'a': 'SSTNode', '_literal': 'Token'}
            Token _literal;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expression) - should work
                // name = star_expression
                // REMOVE result call (star_expression_var = star_expression_rule()) != null  // star_expression
                (a = star_expression_rule()) != null  // star_expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("star_expressions[" + pos + ", " + mark() +" ](level: " + level + ") star_expression ',' succeeded!");
                }
                // alt action: _PyAST_Tuple ( CHECK ( asdl_expr_seq * , _PyPegen_singleton_seq ( p , a ) ) , Load , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Tuple ( CHECK ( asdl_expr_seq * , _PyPegen_singleton_seq ( p , a ) ) , Load , EXTRA )
                return (SSTNode)cache.putResult(pos, STAR_EXPRESSIONS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: star_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expression) - should work
            // name = star_expression
                // generated call: (star_expression_var = star_expression_rule()) != null  // star_expression
            // collecting vars: SSTNode star_expression_var
            //    vars: {'star_expression_var': 'SSTNode'}
            SSTNode star_expression_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expression) - should work
                // name = star_expression
                // REMOVE result call (star_expression_var = star_expression_rule()) != null  // star_expression
                (star_expression_var = star_expression_rule()) != null  // star_expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("star_expressions[" + pos + ", " + mark() +" ](level: " + level + ") star_expression succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['star_expression_var']
                result = star_expression_var;
                return (SSTNode)cache.putResult(pos, STAR_EXPRESSIONS_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, STAR_EXPRESSIONS_ID, null);
    }

    // star_expression: '*' bitwise_or | expression
    public SSTNode star_expression_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: star_expression, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, STAR_EXPRESSION_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, STAR_EXPRESSION_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Starred ( a , Load , EXTRA )
        {
            // visiting Alt: '*' bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // name = bitwise_or
                // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // collecting vars: SSTNode a
            //    vars: {'_literal': 'Token', 'a': 'SSTNode'}
            Token _literal;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '*'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
                // name = bitwise_or
                // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
                (a = bitwise_or_rule()) != null  // bitwise_or
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("star_expression[" + pos + ", " + mark() +" ](level: " + level + ") '*' bitwise_or succeeded!");
                }
                // alt action: _PyAST_Starred ( a , Load , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Starred ( a , Load , EXTRA )
                return (SSTNode)cache.putResult(pos, STAR_EXPRESSION_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode expression_var
            //    vars: {'expression_var': 'SSTNode'}
            SSTNode expression_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (expression_var = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("star_expression[" + pos + ", " + mark() +" ](level: " + level + ") expression succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['expression_var']
                result = expression_var;
                return (SSTNode)cache.putResult(pos, STAR_EXPRESSION_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, STAR_EXPRESSION_ID, null);
    }

    // star_named_expressions: ','.star_named_expression+ ','?
    // TODO replacing asdl_expr_seq* --> SSTNode[]
    public SSTNode[] star_named_expressions_rule() {
    // isLoop: False, isGather: False, type: asdl_expr_seq*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: star_named_expressions, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, STAR_NAMED_EXPRESSIONS_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, STAR_NAMED_EXPRESSIONS_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: a
        {
            // visiting Alt: ','.star_named_expression+ ','?
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.star_named_expression+)
                // generated call: (_gather_107_var = _gather_107_rule()) != null  // ','.star_named_expression+
            // collecting vars: asdl_expr_seq* a
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_109_var = _tmp_109_rule()) != null  // ','
                // generated call: ((_opt_var = _tmp_109_rule()) != null || _opt_var == null)  // ','?
            // collecting vars: None _opt_var
            //    vars: {'a': 'asdl_expr_seq*', '_opt_var': None}
            Object _opt_var;
            // TODO replacing asdl_expr_seq* --> SSTNode[]
            SSTNode[] a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','.star_named_expression+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.star_named_expression+)
                // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.star_named_expression+)
                // REMOVE result call (_gather_107_var = _gather_107_rule()) != null  // ','.star_named_expression+
                (a = (SSTNode[])_gather_107_rule()) != null  // ','.star_named_expression+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_109_var = _tmp_109_rule()) != null  // ','
                // REMOVE result call ((_opt_var = _tmp_109_rule()) != null || _opt_var == null)  // ','?
                ((_opt_var = _tmp_109_rule()) != null || _opt_var == null)  // ','?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("star_named_expressions[" + pos + ", " + mark() +" ](level: " + level + ") ','.star_named_expression+ ','? succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode[])cache.putResult(pos, STAR_NAMED_EXPRESSIONS_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, STAR_NAMED_EXPRESSIONS_ID, null);
    }

    // star_named_expression: '*' bitwise_or | named_expression
    public SSTNode star_named_expression_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: star_named_expression, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, STAR_NAMED_EXPRESSION_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, STAR_NAMED_EXPRESSION_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Starred ( a , Load , EXTRA )
        {
            // visiting Alt: '*' bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // name = bitwise_or
                // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // collecting vars: SSTNode a
            //    vars: {'_literal': 'Token', 'a': 'SSTNode'}
            Token _literal;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '*'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
                // name = bitwise_or
                // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
                (a = bitwise_or_rule()) != null  // bitwise_or
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("star_named_expression[" + pos + ", " + mark() +" ](level: " + level + ") '*' bitwise_or succeeded!");
                }
                // alt action: _PyAST_Starred ( a , Load , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Starred ( a , Load , EXTRA )
                return (SSTNode)cache.putResult(pos, STAR_NAMED_EXPRESSION_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: named_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // name = named_expression
                // generated call: (named_expression_var = named_expression_rule()) != null  // named_expression
            // collecting vars: SSTNode named_expression_var
            //    vars: {'named_expression_var': 'SSTNode'}
            SSTNode named_expression_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: named_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(named_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
                // name = named_expression
                // REMOVE result call (named_expression_var = named_expression_rule()) != null  // named_expression
                (named_expression_var = named_expression_rule()) != null  // named_expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("star_named_expression[" + pos + ", " + mark() +" ](level: " + level + ") named_expression succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['named_expression_var']
                result = named_expression_var;
                return (SSTNode)cache.putResult(pos, STAR_NAMED_EXPRESSION_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, STAR_NAMED_EXPRESSION_ID, null);
    }

    // named_expression: NAME ':=' ~ expression | invalid_named_expression | expression !':='
    public SSTNode named_expression_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: named_expression, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, NAMED_EXPRESSION_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, NAMED_EXPRESSION_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_NamedExpr ( CHECK ( expr_ty , _PyPegen_set_expr_context ( p , a , Store ) ) , b , EXTRA )
        {
            // visiting Alt: NAME ':=' ~ expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':=')
                // generated call: (_literal = expect(Token.Kind.COLONEQUAL)) != null  // token=':='
            // collecting vars: Token _literal
            // TODO visiting JavaCallMakerVisitor.visit_Cut(~)
                // generated call: None
            // collecting vars: None None
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode b
            //    vars: {'a': 'Token', '_literal': 'Token', None: None, 'b': 'SSTNode'}
            Token _literal;
            Token a;
            SSTNode b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (a = expect(Token.Kind.NAME)) != null  // NAME
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ':='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':=')
                // REMOVE result call (_literal = expect(Token.Kind.COLONEQUAL)) != null  // token=':='
                (_literal = expect(Token.Kind.COLONEQUAL)) != null  // token=':='
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ~
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(~)
                // TODO visiting JavaCallMakerVisitor.visit_Cut(~)
                // TODO call is not created ~ -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (b = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("named_expression[" + pos + ", " + mark() +" ](level: " + level + ") NAME ':=' ~ expression succeeded!");
                }
                // alt action: _PyAST_NamedExpr ( CHECK ( expr_ty , _PyPegen_set_expr_context ( p , a , Store ) ) , b , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_NamedExpr ( CHECK ( expr_ty , _PyPegen_set_expr_context ( p , a , Store ) ) , b , EXTRA )
                return (SSTNode)cache.putResult(pos, NAMED_EXPRESSION_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: invalid_named_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_named_expression) - should work
            // name = invalid_named_expression
                // generated call: (invalid_named_expression_var = invalid_named_expression_rule()) != null  // invalid_named_expression
            // collecting vars: None invalid_named_expression_var
            //    vars: {'invalid_named_expression_var': None}
            Object invalid_named_expression_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: invalid_named_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_named_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_named_expression) - should work
                // name = invalid_named_expression
                // REMOVE result call (invalid_named_expression_var = invalid_named_expression_rule()) != null  // invalid_named_expression
                (invalid_named_expression_var = invalid_named_expression_rule()) != null  // invalid_named_expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("named_expression[" + pos + ", " + mark() +" ](level: " + level + ") invalid_named_expression succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['invalid_named_expression_var']
                result = invalid_named_expression_var;
                return (SSTNode)cache.putResult(pos, NAMED_EXPRESSION_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: expression !':='
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode expression_var
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!':=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':=')
            // lookahead_call_helper call: (_literal = expect(Token.Kind.COLONEQUAL)) != null  // token=':='
            //    call.nodetype: GENERIC_TOKEN
                // generated call: lookahead(false, Token.Kind.COLONEQUAL)  // token=':='
            // collecting vars: boolean None
            //    vars: {'expression_var': 'SSTNode', None: 'boolean'}
            SSTNode expression_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (expression_var = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: !':='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!':=')
                // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!':=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':=')
                // lookahead_call_helper call: (_literal = expect(Token.Kind.COLONEQUAL)) != null  // token=':='
                //    call.nodetype: GENERIC_TOKEN
                // REMOVE result call lookahead(false, Token.Kind.COLONEQUAL)  // token=':='
                lookahead(false, Token.Kind.COLONEQUAL)  // token=':='
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("named_expression[" + pos + ", " + mark() +" ](level: " + level + ") expression !':=' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['expression_var']
                result = expression_var;
                return (SSTNode)cache.putResult(pos, NAMED_EXPRESSION_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, NAMED_EXPRESSION_ID, null);
    }

    // direct_named_expression: NAME ':=' ~ expression | expression !':='
    public SSTNode direct_named_expression_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: direct_named_expression, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, DIRECT_NAMED_EXPRESSION_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, DIRECT_NAMED_EXPRESSION_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_NamedExpr ( CHECK ( expr_ty , _PyPegen_set_expr_context ( p , a , Store ) ) , b , EXTRA )
        {
            // visiting Alt: NAME ':=' ~ expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':=')
                // generated call: (_literal = expect(Token.Kind.COLONEQUAL)) != null  // token=':='
            // collecting vars: Token _literal
            // TODO visiting JavaCallMakerVisitor.visit_Cut(~)
                // generated call: None
            // collecting vars: None None
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode b
            //    vars: {'a': 'Token', '_literal': 'Token', None: None, 'b': 'SSTNode'}
            Token _literal;
            Token a;
            SSTNode b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (a = expect(Token.Kind.NAME)) != null  // NAME
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ':='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':=')
                // REMOVE result call (_literal = expect(Token.Kind.COLONEQUAL)) != null  // token=':='
                (_literal = expect(Token.Kind.COLONEQUAL)) != null  // token=':='
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ~
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(~)
                // TODO visiting JavaCallMakerVisitor.visit_Cut(~)
                // TODO call is not created ~ -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (b = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("direct_named_expression[" + pos + ", " + mark() +" ](level: " + level + ") NAME ':=' ~ expression succeeded!");
                }
                // alt action: _PyAST_NamedExpr ( CHECK ( expr_ty , _PyPegen_set_expr_context ( p , a , Store ) ) , b , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_NamedExpr ( CHECK ( expr_ty , _PyPegen_set_expr_context ( p , a , Store ) ) , b , EXTRA )
                return (SSTNode)cache.putResult(pos, DIRECT_NAMED_EXPRESSION_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: expression !':='
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode expression_var
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!':=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':=')
            // lookahead_call_helper call: (_literal = expect(Token.Kind.COLONEQUAL)) != null  // token=':='
            //    call.nodetype: GENERIC_TOKEN
                // generated call: lookahead(false, Token.Kind.COLONEQUAL)  // token=':='
            // collecting vars: boolean None
            //    vars: {'expression_var': 'SSTNode', None: 'boolean'}
            SSTNode expression_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (expression_var = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: !':='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!':=')
                // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!':=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':=')
                // lookahead_call_helper call: (_literal = expect(Token.Kind.COLONEQUAL)) != null  // token=':='
                //    call.nodetype: GENERIC_TOKEN
                // REMOVE result call lookahead(false, Token.Kind.COLONEQUAL)  // token=':='
                lookahead(false, Token.Kind.COLONEQUAL)  // token=':='
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("direct_named_expression[" + pos + ", " + mark() +" ](level: " + level + ") expression !':=' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['expression_var']
                result = expression_var;
                return (SSTNode)cache.putResult(pos, DIRECT_NAMED_EXPRESSION_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, DIRECT_NAMED_EXPRESSION_ID, null);
    }

    // annotated_rhs: yield_expr | star_expressions
    public SSTNode annotated_rhs_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: annotated_rhs, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, ANNOTATED_RHS_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, ANNOTATED_RHS_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: yield_expr
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
            // name = yield_expr
                // generated call: (yield_expr_var = yield_expr_rule()) != null  // yield_expr
            // collecting vars: SSTNode yield_expr_var
            //    vars: {'yield_expr_var': 'SSTNode'}
            SSTNode yield_expr_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: yield_expr
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(yield_expr)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
                // name = yield_expr
                // REMOVE result call (yield_expr_var = yield_expr_rule()) != null  // yield_expr
                (yield_expr_var = yield_expr_rule()) != null  // yield_expr
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("annotated_rhs[" + pos + ", " + mark() +" ](level: " + level + ") yield_expr succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['yield_expr_var']
                result = yield_expr_var;
                return (SSTNode)cache.putResult(pos, ANNOTATED_RHS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: star_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // name = star_expressions
                // generated call: (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            // collecting vars: SSTNode star_expressions_var
            //    vars: {'star_expressions_var': 'SSTNode'}
            SSTNode star_expressions_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_expressions
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expressions)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
                // name = star_expressions
                // REMOVE result call (star_expressions_var = star_expressions_rule()) != null  // star_expressions
                (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("annotated_rhs[" + pos + ", " + mark() +" ](level: " + level + ") star_expressions succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['star_expressions_var']
                result = star_expressions_var;
                return (SSTNode)cache.putResult(pos, ANNOTATED_RHS_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, ANNOTATED_RHS_ID, null);
    }

    // expressions: expression ((',' expression))+ ','? | expression ',' | expression
    public SSTNode expressions_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: expressions, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, EXPRESSIONS_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, EXPRESSIONS_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Tuple ( CHECK ( asdl_expr_seq * , _PyPegen_seq_insert_in_front ( p , a , b ) ) , Load , EXTRA )
        {
            // visiting Alt: expression ((',' expression))+ ','?
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode a
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(((',' expression))+)
                // generated call: (_loop1_110_var = _loop1_110_rule()) != null  // ((',' expression))+
            // collecting vars: SSTNode[] b
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_111_var = _tmp_111_rule()) != null  // ','
                // generated call: ((_opt_var = _tmp_111_rule()) != null || _opt_var == null)  // ','?
            // collecting vars: None _opt_var
            //    vars: {'a': 'SSTNode', 'b': 'SSTNode[]', '_opt_var': None}
            Object _opt_var;
            SSTNode a;
            SSTNode[] b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (a = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ((',' expression))+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(((',' expression))+)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat1(((',' expression))+)
                // REMOVE result call (_loop1_110_var = _loop1_110_rule()) != null  // ((',' expression))+
                (b = _loop1_110_rule()) != null  // ((',' expression))+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_111_var = _tmp_111_rule()) != null  // ','
                // REMOVE result call ((_opt_var = _tmp_111_rule()) != null || _opt_var == null)  // ','?
                ((_opt_var = _tmp_111_rule()) != null || _opt_var == null)  // ','?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("expressions[" + pos + ", " + mark() +" ](level: " + level + ") expression ((',' expression))+ ','? succeeded!");
                }
                // alt action: _PyAST_Tuple ( CHECK ( asdl_expr_seq * , _PyPegen_seq_insert_in_front ( p , a , b ) ) , Load , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Tuple ( CHECK ( asdl_expr_seq * , _PyPegen_seq_insert_in_front ( p , a , b ) ) , Load , EXTRA )
                return (SSTNode)cache.putResult(pos, EXPRESSIONS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Tuple ( CHECK ( asdl_expr_seq * , _PyPegen_singleton_seq ( p , a ) ) , Load , EXTRA )
        {
            // visiting Alt: expression ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            //    vars: {'a': 'SSTNode', '_literal': 'Token'}
            Token _literal;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (a = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("expressions[" + pos + ", " + mark() +" ](level: " + level + ") expression ',' succeeded!");
                }
                // alt action: _PyAST_Tuple ( CHECK ( asdl_expr_seq * , _PyPegen_singleton_seq ( p , a ) ) , Load , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Tuple ( CHECK ( asdl_expr_seq * , _PyPegen_singleton_seq ( p , a ) ) , Load , EXTRA )
                return (SSTNode)cache.putResult(pos, EXPRESSIONS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode expression_var
            //    vars: {'expression_var': 'SSTNode'}
            SSTNode expression_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (expression_var = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("expressions[" + pos + ", " + mark() +" ](level: " + level + ") expression succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['expression_var']
                result = expression_var;
                return (SSTNode)cache.putResult(pos, EXPRESSIONS_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, EXPRESSIONS_ID, null);
    }

    // expression:
    //     | invalid_expression
    //     | disjunction 'if' disjunction 'else' expression
    //     | disjunction
    //     | lambdef
    public SSTNode expression_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: expression, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, EXPRESSION_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, EXPRESSION_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: None
        {
            // visiting Alt: invalid_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_expression) - should work
            // name = invalid_expression
                // generated call: (invalid_expression_var = invalid_expression_rule()) != null  // invalid_expression
            // collecting vars: None invalid_expression_var
            //    vars: {'invalid_expression_var': None}
            Object invalid_expression_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: invalid_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_expression) - should work
                // name = invalid_expression
                // REMOVE result call (invalid_expression_var = invalid_expression_rule()) != null  // invalid_expression
                (invalid_expression_var = invalid_expression_rule()) != null  // invalid_expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("expression[" + pos + ", " + mark() +" ](level: " + level + ") invalid_expression succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['invalid_expression_var']
                result = invalid_expression_var;
                return (SSTNode)cache.putResult(pos, EXPRESSION_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_IfExp ( b , a , c , EXTRA )
        {
            // visiting Alt: disjunction 'if' disjunction 'else' expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
            // name = disjunction
                // generated call: (disjunction_var = disjunction_rule()) != null  // disjunction
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
                // generated call: (_keyword = expect(KEYWORD_IF)) != null  // token='if'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
            // name = disjunction
                // generated call: (disjunction_var = disjunction_rule()) != null  // disjunction
            // collecting vars: SSTNode b
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('else')
                // generated call: (_keyword = expect(KEYWORD_ELSE)) != null  // token='else'
            // collecting vars: Token _keyword_1
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode c
            //    vars: {'a': 'SSTNode', '_keyword': 'Token', 'b': 'SSTNode', '_keyword_1': 'Token', 'c': 'SSTNode'}
            Token _keyword;
            Token _keyword_1;
            SSTNode a;
            SSTNode b;
            SSTNode c;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: disjunction
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(disjunction)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
                // name = disjunction
                // REMOVE result call (disjunction_var = disjunction_rule()) != null  // disjunction
                (a = disjunction_rule()) != null  // disjunction
                &&
                // TODO visiting JavaParserGeneratorNamedItem: 'if'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('if')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
                // REMOVE result call (_keyword = expect(KEYWORD_IF)) != null  // token='if'
                (_keyword = expect(KEYWORD_IF)) != null  // token='if'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: disjunction
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(disjunction)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
                // name = disjunction
                // REMOVE result call (disjunction_var = disjunction_rule()) != null  // disjunction
                (b = disjunction_rule()) != null  // disjunction
                &&
                // TODO visiting JavaParserGeneratorNamedItem: 'else'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('else')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('else')
                // REMOVE result call (_keyword = expect(KEYWORD_ELSE)) != null  // token='else'
                (_keyword_1 = expect(KEYWORD_ELSE)) != null  // token='else'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (c = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("expression[" + pos + ", " + mark() +" ](level: " + level + ") disjunction 'if' disjunction 'else' expression succeeded!");
                }
                // alt action: _PyAST_IfExp ( b , a , c , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_IfExp ( b , a , c , EXTRA )
                return (SSTNode)cache.putResult(pos, EXPRESSION_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: disjunction
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
            // name = disjunction
                // generated call: (disjunction_var = disjunction_rule()) != null  // disjunction
            // collecting vars: SSTNode disjunction_var
            //    vars: {'disjunction_var': 'SSTNode'}
            SSTNode disjunction_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: disjunction
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(disjunction)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
                // name = disjunction
                // REMOVE result call (disjunction_var = disjunction_rule()) != null  // disjunction
                (disjunction_var = disjunction_rule()) != null  // disjunction
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("expression[" + pos + ", " + mark() +" ](level: " + level + ") disjunction succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['disjunction_var']
                result = disjunction_var;
                return (SSTNode)cache.putResult(pos, EXPRESSION_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: lambdef
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambdef) - should work
            // name = lambdef
                // generated call: (lambdef_var = lambdef_rule()) != null  // lambdef
            // collecting vars: SSTNode lambdef_var
            //    vars: {'lambdef_var': 'SSTNode'}
            SSTNode lambdef_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: lambdef
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambdef)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambdef) - should work
                // name = lambdef
                // REMOVE result call (lambdef_var = lambdef_rule()) != null  // lambdef
                (lambdef_var = lambdef_rule()) != null  // lambdef
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("expression[" + pos + ", " + mark() +" ](level: " + level + ") lambdef succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['lambdef_var']
                result = lambdef_var;
                return (SSTNode)cache.putResult(pos, EXPRESSION_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, EXPRESSION_ID, null);
    }

    // lambdef: 'lambda' lambda_params? ':' expression
    public SSTNode lambdef_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: lambdef, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, LAMBDEF_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, LAMBDEF_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Lambda ( ( a ) ? a : CHECK ( arguments_ty , _PyPegen_empty_arguments ( p ) ) , b , EXTRA )
        {
            // visiting Alt: 'lambda' lambda_params? ':' expression
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('lambda')
                // generated call: (_keyword = expect(KEYWORD_LAMBDA)) != null  // token='lambda'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_params?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_params)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_112_var = _tmp_112_rule()) != null  // lambda_params
                // generated call: ((_opt_var = _tmp_112_rule()) != null || _opt_var == null)  // lambda_params?
            // collecting vars: None a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode b
            //    vars: {'_keyword': 'Token', 'a': None, '_literal': 'Token', 'b': 'SSTNode'}
            Token _keyword;
            Token _literal;
            Object a;
            SSTNode b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'lambda'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('lambda')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('lambda')
                // REMOVE result call (_keyword = expect(KEYWORD_LAMBDA)) != null  // token='lambda'
                (_keyword = expect(KEYWORD_LAMBDA)) != null  // token='lambda'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: lambda_params?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_params?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_params?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_params)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_112_var = _tmp_112_rule()) != null  // lambda_params
                // REMOVE result call ((_opt_var = _tmp_112_rule()) != null || _opt_var == null)  // lambda_params?
                ((a = _tmp_112_rule()) != null || a == null)  // lambda_params?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (b = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("lambdef[" + pos + ", " + mark() +" ](level: " + level + ") 'lambda' lambda_params? ':' expression succeeded!");
                }
                // alt action: _PyAST_Lambda ( ( a ) ? a : CHECK ( arguments_ty , _PyPegen_empty_arguments ( p ) ) , b , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Lambda ( ( a ) ? a : CHECK ( arguments_ty , _PyPegen_empty_arguments ( p ) ) , b , EXTRA )
                return (SSTNode)cache.putResult(pos, LAMBDEF_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, LAMBDEF_ID, null);
    }

    // lambda_params: invalid_lambda_parameters | lambda_parameters
    // TODO replacing arguments_ty --> SSTNode
    public SSTNode lambda_params_rule() {
    // isLoop: False, isGather: False, type: arguments_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: lambda_params, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, LAMBDA_PARAMS_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, LAMBDA_PARAMS_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: invalid_lambda_parameters
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_lambda_parameters) - should work
            // name = invalid_lambda_parameters
                // generated call: (invalid_lambda_parameters_var = invalid_lambda_parameters_rule()) != null  // invalid_lambda_parameters
            // collecting vars: None invalid_lambda_parameters_var
            //    vars: {'invalid_lambda_parameters_var': None}
            Object invalid_lambda_parameters_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: invalid_lambda_parameters
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_lambda_parameters)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_lambda_parameters) - should work
                // name = invalid_lambda_parameters
                // REMOVE result call (invalid_lambda_parameters_var = invalid_lambda_parameters_rule()) != null  // invalid_lambda_parameters
                (invalid_lambda_parameters_var = invalid_lambda_parameters_rule()) != null  // invalid_lambda_parameters
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("lambda_params[" + pos + ", " + mark() +" ](level: " + level + ") invalid_lambda_parameters succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['invalid_lambda_parameters_var']
                result = invalid_lambda_parameters_var;
                return (SSTNode)cache.putResult(pos, LAMBDA_PARAMS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: lambda_parameters
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_parameters) - should work
            // name = lambda_parameters
            // TODO replacing arguments_ty --> SSTNode
                // generated call: (lambda_parameters_var = lambda_parameters_rule()) != null  // lambda_parameters
            // collecting vars: SSTNode lambda_parameters_var
            //    vars: {'lambda_parameters_var': 'SSTNode'}
            SSTNode lambda_parameters_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_parameters
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_parameters)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_parameters) - should work
                // name = lambda_parameters
                // TODO replacing arguments_ty --> SSTNode
                // REMOVE result call (lambda_parameters_var = lambda_parameters_rule()) != null  // lambda_parameters
                (lambda_parameters_var = lambda_parameters_rule()) != null  // lambda_parameters
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("lambda_params[" + pos + ", " + mark() +" ](level: " + level + ") lambda_parameters succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['lambda_parameters_var']
                result = lambda_parameters_var;
                return (SSTNode)cache.putResult(pos, LAMBDA_PARAMS_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, LAMBDA_PARAMS_ID, null);
    }

    // lambda_parameters:
    //     | lambda_slash_no_default lambda_param_no_default* lambda_param_with_default* lambda_star_etc?
    //     | lambda_slash_with_default lambda_param_with_default* lambda_star_etc?
    //     | lambda_param_no_default+ lambda_param_with_default* lambda_star_etc?
    //     | lambda_param_with_default+ lambda_star_etc?
    //     | lambda_star_etc
    // TODO replacing arguments_ty --> SSTNode
    public SSTNode lambda_parameters_rule() {
    // isLoop: False, isGather: False, type: arguments_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: lambda_parameters, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, LAMBDA_PARAMETERS_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, LAMBDA_PARAMETERS_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_make_arguments ( p , a , NULL , b , c , d )
        {
            // visiting Alt: lambda_slash_no_default lambda_param_no_default* lambda_param_with_default* lambda_star_etc?
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_slash_no_default) - should work
            // name = lambda_slash_no_default
            // TODO replacing asdl_arg_seq[] --> SSTNode[]
                // generated call: (lambda_slash_no_default_var = lambda_slash_no_default_rule()) != null  // lambda_slash_no_default
            // collecting vars: SSTNode[] a
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_no_default*)
                // generated call: (_loop0_113_var = _loop0_113_rule()) != null  // lambda_param_no_default*
            // collecting vars: asdl_arg_seq* b
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_with_default*)
                // generated call: (_loop0_114_var = _loop0_114_rule()) != null  // lambda_param_with_default*
            // collecting vars: SSTNode[] c
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_star_etc?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_star_etc)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_115_var = _tmp_115_rule()) != null  // lambda_star_etc
                // generated call: ((_opt_var = _tmp_115_rule()) != null || _opt_var == null)  // lambda_star_etc?
            // collecting vars: None d
            //    vars: {'a': 'SSTNode[]', 'b': 'asdl_arg_seq*', 'c': 'SSTNode[]', 'd': None}
            SSTNode[] a;
            // TODO replacing asdl_arg_seq* --> SSTNode[]
            SSTNode[] b;
            SSTNode[] c;
            Object d;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_slash_no_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_slash_no_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_slash_no_default) - should work
                // name = lambda_slash_no_default
                // TODO replacing asdl_arg_seq[] --> SSTNode[]
                // REMOVE result call (lambda_slash_no_default_var = lambda_slash_no_default_rule()) != null  // lambda_slash_no_default
                (a = lambda_slash_no_default_rule()) != null  // lambda_slash_no_default
                &&
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default*
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default*)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_no_default*)
                // REMOVE result call (_loop0_113_var = _loop0_113_rule()) != null  // lambda_param_no_default*
                (b = (SSTNode[])_loop0_113_rule()) != null  // lambda_param_no_default*
                &&
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_with_default*
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_with_default*)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_with_default*)
                // REMOVE result call (_loop0_114_var = _loop0_114_rule()) != null  // lambda_param_with_default*
                (c = _loop0_114_rule()) != null  // lambda_param_with_default*
                &&
                // TODO visiting JavaParserGeneratorNamedItem: lambda_star_etc?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_star_etc?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_star_etc?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_star_etc)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_115_var = _tmp_115_rule()) != null  // lambda_star_etc
                // REMOVE result call ((_opt_var = _tmp_115_rule()) != null || _opt_var == null)  // lambda_star_etc?
                ((d = _tmp_115_rule()) != null || d == null)  // lambda_star_etc?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("lambda_parameters[" + pos + ", " + mark() +" ](level: " + level + ") lambda_slash_no_default lambda_param_no_default* lambda_param_with_default* lambda_star_etc? succeeded!");
                }
                // alt action: _PyPegen_make_arguments ( p , a , NULL , b , c , d )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_make_arguments ( p , a , NULL , b , c , d )
                return (SSTNode)cache.putResult(pos, LAMBDA_PARAMETERS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_make_arguments ( p , NULL , a , NULL , b , c )
        {
            // visiting Alt: lambda_slash_with_default lambda_param_with_default* lambda_star_etc?
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_slash_with_default) - should work
            // name = lambda_slash_with_default
            // TODO replacing SlashWithDefault[] --> SSTNode[]
                // generated call: (lambda_slash_with_default_var = lambda_slash_with_default_rule()) != null  // lambda_slash_with_default
            // collecting vars: SSTNode[] a
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_with_default*)
                // generated call: (_loop0_116_var = _loop0_116_rule()) != null  // lambda_param_with_default*
            // collecting vars: SSTNode[] b
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_star_etc?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_star_etc)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_117_var = _tmp_117_rule()) != null  // lambda_star_etc
                // generated call: ((_opt_var = _tmp_117_rule()) != null || _opt_var == null)  // lambda_star_etc?
            // collecting vars: None c
            //    vars: {'a': 'SSTNode[]', 'b': 'SSTNode[]', 'c': None}
            SSTNode[] a;
            SSTNode[] b;
            Object c;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_slash_with_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_slash_with_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_slash_with_default) - should work
                // name = lambda_slash_with_default
                // TODO replacing SlashWithDefault[] --> SSTNode[]
                // REMOVE result call (lambda_slash_with_default_var = lambda_slash_with_default_rule()) != null  // lambda_slash_with_default
                (a = lambda_slash_with_default_rule()) != null  // lambda_slash_with_default
                &&
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_with_default*
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_with_default*)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_with_default*)
                // REMOVE result call (_loop0_116_var = _loop0_116_rule()) != null  // lambda_param_with_default*
                (b = _loop0_116_rule()) != null  // lambda_param_with_default*
                &&
                // TODO visiting JavaParserGeneratorNamedItem: lambda_star_etc?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_star_etc?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_star_etc?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_star_etc)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_117_var = _tmp_117_rule()) != null  // lambda_star_etc
                // REMOVE result call ((_opt_var = _tmp_117_rule()) != null || _opt_var == null)  // lambda_star_etc?
                ((c = _tmp_117_rule()) != null || c == null)  // lambda_star_etc?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("lambda_parameters[" + pos + ", " + mark() +" ](level: " + level + ") lambda_slash_with_default lambda_param_with_default* lambda_star_etc? succeeded!");
                }
                // alt action: _PyPegen_make_arguments ( p , NULL , a , NULL , b , c )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_make_arguments ( p , NULL , a , NULL , b , c )
                return (SSTNode)cache.putResult(pos, LAMBDA_PARAMETERS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_make_arguments ( p , NULL , NULL , a , b , c )
        {
            // visiting Alt: lambda_param_no_default+ lambda_param_with_default* lambda_star_etc?
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_no_default+)
                // generated call: (_loop1_118_var = _loop1_118_rule()) != null  // lambda_param_no_default+
            // collecting vars: asdl_arg_seq* a
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_with_default*)
                // generated call: (_loop0_119_var = _loop0_119_rule()) != null  // lambda_param_with_default*
            // collecting vars: SSTNode[] b
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_star_etc?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_star_etc)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_120_var = _tmp_120_rule()) != null  // lambda_star_etc
                // generated call: ((_opt_var = _tmp_120_rule()) != null || _opt_var == null)  // lambda_star_etc?
            // collecting vars: None c
            //    vars: {'a': 'asdl_arg_seq*', 'b': 'SSTNode[]', 'c': None}
            // TODO replacing asdl_arg_seq* --> SSTNode[]
            SSTNode[] a;
            SSTNode[] b;
            Object c;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default+)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_no_default+)
                // REMOVE result call (_loop1_118_var = _loop1_118_rule()) != null  // lambda_param_no_default+
                (a = (SSTNode[])_loop1_118_rule()) != null  // lambda_param_no_default+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_with_default*
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_with_default*)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_with_default*)
                // REMOVE result call (_loop0_119_var = _loop0_119_rule()) != null  // lambda_param_with_default*
                (b = _loop0_119_rule()) != null  // lambda_param_with_default*
                &&
                // TODO visiting JavaParserGeneratorNamedItem: lambda_star_etc?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_star_etc?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_star_etc?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_star_etc)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_120_var = _tmp_120_rule()) != null  // lambda_star_etc
                // REMOVE result call ((_opt_var = _tmp_120_rule()) != null || _opt_var == null)  // lambda_star_etc?
                ((c = _tmp_120_rule()) != null || c == null)  // lambda_star_etc?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("lambda_parameters[" + pos + ", " + mark() +" ](level: " + level + ") lambda_param_no_default+ lambda_param_with_default* lambda_star_etc? succeeded!");
                }
                // alt action: _PyPegen_make_arguments ( p , NULL , NULL , a , b , c )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_make_arguments ( p , NULL , NULL , a , b , c )
                return (SSTNode)cache.putResult(pos, LAMBDA_PARAMETERS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_make_arguments ( p , NULL , NULL , NULL , a , b )
        {
            // visiting Alt: lambda_param_with_default+ lambda_star_etc?
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_with_default+)
                // generated call: (_loop1_121_var = _loop1_121_rule()) != null  // lambda_param_with_default+
            // collecting vars: SSTNode[] a
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_star_etc?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_star_etc)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_122_var = _tmp_122_rule()) != null  // lambda_star_etc
                // generated call: ((_opt_var = _tmp_122_rule()) != null || _opt_var == null)  // lambda_star_etc?
            // collecting vars: None b
            //    vars: {'a': 'SSTNode[]', 'b': None}
            SSTNode[] a;
            Object b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_with_default+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_with_default+)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_with_default+)
                // REMOVE result call (_loop1_121_var = _loop1_121_rule()) != null  // lambda_param_with_default+
                (a = _loop1_121_rule()) != null  // lambda_param_with_default+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: lambda_star_etc?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_star_etc?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_star_etc?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_star_etc)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_122_var = _tmp_122_rule()) != null  // lambda_star_etc
                // REMOVE result call ((_opt_var = _tmp_122_rule()) != null || _opt_var == null)  // lambda_star_etc?
                ((b = _tmp_122_rule()) != null || b == null)  // lambda_star_etc?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("lambda_parameters[" + pos + ", " + mark() +" ](level: " + level + ") lambda_param_with_default+ lambda_star_etc? succeeded!");
                }
                // alt action: _PyPegen_make_arguments ( p , NULL , NULL , NULL , a , b )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_make_arguments ( p , NULL , NULL , NULL , a , b )
                return (SSTNode)cache.putResult(pos, LAMBDA_PARAMETERS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_make_arguments ( p , NULL , NULL , NULL , NULL , a )
        {
            // visiting Alt: lambda_star_etc
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_star_etc) - should work
            // name = lambda_star_etc
            // TODO replacing StarEtc[] --> SSTNode[]
                // generated call: (lambda_star_etc_var = lambda_star_etc_rule()) != null  // lambda_star_etc
            // collecting vars: SSTNode[] a
            //    vars: {'a': 'SSTNode[]'}
            SSTNode[] a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_star_etc
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_star_etc)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_star_etc) - should work
                // name = lambda_star_etc
                // TODO replacing StarEtc[] --> SSTNode[]
                // REMOVE result call (lambda_star_etc_var = lambda_star_etc_rule()) != null  // lambda_star_etc
                (a = lambda_star_etc_rule()) != null  // lambda_star_etc
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("lambda_parameters[" + pos + ", " + mark() +" ](level: " + level + ") lambda_star_etc succeeded!");
                }
                // alt action: _PyPegen_make_arguments ( p , NULL , NULL , NULL , NULL , a )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_make_arguments ( p , NULL , NULL , NULL , NULL , a )
                return (SSTNode)cache.putResult(pos, LAMBDA_PARAMETERS_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, LAMBDA_PARAMETERS_ID, null);
    }

    // lambda_slash_no_default:
    //     | lambda_param_no_default+ '/' ','
    //     | lambda_param_no_default+ '/' &':'
    // TODO replacing asdl_arg_seq* --> SSTNode[]
    public SSTNode[] lambda_slash_no_default_rule() {
    // isLoop: False, isGather: False, type: asdl_arg_seq*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: lambda_slash_no_default, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, LAMBDA_SLASH_NO_DEFAULT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, LAMBDA_SLASH_NO_DEFAULT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: a
        {
            // visiting Alt: lambda_param_no_default+ '/' ','
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_no_default+)
                // generated call: (_loop1_123_var = _loop1_123_rule()) != null  // lambda_param_no_default+
            // collecting vars: asdl_arg_seq* a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
                // generated call: (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal_1
            //    vars: {'a': 'asdl_arg_seq*', '_literal': 'Token', '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            // TODO replacing asdl_arg_seq* --> SSTNode[]
            SSTNode[] a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default+)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_no_default+)
                // REMOVE result call (_loop1_123_var = _loop1_123_rule()) != null  // lambda_param_no_default+
                (a = (SSTNode[])_loop1_123_rule()) != null  // lambda_param_no_default+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '/'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('/')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
                // REMOVE result call (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
                (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal_1 = expect(Token.Kind.COMMA)) != null  // token=','
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("lambda_slash_no_default[" + pos + ", " + mark() +" ](level: " + level + ") lambda_param_no_default+ '/' ',' succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode[])cache.putResult(pos, LAMBDA_SLASH_NO_DEFAULT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: a
        {
            // visiting Alt: lambda_param_no_default+ '/' &':'
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_no_default+)
                // generated call: (_loop1_124_var = _loop1_124_rule()) != null  // lambda_param_no_default+
            // collecting vars: asdl_arg_seq* a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
                // generated call: (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            // collecting vars: Token _literal
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&':')
                // generated call: None
            // collecting vars: None None
            //    vars: {'a': 'asdl_arg_seq*', '_literal': 'Token', None: None}
            Token _literal;
            // TODO replacing asdl_arg_seq* --> SSTNode[]
            SSTNode[] a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default+)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_no_default+)
                // REMOVE result call (_loop1_124_var = _loop1_124_rule()) != null  // lambda_param_no_default+
                (a = (SSTNode[])_loop1_124_rule()) != null  // lambda_param_no_default+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '/'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('/')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
                // REMOVE result call (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
                (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: &':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&':')
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&':')
                // TODO call is not created &':' -> creates artificial
                true
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("lambda_slash_no_default[" + pos + ", " + mark() +" ](level: " + level + ") lambda_param_no_default+ '/' &':' succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode[])cache.putResult(pos, LAMBDA_SLASH_NO_DEFAULT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, LAMBDA_SLASH_NO_DEFAULT_ID, null);
    }

    // lambda_slash_with_default:
    //     | lambda_param_no_default* lambda_param_with_default+ '/' ','
    //     | lambda_param_no_default* lambda_param_with_default+ '/' &':'
    // TODO replacing SlashWithDefault* --> SSTNode[]
    public SSTNode[] lambda_slash_with_default_rule() {
    // isLoop: False, isGather: False, type: SlashWithDefault*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: lambda_slash_with_default, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, LAMBDA_SLASH_WITH_DEFAULT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, LAMBDA_SLASH_WITH_DEFAULT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_slash_with_default ( p , ( asdl_arg_seq * ) a , b )
        {
            // visiting Alt: lambda_param_no_default* lambda_param_with_default+ '/' ','
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_no_default*)
                // generated call: (_loop0_125_var = _loop0_125_rule()) != null  // lambda_param_no_default*
            // collecting vars: SSTNode[] a
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_with_default+)
                // generated call: (_loop1_126_var = _loop1_126_rule()) != null  // lambda_param_with_default+
            // collecting vars: SSTNode[] b
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
                // generated call: (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal_1
            //    vars: {'a': 'SSTNode[]', 'b': 'SSTNode[]', '_literal': 'Token', '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            SSTNode[] a;
            SSTNode[] b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default*
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default*)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_no_default*)
                // REMOVE result call (_loop0_125_var = _loop0_125_rule()) != null  // lambda_param_no_default*
                (a = _loop0_125_rule()) != null  // lambda_param_no_default*
                &&
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_with_default+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_with_default+)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_with_default+)
                // REMOVE result call (_loop1_126_var = _loop1_126_rule()) != null  // lambda_param_with_default+
                (b = _loop1_126_rule()) != null  // lambda_param_with_default+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '/'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('/')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
                // REMOVE result call (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
                (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal_1 = expect(Token.Kind.COMMA)) != null  // token=','
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("lambda_slash_with_default[" + pos + ", " + mark() +" ](level: " + level + ") lambda_param_no_default* lambda_param_with_default+ '/' ',' succeeded!");
                }
                // alt action: _PyPegen_slash_with_default ( p , ( asdl_arg_seq * ) a , b )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_slash_with_default ( p , ( asdl_arg_seq * ) a , b )
                return (SSTNode[])cache.putResult(pos, LAMBDA_SLASH_WITH_DEFAULT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_slash_with_default ( p , ( asdl_arg_seq * ) a , b )
        {
            // visiting Alt: lambda_param_no_default* lambda_param_with_default+ '/' &':'
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_no_default*)
                // generated call: (_loop0_127_var = _loop0_127_rule()) != null  // lambda_param_no_default*
            // collecting vars: SSTNode[] a
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_with_default+)
                // generated call: (_loop1_128_var = _loop1_128_rule()) != null  // lambda_param_with_default+
            // collecting vars: SSTNode[] b
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
                // generated call: (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            // collecting vars: Token _literal
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&':')
                // generated call: None
            // collecting vars: None None
            //    vars: {'a': 'SSTNode[]', 'b': 'SSTNode[]', '_literal': 'Token', None: None}
            Token _literal;
            SSTNode[] a;
            SSTNode[] b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default*
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default*)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_no_default*)
                // REMOVE result call (_loop0_127_var = _loop0_127_rule()) != null  // lambda_param_no_default*
                (a = _loop0_127_rule()) != null  // lambda_param_no_default*
                &&
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_with_default+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_with_default+)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_with_default+)
                // REMOVE result call (_loop1_128_var = _loop1_128_rule()) != null  // lambda_param_with_default+
                (b = _loop1_128_rule()) != null  // lambda_param_with_default+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '/'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('/')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
                // REMOVE result call (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
                (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: &':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&':')
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&':')
                // TODO call is not created &':' -> creates artificial
                true
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("lambda_slash_with_default[" + pos + ", " + mark() +" ](level: " + level + ") lambda_param_no_default* lambda_param_with_default+ '/' &':' succeeded!");
                }
                // alt action: _PyPegen_slash_with_default ( p , ( asdl_arg_seq * ) a , b )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_slash_with_default ( p , ( asdl_arg_seq * ) a , b )
                return (SSTNode[])cache.putResult(pos, LAMBDA_SLASH_WITH_DEFAULT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, LAMBDA_SLASH_WITH_DEFAULT_ID, null);
    }

    // lambda_star_etc:
    //     | '*' lambda_param_no_default lambda_param_maybe_default* lambda_kwds?
    //     | '*' ',' lambda_param_maybe_default+ lambda_kwds?
    //     | lambda_kwds
    //     | invalid_lambda_star_etc
    // TODO replacing StarEtc* --> SSTNode[]
    public SSTNode[] lambda_star_etc_rule() {
    // isLoop: False, isGather: False, type: StarEtc*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: lambda_star_etc, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, LAMBDA_STAR_ETC_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, LAMBDA_STAR_ETC_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_star_etc ( p , a , b , c )
        {
            // visiting Alt: '*' lambda_param_no_default lambda_param_maybe_default* lambda_kwds?
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
            // name = lambda_param_no_default
            // TODO replacing arg_ty --> SSTNode
                // generated call: (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            // collecting vars: SSTNode a
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_maybe_default*)
                // generated call: (_loop0_129_var = _loop0_129_rule()) != null  // lambda_param_maybe_default*
            // collecting vars: SSTNode[] b
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_kwds?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_kwds)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_130_var = _tmp_130_rule()) != null  // lambda_kwds
                // generated call: ((_opt_var = _tmp_130_rule()) != null || _opt_var == null)  // lambda_kwds?
            // collecting vars: None c
            //    vars: {'_literal': 'Token', 'a': 'SSTNode', 'b': 'SSTNode[]', 'c': None}
            Token _literal;
            SSTNode a;
            SSTNode[] b;
            Object c;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '*'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
                // name = lambda_param_no_default
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
                (a = lambda_param_no_default_rule()) != null  // lambda_param_no_default
                &&
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_maybe_default*
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_maybe_default*)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_maybe_default*)
                // REMOVE result call (_loop0_129_var = _loop0_129_rule()) != null  // lambda_param_maybe_default*
                (b = _loop0_129_rule()) != null  // lambda_param_maybe_default*
                &&
                // TODO visiting JavaParserGeneratorNamedItem: lambda_kwds?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_kwds?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_kwds?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_kwds)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_130_var = _tmp_130_rule()) != null  // lambda_kwds
                // REMOVE result call ((_opt_var = _tmp_130_rule()) != null || _opt_var == null)  // lambda_kwds?
                ((c = _tmp_130_rule()) != null || c == null)  // lambda_kwds?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("lambda_star_etc[" + pos + ", " + mark() +" ](level: " + level + ") '*' lambda_param_no_default lambda_param_maybe_default* lambda_kwds? succeeded!");
                }
                // alt action: _PyPegen_star_etc ( p , a , b , c )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_star_etc ( p , a , b , c )
                return (SSTNode[])cache.putResult(pos, LAMBDA_STAR_ETC_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_star_etc ( p , NULL , b , c )
        {
            // visiting Alt: '*' ',' lambda_param_maybe_default+ lambda_kwds?
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal_1
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_maybe_default+)
                // generated call: (_loop1_131_var = _loop1_131_rule()) != null  // lambda_param_maybe_default+
            // collecting vars: SSTNode[] b
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_kwds?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_kwds)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_132_var = _tmp_132_rule()) != null  // lambda_kwds
                // generated call: ((_opt_var = _tmp_132_rule()) != null || _opt_var == null)  // lambda_kwds?
            // collecting vars: None c
            //    vars: {'_literal': 'Token', '_literal_1': 'Token', 'b': 'SSTNode[]', 'c': None}
            Token _literal;
            Token _literal_1;
            SSTNode[] b;
            Object c;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '*'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal_1 = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_maybe_default+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_maybe_default+)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_maybe_default+)
                // REMOVE result call (_loop1_131_var = _loop1_131_rule()) != null  // lambda_param_maybe_default+
                (b = _loop1_131_rule()) != null  // lambda_param_maybe_default+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: lambda_kwds?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_kwds?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(lambda_kwds?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(lambda_kwds)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_132_var = _tmp_132_rule()) != null  // lambda_kwds
                // REMOVE result call ((_opt_var = _tmp_132_rule()) != null || _opt_var == null)  // lambda_kwds?
                ((c = _tmp_132_rule()) != null || c == null)  // lambda_kwds?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("lambda_star_etc[" + pos + ", " + mark() +" ](level: " + level + ") '*' ',' lambda_param_maybe_default+ lambda_kwds? succeeded!");
                }
                // alt action: _PyPegen_star_etc ( p , NULL , b , c )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_star_etc ( p , NULL , b , c )
                return (SSTNode[])cache.putResult(pos, LAMBDA_STAR_ETC_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_star_etc ( p , NULL , NULL , a )
        {
            // visiting Alt: lambda_kwds
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_kwds) - should work
            // name = lambda_kwds
            // TODO replacing arg_ty --> SSTNode
                // generated call: (lambda_kwds_var = lambda_kwds_rule()) != null  // lambda_kwds
            // collecting vars: SSTNode a
            //    vars: {'a': 'SSTNode'}
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_kwds
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_kwds)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_kwds) - should work
                // name = lambda_kwds
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (lambda_kwds_var = lambda_kwds_rule()) != null  // lambda_kwds
                (a = lambda_kwds_rule()) != null  // lambda_kwds
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("lambda_star_etc[" + pos + ", " + mark() +" ](level: " + level + ") lambda_kwds succeeded!");
                }
                // alt action: _PyPegen_star_etc ( p , NULL , NULL , a )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_star_etc ( p , NULL , NULL , a )
                return (SSTNode[])cache.putResult(pos, LAMBDA_STAR_ETC_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: invalid_lambda_star_etc
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_lambda_star_etc) - should work
            // name = invalid_lambda_star_etc
                // generated call: (invalid_lambda_star_etc_var = invalid_lambda_star_etc_rule()) != null  // invalid_lambda_star_etc
            // collecting vars: None invalid_lambda_star_etc_var
            //    vars: {'invalid_lambda_star_etc_var': None}
            Object invalid_lambda_star_etc_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: invalid_lambda_star_etc
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_lambda_star_etc)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_lambda_star_etc) - should work
                // name = invalid_lambda_star_etc
                // REMOVE result call (invalid_lambda_star_etc_var = invalid_lambda_star_etc_rule()) != null  // invalid_lambda_star_etc
                (invalid_lambda_star_etc_var = invalid_lambda_star_etc_rule()) != null  // invalid_lambda_star_etc
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("lambda_star_etc[" + pos + ", " + mark() +" ](level: " + level + ") invalid_lambda_star_etc succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['invalid_lambda_star_etc_var']
                result = invalid_lambda_star_etc_var;
                return (SSTNode[])cache.putResult(pos, LAMBDA_STAR_ETC_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, LAMBDA_STAR_ETC_ID, null);
    }

    // lambda_kwds: '**' lambda_param_no_default
    // TODO replacing arg_ty --> SSTNode
    public SSTNode lambda_kwds_rule() {
    // isLoop: False, isGather: False, type: arg_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: lambda_kwds, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, LAMBDA_KWDS_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, LAMBDA_KWDS_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: a
        {
            // visiting Alt: '**' lambda_param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
                // generated call: (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
            // name = lambda_param_no_default
            // TODO replacing arg_ty --> SSTNode
                // generated call: (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            // collecting vars: SSTNode a
            //    vars: {'_literal': 'Token', 'a': 'SSTNode'}
            Token _literal;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '**'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('**')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
                // REMOVE result call (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
                (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
                // name = lambda_param_no_default
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
                (a = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("lambda_kwds[" + pos + ", " + mark() +" ](level: " + level + ") '**' lambda_param_no_default succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode)cache.putResult(pos, LAMBDA_KWDS_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, LAMBDA_KWDS_ID, null);
    }

    // lambda_param_no_default: lambda_param ',' | lambda_param &':'
    // TODO replacing arg_ty --> SSTNode
    public SSTNode lambda_param_no_default_rule() {
    // isLoop: False, isGather: False, type: arg_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: lambda_param_no_default, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, LAMBDA_PARAM_NO_DEFAULT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, LAMBDA_PARAM_NO_DEFAULT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: a
        {
            // visiting Alt: lambda_param ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
            // name = lambda_param
            // TODO replacing arg_ty --> SSTNode
                // generated call: (lambda_param_var = lambda_param_rule()) != null  // lambda_param
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            //    vars: {'a': 'SSTNode', '_literal': 'Token'}
            Token _literal;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
                // name = lambda_param
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (lambda_param_var = lambda_param_rule()) != null  // lambda_param
                (a = lambda_param_rule()) != null  // lambda_param
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("lambda_param_no_default[" + pos + ", " + mark() +" ](level: " + level + ") lambda_param ',' succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode)cache.putResult(pos, LAMBDA_PARAM_NO_DEFAULT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: a
        {
            // visiting Alt: lambda_param &':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
            // name = lambda_param
            // TODO replacing arg_ty --> SSTNode
                // generated call: (lambda_param_var = lambda_param_rule()) != null  // lambda_param
            // collecting vars: SSTNode a
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&':')
                // generated call: None
            // collecting vars: None None
            //    vars: {'a': 'SSTNode', None: None}
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
                // name = lambda_param
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (lambda_param_var = lambda_param_rule()) != null  // lambda_param
                (a = lambda_param_rule()) != null  // lambda_param
                &&
                // TODO visiting JavaParserGeneratorNamedItem: &':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&':')
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&':')
                // TODO call is not created &':' -> creates artificial
                true
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("lambda_param_no_default[" + pos + ", " + mark() +" ](level: " + level + ") lambda_param &':' succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode)cache.putResult(pos, LAMBDA_PARAM_NO_DEFAULT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, LAMBDA_PARAM_NO_DEFAULT_ID, null);
    }

    // lambda_param_with_default:
    //     | lambda_param default_param ','
    //     | lambda_param default_param &':'
    // TODO replacing NameDefaultPair* --> SSTNode[]
    public SSTNode[] lambda_param_with_default_rule() {
    // isLoop: False, isGather: False, type: NameDefaultPair*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: lambda_param_with_default, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, LAMBDA_PARAM_WITH_DEFAULT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, LAMBDA_PARAM_WITH_DEFAULT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_name_default_pair ( p , a , c , NULL )
        {
            // visiting Alt: lambda_param default_param ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
            // name = lambda_param
            // TODO replacing arg_ty --> SSTNode
                // generated call: (lambda_param_var = lambda_param_rule()) != null  // lambda_param
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
            // name = default_param
                // generated call: (default_param_var = default_param_rule()) != null  // default_param
            // collecting vars: SSTNode c
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            //    vars: {'a': 'SSTNode', 'c': 'SSTNode', '_literal': 'Token'}
            Token _literal;
            SSTNode a;
            SSTNode c;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
                // name = lambda_param
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (lambda_param_var = lambda_param_rule()) != null  // lambda_param
                (a = lambda_param_rule()) != null  // lambda_param
                &&
                // TODO visiting JavaParserGeneratorNamedItem: default_param
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(default_param)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
                // name = default_param
                // REMOVE result call (default_param_var = default_param_rule()) != null  // default_param
                (c = default_param_rule()) != null  // default_param
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("lambda_param_with_default[" + pos + ", " + mark() +" ](level: " + level + ") lambda_param default_param ',' succeeded!");
                }
                // alt action: _PyPegen_name_default_pair ( p , a , c , NULL )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_name_default_pair ( p , a , c , NULL )
                return (SSTNode[])cache.putResult(pos, LAMBDA_PARAM_WITH_DEFAULT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_name_default_pair ( p , a , c , NULL )
        {
            // visiting Alt: lambda_param default_param &':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
            // name = lambda_param
            // TODO replacing arg_ty --> SSTNode
                // generated call: (lambda_param_var = lambda_param_rule()) != null  // lambda_param
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
            // name = default_param
                // generated call: (default_param_var = default_param_rule()) != null  // default_param
            // collecting vars: SSTNode c
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&':')
                // generated call: None
            // collecting vars: None None
            //    vars: {'a': 'SSTNode', 'c': 'SSTNode', None: None}
            SSTNode a;
            SSTNode c;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
                // name = lambda_param
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (lambda_param_var = lambda_param_rule()) != null  // lambda_param
                (a = lambda_param_rule()) != null  // lambda_param
                &&
                // TODO visiting JavaParserGeneratorNamedItem: default_param
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(default_param)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
                // name = default_param
                // REMOVE result call (default_param_var = default_param_rule()) != null  // default_param
                (c = default_param_rule()) != null  // default_param
                &&
                // TODO visiting JavaParserGeneratorNamedItem: &':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&':')
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&':')
                // TODO call is not created &':' -> creates artificial
                true
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("lambda_param_with_default[" + pos + ", " + mark() +" ](level: " + level + ") lambda_param default_param &':' succeeded!");
                }
                // alt action: _PyPegen_name_default_pair ( p , a , c , NULL )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_name_default_pair ( p , a , c , NULL )
                return (SSTNode[])cache.putResult(pos, LAMBDA_PARAM_WITH_DEFAULT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, LAMBDA_PARAM_WITH_DEFAULT_ID, null);
    }

    // lambda_param_maybe_default:
    //     | lambda_param default_param? ','
    //     | lambda_param default_param? &':'
    // TODO replacing NameDefaultPair* --> SSTNode[]
    public SSTNode[] lambda_param_maybe_default_rule() {
    // isLoop: False, isGather: False, type: NameDefaultPair*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: lambda_param_maybe_default, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, LAMBDA_PARAM_MAYBE_DEFAULT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, LAMBDA_PARAM_MAYBE_DEFAULT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_name_default_pair ( p , a , c , NULL )
        {
            // visiting Alt: lambda_param default_param? ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
            // name = lambda_param
            // TODO replacing arg_ty --> SSTNode
                // generated call: (lambda_param_var = lambda_param_rule()) != null  // lambda_param
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(default_param?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
            // name = default_param
                // JavaCallMakerVisitor.visit_Opt.generated call: (default_param_var = default_param_rule()) != null  // default_param
                // generated call: ((_opt_var = default_param_rule()) != null || _opt_var == null)  // default_param?
            // collecting vars: None c
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            //    vars: {'a': 'SSTNode', 'c': None, '_literal': 'Token'}
            Token _literal;
            SSTNode a;
            Object c;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
                // name = lambda_param
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (lambda_param_var = lambda_param_rule()) != null  // lambda_param
                (a = lambda_param_rule()) != null  // lambda_param
                &&
                // TODO visiting JavaParserGeneratorNamedItem: default_param?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(default_param?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(default_param?)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
                // name = default_param
                    // JavaCallMakerVisitor.visit_Opt.generated call: (default_param_var = default_param_rule()) != null  // default_param
                // REMOVE result call ((_opt_var = default_param_rule()) != null || _opt_var == null)  // default_param?
                ((c = default_param_rule()) != null || c == null)  // default_param?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("lambda_param_maybe_default[" + pos + ", " + mark() +" ](level: " + level + ") lambda_param default_param? ',' succeeded!");
                }
                // alt action: _PyPegen_name_default_pair ( p , a , c , NULL )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_name_default_pair ( p , a , c , NULL )
                return (SSTNode[])cache.putResult(pos, LAMBDA_PARAM_MAYBE_DEFAULT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_name_default_pair ( p , a , c , NULL )
        {
            // visiting Alt: lambda_param default_param? &':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
            // name = lambda_param
            // TODO replacing arg_ty --> SSTNode
                // generated call: (lambda_param_var = lambda_param_rule()) != null  // lambda_param
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(default_param?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
            // name = default_param
                // JavaCallMakerVisitor.visit_Opt.generated call: (default_param_var = default_param_rule()) != null  // default_param
                // generated call: ((_opt_var = default_param_rule()) != null || _opt_var == null)  // default_param?
            // collecting vars: None c
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&':')
                // generated call: None
            // collecting vars: None None
            //    vars: {'a': 'SSTNode', 'c': None, None: None}
            SSTNode a;
            Object c;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param) - should work
                // name = lambda_param
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (lambda_param_var = lambda_param_rule()) != null  // lambda_param
                (a = lambda_param_rule()) != null  // lambda_param
                &&
                // TODO visiting JavaParserGeneratorNamedItem: default_param?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(default_param?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(default_param?)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(default_param) - should work
                // name = default_param
                    // JavaCallMakerVisitor.visit_Opt.generated call: (default_param_var = default_param_rule()) != null  // default_param
                // REMOVE result call ((_opt_var = default_param_rule()) != null || _opt_var == null)  // default_param?
                ((c = default_param_rule()) != null || c == null)  // default_param?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: &':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&':')
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&':')
                // TODO call is not created &':' -> creates artificial
                true
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("lambda_param_maybe_default[" + pos + ", " + mark() +" ](level: " + level + ") lambda_param default_param? &':' succeeded!");
                }
                // alt action: _PyPegen_name_default_pair ( p , a , c , NULL )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_name_default_pair ( p , a , c , NULL )
                return (SSTNode[])cache.putResult(pos, LAMBDA_PARAM_MAYBE_DEFAULT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, LAMBDA_PARAM_MAYBE_DEFAULT_ID, null);
    }

    // lambda_param: NAME
    // TODO replacing arg_ty --> SSTNode
    public SSTNode lambda_param_rule() {
    // isLoop: False, isGather: False, type: arg_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: lambda_param, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, LAMBDA_PARAM_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, LAMBDA_PARAM_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_arg ( a -> v . Name . id , NULL , NULL , EXTRA )
        {
            // visiting Alt: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token a
            //    vars: {'a': 'Token'}
            Token a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (a = expect(Token.Kind.NAME)) != null  // NAME
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("lambda_param[" + pos + ", " + mark() +" ](level: " + level + ") NAME succeeded!");
                }
                // alt action: _PyAST_arg ( a -> v . Name . id , NULL , NULL , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_arg ( a -> v . Name . id , NULL , NULL , EXTRA )
                return (SSTNode)cache.putResult(pos, LAMBDA_PARAM_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, LAMBDA_PARAM_ID, null);
    }

    // disjunction: conjunction (('or' conjunction))+ | conjunction
    public SSTNode disjunction_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: disjunction, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, DISJUNCTION_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, DISJUNCTION_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_BoolOp ( Or , CHECK ( asdl_expr_seq * , _PyPegen_seq_insert_in_front ( p , a , b ) ) , EXTRA )
        {
            // visiting Alt: conjunction (('or' conjunction))+
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(conjunction) - should work
            // name = conjunction
                // generated call: (conjunction_var = conjunction_rule()) != null  // conjunction
            // collecting vars: SSTNode a
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1((('or' conjunction))+)
                // generated call: (_loop1_133_var = _loop1_133_rule()) != null  // (('or' conjunction))+
            // collecting vars: SSTNode[] b
            //    vars: {'a': 'SSTNode', 'b': 'SSTNode[]'}
            SSTNode a;
            SSTNode[] b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: conjunction
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(conjunction)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(conjunction) - should work
                // name = conjunction
                // REMOVE result call (conjunction_var = conjunction_rule()) != null  // conjunction
                (a = conjunction_rule()) != null  // conjunction
                &&
                // TODO visiting JavaParserGeneratorNamedItem: (('or' conjunction))+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((('or' conjunction))+)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat1((('or' conjunction))+)
                // REMOVE result call (_loop1_133_var = _loop1_133_rule()) != null  // (('or' conjunction))+
                (b = _loop1_133_rule()) != null  // (('or' conjunction))+
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("disjunction[" + pos + ", " + mark() +" ](level: " + level + ") conjunction (('or' conjunction))+ succeeded!");
                }
                // alt action: _PyAST_BoolOp ( Or , CHECK ( asdl_expr_seq * , _PyPegen_seq_insert_in_front ( p , a , b ) ) , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_BoolOp ( Or , CHECK ( asdl_expr_seq * , _PyPegen_seq_insert_in_front ( p , a , b ) ) , EXTRA )
                return (SSTNode)cache.putResult(pos, DISJUNCTION_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: conjunction
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(conjunction) - should work
            // name = conjunction
                // generated call: (conjunction_var = conjunction_rule()) != null  // conjunction
            // collecting vars: SSTNode conjunction_var
            //    vars: {'conjunction_var': 'SSTNode'}
            SSTNode conjunction_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: conjunction
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(conjunction)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(conjunction) - should work
                // name = conjunction
                // REMOVE result call (conjunction_var = conjunction_rule()) != null  // conjunction
                (conjunction_var = conjunction_rule()) != null  // conjunction
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("disjunction[" + pos + ", " + mark() +" ](level: " + level + ") conjunction succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['conjunction_var']
                result = conjunction_var;
                return (SSTNode)cache.putResult(pos, DISJUNCTION_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, DISJUNCTION_ID, null);
    }

    // conjunction: inversion (('and' inversion))+ | inversion
    public SSTNode conjunction_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: conjunction, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, CONJUNCTION_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, CONJUNCTION_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_BoolOp ( And , CHECK ( asdl_expr_seq * , _PyPegen_seq_insert_in_front ( p , a , b ) ) , EXTRA )
        {
            // visiting Alt: inversion (('and' inversion))+
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(inversion) - should work
            // name = inversion
                // generated call: (inversion_var = inversion_rule()) != null  // inversion
            // collecting vars: SSTNode a
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1((('and' inversion))+)
                // generated call: (_loop1_134_var = _loop1_134_rule()) != null  // (('and' inversion))+
            // collecting vars: SSTNode[] b
            //    vars: {'a': 'SSTNode', 'b': 'SSTNode[]'}
            SSTNode a;
            SSTNode[] b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: inversion
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(inversion)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(inversion) - should work
                // name = inversion
                // REMOVE result call (inversion_var = inversion_rule()) != null  // inversion
                (a = inversion_rule()) != null  // inversion
                &&
                // TODO visiting JavaParserGeneratorNamedItem: (('and' inversion))+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((('and' inversion))+)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat1((('and' inversion))+)
                // REMOVE result call (_loop1_134_var = _loop1_134_rule()) != null  // (('and' inversion))+
                (b = _loop1_134_rule()) != null  // (('and' inversion))+
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("conjunction[" + pos + ", " + mark() +" ](level: " + level + ") inversion (('and' inversion))+ succeeded!");
                }
                // alt action: _PyAST_BoolOp ( And , CHECK ( asdl_expr_seq * , _PyPegen_seq_insert_in_front ( p , a , b ) ) , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_BoolOp ( And , CHECK ( asdl_expr_seq * , _PyPegen_seq_insert_in_front ( p , a , b ) ) , EXTRA )
                return (SSTNode)cache.putResult(pos, CONJUNCTION_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: inversion
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(inversion) - should work
            // name = inversion
                // generated call: (inversion_var = inversion_rule()) != null  // inversion
            // collecting vars: SSTNode inversion_var
            //    vars: {'inversion_var': 'SSTNode'}
            SSTNode inversion_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: inversion
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(inversion)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(inversion) - should work
                // name = inversion
                // REMOVE result call (inversion_var = inversion_rule()) != null  // inversion
                (inversion_var = inversion_rule()) != null  // inversion
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("conjunction[" + pos + ", " + mark() +" ](level: " + level + ") inversion succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['inversion_var']
                result = inversion_var;
                return (SSTNode)cache.putResult(pos, CONJUNCTION_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, CONJUNCTION_ID, null);
    }

    // inversion: 'not' inversion | comparison
    public SSTNode inversion_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: inversion, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, INVERSION_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, INVERSION_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_UnaryOp ( Not , a , EXTRA )
        {
            // visiting Alt: 'not' inversion
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('not')
                // generated call: (_keyword = expect(KEYWORD_NOT)) != null  // token='not'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(inversion) - should work
            // name = inversion
                // generated call: (inversion_var = inversion_rule()) != null  // inversion
            // collecting vars: SSTNode a
            //    vars: {'_keyword': 'Token', 'a': 'SSTNode'}
            Token _keyword;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'not'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('not')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('not')
                // REMOVE result call (_keyword = expect(KEYWORD_NOT)) != null  // token='not'
                (_keyword = expect(KEYWORD_NOT)) != null  // token='not'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: inversion
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(inversion)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(inversion) - should work
                // name = inversion
                // REMOVE result call (inversion_var = inversion_rule()) != null  // inversion
                (a = inversion_rule()) != null  // inversion
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("inversion[" + pos + ", " + mark() +" ](level: " + level + ") 'not' inversion succeeded!");
                }
                // alt action: _PyAST_UnaryOp ( Not , a , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_UnaryOp ( Not , a , EXTRA )
                return (SSTNode)cache.putResult(pos, INVERSION_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: comparison
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(comparison) - should work
            // name = comparison
                // generated call: (comparison_var = comparison_rule()) != null  // comparison
            // collecting vars: SSTNode comparison_var
            //    vars: {'comparison_var': 'SSTNode'}
            SSTNode comparison_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: comparison
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(comparison)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(comparison) - should work
                // name = comparison
                // REMOVE result call (comparison_var = comparison_rule()) != null  // comparison
                (comparison_var = comparison_rule()) != null  // comparison
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("inversion[" + pos + ", " + mark() +" ](level: " + level + ") comparison succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['comparison_var']
                result = comparison_var;
                return (SSTNode)cache.putResult(pos, INVERSION_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, INVERSION_ID, null);
    }

    // comparison: bitwise_or compare_op_bitwise_or_pair+ | bitwise_or
    public SSTNode comparison_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: comparison, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, COMPARISON_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, COMPARISON_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Compare ( a , CHECK ( asdl_int_seq * , _PyPegen_get_cmpops ( p , b ) ) , CHECK ( asdl_expr_seq * , _PyPegen_get_exprs ( p , b ) ) , EXTRA )
        {
            // visiting Alt: bitwise_or compare_op_bitwise_or_pair+
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // name = bitwise_or
                // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // collecting vars: SSTNode a
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(compare_op_bitwise_or_pair+)
                // generated call: (_loop1_135_var = _loop1_135_rule()) != null  // compare_op_bitwise_or_pair+
            // collecting vars: SSTNode[] b
            //    vars: {'a': 'SSTNode', 'b': 'SSTNode[]'}
            SSTNode a;
            SSTNode[] b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
                // name = bitwise_or
                // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
                (a = bitwise_or_rule()) != null  // bitwise_or
                &&
                // TODO visiting JavaParserGeneratorNamedItem: compare_op_bitwise_or_pair+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(compare_op_bitwise_or_pair+)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat1(compare_op_bitwise_or_pair+)
                // REMOVE result call (_loop1_135_var = _loop1_135_rule()) != null  // compare_op_bitwise_or_pair+
                (b = _loop1_135_rule()) != null  // compare_op_bitwise_or_pair+
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("comparison[" + pos + ", " + mark() +" ](level: " + level + ") bitwise_or compare_op_bitwise_or_pair+ succeeded!");
                }
                // alt action: _PyAST_Compare ( a , CHECK ( asdl_int_seq * , _PyPegen_get_cmpops ( p , b ) ) , CHECK ( asdl_expr_seq * , _PyPegen_get_exprs ( p , b ) ) , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Compare ( a , CHECK ( asdl_int_seq * , _PyPegen_get_cmpops ( p , b ) ) , CHECK ( asdl_expr_seq * , _PyPegen_get_exprs ( p , b ) ) , EXTRA )
                return (SSTNode)cache.putResult(pos, COMPARISON_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // name = bitwise_or
                // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // collecting vars: SSTNode bitwise_or_var
            //    vars: {'bitwise_or_var': 'SSTNode'}
            SSTNode bitwise_or_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
                // name = bitwise_or
                // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
                (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("comparison[" + pos + ", " + mark() +" ](level: " + level + ") bitwise_or succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['bitwise_or_var']
                result = bitwise_or_var;
                return (SSTNode)cache.putResult(pos, COMPARISON_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, COMPARISON_ID, null);
    }

    // compare_op_bitwise_or_pair:
    //     | eq_bitwise_or
    //     | noteq_bitwise_or
    //     | lte_bitwise_or
    //     | lt_bitwise_or
    //     | gte_bitwise_or
    //     | gt_bitwise_or
    //     | notin_bitwise_or
    //     | in_bitwise_or
    //     | isnot_bitwise_or
    //     | is_bitwise_or
    // TODO replacing CmpopExprPair* --> SSTNode[]
    public SSTNode[] compare_op_bitwise_or_pair_rule() {
    // isLoop: False, isGather: False, type: CmpopExprPair*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: compare_op_bitwise_or_pair, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, COMPARE_OP_BITWISE_OR_PAIR_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, COMPARE_OP_BITWISE_OR_PAIR_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: eq_bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(eq_bitwise_or) - should work
            // name = eq_bitwise_or
            // TODO replacing CmpopExprPair[] --> SSTNode[]
                // generated call: (eq_bitwise_or_var = eq_bitwise_or_rule()) != null  // eq_bitwise_or
            // collecting vars: SSTNode[] eq_bitwise_or_var
            //    vars: {'eq_bitwise_or_var': 'SSTNode[]'}
            SSTNode[] eq_bitwise_or_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: eq_bitwise_or
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(eq_bitwise_or)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(eq_bitwise_or) - should work
                // name = eq_bitwise_or
                // TODO replacing CmpopExprPair[] --> SSTNode[]
                // REMOVE result call (eq_bitwise_or_var = eq_bitwise_or_rule()) != null  // eq_bitwise_or
                (eq_bitwise_or_var = eq_bitwise_or_rule()) != null  // eq_bitwise_or
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("compare_op_bitwise_or_pair[" + pos + ", " + mark() +" ](level: " + level + ") eq_bitwise_or succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['eq_bitwise_or_var']
                result = eq_bitwise_or_var;
                return (SSTNode[])cache.putResult(pos, COMPARE_OP_BITWISE_OR_PAIR_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: noteq_bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(noteq_bitwise_or) - should work
            // name = noteq_bitwise_or
            // TODO replacing CmpopExprPair[] --> SSTNode[]
                // generated call: (noteq_bitwise_or_var = noteq_bitwise_or_rule()) != null  // noteq_bitwise_or
            // collecting vars: SSTNode[] noteq_bitwise_or_var
            //    vars: {'noteq_bitwise_or_var': 'SSTNode[]'}
            SSTNode[] noteq_bitwise_or_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: noteq_bitwise_or
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(noteq_bitwise_or)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(noteq_bitwise_or) - should work
                // name = noteq_bitwise_or
                // TODO replacing CmpopExprPair[] --> SSTNode[]
                // REMOVE result call (noteq_bitwise_or_var = noteq_bitwise_or_rule()) != null  // noteq_bitwise_or
                (noteq_bitwise_or_var = noteq_bitwise_or_rule()) != null  // noteq_bitwise_or
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("compare_op_bitwise_or_pair[" + pos + ", " + mark() +" ](level: " + level + ") noteq_bitwise_or succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['noteq_bitwise_or_var']
                result = noteq_bitwise_or_var;
                return (SSTNode[])cache.putResult(pos, COMPARE_OP_BITWISE_OR_PAIR_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: lte_bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lte_bitwise_or) - should work
            // name = lte_bitwise_or
            // TODO replacing CmpopExprPair[] --> SSTNode[]
                // generated call: (lte_bitwise_or_var = lte_bitwise_or_rule()) != null  // lte_bitwise_or
            // collecting vars: SSTNode[] lte_bitwise_or_var
            //    vars: {'lte_bitwise_or_var': 'SSTNode[]'}
            SSTNode[] lte_bitwise_or_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: lte_bitwise_or
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lte_bitwise_or)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lte_bitwise_or) - should work
                // name = lte_bitwise_or
                // TODO replacing CmpopExprPair[] --> SSTNode[]
                // REMOVE result call (lte_bitwise_or_var = lte_bitwise_or_rule()) != null  // lte_bitwise_or
                (lte_bitwise_or_var = lte_bitwise_or_rule()) != null  // lte_bitwise_or
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("compare_op_bitwise_or_pair[" + pos + ", " + mark() +" ](level: " + level + ") lte_bitwise_or succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['lte_bitwise_or_var']
                result = lte_bitwise_or_var;
                return (SSTNode[])cache.putResult(pos, COMPARE_OP_BITWISE_OR_PAIR_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: lt_bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lt_bitwise_or) - should work
            // name = lt_bitwise_or
            // TODO replacing CmpopExprPair[] --> SSTNode[]
                // generated call: (lt_bitwise_or_var = lt_bitwise_or_rule()) != null  // lt_bitwise_or
            // collecting vars: SSTNode[] lt_bitwise_or_var
            //    vars: {'lt_bitwise_or_var': 'SSTNode[]'}
            SSTNode[] lt_bitwise_or_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: lt_bitwise_or
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lt_bitwise_or)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lt_bitwise_or) - should work
                // name = lt_bitwise_or
                // TODO replacing CmpopExprPair[] --> SSTNode[]
                // REMOVE result call (lt_bitwise_or_var = lt_bitwise_or_rule()) != null  // lt_bitwise_or
                (lt_bitwise_or_var = lt_bitwise_or_rule()) != null  // lt_bitwise_or
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("compare_op_bitwise_or_pair[" + pos + ", " + mark() +" ](level: " + level + ") lt_bitwise_or succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['lt_bitwise_or_var']
                result = lt_bitwise_or_var;
                return (SSTNode[])cache.putResult(pos, COMPARE_OP_BITWISE_OR_PAIR_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: gte_bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(gte_bitwise_or) - should work
            // name = gte_bitwise_or
            // TODO replacing CmpopExprPair[] --> SSTNode[]
                // generated call: (gte_bitwise_or_var = gte_bitwise_or_rule()) != null  // gte_bitwise_or
            // collecting vars: SSTNode[] gte_bitwise_or_var
            //    vars: {'gte_bitwise_or_var': 'SSTNode[]'}
            SSTNode[] gte_bitwise_or_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: gte_bitwise_or
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(gte_bitwise_or)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(gte_bitwise_or) - should work
                // name = gte_bitwise_or
                // TODO replacing CmpopExprPair[] --> SSTNode[]
                // REMOVE result call (gte_bitwise_or_var = gte_bitwise_or_rule()) != null  // gte_bitwise_or
                (gte_bitwise_or_var = gte_bitwise_or_rule()) != null  // gte_bitwise_or
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("compare_op_bitwise_or_pair[" + pos + ", " + mark() +" ](level: " + level + ") gte_bitwise_or succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['gte_bitwise_or_var']
                result = gte_bitwise_or_var;
                return (SSTNode[])cache.putResult(pos, COMPARE_OP_BITWISE_OR_PAIR_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: gt_bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(gt_bitwise_or) - should work
            // name = gt_bitwise_or
            // TODO replacing CmpopExprPair[] --> SSTNode[]
                // generated call: (gt_bitwise_or_var = gt_bitwise_or_rule()) != null  // gt_bitwise_or
            // collecting vars: SSTNode[] gt_bitwise_or_var
            //    vars: {'gt_bitwise_or_var': 'SSTNode[]'}
            SSTNode[] gt_bitwise_or_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: gt_bitwise_or
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(gt_bitwise_or)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(gt_bitwise_or) - should work
                // name = gt_bitwise_or
                // TODO replacing CmpopExprPair[] --> SSTNode[]
                // REMOVE result call (gt_bitwise_or_var = gt_bitwise_or_rule()) != null  // gt_bitwise_or
                (gt_bitwise_or_var = gt_bitwise_or_rule()) != null  // gt_bitwise_or
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("compare_op_bitwise_or_pair[" + pos + ", " + mark() +" ](level: " + level + ") gt_bitwise_or succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['gt_bitwise_or_var']
                result = gt_bitwise_or_var;
                return (SSTNode[])cache.putResult(pos, COMPARE_OP_BITWISE_OR_PAIR_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: notin_bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(notin_bitwise_or) - should work
            // name = notin_bitwise_or
            // TODO replacing CmpopExprPair[] --> SSTNode[]
                // generated call: (notin_bitwise_or_var = notin_bitwise_or_rule()) != null  // notin_bitwise_or
            // collecting vars: SSTNode[] notin_bitwise_or_var
            //    vars: {'notin_bitwise_or_var': 'SSTNode[]'}
            SSTNode[] notin_bitwise_or_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: notin_bitwise_or
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(notin_bitwise_or)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(notin_bitwise_or) - should work
                // name = notin_bitwise_or
                // TODO replacing CmpopExprPair[] --> SSTNode[]
                // REMOVE result call (notin_bitwise_or_var = notin_bitwise_or_rule()) != null  // notin_bitwise_or
                (notin_bitwise_or_var = notin_bitwise_or_rule()) != null  // notin_bitwise_or
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("compare_op_bitwise_or_pair[" + pos + ", " + mark() +" ](level: " + level + ") notin_bitwise_or succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['notin_bitwise_or_var']
                result = notin_bitwise_or_var;
                return (SSTNode[])cache.putResult(pos, COMPARE_OP_BITWISE_OR_PAIR_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: in_bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(in_bitwise_or) - should work
            // name = in_bitwise_or
            // TODO replacing CmpopExprPair[] --> SSTNode[]
                // generated call: (in_bitwise_or_var = in_bitwise_or_rule()) != null  // in_bitwise_or
            // collecting vars: SSTNode[] in_bitwise_or_var
            //    vars: {'in_bitwise_or_var': 'SSTNode[]'}
            SSTNode[] in_bitwise_or_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: in_bitwise_or
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(in_bitwise_or)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(in_bitwise_or) - should work
                // name = in_bitwise_or
                // TODO replacing CmpopExprPair[] --> SSTNode[]
                // REMOVE result call (in_bitwise_or_var = in_bitwise_or_rule()) != null  // in_bitwise_or
                (in_bitwise_or_var = in_bitwise_or_rule()) != null  // in_bitwise_or
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("compare_op_bitwise_or_pair[" + pos + ", " + mark() +" ](level: " + level + ") in_bitwise_or succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['in_bitwise_or_var']
                result = in_bitwise_or_var;
                return (SSTNode[])cache.putResult(pos, COMPARE_OP_BITWISE_OR_PAIR_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: isnot_bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(isnot_bitwise_or) - should work
            // name = isnot_bitwise_or
            // TODO replacing CmpopExprPair[] --> SSTNode[]
                // generated call: (isnot_bitwise_or_var = isnot_bitwise_or_rule()) != null  // isnot_bitwise_or
            // collecting vars: SSTNode[] isnot_bitwise_or_var
            //    vars: {'isnot_bitwise_or_var': 'SSTNode[]'}
            SSTNode[] isnot_bitwise_or_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: isnot_bitwise_or
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(isnot_bitwise_or)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(isnot_bitwise_or) - should work
                // name = isnot_bitwise_or
                // TODO replacing CmpopExprPair[] --> SSTNode[]
                // REMOVE result call (isnot_bitwise_or_var = isnot_bitwise_or_rule()) != null  // isnot_bitwise_or
                (isnot_bitwise_or_var = isnot_bitwise_or_rule()) != null  // isnot_bitwise_or
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("compare_op_bitwise_or_pair[" + pos + ", " + mark() +" ](level: " + level + ") isnot_bitwise_or succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['isnot_bitwise_or_var']
                result = isnot_bitwise_or_var;
                return (SSTNode[])cache.putResult(pos, COMPARE_OP_BITWISE_OR_PAIR_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: is_bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(is_bitwise_or) - should work
            // name = is_bitwise_or
            // TODO replacing CmpopExprPair[] --> SSTNode[]
                // generated call: (is_bitwise_or_var = is_bitwise_or_rule()) != null  // is_bitwise_or
            // collecting vars: SSTNode[] is_bitwise_or_var
            //    vars: {'is_bitwise_or_var': 'SSTNode[]'}
            SSTNode[] is_bitwise_or_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: is_bitwise_or
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(is_bitwise_or)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(is_bitwise_or) - should work
                // name = is_bitwise_or
                // TODO replacing CmpopExprPair[] --> SSTNode[]
                // REMOVE result call (is_bitwise_or_var = is_bitwise_or_rule()) != null  // is_bitwise_or
                (is_bitwise_or_var = is_bitwise_or_rule()) != null  // is_bitwise_or
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("compare_op_bitwise_or_pair[" + pos + ", " + mark() +" ](level: " + level + ") is_bitwise_or succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['is_bitwise_or_var']
                result = is_bitwise_or_var;
                return (SSTNode[])cache.putResult(pos, COMPARE_OP_BITWISE_OR_PAIR_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, COMPARE_OP_BITWISE_OR_PAIR_ID, null);
    }

    // eq_bitwise_or: '==' bitwise_or
    // TODO replacing CmpopExprPair* --> SSTNode[]
    public SSTNode[] eq_bitwise_or_rule() {
    // isLoop: False, isGather: False, type: CmpopExprPair*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: eq_bitwise_or, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, EQ_BITWISE_OR_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, EQ_BITWISE_OR_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_cmpop_expr_pair ( p , Eq , a )
        {
            // visiting Alt: '==' bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('==')
                // generated call: (_literal = expect(Token.Kind.EQEQUAL)) != null  // token='=='
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // name = bitwise_or
                // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // collecting vars: SSTNode a
            //    vars: {'_literal': 'Token', 'a': 'SSTNode'}
            Token _literal;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '=='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('==')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('==')
                // REMOVE result call (_literal = expect(Token.Kind.EQEQUAL)) != null  // token='=='
                (_literal = expect(Token.Kind.EQEQUAL)) != null  // token='=='
                &&
                // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
                // name = bitwise_or
                // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
                (a = bitwise_or_rule()) != null  // bitwise_or
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("eq_bitwise_or[" + pos + ", " + mark() +" ](level: " + level + ") '==' bitwise_or succeeded!");
                }
                // alt action: _PyPegen_cmpop_expr_pair ( p , Eq , a )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_cmpop_expr_pair ( p , Eq , a )
                return (SSTNode[])cache.putResult(pos, EQ_BITWISE_OR_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, EQ_BITWISE_OR_ID, null);
    }

    // noteq_bitwise_or: ('!=') bitwise_or
    // TODO replacing CmpopExprPair* --> SSTNode[]
    public SSTNode[] noteq_bitwise_or_rule() {
    // isLoop: False, isGather: False, type: CmpopExprPair*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: noteq_bitwise_or, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, NOTEQ_BITWISE_OR_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, NOTEQ_BITWISE_OR_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_cmpop_expr_pair ( p , NotEq , a )
        {
            // visiting Alt: ('!=') bitwise_or
            // TODO visiting JavaCallMakerVisitor.visit_Group(('!='))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('!=')
                // generated call: (_tmp_136_var = _tmp_136_rule()) != null  // '!='
            // collecting vars: None _tmp_136_var
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // name = bitwise_or
                // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // collecting vars: SSTNode a
            //    vars: {'_tmp_136_var': None, 'a': 'SSTNode'}
            Object _tmp_136_var;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ('!=')
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(('!='))
                // TODO visiting JavaCallMakerVisitor.visit_Group(('!='))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('!=')
                // REMOVE result call (_tmp_136_var = _tmp_136_rule()) != null  // '!='
                (_tmp_136_var = _tmp_136_rule()) != null  // '!='
                &&
                // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
                // name = bitwise_or
                // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
                (a = bitwise_or_rule()) != null  // bitwise_or
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("noteq_bitwise_or[" + pos + ", " + mark() +" ](level: " + level + ") ('!=') bitwise_or succeeded!");
                }
                // alt action: _PyPegen_cmpop_expr_pair ( p , NotEq , a )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_cmpop_expr_pair ( p , NotEq , a )
                return (SSTNode[])cache.putResult(pos, NOTEQ_BITWISE_OR_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, NOTEQ_BITWISE_OR_ID, null);
    }

    // lte_bitwise_or: '<=' bitwise_or
    // TODO replacing CmpopExprPair* --> SSTNode[]
    public SSTNode[] lte_bitwise_or_rule() {
    // isLoop: False, isGather: False, type: CmpopExprPair*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: lte_bitwise_or, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, LTE_BITWISE_OR_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, LTE_BITWISE_OR_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_cmpop_expr_pair ( p , LtE , a )
        {
            // visiting Alt: '<=' bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('<=')
                // generated call: (_literal = expect(Token.Kind.LESSEQUAL)) != null  // token='<='
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // name = bitwise_or
                // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // collecting vars: SSTNode a
            //    vars: {'_literal': 'Token', 'a': 'SSTNode'}
            Token _literal;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '<='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('<=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('<=')
                // REMOVE result call (_literal = expect(Token.Kind.LESSEQUAL)) != null  // token='<='
                (_literal = expect(Token.Kind.LESSEQUAL)) != null  // token='<='
                &&
                // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
                // name = bitwise_or
                // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
                (a = bitwise_or_rule()) != null  // bitwise_or
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("lte_bitwise_or[" + pos + ", " + mark() +" ](level: " + level + ") '<=' bitwise_or succeeded!");
                }
                // alt action: _PyPegen_cmpop_expr_pair ( p , LtE , a )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_cmpop_expr_pair ( p , LtE , a )
                return (SSTNode[])cache.putResult(pos, LTE_BITWISE_OR_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, LTE_BITWISE_OR_ID, null);
    }

    // lt_bitwise_or: '<' bitwise_or
    // TODO replacing CmpopExprPair* --> SSTNode[]
    public SSTNode[] lt_bitwise_or_rule() {
    // isLoop: False, isGather: False, type: CmpopExprPair*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: lt_bitwise_or, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, LT_BITWISE_OR_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, LT_BITWISE_OR_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_cmpop_expr_pair ( p , Lt , a )
        {
            // visiting Alt: '<' bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('<')
                // generated call: (_literal = expect(Token.Kind.LESS)) != null  // token='<'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // name = bitwise_or
                // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // collecting vars: SSTNode a
            //    vars: {'_literal': 'Token', 'a': 'SSTNode'}
            Token _literal;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '<'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('<')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('<')
                // REMOVE result call (_literal = expect(Token.Kind.LESS)) != null  // token='<'
                (_literal = expect(Token.Kind.LESS)) != null  // token='<'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
                // name = bitwise_or
                // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
                (a = bitwise_or_rule()) != null  // bitwise_or
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("lt_bitwise_or[" + pos + ", " + mark() +" ](level: " + level + ") '<' bitwise_or succeeded!");
                }
                // alt action: _PyPegen_cmpop_expr_pair ( p , Lt , a )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_cmpop_expr_pair ( p , Lt , a )
                return (SSTNode[])cache.putResult(pos, LT_BITWISE_OR_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, LT_BITWISE_OR_ID, null);
    }

    // gte_bitwise_or: '>=' bitwise_or
    // TODO replacing CmpopExprPair* --> SSTNode[]
    public SSTNode[] gte_bitwise_or_rule() {
    // isLoop: False, isGather: False, type: CmpopExprPair*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: gte_bitwise_or, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, GTE_BITWISE_OR_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, GTE_BITWISE_OR_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_cmpop_expr_pair ( p , GtE , a )
        {
            // visiting Alt: '>=' bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('>=')
                // generated call: (_literal = expect(Token.Kind.GREATEREQUAL)) != null  // token='>='
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // name = bitwise_or
                // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // collecting vars: SSTNode a
            //    vars: {'_literal': 'Token', 'a': 'SSTNode'}
            Token _literal;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '>='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('>=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('>=')
                // REMOVE result call (_literal = expect(Token.Kind.GREATEREQUAL)) != null  // token='>='
                (_literal = expect(Token.Kind.GREATEREQUAL)) != null  // token='>='
                &&
                // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
                // name = bitwise_or
                // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
                (a = bitwise_or_rule()) != null  // bitwise_or
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("gte_bitwise_or[" + pos + ", " + mark() +" ](level: " + level + ") '>=' bitwise_or succeeded!");
                }
                // alt action: _PyPegen_cmpop_expr_pair ( p , GtE , a )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_cmpop_expr_pair ( p , GtE , a )
                return (SSTNode[])cache.putResult(pos, GTE_BITWISE_OR_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, GTE_BITWISE_OR_ID, null);
    }

    // gt_bitwise_or: '>' bitwise_or
    // TODO replacing CmpopExprPair* --> SSTNode[]
    public SSTNode[] gt_bitwise_or_rule() {
    // isLoop: False, isGather: False, type: CmpopExprPair*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: gt_bitwise_or, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, GT_BITWISE_OR_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, GT_BITWISE_OR_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_cmpop_expr_pair ( p , Gt , a )
        {
            // visiting Alt: '>' bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('>')
                // generated call: (_literal = expect(Token.Kind.GREATER)) != null  // token='>'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // name = bitwise_or
                // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // collecting vars: SSTNode a
            //    vars: {'_literal': 'Token', 'a': 'SSTNode'}
            Token _literal;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '>'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('>')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('>')
                // REMOVE result call (_literal = expect(Token.Kind.GREATER)) != null  // token='>'
                (_literal = expect(Token.Kind.GREATER)) != null  // token='>'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
                // name = bitwise_or
                // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
                (a = bitwise_or_rule()) != null  // bitwise_or
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("gt_bitwise_or[" + pos + ", " + mark() +" ](level: " + level + ") '>' bitwise_or succeeded!");
                }
                // alt action: _PyPegen_cmpop_expr_pair ( p , Gt , a )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_cmpop_expr_pair ( p , Gt , a )
                return (SSTNode[])cache.putResult(pos, GT_BITWISE_OR_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, GT_BITWISE_OR_ID, null);
    }

    // notin_bitwise_or: 'not' 'in' bitwise_or
    // TODO replacing CmpopExprPair* --> SSTNode[]
    public SSTNode[] notin_bitwise_or_rule() {
    // isLoop: False, isGather: False, type: CmpopExprPair*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: notin_bitwise_or, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, NOTIN_BITWISE_OR_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, NOTIN_BITWISE_OR_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_cmpop_expr_pair ( p , NotIn , a )
        {
            // visiting Alt: 'not' 'in' bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('not')
                // generated call: (_keyword = expect(KEYWORD_NOT)) != null  // token='not'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
                // generated call: (_keyword = expect(KEYWORD_IN)) != null  // token='in'
            // collecting vars: Token _keyword_1
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // name = bitwise_or
                // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // collecting vars: SSTNode a
            //    vars: {'_keyword': 'Token', '_keyword_1': 'Token', 'a': 'SSTNode'}
            Token _keyword;
            Token _keyword_1;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'not'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('not')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('not')
                // REMOVE result call (_keyword = expect(KEYWORD_NOT)) != null  // token='not'
                (_keyword = expect(KEYWORD_NOT)) != null  // token='not'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: 'in'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('in')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
                // REMOVE result call (_keyword = expect(KEYWORD_IN)) != null  // token='in'
                (_keyword_1 = expect(KEYWORD_IN)) != null  // token='in'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
                // name = bitwise_or
                // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
                (a = bitwise_or_rule()) != null  // bitwise_or
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("notin_bitwise_or[" + pos + ", " + mark() +" ](level: " + level + ") 'not' 'in' bitwise_or succeeded!");
                }
                // alt action: _PyPegen_cmpop_expr_pair ( p , NotIn , a )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_cmpop_expr_pair ( p , NotIn , a )
                return (SSTNode[])cache.putResult(pos, NOTIN_BITWISE_OR_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, NOTIN_BITWISE_OR_ID, null);
    }

    // in_bitwise_or: 'in' bitwise_or
    // TODO replacing CmpopExprPair* --> SSTNode[]
    public SSTNode[] in_bitwise_or_rule() {
    // isLoop: False, isGather: False, type: CmpopExprPair*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: in_bitwise_or, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, IN_BITWISE_OR_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, IN_BITWISE_OR_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_cmpop_expr_pair ( p , In , a )
        {
            // visiting Alt: 'in' bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
                // generated call: (_keyword = expect(KEYWORD_IN)) != null  // token='in'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // name = bitwise_or
                // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // collecting vars: SSTNode a
            //    vars: {'_keyword': 'Token', 'a': 'SSTNode'}
            Token _keyword;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'in'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('in')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
                // REMOVE result call (_keyword = expect(KEYWORD_IN)) != null  // token='in'
                (_keyword = expect(KEYWORD_IN)) != null  // token='in'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
                // name = bitwise_or
                // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
                (a = bitwise_or_rule()) != null  // bitwise_or
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("in_bitwise_or[" + pos + ", " + mark() +" ](level: " + level + ") 'in' bitwise_or succeeded!");
                }
                // alt action: _PyPegen_cmpop_expr_pair ( p , In , a )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_cmpop_expr_pair ( p , In , a )
                return (SSTNode[])cache.putResult(pos, IN_BITWISE_OR_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, IN_BITWISE_OR_ID, null);
    }

    // isnot_bitwise_or: 'is' 'not' bitwise_or
    // TODO replacing CmpopExprPair* --> SSTNode[]
    public SSTNode[] isnot_bitwise_or_rule() {
    // isLoop: False, isGather: False, type: CmpopExprPair*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: isnot_bitwise_or, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, ISNOT_BITWISE_OR_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, ISNOT_BITWISE_OR_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_cmpop_expr_pair ( p , IsNot , a )
        {
            // visiting Alt: 'is' 'not' bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('is')
                // generated call: (_keyword = expect(KEYWORD_IS)) != null  // token='is'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('not')
                // generated call: (_keyword = expect(KEYWORD_NOT)) != null  // token='not'
            // collecting vars: Token _keyword_1
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // name = bitwise_or
                // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // collecting vars: SSTNode a
            //    vars: {'_keyword': 'Token', '_keyword_1': 'Token', 'a': 'SSTNode'}
            Token _keyword;
            Token _keyword_1;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'is'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('is')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('is')
                // REMOVE result call (_keyword = expect(KEYWORD_IS)) != null  // token='is'
                (_keyword = expect(KEYWORD_IS)) != null  // token='is'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: 'not'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('not')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('not')
                // REMOVE result call (_keyword = expect(KEYWORD_NOT)) != null  // token='not'
                (_keyword_1 = expect(KEYWORD_NOT)) != null  // token='not'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
                // name = bitwise_or
                // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
                (a = bitwise_or_rule()) != null  // bitwise_or
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("isnot_bitwise_or[" + pos + ", " + mark() +" ](level: " + level + ") 'is' 'not' bitwise_or succeeded!");
                }
                // alt action: _PyPegen_cmpop_expr_pair ( p , IsNot , a )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_cmpop_expr_pair ( p , IsNot , a )
                return (SSTNode[])cache.putResult(pos, ISNOT_BITWISE_OR_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, ISNOT_BITWISE_OR_ID, null);
    }

    // is_bitwise_or: 'is' bitwise_or
    // TODO replacing CmpopExprPair* --> SSTNode[]
    public SSTNode[] is_bitwise_or_rule() {
    // isLoop: False, isGather: False, type: CmpopExprPair*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: is_bitwise_or, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, IS_BITWISE_OR_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, IS_BITWISE_OR_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_cmpop_expr_pair ( p , Is , a )
        {
            // visiting Alt: 'is' bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('is')
                // generated call: (_keyword = expect(KEYWORD_IS)) != null  // token='is'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // name = bitwise_or
                // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // collecting vars: SSTNode a
            //    vars: {'_keyword': 'Token', 'a': 'SSTNode'}
            Token _keyword;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'is'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('is')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('is')
                // REMOVE result call (_keyword = expect(KEYWORD_IS)) != null  // token='is'
                (_keyword = expect(KEYWORD_IS)) != null  // token='is'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
                // name = bitwise_or
                // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
                (a = bitwise_or_rule()) != null  // bitwise_or
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("is_bitwise_or[" + pos + ", " + mark() +" ](level: " + level + ") 'is' bitwise_or succeeded!");
                }
                // alt action: _PyPegen_cmpop_expr_pair ( p , Is , a )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_cmpop_expr_pair ( p , Is , a )
                return (SSTNode[])cache.putResult(pos, IS_BITWISE_OR_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, IS_BITWISE_OR_ID, null);
    }

    // Left-recursive
    // bitwise_or: bitwise_or '|' bitwise_xor | bitwise_xor
    public SSTNode bitwise_or_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // left recursion--
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Left Recursion Rule: bitwise_or, pos: " + pos + ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, BITWISE_OR_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, BITWISE_OR_ID);
        }
        int lastPos = pos;
        int endPos;
        SSTNode lastResult = null;
        cache.putResult(pos, BITWISE_OR_ID, null);
        while(true) {
            reset(pos);
            SSTNode result = bitwise_or_rule_body();
            endPos = mark();
            if (endPos <= lastPos) {
                break;
            }
            lastResult = result;
            lastPos = endPos;
            cache.putResult(pos, BITWISE_OR_ID, result);
        }
        reset(lastPos);
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: " + lastResult + ", level: " + level);
        }
        return lastResult;
    }

    // left-rersive rule body
    public SSTNode bitwise_or_rule_body() {
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: bitwise_or, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_BinOp ( a , BitOr , b , EXTRA )
        {
            // visiting Alt: bitwise_or '|' bitwise_xor
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // name = bitwise_or
                // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('|')
                // generated call: (_literal = expect(Token.Kind.VBAR)) != null  // token='|'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_xor) - should work
            // name = bitwise_xor
                // generated call: (bitwise_xor_var = bitwise_xor_rule()) != null  // bitwise_xor
            // collecting vars: SSTNode b
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'b': 'SSTNode'}
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
                // name = bitwise_or
                // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
                (a = bitwise_or_rule()) != null  // bitwise_or
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '|'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('|')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('|')
                // REMOVE result call (_literal = expect(Token.Kind.VBAR)) != null  // token='|'
                (_literal = expect(Token.Kind.VBAR)) != null  // token='|'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: bitwise_xor
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_xor)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_xor) - should work
                // name = bitwise_xor
                // REMOVE result call (bitwise_xor_var = bitwise_xor_rule()) != null  // bitwise_xor
                (b = bitwise_xor_rule()) != null  // bitwise_xor
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("bitwise_or[" + pos + ", " + mark() +" ](level: " + level + ") bitwise_or '|' bitwise_xor succeeded!");
                }
                // alt action: _PyAST_BinOp ( a , BitOr , b , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_BinOp ( a , BitOr , b , EXTRA )
                return (SSTNode)cache.putResult(pos, BITWISE_OR_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: bitwise_xor
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_xor) - should work
            // name = bitwise_xor
                // generated call: (bitwise_xor_var = bitwise_xor_rule()) != null  // bitwise_xor
            // collecting vars: SSTNode bitwise_xor_var
            //    vars: {'bitwise_xor_var': 'SSTNode'}
            SSTNode bitwise_xor_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: bitwise_xor
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_xor)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_xor) - should work
                // name = bitwise_xor
                // REMOVE result call (bitwise_xor_var = bitwise_xor_rule()) != null  // bitwise_xor
                (bitwise_xor_var = bitwise_xor_rule()) != null  // bitwise_xor
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("bitwise_or[" + pos + ", " + mark() +" ](level: " + level + ") bitwise_xor succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['bitwise_xor_var']
                result = bitwise_xor_var;
                return (SSTNode)cache.putResult(pos, BITWISE_OR_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, BITWISE_OR_ID, null);
    }

    // Left-recursive
    // bitwise_xor: bitwise_xor '^' bitwise_and | bitwise_and
    public SSTNode bitwise_xor_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // left recursion--
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Left Recursion Rule: bitwise_xor, pos: " + pos + ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, BITWISE_XOR_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, BITWISE_XOR_ID);
        }
        int lastPos = pos;
        int endPos;
        SSTNode lastResult = null;
        cache.putResult(pos, BITWISE_XOR_ID, null);
        while(true) {
            reset(pos);
            SSTNode result = bitwise_xor_rule_body();
            endPos = mark();
            if (endPos <= lastPos) {
                break;
            }
            lastResult = result;
            lastPos = endPos;
            cache.putResult(pos, BITWISE_XOR_ID, result);
        }
        reset(lastPos);
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: " + lastResult + ", level: " + level);
        }
        return lastResult;
    }

    // left-rersive rule body
    public SSTNode bitwise_xor_rule_body() {
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: bitwise_xor, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_BinOp ( a , BitXor , b , EXTRA )
        {
            // visiting Alt: bitwise_xor '^' bitwise_and
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_xor) - should work
            // name = bitwise_xor
                // generated call: (bitwise_xor_var = bitwise_xor_rule()) != null  // bitwise_xor
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('^')
                // generated call: (_literal = expect(Token.Kind.CIRCUMFLEX)) != null  // token='^'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_and) - should work
            // name = bitwise_and
                // generated call: (bitwise_and_var = bitwise_and_rule()) != null  // bitwise_and
            // collecting vars: SSTNode b
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'b': 'SSTNode'}
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: bitwise_xor
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_xor)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_xor) - should work
                // name = bitwise_xor
                // REMOVE result call (bitwise_xor_var = bitwise_xor_rule()) != null  // bitwise_xor
                (a = bitwise_xor_rule()) != null  // bitwise_xor
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '^'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('^')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('^')
                // REMOVE result call (_literal = expect(Token.Kind.CIRCUMFLEX)) != null  // token='^'
                (_literal = expect(Token.Kind.CIRCUMFLEX)) != null  // token='^'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: bitwise_and
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_and)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_and) - should work
                // name = bitwise_and
                // REMOVE result call (bitwise_and_var = bitwise_and_rule()) != null  // bitwise_and
                (b = bitwise_and_rule()) != null  // bitwise_and
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("bitwise_xor[" + pos + ", " + mark() +" ](level: " + level + ") bitwise_xor '^' bitwise_and succeeded!");
                }
                // alt action: _PyAST_BinOp ( a , BitXor , b , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_BinOp ( a , BitXor , b , EXTRA )
                return (SSTNode)cache.putResult(pos, BITWISE_XOR_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: bitwise_and
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_and) - should work
            // name = bitwise_and
                // generated call: (bitwise_and_var = bitwise_and_rule()) != null  // bitwise_and
            // collecting vars: SSTNode bitwise_and_var
            //    vars: {'bitwise_and_var': 'SSTNode'}
            SSTNode bitwise_and_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: bitwise_and
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_and)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_and) - should work
                // name = bitwise_and
                // REMOVE result call (bitwise_and_var = bitwise_and_rule()) != null  // bitwise_and
                (bitwise_and_var = bitwise_and_rule()) != null  // bitwise_and
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("bitwise_xor[" + pos + ", " + mark() +" ](level: " + level + ") bitwise_and succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['bitwise_and_var']
                result = bitwise_and_var;
                return (SSTNode)cache.putResult(pos, BITWISE_XOR_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, BITWISE_XOR_ID, null);
    }

    // Left-recursive
    // bitwise_and: bitwise_and '&' shift_expr | shift_expr
    public SSTNode bitwise_and_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // left recursion--
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Left Recursion Rule: bitwise_and, pos: " + pos + ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, BITWISE_AND_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, BITWISE_AND_ID);
        }
        int lastPos = pos;
        int endPos;
        SSTNode lastResult = null;
        cache.putResult(pos, BITWISE_AND_ID, null);
        while(true) {
            reset(pos);
            SSTNode result = bitwise_and_rule_body();
            endPos = mark();
            if (endPos <= lastPos) {
                break;
            }
            lastResult = result;
            lastPos = endPos;
            cache.putResult(pos, BITWISE_AND_ID, result);
        }
        reset(lastPos);
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: " + lastResult + ", level: " + level);
        }
        return lastResult;
    }

    // left-rersive rule body
    public SSTNode bitwise_and_rule_body() {
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: bitwise_and, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_BinOp ( a , BitAnd , b , EXTRA )
        {
            // visiting Alt: bitwise_and '&' shift_expr
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_and) - should work
            // name = bitwise_and
                // generated call: (bitwise_and_var = bitwise_and_rule()) != null  // bitwise_and
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('&')
                // generated call: (_literal = expect(Token.Kind.AMPER)) != null  // token='&'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(shift_expr) - should work
            // name = shift_expr
                // generated call: (shift_expr_var = shift_expr_rule()) != null  // shift_expr
            // collecting vars: SSTNode b
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'b': 'SSTNode'}
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: bitwise_and
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_and)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_and) - should work
                // name = bitwise_and
                // REMOVE result call (bitwise_and_var = bitwise_and_rule()) != null  // bitwise_and
                (a = bitwise_and_rule()) != null  // bitwise_and
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '&'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('&')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('&')
                // REMOVE result call (_literal = expect(Token.Kind.AMPER)) != null  // token='&'
                (_literal = expect(Token.Kind.AMPER)) != null  // token='&'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: shift_expr
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(shift_expr)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(shift_expr) - should work
                // name = shift_expr
                // REMOVE result call (shift_expr_var = shift_expr_rule()) != null  // shift_expr
                (b = shift_expr_rule()) != null  // shift_expr
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("bitwise_and[" + pos + ", " + mark() +" ](level: " + level + ") bitwise_and '&' shift_expr succeeded!");
                }
                // alt action: _PyAST_BinOp ( a , BitAnd , b , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_BinOp ( a , BitAnd , b , EXTRA )
                return (SSTNode)cache.putResult(pos, BITWISE_AND_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: shift_expr
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(shift_expr) - should work
            // name = shift_expr
                // generated call: (shift_expr_var = shift_expr_rule()) != null  // shift_expr
            // collecting vars: SSTNode shift_expr_var
            //    vars: {'shift_expr_var': 'SSTNode'}
            SSTNode shift_expr_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: shift_expr
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(shift_expr)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(shift_expr) - should work
                // name = shift_expr
                // REMOVE result call (shift_expr_var = shift_expr_rule()) != null  // shift_expr
                (shift_expr_var = shift_expr_rule()) != null  // shift_expr
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("bitwise_and[" + pos + ", " + mark() +" ](level: " + level + ") shift_expr succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['shift_expr_var']
                result = shift_expr_var;
                return (SSTNode)cache.putResult(pos, BITWISE_AND_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, BITWISE_AND_ID, null);
    }

    // Left-recursive
    // shift_expr: shift_expr '<<' sum | shift_expr '>>' sum | sum
    public SSTNode shift_expr_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // left recursion--
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Left Recursion Rule: shift_expr, pos: " + pos + ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, SHIFT_EXPR_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, SHIFT_EXPR_ID);
        }
        int lastPos = pos;
        int endPos;
        SSTNode lastResult = null;
        cache.putResult(pos, SHIFT_EXPR_ID, null);
        while(true) {
            reset(pos);
            SSTNode result = shift_expr_rule_body();
            endPos = mark();
            if (endPos <= lastPos) {
                break;
            }
            lastResult = result;
            lastPos = endPos;
            cache.putResult(pos, SHIFT_EXPR_ID, result);
        }
        reset(lastPos);
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: " + lastResult + ", level: " + level);
        }
        return lastResult;
    }

    // left-rersive rule body
    public SSTNode shift_expr_rule_body() {
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: shift_expr, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_BinOp ( a , LShift , b , EXTRA )
        {
            // visiting Alt: shift_expr '<<' sum
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(shift_expr) - should work
            // name = shift_expr
                // generated call: (shift_expr_var = shift_expr_rule()) != null  // shift_expr
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('<<')
                // generated call: (_literal = expect(Token.Kind.LEFTSHIFT)) != null  // token='<<'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sum) - should work
            // name = sum
                // generated call: (sum_var = sum_rule()) != null  // sum
            // collecting vars: SSTNode b
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'b': 'SSTNode'}
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: shift_expr
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(shift_expr)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(shift_expr) - should work
                // name = shift_expr
                // REMOVE result call (shift_expr_var = shift_expr_rule()) != null  // shift_expr
                (a = shift_expr_rule()) != null  // shift_expr
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '<<'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('<<')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('<<')
                // REMOVE result call (_literal = expect(Token.Kind.LEFTSHIFT)) != null  // token='<<'
                (_literal = expect(Token.Kind.LEFTSHIFT)) != null  // token='<<'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: sum
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(sum)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sum) - should work
                // name = sum
                // REMOVE result call (sum_var = sum_rule()) != null  // sum
                (b = sum_rule()) != null  // sum
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("shift_expr[" + pos + ", " + mark() +" ](level: " + level + ") shift_expr '<<' sum succeeded!");
                }
                // alt action: _PyAST_BinOp ( a , LShift , b , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_BinOp ( a , LShift , b , EXTRA )
                return (SSTNode)cache.putResult(pos, SHIFT_EXPR_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_BinOp ( a , RShift , b , EXTRA )
        {
            // visiting Alt: shift_expr '>>' sum
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(shift_expr) - should work
            // name = shift_expr
                // generated call: (shift_expr_var = shift_expr_rule()) != null  // shift_expr
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('>>')
                // generated call: (_literal = expect(Token.Kind.RIGHTSHIFT)) != null  // token='>>'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sum) - should work
            // name = sum
                // generated call: (sum_var = sum_rule()) != null  // sum
            // collecting vars: SSTNode b
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'b': 'SSTNode'}
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: shift_expr
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(shift_expr)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(shift_expr) - should work
                // name = shift_expr
                // REMOVE result call (shift_expr_var = shift_expr_rule()) != null  // shift_expr
                (a = shift_expr_rule()) != null  // shift_expr
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '>>'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('>>')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('>>')
                // REMOVE result call (_literal = expect(Token.Kind.RIGHTSHIFT)) != null  // token='>>'
                (_literal = expect(Token.Kind.RIGHTSHIFT)) != null  // token='>>'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: sum
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(sum)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sum) - should work
                // name = sum
                // REMOVE result call (sum_var = sum_rule()) != null  // sum
                (b = sum_rule()) != null  // sum
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("shift_expr[" + pos + ", " + mark() +" ](level: " + level + ") shift_expr '>>' sum succeeded!");
                }
                // alt action: _PyAST_BinOp ( a , RShift , b , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_BinOp ( a , RShift , b , EXTRA )
                return (SSTNode)cache.putResult(pos, SHIFT_EXPR_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: sum
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sum) - should work
            // name = sum
                // generated call: (sum_var = sum_rule()) != null  // sum
            // collecting vars: SSTNode sum_var
            //    vars: {'sum_var': 'SSTNode'}
            SSTNode sum_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: sum
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(sum)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sum) - should work
                // name = sum
                // REMOVE result call (sum_var = sum_rule()) != null  // sum
                (sum_var = sum_rule()) != null  // sum
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("shift_expr[" + pos + ", " + mark() +" ](level: " + level + ") sum succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['sum_var']
                result = sum_var;
                return (SSTNode)cache.putResult(pos, SHIFT_EXPR_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, SHIFT_EXPR_ID, null);
    }

    // Left-recursive
    // sum: sum '+' term | sum '-' term | term
    public SSTNode sum_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // left recursion--
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Left Recursion Rule: sum, pos: " + pos + ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, SUM_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, SUM_ID);
        }
        int lastPos = pos;
        int endPos;
        SSTNode lastResult = null;
        cache.putResult(pos, SUM_ID, null);
        while(true) {
            reset(pos);
            SSTNode result = sum_rule_body();
            endPos = mark();
            if (endPos <= lastPos) {
                break;
            }
            lastResult = result;
            lastPos = endPos;
            cache.putResult(pos, SUM_ID, result);
        }
        reset(lastPos);
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: " + lastResult + ", level: " + level);
        }
        return lastResult;
    }

    // left-rersive rule body
    public SSTNode sum_rule_body() {
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: sum, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_BinOp ( a , Add , b , EXTRA )
        {
            // visiting Alt: sum '+' term
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sum) - should work
            // name = sum
                // generated call: (sum_var = sum_rule()) != null  // sum
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('+')
                // generated call: (_literal = expect(Token.Kind.PLUS)) != null  // token='+'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
            // name = term
                // generated call: (term_var = term_rule()) != null  // term
            // collecting vars: SSTNode b
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'b': 'SSTNode'}
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: sum
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(sum)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sum) - should work
                // name = sum
                // REMOVE result call (sum_var = sum_rule()) != null  // sum
                (a = sum_rule()) != null  // sum
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '+'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('+')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('+')
                // REMOVE result call (_literal = expect(Token.Kind.PLUS)) != null  // token='+'
                (_literal = expect(Token.Kind.PLUS)) != null  // token='+'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: term
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(term)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
                // name = term
                // REMOVE result call (term_var = term_rule()) != null  // term
                (b = term_rule()) != null  // term
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("sum[" + pos + ", " + mark() +" ](level: " + level + ") sum '+' term succeeded!");
                }
                // alt action: _PyAST_BinOp ( a , Add , b , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_BinOp ( a , Add , b , EXTRA )
                return (SSTNode)cache.putResult(pos, SUM_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_BinOp ( a , Sub , b , EXTRA )
        {
            // visiting Alt: sum '-' term
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sum) - should work
            // name = sum
                // generated call: (sum_var = sum_rule()) != null  // sum
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('-')
                // generated call: (_literal = expect(Token.Kind.MINUS)) != null  // token='-'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
            // name = term
                // generated call: (term_var = term_rule()) != null  // term
            // collecting vars: SSTNode b
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'b': 'SSTNode'}
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: sum
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(sum)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(sum) - should work
                // name = sum
                // REMOVE result call (sum_var = sum_rule()) != null  // sum
                (a = sum_rule()) != null  // sum
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '-'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('-')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('-')
                // REMOVE result call (_literal = expect(Token.Kind.MINUS)) != null  // token='-'
                (_literal = expect(Token.Kind.MINUS)) != null  // token='-'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: term
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(term)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
                // name = term
                // REMOVE result call (term_var = term_rule()) != null  // term
                (b = term_rule()) != null  // term
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("sum[" + pos + ", " + mark() +" ](level: " + level + ") sum '-' term succeeded!");
                }
                // alt action: _PyAST_BinOp ( a , Sub , b , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_BinOp ( a , Sub , b , EXTRA )
                return (SSTNode)cache.putResult(pos, SUM_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: term
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
            // name = term
                // generated call: (term_var = term_rule()) != null  // term
            // collecting vars: SSTNode term_var
            //    vars: {'term_var': 'SSTNode'}
            SSTNode term_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: term
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(term)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
                // name = term
                // REMOVE result call (term_var = term_rule()) != null  // term
                (term_var = term_rule()) != null  // term
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("sum[" + pos + ", " + mark() +" ](level: " + level + ") term succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['term_var']
                result = term_var;
                return (SSTNode)cache.putResult(pos, SUM_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, SUM_ID, null);
    }

    // Left-recursive
    // term:
    //     | term '*' factor
    //     | term '/' factor
    //     | term '//' factor
    //     | term '%' factor
    //     | term '@' factor
    //     | factor
    public SSTNode term_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // left recursion--
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Left Recursion Rule: term, pos: " + pos + ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, TERM_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, TERM_ID);
        }
        int lastPos = pos;
        int endPos;
        SSTNode lastResult = null;
        cache.putResult(pos, TERM_ID, null);
        while(true) {
            reset(pos);
            SSTNode result = term_rule_body();
            endPos = mark();
            if (endPos <= lastPos) {
                break;
            }
            lastResult = result;
            lastPos = endPos;
            cache.putResult(pos, TERM_ID, result);
        }
        reset(lastPos);
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: " + lastResult + ", level: " + level);
        }
        return lastResult;
    }

    // left-rersive rule body
    public SSTNode term_rule_body() {
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: term, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_BinOp ( a , Mult , b , EXTRA )
        {
            // visiting Alt: term '*' factor
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
            // name = term
                // generated call: (term_var = term_rule()) != null  // term
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
            // name = factor
                // generated call: (factor_var = factor_rule()) != null  // factor
            // collecting vars: SSTNode b
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'b': 'SSTNode'}
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: term
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(term)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
                // name = term
                // REMOVE result call (term_var = term_rule()) != null  // term
                (a = term_rule()) != null  // term
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '*'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: factor
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(factor)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
                // name = factor
                // REMOVE result call (factor_var = factor_rule()) != null  // factor
                (b = factor_rule()) != null  // factor
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("term[" + pos + ", " + mark() +" ](level: " + level + ") term '*' factor succeeded!");
                }
                // alt action: _PyAST_BinOp ( a , Mult , b , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_BinOp ( a , Mult , b , EXTRA )
                return (SSTNode)cache.putResult(pos, TERM_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_BinOp ( a , Div , b , EXTRA )
        {
            // visiting Alt: term '/' factor
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
            // name = term
                // generated call: (term_var = term_rule()) != null  // term
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
                // generated call: (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
            // name = factor
                // generated call: (factor_var = factor_rule()) != null  // factor
            // collecting vars: SSTNode b
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'b': 'SSTNode'}
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: term
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(term)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
                // name = term
                // REMOVE result call (term_var = term_rule()) != null  // term
                (a = term_rule()) != null  // term
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '/'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('/')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('/')
                // REMOVE result call (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
                (_literal = expect(Token.Kind.SLASH)) != null  // token='/'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: factor
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(factor)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
                // name = factor
                // REMOVE result call (factor_var = factor_rule()) != null  // factor
                (b = factor_rule()) != null  // factor
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("term[" + pos + ", " + mark() +" ](level: " + level + ") term '/' factor succeeded!");
                }
                // alt action: _PyAST_BinOp ( a , Div , b , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_BinOp ( a , Div , b , EXTRA )
                return (SSTNode)cache.putResult(pos, TERM_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_BinOp ( a , FloorDiv , b , EXTRA )
        {
            // visiting Alt: term '//' factor
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
            // name = term
                // generated call: (term_var = term_rule()) != null  // term
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('//')
                // generated call: (_literal = expect(Token.Kind.DOUBLESLASH)) != null  // token='//'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
            // name = factor
                // generated call: (factor_var = factor_rule()) != null  // factor
            // collecting vars: SSTNode b
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'b': 'SSTNode'}
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: term
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(term)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
                // name = term
                // REMOVE result call (term_var = term_rule()) != null  // term
                (a = term_rule()) != null  // term
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '//'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('//')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('//')
                // REMOVE result call (_literal = expect(Token.Kind.DOUBLESLASH)) != null  // token='//'
                (_literal = expect(Token.Kind.DOUBLESLASH)) != null  // token='//'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: factor
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(factor)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
                // name = factor
                // REMOVE result call (factor_var = factor_rule()) != null  // factor
                (b = factor_rule()) != null  // factor
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("term[" + pos + ", " + mark() +" ](level: " + level + ") term '//' factor succeeded!");
                }
                // alt action: _PyAST_BinOp ( a , FloorDiv , b , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_BinOp ( a , FloorDiv , b , EXTRA )
                return (SSTNode)cache.putResult(pos, TERM_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_BinOp ( a , Mod , b , EXTRA )
        {
            // visiting Alt: term '%' factor
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
            // name = term
                // generated call: (term_var = term_rule()) != null  // term
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('%')
                // generated call: (_literal = expect(Token.Kind.PERCENT)) != null  // token='%'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
            // name = factor
                // generated call: (factor_var = factor_rule()) != null  // factor
            // collecting vars: SSTNode b
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'b': 'SSTNode'}
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: term
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(term)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
                // name = term
                // REMOVE result call (term_var = term_rule()) != null  // term
                (a = term_rule()) != null  // term
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '%'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('%')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('%')
                // REMOVE result call (_literal = expect(Token.Kind.PERCENT)) != null  // token='%'
                (_literal = expect(Token.Kind.PERCENT)) != null  // token='%'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: factor
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(factor)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
                // name = factor
                // REMOVE result call (factor_var = factor_rule()) != null  // factor
                (b = factor_rule()) != null  // factor
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("term[" + pos + ", " + mark() +" ](level: " + level + ") term '%' factor succeeded!");
                }
                // alt action: _PyAST_BinOp ( a , Mod , b , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_BinOp ( a , Mod , b , EXTRA )
                return (SSTNode)cache.putResult(pos, TERM_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: CHECK_VERSION ( expr_ty , 5 , "The '@' operator is" , _PyAST_BinOp ( a , MatMult , b , EXTRA ) )
        {
            // visiting Alt: term '@' factor
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
            // name = term
                // generated call: (term_var = term_rule()) != null  // term
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('@')
                // generated call: (_literal = expect(Token.Kind.AT)) != null  // token='@'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
            // name = factor
                // generated call: (factor_var = factor_rule()) != null  // factor
            // collecting vars: SSTNode b
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'b': 'SSTNode'}
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: term
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(term)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(term) - should work
                // name = term
                // REMOVE result call (term_var = term_rule()) != null  // term
                (a = term_rule()) != null  // term
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '@'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('@')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('@')
                // REMOVE result call (_literal = expect(Token.Kind.AT)) != null  // token='@'
                (_literal = expect(Token.Kind.AT)) != null  // token='@'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: factor
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(factor)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
                // name = factor
                // REMOVE result call (factor_var = factor_rule()) != null  // factor
                (b = factor_rule()) != null  // factor
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("term[" + pos + ", " + mark() +" ](level: " + level + ") term '@' factor succeeded!");
                }
                // alt action: CHECK_VERSION ( expr_ty , 5 , "The '@' operator is" , _PyAST_BinOp ( a , MatMult , b , EXTRA ) )
                Token endToken = getToken(mark());
                // node.action: CHECK_VERSION ( expr_ty , 5 , "The '@' operator is" , _PyAST_BinOp ( a , MatMult , b , EXTRA ) )
                return (SSTNode)cache.putResult(pos, TERM_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: factor
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
            // name = factor
                // generated call: (factor_var = factor_rule()) != null  // factor
            // collecting vars: SSTNode factor_var
            //    vars: {'factor_var': 'SSTNode'}
            SSTNode factor_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: factor
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(factor)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
                // name = factor
                // REMOVE result call (factor_var = factor_rule()) != null  // factor
                (factor_var = factor_rule()) != null  // factor
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("term[" + pos + ", " + mark() +" ](level: " + level + ") factor succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['factor_var']
                result = factor_var;
                return (SSTNode)cache.putResult(pos, TERM_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, TERM_ID, null);
    }

    // factor: '+' factor | '-' factor | '~' factor | power
    public SSTNode factor_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: factor, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, FACTOR_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, FACTOR_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_UnaryOp ( UAdd , a , EXTRA )
        {
            // visiting Alt: '+' factor
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('+')
                // generated call: (_literal = expect(Token.Kind.PLUS)) != null  // token='+'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
            // name = factor
                // generated call: (factor_var = factor_rule()) != null  // factor
            // collecting vars: SSTNode a
            //    vars: {'_literal': 'Token', 'a': 'SSTNode'}
            Token _literal;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '+'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('+')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('+')
                // REMOVE result call (_literal = expect(Token.Kind.PLUS)) != null  // token='+'
                (_literal = expect(Token.Kind.PLUS)) != null  // token='+'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: factor
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(factor)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
                // name = factor
                // REMOVE result call (factor_var = factor_rule()) != null  // factor
                (a = factor_rule()) != null  // factor
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("factor[" + pos + ", " + mark() +" ](level: " + level + ") '+' factor succeeded!");
                }
                // alt action: _PyAST_UnaryOp ( UAdd , a , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_UnaryOp ( UAdd , a , EXTRA )
                return (SSTNode)cache.putResult(pos, FACTOR_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_UnaryOp ( USub , a , EXTRA )
        {
            // visiting Alt: '-' factor
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('-')
                // generated call: (_literal = expect(Token.Kind.MINUS)) != null  // token='-'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
            // name = factor
                // generated call: (factor_var = factor_rule()) != null  // factor
            // collecting vars: SSTNode a
            //    vars: {'_literal': 'Token', 'a': 'SSTNode'}
            Token _literal;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '-'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('-')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('-')
                // REMOVE result call (_literal = expect(Token.Kind.MINUS)) != null  // token='-'
                (_literal = expect(Token.Kind.MINUS)) != null  // token='-'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: factor
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(factor)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
                // name = factor
                // REMOVE result call (factor_var = factor_rule()) != null  // factor
                (a = factor_rule()) != null  // factor
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("factor[" + pos + ", " + mark() +" ](level: " + level + ") '-' factor succeeded!");
                }
                // alt action: _PyAST_UnaryOp ( USub , a , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_UnaryOp ( USub , a , EXTRA )
                return (SSTNode)cache.putResult(pos, FACTOR_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_UnaryOp ( Invert , a , EXTRA )
        {
            // visiting Alt: '~' factor
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('~')
                // generated call: (_literal = expect(Token.Kind.TILDE)) != null  // token='~'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
            // name = factor
                // generated call: (factor_var = factor_rule()) != null  // factor
            // collecting vars: SSTNode a
            //    vars: {'_literal': 'Token', 'a': 'SSTNode'}
            Token _literal;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '~'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('~')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('~')
                // REMOVE result call (_literal = expect(Token.Kind.TILDE)) != null  // token='~'
                (_literal = expect(Token.Kind.TILDE)) != null  // token='~'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: factor
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(factor)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
                // name = factor
                // REMOVE result call (factor_var = factor_rule()) != null  // factor
                (a = factor_rule()) != null  // factor
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("factor[" + pos + ", " + mark() +" ](level: " + level + ") '~' factor succeeded!");
                }
                // alt action: _PyAST_UnaryOp ( Invert , a , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_UnaryOp ( Invert , a , EXTRA )
                return (SSTNode)cache.putResult(pos, FACTOR_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: power
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(power) - should work
            // name = power
                // generated call: (power_var = power_rule()) != null  // power
            // collecting vars: SSTNode power_var
            //    vars: {'power_var': 'SSTNode'}
            SSTNode power_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: power
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(power)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(power) - should work
                // name = power
                // REMOVE result call (power_var = power_rule()) != null  // power
                (power_var = power_rule()) != null  // power
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("factor[" + pos + ", " + mark() +" ](level: " + level + ") power succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['power_var']
                result = power_var;
                return (SSTNode)cache.putResult(pos, FACTOR_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, FACTOR_ID, null);
    }

    // power: await_primary '**' factor | await_primary
    public SSTNode power_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: power, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, POWER_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, POWER_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_BinOp ( a , Pow , b , EXTRA )
        {
            // visiting Alt: await_primary '**' factor
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(await_primary) - should work
            // name = await_primary
                // generated call: (await_primary_var = await_primary_rule()) != null  // await_primary
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
                // generated call: (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
            // name = factor
                // generated call: (factor_var = factor_rule()) != null  // factor
            // collecting vars: SSTNode b
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'b': 'SSTNode'}
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: await_primary
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(await_primary)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(await_primary) - should work
                // name = await_primary
                // REMOVE result call (await_primary_var = await_primary_rule()) != null  // await_primary
                (a = await_primary_rule()) != null  // await_primary
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '**'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('**')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
                // REMOVE result call (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
                (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: factor
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(factor)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(factor) - should work
                // name = factor
                // REMOVE result call (factor_var = factor_rule()) != null  // factor
                (b = factor_rule()) != null  // factor
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("power[" + pos + ", " + mark() +" ](level: " + level + ") await_primary '**' factor succeeded!");
                }
                // alt action: _PyAST_BinOp ( a , Pow , b , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_BinOp ( a , Pow , b , EXTRA )
                return (SSTNode)cache.putResult(pos, POWER_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: await_primary
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(await_primary) - should work
            // name = await_primary
                // generated call: (await_primary_var = await_primary_rule()) != null  // await_primary
            // collecting vars: SSTNode await_primary_var
            //    vars: {'await_primary_var': 'SSTNode'}
            SSTNode await_primary_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: await_primary
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(await_primary)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(await_primary) - should work
                // name = await_primary
                // REMOVE result call (await_primary_var = await_primary_rule()) != null  // await_primary
                (await_primary_var = await_primary_rule()) != null  // await_primary
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("power[" + pos + ", " + mark() +" ](level: " + level + ") await_primary succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['await_primary_var']
                result = await_primary_var;
                return (SSTNode)cache.putResult(pos, POWER_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, POWER_ID, null);
    }

    // await_primary: AWAIT primary | primary
    public SSTNode await_primary_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: await_primary, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, AWAIT_PRIMARY_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, AWAIT_PRIMARY_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: CHECK_VERSION ( expr_ty , 5 , "Await expressions are" , _PyAST_Await ( a , EXTRA ) )
        {
            // visiting Alt: AWAIT primary
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(AWAIT) - should work
            // name = AWAIT
                // generated call: (await_var = expect(Token.Kind.AWAIT)) != null  // token='AWAIT'
            // collecting vars: Token await_var
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
            // name = primary
                // generated call: (primary_var = primary_rule()) != null  // primary
            // collecting vars: SSTNode a
            //    vars: {'await_var': 'Token', 'a': 'SSTNode'}
            SSTNode a;
            Token await_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: AWAIT
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(AWAIT)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(AWAIT) - should work
                // name = AWAIT
                // REMOVE result call (await_var = expect(Token.Kind.AWAIT)) != null  // token='AWAIT'
                (await_var = expect(Token.Kind.AWAIT)) != null  // token='AWAIT'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: primary
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(primary)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
                // name = primary
                // REMOVE result call (primary_var = primary_rule()) != null  // primary
                (a = primary_rule()) != null  // primary
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("await_primary[" + pos + ", " + mark() +" ](level: " + level + ") AWAIT primary succeeded!");
                }
                // alt action: CHECK_VERSION ( expr_ty , 5 , "Await expressions are" , _PyAST_Await ( a , EXTRA ) )
                Token endToken = getToken(mark());
                // node.action: CHECK_VERSION ( expr_ty , 5 , "Await expressions are" , _PyAST_Await ( a , EXTRA ) )
                return (SSTNode)cache.putResult(pos, AWAIT_PRIMARY_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: primary
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
            // name = primary
                // generated call: (primary_var = primary_rule()) != null  // primary
            // collecting vars: SSTNode primary_var
            //    vars: {'primary_var': 'SSTNode'}
            SSTNode primary_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: primary
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(primary)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
                // name = primary
                // REMOVE result call (primary_var = primary_rule()) != null  // primary
                (primary_var = primary_rule()) != null  // primary
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("await_primary[" + pos + ", " + mark() +" ](level: " + level + ") primary succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['primary_var']
                result = primary_var;
                return (SSTNode)cache.putResult(pos, AWAIT_PRIMARY_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, AWAIT_PRIMARY_ID, null);
    }

    // Left-recursive
    // primary:
    //     | invalid_primary
    //     | primary '.' NAME
    //     | primary genexp
    //     | primary '(' arguments? ')'
    //     | primary '[' slices ']'
    //     | atom
    public SSTNode primary_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // left recursion--
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Left Recursion Rule: primary, pos: " + pos + ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, PRIMARY_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, PRIMARY_ID);
        }
        int lastPos = pos;
        int endPos;
        SSTNode lastResult = null;
        cache.putResult(pos, PRIMARY_ID, null);
        while(true) {
            reset(pos);
            SSTNode result = primary_rule_body();
            endPos = mark();
            if (endPos <= lastPos) {
                break;
            }
            lastResult = result;
            lastPos = endPos;
            cache.putResult(pos, PRIMARY_ID, result);
        }
        reset(lastPos);
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: " + lastResult + ", level: " + level);
        }
        return lastResult;
    }

    // left-rersive rule body
    public SSTNode primary_rule_body() {
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: primary, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: None
        {
            // visiting Alt: invalid_primary
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_primary) - should work
            // name = invalid_primary
                // generated call: (invalid_primary_var = invalid_primary_rule()) != null  // invalid_primary
            // collecting vars: None invalid_primary_var
            //    vars: {'invalid_primary_var': None}
            Object invalid_primary_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: invalid_primary
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_primary)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_primary) - should work
                // name = invalid_primary
                // REMOVE result call (invalid_primary_var = invalid_primary_rule()) != null  // invalid_primary
                (invalid_primary_var = invalid_primary_rule()) != null  // invalid_primary
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("primary[" + pos + ", " + mark() +" ](level: " + level + ") invalid_primary succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['invalid_primary_var']
                result = invalid_primary_var;
                return (SSTNode)cache.putResult(pos, PRIMARY_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Attribute ( a , b -> v . Name . id , Load , EXTRA )
        {
            // visiting Alt: primary '.' NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
            // name = primary
                // generated call: (primary_var = primary_rule()) != null  // primary
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
                // generated call: (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token b
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'b': 'Token'}
            Token _literal;
            SSTNode a;
            Token b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: primary
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(primary)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
                // name = primary
                // REMOVE result call (primary_var = primary_rule()) != null  // primary
                (a = primary_rule()) != null  // primary
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '.'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('.')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
                // REMOVE result call (_literal = expect(Token.Kind.DOT)) != null  // token='.'
                (_literal = expect(Token.Kind.DOT)) != null  // token='.'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (b = expect(Token.Kind.NAME)) != null  // NAME
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("primary[" + pos + ", " + mark() +" ](level: " + level + ") primary '.' NAME succeeded!");
                }
                // alt action: _PyAST_Attribute ( a , b -> v . Name . id , Load , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Attribute ( a , b -> v . Name . id , Load , EXTRA )
                return (SSTNode)cache.putResult(pos, PRIMARY_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Call ( a , CHECK ( asdl_expr_seq * , ( asdl_expr_seq * ) _PyPegen_singleton_seq ( p , b ) ) , NULL , EXTRA )
        {
            // visiting Alt: primary genexp
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
            // name = primary
                // generated call: (primary_var = primary_rule()) != null  // primary
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(genexp) - should work
            // name = genexp
                // generated call: (genexp_var = genexp_rule()) != null  // genexp
            // collecting vars: SSTNode b
            //    vars: {'a': 'SSTNode', 'b': 'SSTNode'}
            SSTNode a;
            SSTNode b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: primary
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(primary)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
                // name = primary
                // REMOVE result call (primary_var = primary_rule()) != null  // primary
                (a = primary_rule()) != null  // primary
                &&
                // TODO visiting JavaParserGeneratorNamedItem: genexp
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(genexp)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(genexp) - should work
                // name = genexp
                // REMOVE result call (genexp_var = genexp_rule()) != null  // genexp
                (b = genexp_rule()) != null  // genexp
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("primary[" + pos + ", " + mark() +" ](level: " + level + ") primary genexp succeeded!");
                }
                // alt action: _PyAST_Call ( a , CHECK ( asdl_expr_seq * , ( asdl_expr_seq * ) _PyPegen_singleton_seq ( p , b ) ) , NULL , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Call ( a , CHECK ( asdl_expr_seq * , ( asdl_expr_seq * ) _PyPegen_singleton_seq ( p , b ) ) , NULL , EXTRA )
                return (SSTNode)cache.putResult(pos, PRIMARY_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Call ( a , ( b ) ? ( ( expr_ty ) b ) -> v . Call . args : NULL , ( b ) ? ( ( expr_ty ) b ) -> v . Call . keywords : NULL , EXTRA )
        {
            // visiting Alt: primary '(' arguments? ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
            // name = primary
                // generated call: (primary_var = primary_rule()) != null  // primary
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(arguments?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(arguments)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_137_var = _tmp_137_rule()) != null  // arguments
                // generated call: ((_opt_var = _tmp_137_rule()) != null || _opt_var == null)  // arguments?
            // collecting vars: None b
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // collecting vars: Token _literal_1
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'b': None, '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            SSTNode a;
            Object b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: primary
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(primary)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
                // name = primary
                // REMOVE result call (primary_var = primary_rule()) != null  // primary
                (a = primary_rule()) != null  // primary
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                &&
                // TODO visiting JavaParserGeneratorNamedItem: arguments?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(arguments?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(arguments?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(arguments)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_137_var = _tmp_137_rule()) != null  // arguments
                // REMOVE result call ((_opt_var = _tmp_137_rule()) != null || _opt_var == null)  // arguments?
                ((b = _tmp_137_rule()) != null || b == null)  // arguments?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
                (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("primary[" + pos + ", " + mark() +" ](level: " + level + ") primary '(' arguments? ')' succeeded!");
                }
                // alt action: _PyAST_Call ( a , ( b ) ? ( ( expr_ty ) b ) -> v . Call . args : NULL , ( b ) ? ( ( expr_ty ) b ) -> v . Call . keywords : NULL , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Call ( a , ( b ) ? ( ( expr_ty ) b ) -> v . Call . args : NULL , ( b ) ? ( ( expr_ty ) b ) -> v . Call . keywords : NULL , EXTRA )
                return (SSTNode)cache.putResult(pos, PRIMARY_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Subscript ( a , b , Load , EXTRA )
        {
            // visiting Alt: primary '[' slices ']'
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
            // name = primary
                // generated call: (primary_var = primary_rule()) != null  // primary
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
                // generated call: (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
            // name = slices
                // generated call: (slices_var = slices_rule()) != null  // slices
            // collecting vars: SSTNode b
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
                // generated call: (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            // collecting vars: Token _literal_1
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'b': 'SSTNode', '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            SSTNode a;
            SSTNode b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: primary
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(primary)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
                // name = primary
                // REMOVE result call (primary_var = primary_rule()) != null  // primary
                (a = primary_rule()) != null  // primary
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '['
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('[')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
                // REMOVE result call (_literal = expect(Token.Kind.LSQB)) != null  // token='['
                (_literal = expect(Token.Kind.LSQB)) != null  // token='['
                &&
                // TODO visiting JavaParserGeneratorNamedItem: slices
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(slices)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
                // name = slices
                // REMOVE result call (slices_var = slices_rule()) != null  // slices
                (b = slices_rule()) != null  // slices
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ']'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(']')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
                // REMOVE result call (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
                (_literal_1 = expect(Token.Kind.RSQB)) != null  // token=']'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("primary[" + pos + ", " + mark() +" ](level: " + level + ") primary '[' slices ']' succeeded!");
                }
                // alt action: _PyAST_Subscript ( a , b , Load , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Subscript ( a , b , Load , EXTRA )
                return (SSTNode)cache.putResult(pos, PRIMARY_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: atom
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(atom) - should work
            // name = atom
                // generated call: (atom_var = atom_rule()) != null  // atom
            // collecting vars: SSTNode atom_var
            //    vars: {'atom_var': 'SSTNode'}
            SSTNode atom_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: atom
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(atom)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(atom) - should work
                // name = atom
                // REMOVE result call (atom_var = atom_rule()) != null  // atom
                (atom_var = atom_rule()) != null  // atom
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("primary[" + pos + ", " + mark() +" ](level: " + level + ") atom succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['atom_var']
                result = atom_var;
                return (SSTNode)cache.putResult(pos, PRIMARY_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, PRIMARY_ID, null);
    }

    // slices: slice !',' | ','.slice+ ','?
    public SSTNode slices_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: slices, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, SLICES_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, SLICES_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: a
        {
            // visiting Alt: slice !','
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slice) - should work
            // name = slice
                // generated call: (slice_var = slice_rule()) != null  // slice
            // collecting vars: SSTNode a
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // lookahead_call_helper call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            //    call.nodetype: GENERIC_TOKEN
                // generated call: lookahead(false, Token.Kind.COMMA)  // token=','
            // collecting vars: boolean None
            //    vars: {'a': 'SSTNode', None: 'boolean'}
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: slice
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(slice)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slice) - should work
                // name = slice
                // REMOVE result call (slice_var = slice_rule()) != null  // slice
                (a = slice_rule()) != null  // slice
                &&
                // TODO visiting JavaParserGeneratorNamedItem: !','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!',')
                // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // lookahead_call_helper call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                //    call.nodetype: GENERIC_TOKEN
                // REMOVE result call lookahead(false, Token.Kind.COMMA)  // token=','
                lookahead(false, Token.Kind.COMMA)  // token=','
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("slices[" + pos + ", " + mark() +" ](level: " + level + ") slice !',' succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode)cache.putResult(pos, SLICES_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Tuple ( a , Load , EXTRA )
        {
            // visiting Alt: ','.slice+ ','?
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.slice+)
                // generated call: (_gather_138_var = _gather_138_rule()) != null  // ','.slice+
            // collecting vars: asdl_expr_seq* a
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_140_var = _tmp_140_rule()) != null  // ','
                // generated call: ((_opt_var = _tmp_140_rule()) != null || _opt_var == null)  // ','?
            // collecting vars: None _opt_var
            //    vars: {'a': 'asdl_expr_seq*', '_opt_var': None}
            Object _opt_var;
            // TODO replacing asdl_expr_seq* --> SSTNode[]
            SSTNode[] a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','.slice+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.slice+)
                // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.slice+)
                // REMOVE result call (_gather_138_var = _gather_138_rule()) != null  // ','.slice+
                (a = (SSTNode[])_gather_138_rule()) != null  // ','.slice+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_140_var = _tmp_140_rule()) != null  // ','
                // REMOVE result call ((_opt_var = _tmp_140_rule()) != null || _opt_var == null)  // ','?
                ((_opt_var = _tmp_140_rule()) != null || _opt_var == null)  // ','?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("slices[" + pos + ", " + mark() +" ](level: " + level + ") ','.slice+ ','? succeeded!");
                }
                // alt action: _PyAST_Tuple ( a , Load , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Tuple ( a , Load , EXTRA )
                return (SSTNode)cache.putResult(pos, SLICES_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, SLICES_ID, null);
    }

    // slice: expression? ':' expression? [':' expression?] | named_expression
    public SSTNode slice_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: slice, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, SLICE_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, SLICE_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Slice ( a , b , c , EXTRA )
        {
            // visiting Alt: expression? ':' expression? [':' expression?]
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(expression?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expression)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_141_var = _tmp_141_rule()) != null  // expression
                // generated call: ((_opt_var = _tmp_141_rule()) != null || _opt_var == null)  // expression?
            // collecting vars: None a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(expression?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expression)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_142_var = _tmp_142_rule()) != null  // expression
                // generated call: ((_opt_var = _tmp_142_rule()) != null || _opt_var == null)  // expression?
            // collecting vars: None b
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt([':' expression?])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(':' expression?)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_143_var = _tmp_143_rule()) != null  // ':' expression?
                // generated call: ((_opt_var = _tmp_143_rule()) != null || _opt_var == null)  // [':' expression?]
            // collecting vars: None c
            //    vars: {'a': None, '_literal': 'Token', 'b': None, 'c': None}
            Token _literal;
            Object a;
            Object b;
            Object c;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: expression?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(expression?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expression)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_141_var = _tmp_141_rule()) != null  // expression
                // REMOVE result call ((_opt_var = _tmp_141_rule()) != null || _opt_var == null)  // expression?
                ((a = _tmp_141_rule()) != null || a == null)  // expression?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(expression?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expression)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_142_var = _tmp_142_rule()) != null  // expression
                // REMOVE result call ((_opt_var = _tmp_142_rule()) != null || _opt_var == null)  // expression?
                ((b = _tmp_142_rule()) != null || b == null)  // expression?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: [':' expression?]
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem([':' expression?])
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt([':' expression?])
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(':' expression?)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_143_var = _tmp_143_rule()) != null  // ':' expression?
                // REMOVE result call ((_opt_var = _tmp_143_rule()) != null || _opt_var == null)  // [':' expression?]
                ((c = _tmp_143_rule()) != null || c == null)  // [':' expression?]
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("slice[" + pos + ", " + mark() +" ](level: " + level + ") expression? ':' expression? [':' expression?] succeeded!");
                }
                // alt action: _PyAST_Slice ( a , b , c , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Slice ( a , b , c , EXTRA )
                return (SSTNode)cache.putResult(pos, SLICE_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: a
        {
            // visiting Alt: named_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // name = named_expression
                // generated call: (named_expression_var = named_expression_rule()) != null  // named_expression
            // collecting vars: SSTNode a
            //    vars: {'a': 'SSTNode'}
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: named_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(named_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
                // name = named_expression
                // REMOVE result call (named_expression_var = named_expression_rule()) != null  // named_expression
                (a = named_expression_rule()) != null  // named_expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("slice[" + pos + ", " + mark() +" ](level: " + level + ") named_expression succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode)cache.putResult(pos, SLICE_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, SLICE_ID, null);
    }

    // atom:
    //     | NAME
    //     | 'True'
    //     | 'False'
    //     | 'None'
    //     | &STRING strings
    //     | NUMBER
    //     | &'(' (tuple | group | genexp)
    //     | &'[' (list | listcomp)
    //     | &'{' (dict | set | dictcomp | setcomp)
    //     | '...'
    public SSTNode atom_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: atom, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, ATOM_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, ATOM_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: factory . createVariable ( getText ( n ) , n . startOffset , n . endOffset )
        {
            // visiting Alt: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token n
            //    vars: {'n': 'Token'}
            Token n;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (n = expect(Token.Kind.NAME)) != null  // NAME
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("atom[" + pos + ", " + mark() +" ](level: " + level + ") NAME succeeded!");
                }
                // alt action: factory . createVariable ( getText ( n ) , n . startOffset , n . endOffset )
                Token endToken = getToken(mark());
                // node.action: factory . createVariable ( getText ( n ) , n . startOffset , n . endOffset )
                result = factory.createVariable(getText(n),n.startOffset,n.endOffset);
                return (SSTNode)cache.putResult(pos, ATOM_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: fac
        {
            // visiting Alt: 'True'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('True')
                // generated call: (_keyword = expect(KEYWORD_TRUE)) != null  // token='True'
            // collecting vars: Token _keyword
            //    vars: {'_keyword': 'Token'}
            Token _keyword;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'True'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('True')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('True')
                // REMOVE result call (_keyword = expect(KEYWORD_TRUE)) != null  // token='True'
                (_keyword = expect(KEYWORD_TRUE)) != null  // token='True'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("atom[" + pos + ", " + mark() +" ](level: " + level + ") 'True' succeeded!");
                }
                // alt action: fac
                Token endToken = getToken(mark());
                // node.action: fac
                return (SSTNode)cache.putResult(pos, ATOM_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Constant ( Py_False , NULL , EXTRA )
        {
            // visiting Alt: 'False'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('False')
                // generated call: (_keyword = expect(KEYWORD_FALSE)) != null  // token='False'
            // collecting vars: Token _keyword
            //    vars: {'_keyword': 'Token'}
            Token _keyword;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'False'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('False')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('False')
                // REMOVE result call (_keyword = expect(KEYWORD_FALSE)) != null  // token='False'
                (_keyword = expect(KEYWORD_FALSE)) != null  // token='False'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("atom[" + pos + ", " + mark() +" ](level: " + level + ") 'False' succeeded!");
                }
                // alt action: _PyAST_Constant ( Py_False , NULL , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Constant ( Py_False , NULL , EXTRA )
                return (SSTNode)cache.putResult(pos, ATOM_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Constant ( Py_None , NULL , EXTRA )
        {
            // visiting Alt: 'None'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('None')
                // generated call: (_keyword = expect(KEYWORD_NONE)) != null  // token='None'
            // collecting vars: Token _keyword
            //    vars: {'_keyword': 'Token'}
            Token _keyword;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'None'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('None')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('None')
                // REMOVE result call (_keyword = expect(KEYWORD_NONE)) != null  // token='None'
                (_keyword = expect(KEYWORD_NONE)) != null  // token='None'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("atom[" + pos + ", " + mark() +" ](level: " + level + ") 'None' succeeded!");
                }
                // alt action: _PyAST_Constant ( Py_None , NULL , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Constant ( Py_None , NULL , EXTRA )
                return (SSTNode)cache.putResult(pos, ATOM_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: &STRING strings
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&STRING)
                // generated call: None
            // collecting vars: None None
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(strings) - should work
            // name = strings
                // generated call: (strings_var = strings_rule()) != null  // strings
            // collecting vars: SSTNode strings_var
            //    vars: {None: None, 'strings_var': 'SSTNode'}
            SSTNode strings_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: &STRING
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&STRING)
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&STRING)
                // TODO call is not created &STRING -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: strings
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(strings)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(strings) - should work
                // name = strings
                // REMOVE result call (strings_var = strings_rule()) != null  // strings
                (strings_var = strings_rule()) != null  // strings
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("atom[" + pos + ", " + mark() +" ](level: " + level + ") &STRING strings succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['strings_var']
                result = strings_var;
                return (SSTNode)cache.putResult(pos, ATOM_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: factory . createNumber ( getText ( n ) , n . startOffset , n . endOffset )
        {
            // visiting Alt: NUMBER
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NUMBER) - should work
            // name = NUMBER
                // generated call: (number_var = expect(Token.Kind.NUMBER)) != null  // NUMBER
            // collecting vars: Token n
            //    vars: {'n': 'Token'}
            Token n;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: NUMBER
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NUMBER)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NUMBER) - should work
                // name = NUMBER
                // REMOVE result call (number_var = expect(Token.Kind.NUMBER)) != null  // NUMBER
                (n = expect(Token.Kind.NUMBER)) != null  // NUMBER
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("atom[" + pos + ", " + mark() +" ](level: " + level + ") NUMBER succeeded!");
                }
                // alt action: factory . createNumber ( getText ( n ) , n . startOffset , n . endOffset )
                Token endToken = getToken(mark());
                // node.action: factory . createNumber ( getText ( n ) , n . startOffset , n . endOffset )
                result = factory.createNumber(getText(n),n.startOffset,n.endOffset);
                return (SSTNode)cache.putResult(pos, ATOM_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: &'(' (tuple | group | genexp)
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'(')
                // generated call: None
            // collecting vars: None None
            // TODO visiting JavaCallMakerVisitor.visit_Group((tuple | group | genexp))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(tuple | group | genexp)
                // generated call: (_tmp_144_var = _tmp_144_rule()) != null  // tuple | group | genexp
            // collecting vars: None _tmp_144_var
            //    vars: {None: None, '_tmp_144_var': None}
            Object _tmp_144_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: &'('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&'(')
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'(')
                // TODO call is not created &'(' -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: (tuple | group | genexp)
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((tuple | group | genexp))
                // TODO visiting JavaCallMakerVisitor.visit_Group((tuple | group | genexp))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(tuple | group | genexp)
                // REMOVE result call (_tmp_144_var = _tmp_144_rule()) != null  // tuple | group | genexp
                (_tmp_144_var = _tmp_144_rule()) != null  // tuple | group | genexp
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("atom[" + pos + ", " + mark() +" ](level: " + level + ") &'(' (tuple | group | genexp) succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_tmp_144_var']
                result = _tmp_144_var;
                return (SSTNode)cache.putResult(pos, ATOM_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: &'[' (list | listcomp)
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'[')
                // generated call: None
            // collecting vars: None None
            // TODO visiting JavaCallMakerVisitor.visit_Group((list | listcomp))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(list | listcomp)
                // generated call: (_tmp_145_var = _tmp_145_rule()) != null  // list | listcomp
            // collecting vars: None _tmp_145_var
            //    vars: {None: None, '_tmp_145_var': None}
            Object _tmp_145_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: &'['
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&'[')
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'[')
                // TODO call is not created &'[' -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: (list | listcomp)
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((list | listcomp))
                // TODO visiting JavaCallMakerVisitor.visit_Group((list | listcomp))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(list | listcomp)
                // REMOVE result call (_tmp_145_var = _tmp_145_rule()) != null  // list | listcomp
                (_tmp_145_var = _tmp_145_rule()) != null  // list | listcomp
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("atom[" + pos + ", " + mark() +" ](level: " + level + ") &'[' (list | listcomp) succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_tmp_145_var']
                result = _tmp_145_var;
                return (SSTNode)cache.putResult(pos, ATOM_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: &'{' (dict | set | dictcomp | setcomp)
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'{')
                // generated call: None
            // collecting vars: None None
            // TODO visiting JavaCallMakerVisitor.visit_Group((dict | set | dictcomp | setcomp))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(dict | set | dictcomp | setcomp)
                // generated call: (_tmp_146_var = _tmp_146_rule()) != null  // dict | set | dictcomp | setcomp
            // collecting vars: None _tmp_146_var
            //    vars: {None: None, '_tmp_146_var': None}
            Object _tmp_146_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: &'{'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&'{')
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&'{')
                // TODO call is not created &'{' -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: (dict | set | dictcomp | setcomp)
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((dict | set | dictcomp | setcomp))
                // TODO visiting JavaCallMakerVisitor.visit_Group((dict | set | dictcomp | setcomp))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(dict | set | dictcomp | setcomp)
                // REMOVE result call (_tmp_146_var = _tmp_146_rule()) != null  // dict | set | dictcomp | setcomp
                (_tmp_146_var = _tmp_146_rule()) != null  // dict | set | dictcomp | setcomp
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("atom[" + pos + ", " + mark() +" ](level: " + level + ") &'{' (dict | set | dictcomp | setcomp) succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_tmp_146_var']
                result = _tmp_146_var;
                return (SSTNode)cache.putResult(pos, ATOM_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Constant ( Py_Ellipsis , NULL , EXTRA )
        {
            // visiting Alt: '...'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('...')
                // generated call: (_literal = expect(Token.Kind.ELLIPSIS)) != null  // token='...'
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '...'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('...')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('...')
                // REMOVE result call (_literal = expect(Token.Kind.ELLIPSIS)) != null  // token='...'
                (_literal = expect(Token.Kind.ELLIPSIS)) != null  // token='...'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("atom[" + pos + ", " + mark() +" ](level: " + level + ") '...' succeeded!");
                }
                // alt action: _PyAST_Constant ( Py_Ellipsis , NULL , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Constant ( Py_Ellipsis , NULL , EXTRA )
                return (SSTNode)cache.putResult(pos, ATOM_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, ATOM_ID, null);
    }

    // strings: STRING+
    public SSTNode strings_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: strings, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, STRINGS_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, STRINGS_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_concatenate_strings ( p , a )
        {
            // visiting Alt: STRING+
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(STRING+)
                // generated call: (_loop1_147_var = _loop1_147_rule()) != null  // STRING+
            // collecting vars: SSTNode[] a
            //    vars: {'a': 'SSTNode[]'}
            SSTNode[] a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: STRING+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(STRING+)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat1(STRING+)
                // REMOVE result call (_loop1_147_var = _loop1_147_rule()) != null  // STRING+
                (a = _loop1_147_rule()) != null  // STRING+
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("strings[" + pos + ", " + mark() +" ](level: " + level + ") STRING+ succeeded!");
                }
                // alt action: _PyPegen_concatenate_strings ( p , a )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_concatenate_strings ( p , a )
                return (SSTNode)cache.putResult(pos, STRINGS_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, STRINGS_ID, null);
    }

    // list: '[' star_named_expressions? ']'
    public SSTNode list_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: list, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, LIST_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, LIST_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_List ( a , Load , EXTRA )
        {
            // visiting Alt: '[' star_named_expressions? ']'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
                // generated call: (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_named_expressions?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_named_expressions)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_148_var = _tmp_148_rule()) != null  // star_named_expressions
                // generated call: ((_opt_var = _tmp_148_rule()) != null || _opt_var == null)  // star_named_expressions?
            // collecting vars: None a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
                // generated call: (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            // collecting vars: Token _literal_1
            //    vars: {'_literal': 'Token', 'a': None, '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            Object a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '['
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('[')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
                // REMOVE result call (_literal = expect(Token.Kind.LSQB)) != null  // token='['
                (_literal = expect(Token.Kind.LSQB)) != null  // token='['
                &&
                // TODO visiting JavaParserGeneratorNamedItem: star_named_expressions?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_named_expressions?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_named_expressions?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_named_expressions)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_148_var = _tmp_148_rule()) != null  // star_named_expressions
                // REMOVE result call ((_opt_var = _tmp_148_rule()) != null || _opt_var == null)  // star_named_expressions?
                ((a = _tmp_148_rule()) != null || a == null)  // star_named_expressions?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ']'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(']')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
                // REMOVE result call (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
                (_literal_1 = expect(Token.Kind.RSQB)) != null  // token=']'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("list[" + pos + ", " + mark() +" ](level: " + level + ") '[' star_named_expressions? ']' succeeded!");
                }
                // alt action: _PyAST_List ( a , Load , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_List ( a , Load , EXTRA )
                return (SSTNode)cache.putResult(pos, LIST_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, LIST_ID, null);
    }

    // listcomp: '[' named_expression for_if_clauses ']' | invalid_comprehension
    public SSTNode listcomp_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: listcomp, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, LISTCOMP_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, LISTCOMP_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_ListComp ( a , b , EXTRA )
        {
            // visiting Alt: '[' named_expression for_if_clauses ']'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
                // generated call: (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // name = named_expression
                // generated call: (named_expression_var = named_expression_rule()) != null  // named_expression
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
            // name = for_if_clauses
            // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
                // generated call: (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            // collecting vars: SSTNode[] b
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
                // generated call: (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            // collecting vars: Token _literal_1
            //    vars: {'_literal': 'Token', 'a': 'SSTNode', 'b': 'SSTNode[]', '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            SSTNode a;
            SSTNode[] b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '['
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('[')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
                // REMOVE result call (_literal = expect(Token.Kind.LSQB)) != null  // token='['
                (_literal = expect(Token.Kind.LSQB)) != null  // token='['
                &&
                // TODO visiting JavaParserGeneratorNamedItem: named_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(named_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
                // name = named_expression
                // REMOVE result call (named_expression_var = named_expression_rule()) != null  // named_expression
                (a = named_expression_rule()) != null  // named_expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: for_if_clauses
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(for_if_clauses)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
                // name = for_if_clauses
                // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
                // REMOVE result call (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
                (b = for_if_clauses_rule()) != null  // for_if_clauses
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ']'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(']')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
                // REMOVE result call (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
                (_literal_1 = expect(Token.Kind.RSQB)) != null  // token=']'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("listcomp[" + pos + ", " + mark() +" ](level: " + level + ") '[' named_expression for_if_clauses ']' succeeded!");
                }
                // alt action: _PyAST_ListComp ( a , b , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_ListComp ( a , b , EXTRA )
                return (SSTNode)cache.putResult(pos, LISTCOMP_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: invalid_comprehension
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_comprehension) - should work
            // name = invalid_comprehension
                // generated call: (invalid_comprehension_var = invalid_comprehension_rule()) != null  // invalid_comprehension
            // collecting vars: None invalid_comprehension_var
            //    vars: {'invalid_comprehension_var': None}
            Object invalid_comprehension_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: invalid_comprehension
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_comprehension)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_comprehension) - should work
                // name = invalid_comprehension
                // REMOVE result call (invalid_comprehension_var = invalid_comprehension_rule()) != null  // invalid_comprehension
                (invalid_comprehension_var = invalid_comprehension_rule()) != null  // invalid_comprehension
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("listcomp[" + pos + ", " + mark() +" ](level: " + level + ") invalid_comprehension succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['invalid_comprehension_var']
                result = invalid_comprehension_var;
                return (SSTNode)cache.putResult(pos, LISTCOMP_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, LISTCOMP_ID, null);
    }

    // tuple: '(' [star_named_expression ',' star_named_expressions?] ')'
    public SSTNode tuple_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: tuple, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, TUPLE_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, TUPLE_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Tuple ( a , Load , EXTRA )
        {
            // visiting Alt: '(' [star_named_expression ',' star_named_expressions?] ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt([star_named_expression ',' star_named_expressions?])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_named_expression ',' star_named_expressions?)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_149_var = _tmp_149_rule()) != null  // star_named_expression ',' star_named_expressions?
                // generated call: ((_opt_var = _tmp_149_rule()) != null || _opt_var == null)  // [star_named_expression ',' star_named_expressions?]
            // collecting vars: None a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // collecting vars: Token _literal_1
            //    vars: {'_literal': 'Token', 'a': None, '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            Object a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                &&
                // TODO visiting JavaParserGeneratorNamedItem: [star_named_expression ',' star_named_expressions?]
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem([star_named_expression ',' star_named_expressions?])
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt([star_named_expression ',' star_named_expressions?])
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_named_expression ',' star_named_expressions?)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_149_var = _tmp_149_rule()) != null  // star_named_expression ',' star_named_expressions?
                // REMOVE result call ((_opt_var = _tmp_149_rule()) != null || _opt_var == null)  // [star_named_expression ',' star_named_expressions?]
                ((a = _tmp_149_rule()) != null || a == null)  // [star_named_expression ',' star_named_expressions?]
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
                (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("tuple[" + pos + ", " + mark() +" ](level: " + level + ") '(' [star_named_expression ',' star_named_expressions?] ')' succeeded!");
                }
                // alt action: _PyAST_Tuple ( a , Load , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Tuple ( a , Load , EXTRA )
                return (SSTNode)cache.putResult(pos, TUPLE_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, TUPLE_ID, null);
    }

    // group: '(' (yield_expr | named_expression) ')' | invalid_group
    public SSTNode group_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: group, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, GROUP_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, GROUP_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: a
        {
            // visiting Alt: '(' (yield_expr | named_expression) ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            // TODO visiting JavaCallMakerVisitor.visit_Group((yield_expr | named_expression))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(yield_expr | named_expression)
                // generated call: (_tmp_150_var = _tmp_150_rule()) != null  // yield_expr | named_expression
            // collecting vars: None a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // collecting vars: Token _literal_1
            //    vars: {'_literal': 'Token', 'a': None, '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            Object a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                &&
                // TODO visiting JavaParserGeneratorNamedItem: (yield_expr | named_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((yield_expr | named_expression))
                // TODO visiting JavaCallMakerVisitor.visit_Group((yield_expr | named_expression))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(yield_expr | named_expression)
                // REMOVE result call (_tmp_150_var = _tmp_150_rule()) != null  // yield_expr | named_expression
                (a = _tmp_150_rule()) != null  // yield_expr | named_expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
                (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("group[" + pos + ", " + mark() +" ](level: " + level + ") '(' (yield_expr | named_expression) ')' succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode)cache.putResult(pos, GROUP_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: invalid_group
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_group) - should work
            // name = invalid_group
                // generated call: (invalid_group_var = invalid_group_rule()) != null  // invalid_group
            // collecting vars: None invalid_group_var
            //    vars: {'invalid_group_var': None}
            Object invalid_group_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: invalid_group
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_group)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_group) - should work
                // name = invalid_group
                // REMOVE result call (invalid_group_var = invalid_group_rule()) != null  // invalid_group
                (invalid_group_var = invalid_group_rule()) != null  // invalid_group
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("group[" + pos + ", " + mark() +" ](level: " + level + ") invalid_group succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['invalid_group_var']
                result = invalid_group_var;
                return (SSTNode)cache.putResult(pos, GROUP_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, GROUP_ID, null);
    }

    // genexp: '(' direct_named_expression for_if_clauses ')' | invalid_comprehension
    public SSTNode genexp_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: genexp, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, GENEXP_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, GENEXP_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_GeneratorExp ( a , b , EXTRA )
        {
            // visiting Alt: '(' direct_named_expression for_if_clauses ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(direct_named_expression) - should work
            // name = direct_named_expression
                // generated call: (direct_named_expression_var = direct_named_expression_rule()) != null  // direct_named_expression
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
            // name = for_if_clauses
            // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
                // generated call: (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            // collecting vars: SSTNode[] b
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // collecting vars: Token _literal_1
            //    vars: {'_literal': 'Token', 'a': 'SSTNode', 'b': 'SSTNode[]', '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            SSTNode a;
            SSTNode[] b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                &&
                // TODO visiting JavaParserGeneratorNamedItem: direct_named_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(direct_named_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(direct_named_expression) - should work
                // name = direct_named_expression
                // REMOVE result call (direct_named_expression_var = direct_named_expression_rule()) != null  // direct_named_expression
                (a = direct_named_expression_rule()) != null  // direct_named_expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: for_if_clauses
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(for_if_clauses)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
                // name = for_if_clauses
                // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
                // REMOVE result call (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
                (b = for_if_clauses_rule()) != null  // for_if_clauses
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
                (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("genexp[" + pos + ", " + mark() +" ](level: " + level + ") '(' direct_named_expression for_if_clauses ')' succeeded!");
                }
                // alt action: _PyAST_GeneratorExp ( a , b , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_GeneratorExp ( a , b , EXTRA )
                return (SSTNode)cache.putResult(pos, GENEXP_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: invalid_comprehension
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_comprehension) - should work
            // name = invalid_comprehension
                // generated call: (invalid_comprehension_var = invalid_comprehension_rule()) != null  // invalid_comprehension
            // collecting vars: None invalid_comprehension_var
            //    vars: {'invalid_comprehension_var': None}
            Object invalid_comprehension_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: invalid_comprehension
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_comprehension)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_comprehension) - should work
                // name = invalid_comprehension
                // REMOVE result call (invalid_comprehension_var = invalid_comprehension_rule()) != null  // invalid_comprehension
                (invalid_comprehension_var = invalid_comprehension_rule()) != null  // invalid_comprehension
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("genexp[" + pos + ", " + mark() +" ](level: " + level + ") invalid_comprehension succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['invalid_comprehension_var']
                result = invalid_comprehension_var;
                return (SSTNode)cache.putResult(pos, GENEXP_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, GENEXP_ID, null);
    }

    // set: '{' star_named_expressions '}'
    public SSTNode set_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: set, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, SET_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, SET_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Set ( a , EXTRA )
        {
            // visiting Alt: '{' star_named_expressions '}'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
                // generated call: (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
            // name = star_named_expressions
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // generated call: (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
            // collecting vars: SSTNode[] a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
                // generated call: (_literal = expect(Token.Kind.RBRACE)) != null  // token='}'
            // collecting vars: Token _literal_1
            //    vars: {'_literal': 'Token', 'a': 'SSTNode[]', '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            SSTNode[] a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '{'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('{')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
                // REMOVE result call (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
                (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: star_named_expressions
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_named_expressions)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
                // name = star_named_expressions
                // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // REMOVE result call (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
                (a = star_named_expressions_rule()) != null  // star_named_expressions
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '}'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('}')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
                // REMOVE result call (_literal = expect(Token.Kind.RBRACE)) != null  // token='}'
                (_literal_1 = expect(Token.Kind.RBRACE)) != null  // token='}'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("set[" + pos + ", " + mark() +" ](level: " + level + ") '{' star_named_expressions '}' succeeded!");
                }
                // alt action: _PyAST_Set ( a , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Set ( a , EXTRA )
                return (SSTNode)cache.putResult(pos, SET_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, SET_ID, null);
    }

    // setcomp: '{' named_expression for_if_clauses '}' | invalid_comprehension
    public SSTNode setcomp_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: setcomp, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, SETCOMP_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, SETCOMP_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_SetComp ( a , b , EXTRA )
        {
            // visiting Alt: '{' named_expression for_if_clauses '}'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
                // generated call: (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // name = named_expression
                // generated call: (named_expression_var = named_expression_rule()) != null  // named_expression
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
            // name = for_if_clauses
            // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
                // generated call: (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            // collecting vars: SSTNode[] b
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
                // generated call: (_literal = expect(Token.Kind.RBRACE)) != null  // token='}'
            // collecting vars: Token _literal_1
            //    vars: {'_literal': 'Token', 'a': 'SSTNode', 'b': 'SSTNode[]', '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            SSTNode a;
            SSTNode[] b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '{'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('{')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
                // REMOVE result call (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
                (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: named_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(named_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
                // name = named_expression
                // REMOVE result call (named_expression_var = named_expression_rule()) != null  // named_expression
                (a = named_expression_rule()) != null  // named_expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: for_if_clauses
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(for_if_clauses)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
                // name = for_if_clauses
                // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
                // REMOVE result call (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
                (b = for_if_clauses_rule()) != null  // for_if_clauses
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '}'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('}')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
                // REMOVE result call (_literal = expect(Token.Kind.RBRACE)) != null  // token='}'
                (_literal_1 = expect(Token.Kind.RBRACE)) != null  // token='}'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("setcomp[" + pos + ", " + mark() +" ](level: " + level + ") '{' named_expression for_if_clauses '}' succeeded!");
                }
                // alt action: _PyAST_SetComp ( a , b , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_SetComp ( a , b , EXTRA )
                return (SSTNode)cache.putResult(pos, SETCOMP_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: invalid_comprehension
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_comprehension) - should work
            // name = invalid_comprehension
                // generated call: (invalid_comprehension_var = invalid_comprehension_rule()) != null  // invalid_comprehension
            // collecting vars: None invalid_comprehension_var
            //    vars: {'invalid_comprehension_var': None}
            Object invalid_comprehension_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: invalid_comprehension
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_comprehension)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_comprehension) - should work
                // name = invalid_comprehension
                // REMOVE result call (invalid_comprehension_var = invalid_comprehension_rule()) != null  // invalid_comprehension
                (invalid_comprehension_var = invalid_comprehension_rule()) != null  // invalid_comprehension
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("setcomp[" + pos + ", " + mark() +" ](level: " + level + ") invalid_comprehension succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['invalid_comprehension_var']
                result = invalid_comprehension_var;
                return (SSTNode)cache.putResult(pos, SETCOMP_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, SETCOMP_ID, null);
    }

    // dict: '{' double_starred_kvpairs? '}' | '{' invalid_double_starred_kvpairs '}'
    public SSTNode dict_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: dict, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, DICT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, DICT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Dict ( CHECK ( asdl_expr_seq * , _PyPegen_get_keys ( p , a ) ) , CHECK ( asdl_expr_seq * , _PyPegen_get_values ( p , a ) ) , EXTRA )
        {
            // visiting Alt: '{' double_starred_kvpairs? '}'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
                // generated call: (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(double_starred_kvpairs?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(double_starred_kvpairs)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_151_var = _tmp_151_rule()) != null  // double_starred_kvpairs
                // generated call: ((_opt_var = _tmp_151_rule()) != null || _opt_var == null)  // double_starred_kvpairs?
            // collecting vars: None a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
                // generated call: (_literal = expect(Token.Kind.RBRACE)) != null  // token='}'
            // collecting vars: Token _literal_1
            //    vars: {'_literal': 'Token', 'a': None, '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            Object a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '{'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('{')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
                // REMOVE result call (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
                (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: double_starred_kvpairs?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(double_starred_kvpairs?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(double_starred_kvpairs?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(double_starred_kvpairs)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_151_var = _tmp_151_rule()) != null  // double_starred_kvpairs
                // REMOVE result call ((_opt_var = _tmp_151_rule()) != null || _opt_var == null)  // double_starred_kvpairs?
                ((a = _tmp_151_rule()) != null || a == null)  // double_starred_kvpairs?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '}'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('}')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
                // REMOVE result call (_literal = expect(Token.Kind.RBRACE)) != null  // token='}'
                (_literal_1 = expect(Token.Kind.RBRACE)) != null  // token='}'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("dict[" + pos + ", " + mark() +" ](level: " + level + ") '{' double_starred_kvpairs? '}' succeeded!");
                }
                // alt action: _PyAST_Dict ( CHECK ( asdl_expr_seq * , _PyPegen_get_keys ( p , a ) ) , CHECK ( asdl_expr_seq * , _PyPegen_get_values ( p , a ) ) , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Dict ( CHECK ( asdl_expr_seq * , _PyPegen_get_keys ( p , a ) ) , CHECK ( asdl_expr_seq * , _PyPegen_get_values ( p , a ) ) , EXTRA )
                return (SSTNode)cache.putResult(pos, DICT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: '{' invalid_double_starred_kvpairs '}'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
                // generated call: (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_double_starred_kvpairs) - should work
            // name = invalid_double_starred_kvpairs
                // generated call: (invalid_double_starred_kvpairs_var = invalid_double_starred_kvpairs_rule()) != null  // invalid_double_starred_kvpairs
            // collecting vars: None invalid_double_starred_kvpairs_var
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
                // generated call: (_literal = expect(Token.Kind.RBRACE)) != null  // token='}'
            // collecting vars: Token _literal_1
            //    vars: {'_literal': 'Token', 'invalid_double_starred_kvpairs_var': None, '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            Object invalid_double_starred_kvpairs_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '{'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('{')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
                // REMOVE result call (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
                (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: invalid_double_starred_kvpairs
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_double_starred_kvpairs)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_double_starred_kvpairs) - should work
                // name = invalid_double_starred_kvpairs
                // REMOVE result call (invalid_double_starred_kvpairs_var = invalid_double_starred_kvpairs_rule()) != null  // invalid_double_starred_kvpairs
                (invalid_double_starred_kvpairs_var = invalid_double_starred_kvpairs_rule()) != null  // invalid_double_starred_kvpairs
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '}'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('}')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
                // REMOVE result call (_literal = expect(Token.Kind.RBRACE)) != null  // token='}'
                (_literal_1 = expect(Token.Kind.RBRACE)) != null  // token='}'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("dict[" + pos + ", " + mark() +" ](level: " + level + ") '{' invalid_double_starred_kvpairs '}' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal', 'invalid_double_starred_kvpairs_var', '_literal_1']
                // TODO handle default action if there is more variables
                return (SSTNode)cache.putResult(pos, DICT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, DICT_ID, null);
    }

    // dictcomp: '{' kvpair for_if_clauses '}' | invalid_dict_comprehension
    public SSTNode dictcomp_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: dictcomp, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, DICTCOMP_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, DICTCOMP_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_DictComp ( a -> key , a -> value , b , EXTRA )
        {
            // visiting Alt: '{' kvpair for_if_clauses '}'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
                // generated call: (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kvpair) - should work
            // name = kvpair
            // TODO replacing KeyValuePair[] --> SSTNode[]
                // generated call: (kvpair_var = kvpair_rule()) != null  // kvpair
            // collecting vars: SSTNode[] a
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
            // name = for_if_clauses
            // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
                // generated call: (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            // collecting vars: SSTNode[] b
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
                // generated call: (_literal = expect(Token.Kind.RBRACE)) != null  // token='}'
            // collecting vars: Token _literal_1
            //    vars: {'_literal': 'Token', 'a': 'SSTNode[]', 'b': 'SSTNode[]', '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            SSTNode[] a;
            SSTNode[] b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '{'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('{')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
                // REMOVE result call (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
                (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: kvpair
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kvpair)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kvpair) - should work
                // name = kvpair
                // TODO replacing KeyValuePair[] --> SSTNode[]
                // REMOVE result call (kvpair_var = kvpair_rule()) != null  // kvpair
                (a = kvpair_rule()) != null  // kvpair
                &&
                // TODO visiting JavaParserGeneratorNamedItem: for_if_clauses
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(for_if_clauses)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
                // name = for_if_clauses
                // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
                // REMOVE result call (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
                (b = for_if_clauses_rule()) != null  // for_if_clauses
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '}'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('}')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
                // REMOVE result call (_literal = expect(Token.Kind.RBRACE)) != null  // token='}'
                (_literal_1 = expect(Token.Kind.RBRACE)) != null  // token='}'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("dictcomp[" + pos + ", " + mark() +" ](level: " + level + ") '{' kvpair for_if_clauses '}' succeeded!");
                }
                // alt action: _PyAST_DictComp ( a -> key , a -> value , b , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_DictComp ( a -> key , a -> value , b , EXTRA )
                return (SSTNode)cache.putResult(pos, DICTCOMP_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: invalid_dict_comprehension
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_dict_comprehension) - should work
            // name = invalid_dict_comprehension
                // generated call: (invalid_dict_comprehension_var = invalid_dict_comprehension_rule()) != null  // invalid_dict_comprehension
            // collecting vars: None invalid_dict_comprehension_var
            //    vars: {'invalid_dict_comprehension_var': None}
            Object invalid_dict_comprehension_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: invalid_dict_comprehension
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_dict_comprehension)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_dict_comprehension) - should work
                // name = invalid_dict_comprehension
                // REMOVE result call (invalid_dict_comprehension_var = invalid_dict_comprehension_rule()) != null  // invalid_dict_comprehension
                (invalid_dict_comprehension_var = invalid_dict_comprehension_rule()) != null  // invalid_dict_comprehension
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("dictcomp[" + pos + ", " + mark() +" ](level: " + level + ") invalid_dict_comprehension succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['invalid_dict_comprehension_var']
                result = invalid_dict_comprehension_var;
                return (SSTNode)cache.putResult(pos, DICTCOMP_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, DICTCOMP_ID, null);
    }

    // double_starred_kvpairs: ','.double_starred_kvpair+ ','?
    // TODO replacing asdl_seq* --> SSTNode[]
    public SSTNode[] double_starred_kvpairs_rule() {
    // isLoop: False, isGather: False, type: asdl_seq*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: double_starred_kvpairs, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, DOUBLE_STARRED_KVPAIRS_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, DOUBLE_STARRED_KVPAIRS_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: a
        {
            // visiting Alt: ','.double_starred_kvpair+ ','?
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.double_starred_kvpair+)
                // generated call: (_gather_152_var = _gather_152_rule()) != null  // ','.double_starred_kvpair+
            // collecting vars: SSTNode[] a
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_154_var = _tmp_154_rule()) != null  // ','
                // generated call: ((_opt_var = _tmp_154_rule()) != null || _opt_var == null)  // ','?
            // collecting vars: None _opt_var
            //    vars: {'a': 'SSTNode[]', '_opt_var': None}
            Object _opt_var;
            SSTNode[] a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','.double_starred_kvpair+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.double_starred_kvpair+)
                // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.double_starred_kvpair+)
                // REMOVE result call (_gather_152_var = _gather_152_rule()) != null  // ','.double_starred_kvpair+
                (a = _gather_152_rule()) != null  // ','.double_starred_kvpair+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_154_var = _tmp_154_rule()) != null  // ','
                // REMOVE result call ((_opt_var = _tmp_154_rule()) != null || _opt_var == null)  // ','?
                ((_opt_var = _tmp_154_rule()) != null || _opt_var == null)  // ','?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("double_starred_kvpairs[" + pos + ", " + mark() +" ](level: " + level + ") ','.double_starred_kvpair+ ','? succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode[])cache.putResult(pos, DOUBLE_STARRED_KVPAIRS_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, DOUBLE_STARRED_KVPAIRS_ID, null);
    }

    // double_starred_kvpair: '**' bitwise_or | kvpair
    // TODO replacing KeyValuePair* --> SSTNode[]
    public SSTNode[] double_starred_kvpair_rule() {
    // isLoop: False, isGather: False, type: KeyValuePair*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: double_starred_kvpair, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, DOUBLE_STARRED_KVPAIR_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, DOUBLE_STARRED_KVPAIR_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_key_value_pair ( p , NULL , a )
        {
            // visiting Alt: '**' bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
                // generated call: (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // name = bitwise_or
                // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // collecting vars: SSTNode a
            //    vars: {'_literal': 'Token', 'a': 'SSTNode'}
            Token _literal;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '**'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('**')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
                // REMOVE result call (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
                (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
                // name = bitwise_or
                // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
                (a = bitwise_or_rule()) != null  // bitwise_or
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("double_starred_kvpair[" + pos + ", " + mark() +" ](level: " + level + ") '**' bitwise_or succeeded!");
                }
                // alt action: _PyPegen_key_value_pair ( p , NULL , a )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_key_value_pair ( p , NULL , a )
                return (SSTNode[])cache.putResult(pos, DOUBLE_STARRED_KVPAIR_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: kvpair
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kvpair) - should work
            // name = kvpair
            // TODO replacing KeyValuePair[] --> SSTNode[]
                // generated call: (kvpair_var = kvpair_rule()) != null  // kvpair
            // collecting vars: SSTNode[] kvpair_var
            //    vars: {'kvpair_var': 'SSTNode[]'}
            SSTNode[] kvpair_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: kvpair
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kvpair)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kvpair) - should work
                // name = kvpair
                // TODO replacing KeyValuePair[] --> SSTNode[]
                // REMOVE result call (kvpair_var = kvpair_rule()) != null  // kvpair
                (kvpair_var = kvpair_rule()) != null  // kvpair
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("double_starred_kvpair[" + pos + ", " + mark() +" ](level: " + level + ") kvpair succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['kvpair_var']
                result = kvpair_var;
                return (SSTNode[])cache.putResult(pos, DOUBLE_STARRED_KVPAIR_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, DOUBLE_STARRED_KVPAIR_ID, null);
    }

    // kvpair: expression ':' expression
    // TODO replacing KeyValuePair* --> SSTNode[]
    public SSTNode[] kvpair_rule() {
    // isLoop: False, isGather: False, type: KeyValuePair*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: kvpair, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, KVPAIR_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, KVPAIR_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_key_value_pair ( p , a , b )
        {
            // visiting Alt: expression ':' expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode b
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'b': 'SSTNode'}
            Token _literal;
            SSTNode a;
            SSTNode b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (a = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (b = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("kvpair[" + pos + ", " + mark() +" ](level: " + level + ") expression ':' expression succeeded!");
                }
                // alt action: _PyPegen_key_value_pair ( p , a , b )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_key_value_pair ( p , a , b )
                return (SSTNode[])cache.putResult(pos, KVPAIR_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, KVPAIR_ID, null);
    }

    // for_if_clauses: for_if_clause+
    // TODO replacing asdl_comprehension_seq* --> SSTNode[]
    public SSTNode[] for_if_clauses_rule() {
    // isLoop: False, isGather: False, type: asdl_comprehension_seq*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: for_if_clauses, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, FOR_IF_CLAUSES_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, FOR_IF_CLAUSES_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: a
        {
            // visiting Alt: for_if_clause+
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(for_if_clause+)
                // generated call: (_loop1_155_var = _loop1_155_rule()) != null  // for_if_clause+
            // collecting vars: asdl_comprehension_seq* a
            //    vars: {'a': 'asdl_comprehension_seq*'}
            // TODO replacing asdl_comprehension_seq* --> SSTNode[]
            SSTNode[] a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: for_if_clause+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(for_if_clause+)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat1(for_if_clause+)
                // REMOVE result call (_loop1_155_var = _loop1_155_rule()) != null  // for_if_clause+
                (a = (SSTNode[])_loop1_155_rule()) != null  // for_if_clause+
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("for_if_clauses[" + pos + ", " + mark() +" ](level: " + level + ") for_if_clause+ succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode[])cache.putResult(pos, FOR_IF_CLAUSES_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, FOR_IF_CLAUSES_ID, null);
    }

    // for_if_clause:
    //     | ASYNC 'for' star_targets 'in' ~ disjunction (('if' disjunction))*
    //     | 'for' star_targets 'in' ~ disjunction (('if' disjunction))*
    //     | invalid_for_target
    // TODO replacing comprehension_ty --> SSTNode
    public SSTNode for_if_clause_rule() {
    // isLoop: False, isGather: False, type: comprehension_ty)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: for_if_clause, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, FOR_IF_CLAUSE_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, FOR_IF_CLAUSE_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: CHECK_VERSION ( comprehension_ty , 6 , "Async comprehensions are" , _PyAST_comprehension ( a , b , c , 1 , p -> arena ) )
        {
            // visiting Alt: ASYNC 'for' star_targets 'in' ~ disjunction (('if' disjunction))*
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
            // name = ASYNC
                // generated call: (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            // collecting vars: Token async_var
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('for')
                // generated call: (_keyword = expect(KEYWORD_FOR)) != null  // token='for'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
            // name = star_targets
                // generated call: (star_targets_var = star_targets_rule()) != null  // star_targets
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
                // generated call: (_keyword = expect(KEYWORD_IN)) != null  // token='in'
            // collecting vars: Token _keyword_1
            // TODO visiting JavaCallMakerVisitor.visit_Cut(~)
                // generated call: None
            // collecting vars: None None
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
            // name = disjunction
                // generated call: (disjunction_var = disjunction_rule()) != null  // disjunction
            // collecting vars: SSTNode b
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0((('if' disjunction))*)
                // generated call: (_loop0_156_var = _loop0_156_rule()) != null  // (('if' disjunction))*
            // collecting vars: asdl_expr_seq* c
            //    vars: {'async_var': 'Token', '_keyword': 'Token', 'a': 'SSTNode', '_keyword_1': 'Token', None: None, 'b': 'SSTNode', 'c': 'asdl_expr_seq*'}
            Token _keyword;
            Token _keyword_1;
            SSTNode a;
            Token async_var;
            SSTNode b;
            // TODO replacing asdl_expr_seq* --> SSTNode[]
            SSTNode[] c;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ASYNC
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(ASYNC)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
                // name = ASYNC
                // REMOVE result call (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
                (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: 'for'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('for')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('for')
                // REMOVE result call (_keyword = expect(KEYWORD_FOR)) != null  // token='for'
                (_keyword = expect(KEYWORD_FOR)) != null  // token='for'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: star_targets
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_targets)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
                // name = star_targets
                // REMOVE result call (star_targets_var = star_targets_rule()) != null  // star_targets
                (a = star_targets_rule()) != null  // star_targets
                &&
                // TODO visiting JavaParserGeneratorNamedItem: 'in'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('in')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
                // REMOVE result call (_keyword = expect(KEYWORD_IN)) != null  // token='in'
                (_keyword_1 = expect(KEYWORD_IN)) != null  // token='in'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ~
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(~)
                // TODO visiting JavaCallMakerVisitor.visit_Cut(~)
                // TODO call is not created ~ -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: disjunction
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(disjunction)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
                // name = disjunction
                // REMOVE result call (disjunction_var = disjunction_rule()) != null  // disjunction
                (b = disjunction_rule()) != null  // disjunction
                &&
                // TODO visiting JavaParserGeneratorNamedItem: (('if' disjunction))*
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((('if' disjunction))*)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat0((('if' disjunction))*)
                // REMOVE result call (_loop0_156_var = _loop0_156_rule()) != null  // (('if' disjunction))*
                (c = (SSTNode[])_loop0_156_rule()) != null  // (('if' disjunction))*
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("for_if_clause[" + pos + ", " + mark() +" ](level: " + level + ") ASYNC 'for' star_targets 'in' ~ disjunction (('if' disjunction))* succeeded!");
                }
                // alt action: CHECK_VERSION ( comprehension_ty , 6 , "Async comprehensions are" , _PyAST_comprehension ( a , b , c , 1 , p -> arena ) )
                Token endToken = getToken(mark());
                // node.action: CHECK_VERSION ( comprehension_ty , 6 , "Async comprehensions are" , _PyAST_comprehension ( a , b , c , 1 , p -> arena ) )
                return (SSTNode)cache.putResult(pos, FOR_IF_CLAUSE_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_comprehension ( a , b , c , 0 , p -> arena )
        {
            // visiting Alt: 'for' star_targets 'in' ~ disjunction (('if' disjunction))*
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('for')
                // generated call: (_keyword = expect(KEYWORD_FOR)) != null  // token='for'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
            // name = star_targets
                // generated call: (star_targets_var = star_targets_rule()) != null  // star_targets
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
                // generated call: (_keyword = expect(KEYWORD_IN)) != null  // token='in'
            // collecting vars: Token _keyword_1
            // TODO visiting JavaCallMakerVisitor.visit_Cut(~)
                // generated call: None
            // collecting vars: None None
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
            // name = disjunction
                // generated call: (disjunction_var = disjunction_rule()) != null  // disjunction
            // collecting vars: SSTNode b
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0((('if' disjunction))*)
                // generated call: (_loop0_157_var = _loop0_157_rule()) != null  // (('if' disjunction))*
            // collecting vars: asdl_expr_seq* c
            //    vars: {'_keyword': 'Token', 'a': 'SSTNode', '_keyword_1': 'Token', None: None, 'b': 'SSTNode', 'c': 'asdl_expr_seq*'}
            Token _keyword;
            Token _keyword_1;
            SSTNode a;
            SSTNode b;
            // TODO replacing asdl_expr_seq* --> SSTNode[]
            SSTNode[] c;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'for'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('for')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('for')
                // REMOVE result call (_keyword = expect(KEYWORD_FOR)) != null  // token='for'
                (_keyword = expect(KEYWORD_FOR)) != null  // token='for'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: star_targets
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_targets)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
                // name = star_targets
                // REMOVE result call (star_targets_var = star_targets_rule()) != null  // star_targets
                (a = star_targets_rule()) != null  // star_targets
                &&
                // TODO visiting JavaParserGeneratorNamedItem: 'in'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('in')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('in')
                // REMOVE result call (_keyword = expect(KEYWORD_IN)) != null  // token='in'
                (_keyword_1 = expect(KEYWORD_IN)) != null  // token='in'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ~
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(~)
                // TODO visiting JavaCallMakerVisitor.visit_Cut(~)
                // TODO call is not created ~ -> creates artificial
                true
                &&
                // TODO visiting JavaParserGeneratorNamedItem: disjunction
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(disjunction)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
                // name = disjunction
                // REMOVE result call (disjunction_var = disjunction_rule()) != null  // disjunction
                (b = disjunction_rule()) != null  // disjunction
                &&
                // TODO visiting JavaParserGeneratorNamedItem: (('if' disjunction))*
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((('if' disjunction))*)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat0((('if' disjunction))*)
                // REMOVE result call (_loop0_157_var = _loop0_157_rule()) != null  // (('if' disjunction))*
                (c = (SSTNode[])_loop0_157_rule()) != null  // (('if' disjunction))*
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("for_if_clause[" + pos + ", " + mark() +" ](level: " + level + ") 'for' star_targets 'in' ~ disjunction (('if' disjunction))* succeeded!");
                }
                // alt action: _PyAST_comprehension ( a , b , c , 0 , p -> arena )
                Token endToken = getToken(mark());
                // node.action: _PyAST_comprehension ( a , b , c , 0 , p -> arena )
                return (SSTNode)cache.putResult(pos, FOR_IF_CLAUSE_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: invalid_for_target
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_for_target) - should work
            // name = invalid_for_target
                // generated call: (invalid_for_target_var = invalid_for_target_rule()) != null  // invalid_for_target
            // collecting vars: None invalid_for_target_var
            //    vars: {'invalid_for_target_var': None}
            Object invalid_for_target_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: invalid_for_target
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_for_target)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_for_target) - should work
                // name = invalid_for_target
                // REMOVE result call (invalid_for_target_var = invalid_for_target_rule()) != null  // invalid_for_target
                (invalid_for_target_var = invalid_for_target_rule()) != null  // invalid_for_target
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("for_if_clause[" + pos + ", " + mark() +" ](level: " + level + ") invalid_for_target succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['invalid_for_target_var']
                result = invalid_for_target_var;
                return (SSTNode)cache.putResult(pos, FOR_IF_CLAUSE_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, FOR_IF_CLAUSE_ID, null);
    }

    // yield_expr: 'yield' 'from' expression | 'yield' star_expressions?
    public SSTNode yield_expr_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: yield_expr, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, YIELD_EXPR_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, YIELD_EXPR_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_YieldFrom ( a , EXTRA )
        {
            // visiting Alt: 'yield' 'from' expression
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('yield')
                // generated call: (_keyword = expect(KEYWORD_YIELD)) != null  // token='yield'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('from')
                // generated call: (_keyword = expect(KEYWORD_FROM)) != null  // token='from'
            // collecting vars: Token _keyword_1
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode a
            //    vars: {'_keyword': 'Token', '_keyword_1': 'Token', 'a': 'SSTNode'}
            Token _keyword;
            Token _keyword_1;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'yield'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('yield')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('yield')
                // REMOVE result call (_keyword = expect(KEYWORD_YIELD)) != null  // token='yield'
                (_keyword = expect(KEYWORD_YIELD)) != null  // token='yield'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: 'from'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('from')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('from')
                // REMOVE result call (_keyword = expect(KEYWORD_FROM)) != null  // token='from'
                (_keyword_1 = expect(KEYWORD_FROM)) != null  // token='from'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (a = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("yield_expr[" + pos + ", " + mark() +" ](level: " + level + ") 'yield' 'from' expression succeeded!");
                }
                // alt action: _PyAST_YieldFrom ( a , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_YieldFrom ( a , EXTRA )
                return (SSTNode)cache.putResult(pos, YIELD_EXPR_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Yield ( a , EXTRA )
        {
            // visiting Alt: 'yield' star_expressions?
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('yield')
                // generated call: (_keyword = expect(KEYWORD_YIELD)) != null  // token='yield'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_expressions?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_expressions)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_158_var = _tmp_158_rule()) != null  // star_expressions
                // generated call: ((_opt_var = _tmp_158_rule()) != null || _opt_var == null)  // star_expressions?
            // collecting vars: None a
            //    vars: {'_keyword': 'Token', 'a': None}
            Token _keyword;
            Object a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'yield'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('yield')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('yield')
                // REMOVE result call (_keyword = expect(KEYWORD_YIELD)) != null  // token='yield'
                (_keyword = expect(KEYWORD_YIELD)) != null  // token='yield'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: star_expressions?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expressions?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_expressions?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_expressions)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_158_var = _tmp_158_rule()) != null  // star_expressions
                // REMOVE result call ((_opt_var = _tmp_158_rule()) != null || _opt_var == null)  // star_expressions?
                ((a = _tmp_158_rule()) != null || a == null)  // star_expressions?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("yield_expr[" + pos + ", " + mark() +" ](level: " + level + ") 'yield' star_expressions? succeeded!");
                }
                // alt action: _PyAST_Yield ( a , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Yield ( a , EXTRA )
                return (SSTNode)cache.putResult(pos, YIELD_EXPR_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, YIELD_EXPR_ID, null);
    }

    // arguments: args ','? &')' | invalid_arguments
    public SSTNode arguments_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: arguments, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, ARGUMENTS_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, ARGUMENTS_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: a
        {
            // visiting Alt: args ','? &')'
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
            // name = args
                // generated call: (args_var = args_rule()) != null  // args
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_159_var = _tmp_159_rule()) != null  // ','
                // generated call: ((_opt_var = _tmp_159_rule()) != null || _opt_var == null)  // ','?
            // collecting vars: None _opt_var
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
                // generated call: None
            // collecting vars: None None
            //    vars: {'a': 'SSTNode', '_opt_var': None, None: None}
            Object _opt_var;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: args
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(args)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
                // name = args
                // REMOVE result call (args_var = args_rule()) != null  // args
                (a = args_rule()) != null  // args
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_159_var = _tmp_159_rule()) != null  // ','
                // REMOVE result call ((_opt_var = _tmp_159_rule()) != null || _opt_var == null)  // ','?
                ((_opt_var = _tmp_159_rule()) != null || _opt_var == null)  // ','?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: &')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&')')
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&')')
                // TODO call is not created &')' -> creates artificial
                true
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("arguments[" + pos + ", " + mark() +" ](level: " + level + ") args ','? &')' succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode)cache.putResult(pos, ARGUMENTS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: invalid_arguments
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_arguments) - should work
            // name = invalid_arguments
                // generated call: (invalid_arguments_var = invalid_arguments_rule()) != null  // invalid_arguments
            // collecting vars: None invalid_arguments_var
            //    vars: {'invalid_arguments_var': None}
            Object invalid_arguments_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: invalid_arguments
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_arguments)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_arguments) - should work
                // name = invalid_arguments
                // REMOVE result call (invalid_arguments_var = invalid_arguments_rule()) != null  // invalid_arguments
                (invalid_arguments_var = invalid_arguments_rule()) != null  // invalid_arguments
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("arguments[" + pos + ", " + mark() +" ](level: " + level + ") invalid_arguments succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['invalid_arguments_var']
                result = invalid_arguments_var;
                return (SSTNode)cache.putResult(pos, ARGUMENTS_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, ARGUMENTS_ID, null);
    }

    // args: ','.(starred_expression | direct_named_expression !'=')+ [',' kwargs] | kwargs
    public SSTNode args_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: args, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, ARGS_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, ARGS_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_collect_call_seqs ( p , a , b , EXTRA )
        {
            // visiting Alt: ','.(starred_expression | direct_named_expression !'=')+ [',' kwargs]
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.(starred_expression | direct_named_expression !'=')+)
                // generated call: (_gather_160_var = _gather_160_rule()) != null  // ','.(starred_expression | direct_named_expression !'=')+
            // collecting vars: asdl_expr_seq* a
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt([',' kwargs])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' kwargs)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_162_var = _tmp_162_rule()) != null  // ',' kwargs
                // generated call: ((_opt_var = _tmp_162_rule()) != null || _opt_var == null)  // [',' kwargs]
            // collecting vars: None b
            //    vars: {'a': 'asdl_expr_seq*', 'b': None}
            // TODO replacing asdl_expr_seq* --> SSTNode[]
            SSTNode[] a;
            Object b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','.(starred_expression | direct_named_expression !'=')+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.(starred_expression | direct_named_expression !'=')+)
                // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.(starred_expression | direct_named_expression !'=')+)
                // REMOVE result call (_gather_160_var = _gather_160_rule()) != null  // ','.(starred_expression | direct_named_expression !'=')+
                (a = (SSTNode[])_gather_160_rule()) != null  // ','.(starred_expression | direct_named_expression !'=')+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: [',' kwargs]
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem([',' kwargs])
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt([',' kwargs])
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' kwargs)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_162_var = _tmp_162_rule()) != null  // ',' kwargs
                // REMOVE result call ((_opt_var = _tmp_162_rule()) != null || _opt_var == null)  // [',' kwargs]
                ((b = _tmp_162_rule()) != null || b == null)  // [',' kwargs]
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("args[" + pos + ", " + mark() +" ](level: " + level + ") ','.(starred_expression | direct_named_expression !'=')+ [',' kwargs] succeeded!");
                }
                // alt action: _PyPegen_collect_call_seqs ( p , a , b , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_collect_call_seqs ( p , a , b , EXTRA )
                return (SSTNode)cache.putResult(pos, ARGS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Call ( _PyPegen_dummy_name ( p ) , CHECK_NULL_ALLOWED ( asdl_expr_seq * , _PyPegen_seq_extract_starred_exprs ( p , a ) ) , CHECK_NULL_ALLOWED ( asdl_keyword_seq * , _PyPegen_seq_delete_starred_exprs ( p , a ) ) , EXTRA )
        {
            // visiting Alt: kwargs
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwargs) - should work
            // name = kwargs
            // TODO replacing asdl_seq[] --> SSTNode[]
                // generated call: (kwargs_var = kwargs_rule()) != null  // kwargs
            // collecting vars: SSTNode[] a
            //    vars: {'a': 'SSTNode[]'}
            SSTNode[] a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: kwargs
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kwargs)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwargs) - should work
                // name = kwargs
                // TODO replacing asdl_seq[] --> SSTNode[]
                // REMOVE result call (kwargs_var = kwargs_rule()) != null  // kwargs
                (a = kwargs_rule()) != null  // kwargs
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("args[" + pos + ", " + mark() +" ](level: " + level + ") kwargs succeeded!");
                }
                // alt action: _PyAST_Call ( _PyPegen_dummy_name ( p ) , CHECK_NULL_ALLOWED ( asdl_expr_seq * , _PyPegen_seq_extract_starred_exprs ( p , a ) ) , CHECK_NULL_ALLOWED ( asdl_keyword_seq * , _PyPegen_seq_delete_starred_exprs ( p , a ) ) , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Call ( _PyPegen_dummy_name ( p ) , CHECK_NULL_ALLOWED ( asdl_expr_seq * , _PyPegen_seq_extract_starred_exprs ( p , a ) ) , CHECK_NULL_ALLOWED ( asdl_keyword_seq * , _PyPegen_seq_delete_starred_exprs ( p , a ) ) , EXTRA )
                return (SSTNode)cache.putResult(pos, ARGS_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, ARGS_ID, null);
    }

    // kwargs:
    //     | ','.kwarg_or_starred+ ',' ','.kwarg_or_double_starred+
    //     | ','.kwarg_or_starred+
    //     | ','.kwarg_or_double_starred+
    // TODO replacing asdl_seq* --> SSTNode[]
    public SSTNode[] kwargs_rule() {
    // isLoop: False, isGather: False, type: asdl_seq*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: kwargs, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, KWARGS_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, KWARGS_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_join_sequences ( p , a , b )
        {
            // visiting Alt: ','.kwarg_or_starred+ ',' ','.kwarg_or_double_starred+
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.kwarg_or_starred+)
                // generated call: (_gather_163_var = _gather_163_rule()) != null  // ','.kwarg_or_starred+
            // collecting vars: SSTNode[] a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.kwarg_or_double_starred+)
                // generated call: (_gather_165_var = _gather_165_rule()) != null  // ','.kwarg_or_double_starred+
            // collecting vars: SSTNode[] b
            //    vars: {'a': 'SSTNode[]', '_literal': 'Token', 'b': 'SSTNode[]'}
            Token _literal;
            SSTNode[] a;
            SSTNode[] b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','.kwarg_or_starred+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.kwarg_or_starred+)
                // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.kwarg_or_starred+)
                // REMOVE result call (_gather_163_var = _gather_163_rule()) != null  // ','.kwarg_or_starred+
                (a = _gather_163_rule()) != null  // ','.kwarg_or_starred+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','.kwarg_or_double_starred+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.kwarg_or_double_starred+)
                // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.kwarg_or_double_starred+)
                // REMOVE result call (_gather_165_var = _gather_165_rule()) != null  // ','.kwarg_or_double_starred+
                (b = _gather_165_rule()) != null  // ','.kwarg_or_double_starred+
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("kwargs[" + pos + ", " + mark() +" ](level: " + level + ") ','.kwarg_or_starred+ ',' ','.kwarg_or_double_starred+ succeeded!");
                }
                // alt action: _PyPegen_join_sequences ( p , a , b )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_join_sequences ( p , a , b )
                return (SSTNode[])cache.putResult(pos, KWARGS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ','.kwarg_or_starred+
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.kwarg_or_starred+)
                // generated call: (_gather_167_var = _gather_167_rule()) != null  // ','.kwarg_or_starred+
            // collecting vars: SSTNode[] _gather_167_var
            //    vars: {'_gather_167_var': 'SSTNode[]'}
            SSTNode[] _gather_167_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','.kwarg_or_starred+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.kwarg_or_starred+)
                // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.kwarg_or_starred+)
                // REMOVE result call (_gather_167_var = _gather_167_rule()) != null  // ','.kwarg_or_starred+
                (_gather_167_var = _gather_167_rule()) != null  // ','.kwarg_or_starred+
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("kwargs[" + pos + ", " + mark() +" ](level: " + level + ") ','.kwarg_or_starred+ succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_gather_167_var']
                result = _gather_167_var;
                return (SSTNode[])cache.putResult(pos, KWARGS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ','.kwarg_or_double_starred+
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.kwarg_or_double_starred+)
                // generated call: (_gather_169_var = _gather_169_rule()) != null  // ','.kwarg_or_double_starred+
            // collecting vars: SSTNode[] _gather_169_var
            //    vars: {'_gather_169_var': 'SSTNode[]'}
            SSTNode[] _gather_169_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','.kwarg_or_double_starred+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.kwarg_or_double_starred+)
                // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.kwarg_or_double_starred+)
                // REMOVE result call (_gather_169_var = _gather_169_rule()) != null  // ','.kwarg_or_double_starred+
                (_gather_169_var = _gather_169_rule()) != null  // ','.kwarg_or_double_starred+
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("kwargs[" + pos + ", " + mark() +" ](level: " + level + ") ','.kwarg_or_double_starred+ succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_gather_169_var']
                result = _gather_169_var;
                return (SSTNode[])cache.putResult(pos, KWARGS_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, KWARGS_ID, null);
    }

    // starred_expression: '*' expression
    public SSTNode starred_expression_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: starred_expression, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, STARRED_EXPRESSION_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, STARRED_EXPRESSION_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Starred ( a , Load , EXTRA )
        {
            // visiting Alt: '*' expression
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode a
            //    vars: {'_literal': 'Token', 'a': 'SSTNode'}
            Token _literal;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '*'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (a = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("starred_expression[" + pos + ", " + mark() +" ](level: " + level + ") '*' expression succeeded!");
                }
                // alt action: _PyAST_Starred ( a , Load , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Starred ( a , Load , EXTRA )
                return (SSTNode)cache.putResult(pos, STARRED_EXPRESSION_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, STARRED_EXPRESSION_ID, null);
    }

    // kwarg_or_starred: NAME '=' expression | starred_expression | invalid_kwarg
    // TODO replacing KeywordOrStarred* --> SSTNode[]
    public SSTNode[] kwarg_or_starred_rule() {
    // isLoop: False, isGather: False, type: KeywordOrStarred*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: kwarg_or_starred, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, KWARG_OR_STARRED_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, KWARG_OR_STARRED_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_keyword_or_starred ( p , CHECK ( keyword_ty , _PyAST_keyword ( a -> v . Name . id , b , EXTRA ) ) , 1 )
        {
            // visiting Alt: NAME '=' expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // generated call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode b
            //    vars: {'a': 'Token', '_literal': 'Token', 'b': 'SSTNode'}
            Token _literal;
            Token a;
            SSTNode b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (a = expect(Token.Kind.NAME)) != null  // NAME
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // REMOVE result call (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
                (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (b = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("kwarg_or_starred[" + pos + ", " + mark() +" ](level: " + level + ") NAME '=' expression succeeded!");
                }
                // alt action: _PyPegen_keyword_or_starred ( p , CHECK ( keyword_ty , _PyAST_keyword ( a -> v . Name . id , b , EXTRA ) ) , 1 )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_keyword_or_starred ( p , CHECK ( keyword_ty , _PyAST_keyword ( a -> v . Name . id , b , EXTRA ) ) , 1 )
                return (SSTNode[])cache.putResult(pos, KWARG_OR_STARRED_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_keyword_or_starred ( p , a , 0 )
        {
            // visiting Alt: starred_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(starred_expression) - should work
            // name = starred_expression
                // generated call: (starred_expression_var = starred_expression_rule()) != null  // starred_expression
            // collecting vars: SSTNode a
            //    vars: {'a': 'SSTNode'}
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: starred_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(starred_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(starred_expression) - should work
                // name = starred_expression
                // REMOVE result call (starred_expression_var = starred_expression_rule()) != null  // starred_expression
                (a = starred_expression_rule()) != null  // starred_expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("kwarg_or_starred[" + pos + ", " + mark() +" ](level: " + level + ") starred_expression succeeded!");
                }
                // alt action: _PyPegen_keyword_or_starred ( p , a , 0 )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_keyword_or_starred ( p , a , 0 )
                return (SSTNode[])cache.putResult(pos, KWARG_OR_STARRED_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: invalid_kwarg
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_kwarg) - should work
            // name = invalid_kwarg
                // generated call: (invalid_kwarg_var = invalid_kwarg_rule()) != null  // invalid_kwarg
            // collecting vars: None invalid_kwarg_var
            //    vars: {'invalid_kwarg_var': None}
            Object invalid_kwarg_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: invalid_kwarg
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_kwarg)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_kwarg) - should work
                // name = invalid_kwarg
                // REMOVE result call (invalid_kwarg_var = invalid_kwarg_rule()) != null  // invalid_kwarg
                (invalid_kwarg_var = invalid_kwarg_rule()) != null  // invalid_kwarg
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("kwarg_or_starred[" + pos + ", " + mark() +" ](level: " + level + ") invalid_kwarg succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['invalid_kwarg_var']
                result = invalid_kwarg_var;
                return (SSTNode[])cache.putResult(pos, KWARG_OR_STARRED_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, KWARG_OR_STARRED_ID, null);
    }

    // kwarg_or_double_starred: NAME '=' expression | '**' expression | invalid_kwarg
    // TODO replacing KeywordOrStarred* --> SSTNode[]
    public SSTNode[] kwarg_or_double_starred_rule() {
    // isLoop: False, isGather: False, type: KeywordOrStarred*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: kwarg_or_double_starred, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, KWARG_OR_DOUBLE_STARRED_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, KWARG_OR_DOUBLE_STARRED_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_keyword_or_starred ( p , CHECK ( keyword_ty , _PyAST_keyword ( a -> v . Name . id , b , EXTRA ) ) , 1 )
        {
            // visiting Alt: NAME '=' expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // generated call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode b
            //    vars: {'a': 'Token', '_literal': 'Token', 'b': 'SSTNode'}
            Token _literal;
            Token a;
            SSTNode b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (a = expect(Token.Kind.NAME)) != null  // NAME
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // REMOVE result call (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
                (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (b = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("kwarg_or_double_starred[" + pos + ", " + mark() +" ](level: " + level + ") NAME '=' expression succeeded!");
                }
                // alt action: _PyPegen_keyword_or_starred ( p , CHECK ( keyword_ty , _PyAST_keyword ( a -> v . Name . id , b , EXTRA ) ) , 1 )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_keyword_or_starred ( p , CHECK ( keyword_ty , _PyAST_keyword ( a -> v . Name . id , b , EXTRA ) ) , 1 )
                return (SSTNode[])cache.putResult(pos, KWARG_OR_DOUBLE_STARRED_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_keyword_or_starred ( p , CHECK ( keyword_ty , _PyAST_keyword ( NULL , a , EXTRA ) ) , 1 )
        {
            // visiting Alt: '**' expression
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
                // generated call: (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode a
            //    vars: {'_literal': 'Token', 'a': 'SSTNode'}
            Token _literal;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '**'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('**')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
                // REMOVE result call (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
                (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (a = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("kwarg_or_double_starred[" + pos + ", " + mark() +" ](level: " + level + ") '**' expression succeeded!");
                }
                // alt action: _PyPegen_keyword_or_starred ( p , CHECK ( keyword_ty , _PyAST_keyword ( NULL , a , EXTRA ) ) , 1 )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_keyword_or_starred ( p , CHECK ( keyword_ty , _PyAST_keyword ( NULL , a , EXTRA ) ) , 1 )
                return (SSTNode[])cache.putResult(pos, KWARG_OR_DOUBLE_STARRED_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: invalid_kwarg
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_kwarg) - should work
            // name = invalid_kwarg
                // generated call: (invalid_kwarg_var = invalid_kwarg_rule()) != null  // invalid_kwarg
            // collecting vars: None invalid_kwarg_var
            //    vars: {'invalid_kwarg_var': None}
            Object invalid_kwarg_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: invalid_kwarg
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_kwarg)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_kwarg) - should work
                // name = invalid_kwarg
                // REMOVE result call (invalid_kwarg_var = invalid_kwarg_rule()) != null  // invalid_kwarg
                (invalid_kwarg_var = invalid_kwarg_rule()) != null  // invalid_kwarg
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("kwarg_or_double_starred[" + pos + ", " + mark() +" ](level: " + level + ") invalid_kwarg succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['invalid_kwarg_var']
                result = invalid_kwarg_var;
                return (SSTNode[])cache.putResult(pos, KWARG_OR_DOUBLE_STARRED_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, KWARG_OR_DOUBLE_STARRED_ID, null);
    }

    // star_targets: star_target !',' | star_target ((',' star_target))* ','?
    public SSTNode star_targets_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: star_targets, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, STAR_TARGETS_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, STAR_TARGETS_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: a
        {
            // visiting Alt: star_target !','
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // name = star_target
                // generated call: (star_target_var = star_target_rule()) != null  // star_target
            // collecting vars: SSTNode a
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!',')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
            // lookahead_call_helper call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            //    call.nodetype: GENERIC_TOKEN
                // generated call: lookahead(false, Token.Kind.COMMA)  // token=','
            // collecting vars: boolean None
            //    vars: {'a': 'SSTNode', None: 'boolean'}
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_target
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_target)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
                // name = star_target
                // REMOVE result call (star_target_var = star_target_rule()) != null  // star_target
                (a = star_target_rule()) != null  // star_target
                &&
                // TODO visiting JavaParserGeneratorNamedItem: !','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!',')
                // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // lookahead_call_helper call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                //    call.nodetype: GENERIC_TOKEN
                // REMOVE result call lookahead(false, Token.Kind.COMMA)  // token=','
                lookahead(false, Token.Kind.COMMA)  // token=','
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("star_targets[" + pos + ", " + mark() +" ](level: " + level + ") star_target !',' succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode)cache.putResult(pos, STAR_TARGETS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Tuple ( CHECK ( asdl_expr_seq * , _PyPegen_seq_insert_in_front ( p , a , b ) ) , Store , EXTRA )
        {
            // visiting Alt: star_target ((',' star_target))* ','?
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // name = star_target
                // generated call: (star_target_var = star_target_rule()) != null  // star_target
            // collecting vars: SSTNode a
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(((',' star_target))*)
                // generated call: (_loop0_171_var = _loop0_171_rule()) != null  // ((',' star_target))*
            // collecting vars: SSTNode[] b
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_172_var = _tmp_172_rule()) != null  // ','
                // generated call: ((_opt_var = _tmp_172_rule()) != null || _opt_var == null)  // ','?
            // collecting vars: None _opt_var
            //    vars: {'a': 'SSTNode', 'b': 'SSTNode[]', '_opt_var': None}
            Object _opt_var;
            SSTNode a;
            SSTNode[] b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_target
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_target)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
                // name = star_target
                // REMOVE result call (star_target_var = star_target_rule()) != null  // star_target
                (a = star_target_rule()) != null  // star_target
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ((',' star_target))*
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(((',' star_target))*)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat0(((',' star_target))*)
                // REMOVE result call (_loop0_171_var = _loop0_171_rule()) != null  // ((',' star_target))*
                (b = _loop0_171_rule()) != null  // ((',' star_target))*
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_172_var = _tmp_172_rule()) != null  // ','
                // REMOVE result call ((_opt_var = _tmp_172_rule()) != null || _opt_var == null)  // ','?
                ((_opt_var = _tmp_172_rule()) != null || _opt_var == null)  // ','?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("star_targets[" + pos + ", " + mark() +" ](level: " + level + ") star_target ((',' star_target))* ','? succeeded!");
                }
                // alt action: _PyAST_Tuple ( CHECK ( asdl_expr_seq * , _PyPegen_seq_insert_in_front ( p , a , b ) ) , Store , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Tuple ( CHECK ( asdl_expr_seq * , _PyPegen_seq_insert_in_front ( p , a , b ) ) , Store , EXTRA )
                return (SSTNode)cache.putResult(pos, STAR_TARGETS_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, STAR_TARGETS_ID, null);
    }

    // star_targets_list_seq: ','.star_target+ ','?
    // TODO replacing asdl_expr_seq* --> SSTNode[]
    public SSTNode[] star_targets_list_seq_rule() {
    // isLoop: False, isGather: False, type: asdl_expr_seq*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: star_targets_list_seq, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, STAR_TARGETS_LIST_SEQ_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, STAR_TARGETS_LIST_SEQ_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: a
        {
            // visiting Alt: ','.star_target+ ','?
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.star_target+)
                // generated call: (_gather_173_var = _gather_173_rule()) != null  // ','.star_target+
            // collecting vars: asdl_expr_seq* a
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_175_var = _tmp_175_rule()) != null  // ','
                // generated call: ((_opt_var = _tmp_175_rule()) != null || _opt_var == null)  // ','?
            // collecting vars: None _opt_var
            //    vars: {'a': 'asdl_expr_seq*', '_opt_var': None}
            Object _opt_var;
            // TODO replacing asdl_expr_seq* --> SSTNode[]
            SSTNode[] a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','.star_target+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.star_target+)
                // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.star_target+)
                // REMOVE result call (_gather_173_var = _gather_173_rule()) != null  // ','.star_target+
                (a = (SSTNode[])_gather_173_rule()) != null  // ','.star_target+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_175_var = _tmp_175_rule()) != null  // ','
                // REMOVE result call ((_opt_var = _tmp_175_rule()) != null || _opt_var == null)  // ','?
                ((_opt_var = _tmp_175_rule()) != null || _opt_var == null)  // ','?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("star_targets_list_seq[" + pos + ", " + mark() +" ](level: " + level + ") ','.star_target+ ','? succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode[])cache.putResult(pos, STAR_TARGETS_LIST_SEQ_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, STAR_TARGETS_LIST_SEQ_ID, null);
    }

    // star_targets_tuple_seq: star_target ((',' star_target))+ ','? | star_target ','
    // TODO replacing asdl_expr_seq* --> SSTNode[]
    public SSTNode[] star_targets_tuple_seq_rule() {
    // isLoop: False, isGather: False, type: asdl_expr_seq*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: star_targets_tuple_seq, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, STAR_TARGETS_TUPLE_SEQ_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, STAR_TARGETS_TUPLE_SEQ_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: ( asdl_expr_seq * ) _PyPegen_seq_insert_in_front ( p , a , b )
        {
            // visiting Alt: star_target ((',' star_target))+ ','?
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // name = star_target
                // generated call: (star_target_var = star_target_rule()) != null  // star_target
            // collecting vars: SSTNode a
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(((',' star_target))+)
                // generated call: (_loop1_176_var = _loop1_176_rule()) != null  // ((',' star_target))+
            // collecting vars: SSTNode[] b
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_177_var = _tmp_177_rule()) != null  // ','
                // generated call: ((_opt_var = _tmp_177_rule()) != null || _opt_var == null)  // ','?
            // collecting vars: None _opt_var
            //    vars: {'a': 'SSTNode', 'b': 'SSTNode[]', '_opt_var': None}
            Object _opt_var;
            SSTNode a;
            SSTNode[] b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_target
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_target)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
                // name = star_target
                // REMOVE result call (star_target_var = star_target_rule()) != null  // star_target
                (a = star_target_rule()) != null  // star_target
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ((',' star_target))+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(((',' star_target))+)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat1(((',' star_target))+)
                // REMOVE result call (_loop1_176_var = _loop1_176_rule()) != null  // ((',' star_target))+
                (b = _loop1_176_rule()) != null  // ((',' star_target))+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_177_var = _tmp_177_rule()) != null  // ','
                // REMOVE result call ((_opt_var = _tmp_177_rule()) != null || _opt_var == null)  // ','?
                ((_opt_var = _tmp_177_rule()) != null || _opt_var == null)  // ','?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("star_targets_tuple_seq[" + pos + ", " + mark() +" ](level: " + level + ") star_target ((',' star_target))+ ','? succeeded!");
                }
                // alt action: ( asdl_expr_seq * ) _PyPegen_seq_insert_in_front ( p , a , b )
                Token endToken = getToken(mark());
                // node.action: ( asdl_expr_seq * ) _PyPegen_seq_insert_in_front ( p , a , b )
                return (SSTNode[])cache.putResult(pos, STAR_TARGETS_TUPLE_SEQ_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: ( asdl_expr_seq * ) _PyPegen_singleton_seq ( p , a )
        {
            // visiting Alt: star_target ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // name = star_target
                // generated call: (star_target_var = star_target_rule()) != null  // star_target
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            //    vars: {'a': 'SSTNode', '_literal': 'Token'}
            Token _literal;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_target
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_target)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
                // name = star_target
                // REMOVE result call (star_target_var = star_target_rule()) != null  // star_target
                (a = star_target_rule()) != null  // star_target
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("star_targets_tuple_seq[" + pos + ", " + mark() +" ](level: " + level + ") star_target ',' succeeded!");
                }
                // alt action: ( asdl_expr_seq * ) _PyPegen_singleton_seq ( p , a )
                Token endToken = getToken(mark());
                // node.action: ( asdl_expr_seq * ) _PyPegen_singleton_seq ( p , a )
                return (SSTNode[])cache.putResult(pos, STAR_TARGETS_TUPLE_SEQ_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, STAR_TARGETS_TUPLE_SEQ_ID, null);
    }

    // star_target: '*' (!'*' star_target) | target_with_star_atom
    public SSTNode star_target_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: star_target, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, STAR_TARGET_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, STAR_TARGET_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Starred ( CHECK ( expr_ty , _PyPegen_set_expr_context ( p , a , Store ) ) , Store , EXTRA )
        {
            // visiting Alt: '*' (!'*' star_target)
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // collecting vars: Token _literal
            // TODO visiting JavaCallMakerVisitor.visit_Group((!'*' star_target))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(!'*' star_target)
                // generated call: (_tmp_178_var = _tmp_178_rule()) != null  // !'*' star_target
            // collecting vars: None a
            //    vars: {'_literal': 'Token', 'a': None}
            Token _literal;
            Object a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '*'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: (!'*' star_target)
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((!'*' star_target))
                // TODO visiting JavaCallMakerVisitor.visit_Group((!'*' star_target))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(!'*' star_target)
                // REMOVE result call (_tmp_178_var = _tmp_178_rule()) != null  // !'*' star_target
                (a = _tmp_178_rule()) != null  // !'*' star_target
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("star_target[" + pos + ", " + mark() +" ](level: " + level + ") '*' (!'*' star_target) succeeded!");
                }
                // alt action: _PyAST_Starred ( CHECK ( expr_ty , _PyPegen_set_expr_context ( p , a , Store ) ) , Store , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Starred ( CHECK ( expr_ty , _PyPegen_set_expr_context ( p , a , Store ) ) , Store , EXTRA )
                return (SSTNode)cache.putResult(pos, STAR_TARGET_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: target_with_star_atom
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(target_with_star_atom) - should work
            // name = target_with_star_atom
                // generated call: (target_with_star_atom_var = target_with_star_atom_rule()) != null  // target_with_star_atom
            // collecting vars: SSTNode target_with_star_atom_var
            //    vars: {'target_with_star_atom_var': 'SSTNode'}
            SSTNode target_with_star_atom_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: target_with_star_atom
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(target_with_star_atom)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(target_with_star_atom) - should work
                // name = target_with_star_atom
                // REMOVE result call (target_with_star_atom_var = target_with_star_atom_rule()) != null  // target_with_star_atom
                (target_with_star_atom_var = target_with_star_atom_rule()) != null  // target_with_star_atom
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("star_target[" + pos + ", " + mark() +" ](level: " + level + ") target_with_star_atom succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['target_with_star_atom_var']
                result = target_with_star_atom_var;
                return (SSTNode)cache.putResult(pos, STAR_TARGET_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, STAR_TARGET_ID, null);
    }

    // target_with_star_atom:
    //     | t_primary '.' NAME !t_lookahead
    //     | t_primary '[' slices ']' !t_lookahead
    //     | star_atom
    public SSTNode target_with_star_atom_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: target_with_star_atom, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, TARGET_WITH_STAR_ATOM_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, TARGET_WITH_STAR_ATOM_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Attribute ( a , b -> v . Name . id , Store , EXTRA )
        {
            // visiting Alt: t_primary '.' NAME !t_lookahead
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // name = t_primary
                // generated call: (t_primary_var = t_primary_rule()) != null  // t_primary
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
                // generated call: (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token b
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_lookahead) - should work
            // name = t_lookahead
            // lookahead_call_helper call: (t_lookahead_var = t_lookahead_rule()) != null  // t_lookahead
            //    call.nodetype: None
                // generated call: lookahedt_lookahead_rule(false)
            // collecting vars: boolean None
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'b': 'Token', None: 'boolean'}
            Token _literal;
            SSTNode a;
            Token b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: t_primary
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(t_primary)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
                // name = t_primary
                // REMOVE result call (t_primary_var = t_primary_rule()) != null  // t_primary
                (a = t_primary_rule()) != null  // t_primary
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '.'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('.')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
                // REMOVE result call (_literal = expect(Token.Kind.DOT)) != null  // token='.'
                (_literal = expect(Token.Kind.DOT)) != null  // token='.'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (b = expect(Token.Kind.NAME)) != null  // NAME
                &&
                // TODO visiting JavaParserGeneratorNamedItem: !t_lookahead
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!t_lookahead)
                // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_lookahead) - should work
                // name = t_lookahead
                // lookahead_call_helper call: (t_lookahead_var = t_lookahead_rule()) != null  // t_lookahead
                //    call.nodetype: None
                // REMOVE result call lookahedt_lookahead_rule(false)
                lookahedt_lookahead_rule(false)
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("target_with_star_atom[" + pos + ", " + mark() +" ](level: " + level + ") t_primary '.' NAME !t_lookahead succeeded!");
                }
                // alt action: _PyAST_Attribute ( a , b -> v . Name . id , Store , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Attribute ( a , b -> v . Name . id , Store , EXTRA )
                return (SSTNode)cache.putResult(pos, TARGET_WITH_STAR_ATOM_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Subscript ( a , b , Store , EXTRA )
        {
            // visiting Alt: t_primary '[' slices ']' !t_lookahead
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // name = t_primary
                // generated call: (t_primary_var = t_primary_rule()) != null  // t_primary
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
                // generated call: (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
            // name = slices
                // generated call: (slices_var = slices_rule()) != null  // slices
            // collecting vars: SSTNode b
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
                // generated call: (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            // collecting vars: Token _literal_1
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_lookahead) - should work
            // name = t_lookahead
            // lookahead_call_helper call: (t_lookahead_var = t_lookahead_rule()) != null  // t_lookahead
            //    call.nodetype: None
                // generated call: lookahedt_lookahead_rule(false)
            // collecting vars: boolean None
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'b': 'SSTNode', '_literal_1': 'Token', None: 'boolean'}
            Token _literal;
            Token _literal_1;
            SSTNode a;
            SSTNode b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: t_primary
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(t_primary)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
                // name = t_primary
                // REMOVE result call (t_primary_var = t_primary_rule()) != null  // t_primary
                (a = t_primary_rule()) != null  // t_primary
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '['
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('[')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
                // REMOVE result call (_literal = expect(Token.Kind.LSQB)) != null  // token='['
                (_literal = expect(Token.Kind.LSQB)) != null  // token='['
                &&
                // TODO visiting JavaParserGeneratorNamedItem: slices
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(slices)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
                // name = slices
                // REMOVE result call (slices_var = slices_rule()) != null  // slices
                (b = slices_rule()) != null  // slices
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ']'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(']')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
                // REMOVE result call (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
                (_literal_1 = expect(Token.Kind.RSQB)) != null  // token=']'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: !t_lookahead
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!t_lookahead)
                // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_lookahead) - should work
                // name = t_lookahead
                // lookahead_call_helper call: (t_lookahead_var = t_lookahead_rule()) != null  // t_lookahead
                //    call.nodetype: None
                // REMOVE result call lookahedt_lookahead_rule(false)
                lookahedt_lookahead_rule(false)
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("target_with_star_atom[" + pos + ", " + mark() +" ](level: " + level + ") t_primary '[' slices ']' !t_lookahead succeeded!");
                }
                // alt action: _PyAST_Subscript ( a , b , Store , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Subscript ( a , b , Store , EXTRA )
                return (SSTNode)cache.putResult(pos, TARGET_WITH_STAR_ATOM_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: star_atom
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_atom) - should work
            // name = star_atom
                // generated call: (star_atom_var = star_atom_rule()) != null  // star_atom
            // collecting vars: SSTNode star_atom_var
            //    vars: {'star_atom_var': 'SSTNode'}
            SSTNode star_atom_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_atom
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_atom)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_atom) - should work
                // name = star_atom
                // REMOVE result call (star_atom_var = star_atom_rule()) != null  // star_atom
                (star_atom_var = star_atom_rule()) != null  // star_atom
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("target_with_star_atom[" + pos + ", " + mark() +" ](level: " + level + ") star_atom succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['star_atom_var']
                result = star_atom_var;
                return (SSTNode)cache.putResult(pos, TARGET_WITH_STAR_ATOM_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, TARGET_WITH_STAR_ATOM_ID, null);
    }

    // star_atom:
    //     | NAME
    //     | '(' target_with_star_atom ')'
    //     | '(' star_targets_tuple_seq? ')'
    //     | '[' star_targets_list_seq? ']'
    public SSTNode star_atom_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: star_atom, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, STAR_ATOM_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, STAR_ATOM_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_set_expr_context ( p , a , Store )
        {
            // visiting Alt: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token a
            //    vars: {'a': 'Token'}
            Token a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (a = expect(Token.Kind.NAME)) != null  // NAME
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("star_atom[" + pos + ", " + mark() +" ](level: " + level + ") NAME succeeded!");
                }
                // alt action: _PyPegen_set_expr_context ( p , a , Store )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_set_expr_context ( p , a , Store )
                return (SSTNode)cache.putResult(pos, STAR_ATOM_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_set_expr_context ( p , a , Store )
        {
            // visiting Alt: '(' target_with_star_atom ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(target_with_star_atom) - should work
            // name = target_with_star_atom
                // generated call: (target_with_star_atom_var = target_with_star_atom_rule()) != null  // target_with_star_atom
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // collecting vars: Token _literal_1
            //    vars: {'_literal': 'Token', 'a': 'SSTNode', '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                &&
                // TODO visiting JavaParserGeneratorNamedItem: target_with_star_atom
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(target_with_star_atom)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(target_with_star_atom) - should work
                // name = target_with_star_atom
                // REMOVE result call (target_with_star_atom_var = target_with_star_atom_rule()) != null  // target_with_star_atom
                (a = target_with_star_atom_rule()) != null  // target_with_star_atom
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
                (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("star_atom[" + pos + ", " + mark() +" ](level: " + level + ") '(' target_with_star_atom ')' succeeded!");
                }
                // alt action: _PyPegen_set_expr_context ( p , a , Store )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_set_expr_context ( p , a , Store )
                return (SSTNode)cache.putResult(pos, STAR_ATOM_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Tuple ( a , Store , EXTRA )
        {
            // visiting Alt: '(' star_targets_tuple_seq? ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_targets_tuple_seq?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_targets_tuple_seq)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_179_var = _tmp_179_rule()) != null  // star_targets_tuple_seq
                // generated call: ((_opt_var = _tmp_179_rule()) != null || _opt_var == null)  // star_targets_tuple_seq?
            // collecting vars: None a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // collecting vars: Token _literal_1
            //    vars: {'_literal': 'Token', 'a': None, '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            Object a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                &&
                // TODO visiting JavaParserGeneratorNamedItem: star_targets_tuple_seq?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_targets_tuple_seq?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_targets_tuple_seq?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_targets_tuple_seq)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_179_var = _tmp_179_rule()) != null  // star_targets_tuple_seq
                // REMOVE result call ((_opt_var = _tmp_179_rule()) != null || _opt_var == null)  // star_targets_tuple_seq?
                ((a = _tmp_179_rule()) != null || a == null)  // star_targets_tuple_seq?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
                (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("star_atom[" + pos + ", " + mark() +" ](level: " + level + ") '(' star_targets_tuple_seq? ')' succeeded!");
                }
                // alt action: _PyAST_Tuple ( a , Store , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Tuple ( a , Store , EXTRA )
                return (SSTNode)cache.putResult(pos, STAR_ATOM_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_List ( a , Store , EXTRA )
        {
            // visiting Alt: '[' star_targets_list_seq? ']'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
                // generated call: (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_targets_list_seq?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_targets_list_seq)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_180_var = _tmp_180_rule()) != null  // star_targets_list_seq
                // generated call: ((_opt_var = _tmp_180_rule()) != null || _opt_var == null)  // star_targets_list_seq?
            // collecting vars: None a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
                // generated call: (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            // collecting vars: Token _literal_1
            //    vars: {'_literal': 'Token', 'a': None, '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            Object a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '['
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('[')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
                // REMOVE result call (_literal = expect(Token.Kind.LSQB)) != null  // token='['
                (_literal = expect(Token.Kind.LSQB)) != null  // token='['
                &&
                // TODO visiting JavaParserGeneratorNamedItem: star_targets_list_seq?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_targets_list_seq?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_targets_list_seq?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_targets_list_seq)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_180_var = _tmp_180_rule()) != null  // star_targets_list_seq
                // REMOVE result call ((_opt_var = _tmp_180_rule()) != null || _opt_var == null)  // star_targets_list_seq?
                ((a = _tmp_180_rule()) != null || a == null)  // star_targets_list_seq?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ']'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(']')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
                // REMOVE result call (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
                (_literal_1 = expect(Token.Kind.RSQB)) != null  // token=']'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("star_atom[" + pos + ", " + mark() +" ](level: " + level + ") '[' star_targets_list_seq? ']' succeeded!");
                }
                // alt action: _PyAST_List ( a , Store , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_List ( a , Store , EXTRA )
                return (SSTNode)cache.putResult(pos, STAR_ATOM_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, STAR_ATOM_ID, null);
    }

    // single_target: single_subscript_attribute_target | NAME | '(' single_target ')'
    public SSTNode single_target_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: single_target, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, SINGLE_TARGET_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, SINGLE_TARGET_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: None
        {
            // visiting Alt: single_subscript_attribute_target
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(single_subscript_attribute_target) - should work
            // name = single_subscript_attribute_target
                // generated call: (single_subscript_attribute_target_var = single_subscript_attribute_target_rule()) != null  // single_subscript_attribute_target
            // collecting vars: SSTNode single_subscript_attribute_target_var
            //    vars: {'single_subscript_attribute_target_var': 'SSTNode'}
            SSTNode single_subscript_attribute_target_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: single_subscript_attribute_target
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(single_subscript_attribute_target)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(single_subscript_attribute_target) - should work
                // name = single_subscript_attribute_target
                // REMOVE result call (single_subscript_attribute_target_var = single_subscript_attribute_target_rule()) != null  // single_subscript_attribute_target
                (single_subscript_attribute_target_var = single_subscript_attribute_target_rule()) != null  // single_subscript_attribute_target
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("single_target[" + pos + ", " + mark() +" ](level: " + level + ") single_subscript_attribute_target succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['single_subscript_attribute_target_var']
                result = single_subscript_attribute_target_var;
                return (SSTNode)cache.putResult(pos, SINGLE_TARGET_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_set_expr_context ( p , a , Store )
        {
            // visiting Alt: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token a
            //    vars: {'a': 'Token'}
            Token a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (a = expect(Token.Kind.NAME)) != null  // NAME
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("single_target[" + pos + ", " + mark() +" ](level: " + level + ") NAME succeeded!");
                }
                // alt action: _PyPegen_set_expr_context ( p , a , Store )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_set_expr_context ( p , a , Store )
                return (SSTNode)cache.putResult(pos, SINGLE_TARGET_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: a
        {
            // visiting Alt: '(' single_target ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(single_target) - should work
            // name = single_target
                // generated call: (single_target_var = single_target_rule()) != null  // single_target
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // collecting vars: Token _literal_1
            //    vars: {'_literal': 'Token', 'a': 'SSTNode', '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                &&
                // TODO visiting JavaParserGeneratorNamedItem: single_target
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(single_target)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(single_target) - should work
                // name = single_target
                // REMOVE result call (single_target_var = single_target_rule()) != null  // single_target
                (a = single_target_rule()) != null  // single_target
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
                (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("single_target[" + pos + ", " + mark() +" ](level: " + level + ") '(' single_target ')' succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode)cache.putResult(pos, SINGLE_TARGET_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, SINGLE_TARGET_ID, null);
    }

    // single_subscript_attribute_target:
    //     | t_primary '.' NAME !t_lookahead
    //     | t_primary '[' slices ']' !t_lookahead
    public SSTNode single_subscript_attribute_target_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: single_subscript_attribute_target, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, SINGLE_SUBSCRIPT_ATTRIBUTE_TARGET_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, SINGLE_SUBSCRIPT_ATTRIBUTE_TARGET_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Attribute ( a , b -> v . Name . id , Store , EXTRA )
        {
            // visiting Alt: t_primary '.' NAME !t_lookahead
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // name = t_primary
                // generated call: (t_primary_var = t_primary_rule()) != null  // t_primary
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
                // generated call: (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token b
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_lookahead) - should work
            // name = t_lookahead
            // lookahead_call_helper call: (t_lookahead_var = t_lookahead_rule()) != null  // t_lookahead
            //    call.nodetype: None
                // generated call: lookahedt_lookahead_rule(false)
            // collecting vars: boolean None
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'b': 'Token', None: 'boolean'}
            Token _literal;
            SSTNode a;
            Token b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: t_primary
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(t_primary)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
                // name = t_primary
                // REMOVE result call (t_primary_var = t_primary_rule()) != null  // t_primary
                (a = t_primary_rule()) != null  // t_primary
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '.'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('.')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
                // REMOVE result call (_literal = expect(Token.Kind.DOT)) != null  // token='.'
                (_literal = expect(Token.Kind.DOT)) != null  // token='.'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (b = expect(Token.Kind.NAME)) != null  // NAME
                &&
                // TODO visiting JavaParserGeneratorNamedItem: !t_lookahead
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!t_lookahead)
                // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_lookahead) - should work
                // name = t_lookahead
                // lookahead_call_helper call: (t_lookahead_var = t_lookahead_rule()) != null  // t_lookahead
                //    call.nodetype: None
                // REMOVE result call lookahedt_lookahead_rule(false)
                lookahedt_lookahead_rule(false)
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("single_subscript_attribute_target[" + pos + ", " + mark() +" ](level: " + level + ") t_primary '.' NAME !t_lookahead succeeded!");
                }
                // alt action: _PyAST_Attribute ( a , b -> v . Name . id , Store , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Attribute ( a , b -> v . Name . id , Store , EXTRA )
                return (SSTNode)cache.putResult(pos, SINGLE_SUBSCRIPT_ATTRIBUTE_TARGET_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Subscript ( a , b , Store , EXTRA )
        {
            // visiting Alt: t_primary '[' slices ']' !t_lookahead
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // name = t_primary
                // generated call: (t_primary_var = t_primary_rule()) != null  // t_primary
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
                // generated call: (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
            // name = slices
                // generated call: (slices_var = slices_rule()) != null  // slices
            // collecting vars: SSTNode b
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
                // generated call: (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            // collecting vars: Token _literal_1
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_lookahead) - should work
            // name = t_lookahead
            // lookahead_call_helper call: (t_lookahead_var = t_lookahead_rule()) != null  // t_lookahead
            //    call.nodetype: None
                // generated call: lookahedt_lookahead_rule(false)
            // collecting vars: boolean None
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'b': 'SSTNode', '_literal_1': 'Token', None: 'boolean'}
            Token _literal;
            Token _literal_1;
            SSTNode a;
            SSTNode b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: t_primary
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(t_primary)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
                // name = t_primary
                // REMOVE result call (t_primary_var = t_primary_rule()) != null  // t_primary
                (a = t_primary_rule()) != null  // t_primary
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '['
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('[')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
                // REMOVE result call (_literal = expect(Token.Kind.LSQB)) != null  // token='['
                (_literal = expect(Token.Kind.LSQB)) != null  // token='['
                &&
                // TODO visiting JavaParserGeneratorNamedItem: slices
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(slices)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
                // name = slices
                // REMOVE result call (slices_var = slices_rule()) != null  // slices
                (b = slices_rule()) != null  // slices
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ']'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(']')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
                // REMOVE result call (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
                (_literal_1 = expect(Token.Kind.RSQB)) != null  // token=']'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: !t_lookahead
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!t_lookahead)
                // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_lookahead) - should work
                // name = t_lookahead
                // lookahead_call_helper call: (t_lookahead_var = t_lookahead_rule()) != null  // t_lookahead
                //    call.nodetype: None
                // REMOVE result call lookahedt_lookahead_rule(false)
                lookahedt_lookahead_rule(false)
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("single_subscript_attribute_target[" + pos + ", " + mark() +" ](level: " + level + ") t_primary '[' slices ']' !t_lookahead succeeded!");
                }
                // alt action: _PyAST_Subscript ( a , b , Store , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Subscript ( a , b , Store , EXTRA )
                return (SSTNode)cache.putResult(pos, SINGLE_SUBSCRIPT_ATTRIBUTE_TARGET_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, SINGLE_SUBSCRIPT_ATTRIBUTE_TARGET_ID, null);
    }

    // del_targets: ','.del_target+ ','?
    // TODO replacing asdl_expr_seq* --> SSTNode[]
    public SSTNode[] del_targets_rule() {
    // isLoop: False, isGather: False, type: asdl_expr_seq*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: del_targets, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, DEL_TARGETS_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, DEL_TARGETS_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: a
        {
            // visiting Alt: ','.del_target+ ','?
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.del_target+)
                // generated call: (_gather_181_var = _gather_181_rule()) != null  // ','.del_target+
            // collecting vars: asdl_expr_seq* a
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_183_var = _tmp_183_rule()) != null  // ','
                // generated call: ((_opt_var = _tmp_183_rule()) != null || _opt_var == null)  // ','?
            // collecting vars: None _opt_var
            //    vars: {'a': 'asdl_expr_seq*', '_opt_var': None}
            Object _opt_var;
            // TODO replacing asdl_expr_seq* --> SSTNode[]
            SSTNode[] a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','.del_target+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.del_target+)
                // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.del_target+)
                // REMOVE result call (_gather_181_var = _gather_181_rule()) != null  // ','.del_target+
                (a = (SSTNode[])_gather_181_rule()) != null  // ','.del_target+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_183_var = _tmp_183_rule()) != null  // ','
                // REMOVE result call ((_opt_var = _tmp_183_rule()) != null || _opt_var == null)  // ','?
                ((_opt_var = _tmp_183_rule()) != null || _opt_var == null)  // ','?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("del_targets[" + pos + ", " + mark() +" ](level: " + level + ") ','.del_target+ ','? succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode[])cache.putResult(pos, DEL_TARGETS_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, DEL_TARGETS_ID, null);
    }

    // del_target:
    //     | t_primary '.' NAME !t_lookahead
    //     | t_primary '[' slices ']' !t_lookahead
    //     | del_t_atom
    public SSTNode del_target_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: del_target, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, DEL_TARGET_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, DEL_TARGET_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Attribute ( a , b -> v . Name . id , Del , EXTRA )
        {
            // visiting Alt: t_primary '.' NAME !t_lookahead
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // name = t_primary
                // generated call: (t_primary_var = t_primary_rule()) != null  // t_primary
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
                // generated call: (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token b
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_lookahead) - should work
            // name = t_lookahead
            // lookahead_call_helper call: (t_lookahead_var = t_lookahead_rule()) != null  // t_lookahead
            //    call.nodetype: None
                // generated call: lookahedt_lookahead_rule(false)
            // collecting vars: boolean None
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'b': 'Token', None: 'boolean'}
            Token _literal;
            SSTNode a;
            Token b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: t_primary
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(t_primary)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
                // name = t_primary
                // REMOVE result call (t_primary_var = t_primary_rule()) != null  // t_primary
                (a = t_primary_rule()) != null  // t_primary
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '.'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('.')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
                // REMOVE result call (_literal = expect(Token.Kind.DOT)) != null  // token='.'
                (_literal = expect(Token.Kind.DOT)) != null  // token='.'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (b = expect(Token.Kind.NAME)) != null  // NAME
                &&
                // TODO visiting JavaParserGeneratorNamedItem: !t_lookahead
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!t_lookahead)
                // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_lookahead) - should work
                // name = t_lookahead
                // lookahead_call_helper call: (t_lookahead_var = t_lookahead_rule()) != null  // t_lookahead
                //    call.nodetype: None
                // REMOVE result call lookahedt_lookahead_rule(false)
                lookahedt_lookahead_rule(false)
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("del_target[" + pos + ", " + mark() +" ](level: " + level + ") t_primary '.' NAME !t_lookahead succeeded!");
                }
                // alt action: _PyAST_Attribute ( a , b -> v . Name . id , Del , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Attribute ( a , b -> v . Name . id , Del , EXTRA )
                return (SSTNode)cache.putResult(pos, DEL_TARGET_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Subscript ( a , b , Del , EXTRA )
        {
            // visiting Alt: t_primary '[' slices ']' !t_lookahead
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // name = t_primary
                // generated call: (t_primary_var = t_primary_rule()) != null  // t_primary
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
                // generated call: (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
            // name = slices
                // generated call: (slices_var = slices_rule()) != null  // slices
            // collecting vars: SSTNode b
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
                // generated call: (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            // collecting vars: Token _literal_1
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_lookahead) - should work
            // name = t_lookahead
            // lookahead_call_helper call: (t_lookahead_var = t_lookahead_rule()) != null  // t_lookahead
            //    call.nodetype: None
                // generated call: lookahedt_lookahead_rule(false)
            // collecting vars: boolean None
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'b': 'SSTNode', '_literal_1': 'Token', None: 'boolean'}
            Token _literal;
            Token _literal_1;
            SSTNode a;
            SSTNode b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: t_primary
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(t_primary)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
                // name = t_primary
                // REMOVE result call (t_primary_var = t_primary_rule()) != null  // t_primary
                (a = t_primary_rule()) != null  // t_primary
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '['
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('[')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
                // REMOVE result call (_literal = expect(Token.Kind.LSQB)) != null  // token='['
                (_literal = expect(Token.Kind.LSQB)) != null  // token='['
                &&
                // TODO visiting JavaParserGeneratorNamedItem: slices
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(slices)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
                // name = slices
                // REMOVE result call (slices_var = slices_rule()) != null  // slices
                (b = slices_rule()) != null  // slices
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ']'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(']')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
                // REMOVE result call (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
                (_literal_1 = expect(Token.Kind.RSQB)) != null  // token=']'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: !t_lookahead
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!t_lookahead)
                // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_lookahead) - should work
                // name = t_lookahead
                // lookahead_call_helper call: (t_lookahead_var = t_lookahead_rule()) != null  // t_lookahead
                //    call.nodetype: None
                // REMOVE result call lookahedt_lookahead_rule(false)
                lookahedt_lookahead_rule(false)
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("del_target[" + pos + ", " + mark() +" ](level: " + level + ") t_primary '[' slices ']' !t_lookahead succeeded!");
                }
                // alt action: _PyAST_Subscript ( a , b , Del , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Subscript ( a , b , Del , EXTRA )
                return (SSTNode)cache.putResult(pos, DEL_TARGET_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: del_t_atom
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_t_atom) - should work
            // name = del_t_atom
                // generated call: (del_t_atom_var = del_t_atom_rule()) != null  // del_t_atom
            // collecting vars: SSTNode del_t_atom_var
            //    vars: {'del_t_atom_var': 'SSTNode'}
            SSTNode del_t_atom_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: del_t_atom
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(del_t_atom)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_t_atom) - should work
                // name = del_t_atom
                // REMOVE result call (del_t_atom_var = del_t_atom_rule()) != null  // del_t_atom
                (del_t_atom_var = del_t_atom_rule()) != null  // del_t_atom
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("del_target[" + pos + ", " + mark() +" ](level: " + level + ") del_t_atom succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['del_t_atom_var']
                result = del_t_atom_var;
                return (SSTNode)cache.putResult(pos, DEL_TARGET_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, DEL_TARGET_ID, null);
    }

    // del_t_atom: NAME | '(' del_target ')' | '(' del_targets? ')' | '[' del_targets? ']'
    public SSTNode del_t_atom_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: del_t_atom, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, DEL_T_ATOM_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, DEL_T_ATOM_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_set_expr_context ( p , a , Del )
        {
            // visiting Alt: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token a
            //    vars: {'a': 'Token'}
            Token a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (a = expect(Token.Kind.NAME)) != null  // NAME
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("del_t_atom[" + pos + ", " + mark() +" ](level: " + level + ") NAME succeeded!");
                }
                // alt action: _PyPegen_set_expr_context ( p , a , Del )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_set_expr_context ( p , a , Del )
                return (SSTNode)cache.putResult(pos, DEL_T_ATOM_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_set_expr_context ( p , a , Del )
        {
            // visiting Alt: '(' del_target ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_target) - should work
            // name = del_target
                // generated call: (del_target_var = del_target_rule()) != null  // del_target
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // collecting vars: Token _literal_1
            //    vars: {'_literal': 'Token', 'a': 'SSTNode', '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                &&
                // TODO visiting JavaParserGeneratorNamedItem: del_target
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(del_target)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_target) - should work
                // name = del_target
                // REMOVE result call (del_target_var = del_target_rule()) != null  // del_target
                (a = del_target_rule()) != null  // del_target
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
                (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("del_t_atom[" + pos + ", " + mark() +" ](level: " + level + ") '(' del_target ')' succeeded!");
                }
                // alt action: _PyPegen_set_expr_context ( p , a , Del )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_set_expr_context ( p , a , Del )
                return (SSTNode)cache.putResult(pos, DEL_T_ATOM_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Tuple ( a , Del , EXTRA )
        {
            // visiting Alt: '(' del_targets? ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(del_targets?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(del_targets)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_184_var = _tmp_184_rule()) != null  // del_targets
                // generated call: ((_opt_var = _tmp_184_rule()) != null || _opt_var == null)  // del_targets?
            // collecting vars: None a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // collecting vars: Token _literal_1
            //    vars: {'_literal': 'Token', 'a': None, '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            Object a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                &&
                // TODO visiting JavaParserGeneratorNamedItem: del_targets?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(del_targets?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(del_targets?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(del_targets)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_184_var = _tmp_184_rule()) != null  // del_targets
                // REMOVE result call ((_opt_var = _tmp_184_rule()) != null || _opt_var == null)  // del_targets?
                ((a = _tmp_184_rule()) != null || a == null)  // del_targets?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
                (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("del_t_atom[" + pos + ", " + mark() +" ](level: " + level + ") '(' del_targets? ')' succeeded!");
                }
                // alt action: _PyAST_Tuple ( a , Del , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Tuple ( a , Del , EXTRA )
                return (SSTNode)cache.putResult(pos, DEL_T_ATOM_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_List ( a , Del , EXTRA )
        {
            // visiting Alt: '[' del_targets? ']'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
                // generated call: (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(del_targets?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(del_targets)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_185_var = _tmp_185_rule()) != null  // del_targets
                // generated call: ((_opt_var = _tmp_185_rule()) != null || _opt_var == null)  // del_targets?
            // collecting vars: None a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
                // generated call: (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            // collecting vars: Token _literal_1
            //    vars: {'_literal': 'Token', 'a': None, '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            Object a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '['
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('[')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
                // REMOVE result call (_literal = expect(Token.Kind.LSQB)) != null  // token='['
                (_literal = expect(Token.Kind.LSQB)) != null  // token='['
                &&
                // TODO visiting JavaParserGeneratorNamedItem: del_targets?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(del_targets?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(del_targets?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(del_targets)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_185_var = _tmp_185_rule()) != null  // del_targets
                // REMOVE result call ((_opt_var = _tmp_185_rule()) != null || _opt_var == null)  // del_targets?
                ((a = _tmp_185_rule()) != null || a == null)  // del_targets?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ']'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(']')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
                // REMOVE result call (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
                (_literal_1 = expect(Token.Kind.RSQB)) != null  // token=']'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("del_t_atom[" + pos + ", " + mark() +" ](level: " + level + ") '[' del_targets? ']' succeeded!");
                }
                // alt action: _PyAST_List ( a , Del , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_List ( a , Del , EXTRA )
                return (SSTNode)cache.putResult(pos, DEL_T_ATOM_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, DEL_T_ATOM_ID, null);
    }

    // targets: ','.target+ ','?
    // TODO replacing asdl_expr_seq* --> SSTNode[]
    public SSTNode[] targets_rule() {
    // isLoop: False, isGather: False, type: asdl_expr_seq*)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: targets, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, TARGETS_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, TARGETS_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: a
        {
            // visiting Alt: ','.target+ ','?
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.target+)
                // generated call: (_gather_186_var = _gather_186_rule()) != null  // ','.target+
            // collecting vars: asdl_expr_seq* a
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_188_var = _tmp_188_rule()) != null  // ','
                // generated call: ((_opt_var = _tmp_188_rule()) != null || _opt_var == null)  // ','?
            // collecting vars: None _opt_var
            //    vars: {'a': 'asdl_expr_seq*', '_opt_var': None}
            Object _opt_var;
            // TODO replacing asdl_expr_seq* --> SSTNode[]
            SSTNode[] a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','.target+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.target+)
                // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.target+)
                // REMOVE result call (_gather_186_var = _gather_186_rule()) != null  // ','.target+
                (a = (SSTNode[])_gather_186_rule()) != null  // ','.target+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',')
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_188_var = _tmp_188_rule()) != null  // ','
                // REMOVE result call ((_opt_var = _tmp_188_rule()) != null || _opt_var == null)  // ','?
                ((_opt_var = _tmp_188_rule()) != null || _opt_var == null)  // ','?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("targets[" + pos + ", " + mark() +" ](level: " + level + ") ','.target+ ','? succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode[])cache.putResult(pos, TARGETS_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, TARGETS_ID, null);
    }

    // target:
    //     | t_primary '.' NAME !t_lookahead
    //     | t_primary '[' slices ']' !t_lookahead
    //     | t_atom
    public SSTNode target_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: target, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, TARGET_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, TARGET_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Attribute ( a , b -> v . Name . id , Store , EXTRA )
        {
            // visiting Alt: t_primary '.' NAME !t_lookahead
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // name = t_primary
                // generated call: (t_primary_var = t_primary_rule()) != null  // t_primary
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
                // generated call: (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token b
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_lookahead) - should work
            // name = t_lookahead
            // lookahead_call_helper call: (t_lookahead_var = t_lookahead_rule()) != null  // t_lookahead
            //    call.nodetype: None
                // generated call: lookahedt_lookahead_rule(false)
            // collecting vars: boolean None
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'b': 'Token', None: 'boolean'}
            Token _literal;
            SSTNode a;
            Token b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: t_primary
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(t_primary)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
                // name = t_primary
                // REMOVE result call (t_primary_var = t_primary_rule()) != null  // t_primary
                (a = t_primary_rule()) != null  // t_primary
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '.'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('.')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
                // REMOVE result call (_literal = expect(Token.Kind.DOT)) != null  // token='.'
                (_literal = expect(Token.Kind.DOT)) != null  // token='.'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (b = expect(Token.Kind.NAME)) != null  // NAME
                &&
                // TODO visiting JavaParserGeneratorNamedItem: !t_lookahead
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!t_lookahead)
                // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_lookahead) - should work
                // name = t_lookahead
                // lookahead_call_helper call: (t_lookahead_var = t_lookahead_rule()) != null  // t_lookahead
                //    call.nodetype: None
                // REMOVE result call lookahedt_lookahead_rule(false)
                lookahedt_lookahead_rule(false)
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("target[" + pos + ", " + mark() +" ](level: " + level + ") t_primary '.' NAME !t_lookahead succeeded!");
                }
                // alt action: _PyAST_Attribute ( a , b -> v . Name . id , Store , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Attribute ( a , b -> v . Name . id , Store , EXTRA )
                return (SSTNode)cache.putResult(pos, TARGET_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Subscript ( a , b , Store , EXTRA )
        {
            // visiting Alt: t_primary '[' slices ']' !t_lookahead
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // name = t_primary
                // generated call: (t_primary_var = t_primary_rule()) != null  // t_primary
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
                // generated call: (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
            // name = slices
                // generated call: (slices_var = slices_rule()) != null  // slices
            // collecting vars: SSTNode b
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
                // generated call: (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            // collecting vars: Token _literal_1
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_lookahead) - should work
            // name = t_lookahead
            // lookahead_call_helper call: (t_lookahead_var = t_lookahead_rule()) != null  // t_lookahead
            //    call.nodetype: None
                // generated call: lookahedt_lookahead_rule(false)
            // collecting vars: boolean None
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'b': 'SSTNode', '_literal_1': 'Token', None: 'boolean'}
            Token _literal;
            Token _literal_1;
            SSTNode a;
            SSTNode b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: t_primary
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(t_primary)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
                // name = t_primary
                // REMOVE result call (t_primary_var = t_primary_rule()) != null  // t_primary
                (a = t_primary_rule()) != null  // t_primary
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '['
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('[')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
                // REMOVE result call (_literal = expect(Token.Kind.LSQB)) != null  // token='['
                (_literal = expect(Token.Kind.LSQB)) != null  // token='['
                &&
                // TODO visiting JavaParserGeneratorNamedItem: slices
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(slices)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
                // name = slices
                // REMOVE result call (slices_var = slices_rule()) != null  // slices
                (b = slices_rule()) != null  // slices
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ']'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(']')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
                // REMOVE result call (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
                (_literal_1 = expect(Token.Kind.RSQB)) != null  // token=']'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: !t_lookahead
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!t_lookahead)
                // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!t_lookahead)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_lookahead) - should work
                // name = t_lookahead
                // lookahead_call_helper call: (t_lookahead_var = t_lookahead_rule()) != null  // t_lookahead
                //    call.nodetype: None
                // REMOVE result call lookahedt_lookahead_rule(false)
                lookahedt_lookahead_rule(false)
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("target[" + pos + ", " + mark() +" ](level: " + level + ") t_primary '[' slices ']' !t_lookahead succeeded!");
                }
                // alt action: _PyAST_Subscript ( a , b , Store , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Subscript ( a , b , Store , EXTRA )
                return (SSTNode)cache.putResult(pos, TARGET_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: t_atom
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_atom) - should work
            // name = t_atom
                // generated call: (t_atom_var = t_atom_rule()) != null  // t_atom
            // collecting vars: SSTNode t_atom_var
            //    vars: {'t_atom_var': 'SSTNode'}
            SSTNode t_atom_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: t_atom
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(t_atom)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_atom) - should work
                // name = t_atom
                // REMOVE result call (t_atom_var = t_atom_rule()) != null  // t_atom
                (t_atom_var = t_atom_rule()) != null  // t_atom
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("target[" + pos + ", " + mark() +" ](level: " + level + ") t_atom succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['t_atom_var']
                result = t_atom_var;
                return (SSTNode)cache.putResult(pos, TARGET_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, TARGET_ID, null);
    }

    // Left-recursive
    // t_primary:
    //     | t_primary '.' NAME &t_lookahead
    //     | t_primary '[' slices ']' &t_lookahead
    //     | t_primary genexp &t_lookahead
    //     | t_primary '(' arguments? ')' &t_lookahead
    //     | atom &t_lookahead
    public SSTNode t_primary_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // left recursion--
        int pos = mark();
        if (DEBUG) {
            debugMessageln("Left Recursion Rule: t_primary, pos: " + pos + ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, T_PRIMARY_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, T_PRIMARY_ID);
        }
        int lastPos = pos;
        int endPos;
        SSTNode lastResult = null;
        cache.putResult(pos, T_PRIMARY_ID, null);
        while(true) {
            reset(pos);
            SSTNode result = t_primary_rule_body();
            endPos = mark();
            if (endPos <= lastPos) {
                break;
            }
            lastResult = result;
            lastPos = endPos;
            cache.putResult(pos, T_PRIMARY_ID, result);
        }
        reset(lastPos);
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: " + lastResult + ", level: " + level);
        }
        return lastResult;
    }

    // left-rersive rule body
    public SSTNode t_primary_rule_body() {
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: t_primary, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyAST_Attribute ( a , b -> v . Name . id , Load , EXTRA )
        {
            // visiting Alt: t_primary '.' NAME &t_lookahead
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // name = t_primary
                // generated call: (t_primary_var = t_primary_rule()) != null  // t_primary
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
                // generated call: (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token b
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&t_lookahead)
                // generated call: None
            // collecting vars: None None
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'b': 'Token', None: None}
            Token _literal;
            SSTNode a;
            Token b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: t_primary
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(t_primary)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
                // name = t_primary
                // REMOVE result call (t_primary_var = t_primary_rule()) != null  // t_primary
                (a = t_primary_rule()) != null  // t_primary
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '.'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('.')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
                // REMOVE result call (_literal = expect(Token.Kind.DOT)) != null  // token='.'
                (_literal = expect(Token.Kind.DOT)) != null  // token='.'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (b = expect(Token.Kind.NAME)) != null  // NAME
                &&
                // TODO visiting JavaParserGeneratorNamedItem: &t_lookahead
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&t_lookahead)
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&t_lookahead)
                // TODO call is not created &t_lookahead -> creates artificial
                true
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("t_primary[" + pos + ", " + mark() +" ](level: " + level + ") t_primary '.' NAME &t_lookahead succeeded!");
                }
                // alt action: _PyAST_Attribute ( a , b -> v . Name . id , Load , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Attribute ( a , b -> v . Name . id , Load , EXTRA )
                return (SSTNode)cache.putResult(pos, T_PRIMARY_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Subscript ( a , b , Load , EXTRA )
        {
            // visiting Alt: t_primary '[' slices ']' &t_lookahead
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // name = t_primary
                // generated call: (t_primary_var = t_primary_rule()) != null  // t_primary
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
                // generated call: (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
            // name = slices
                // generated call: (slices_var = slices_rule()) != null  // slices
            // collecting vars: SSTNode b
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
                // generated call: (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            // collecting vars: Token _literal_1
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&t_lookahead)
                // generated call: None
            // collecting vars: None None
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'b': 'SSTNode', '_literal_1': 'Token', None: None}
            Token _literal;
            Token _literal_1;
            SSTNode a;
            SSTNode b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: t_primary
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(t_primary)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
                // name = t_primary
                // REMOVE result call (t_primary_var = t_primary_rule()) != null  // t_primary
                (a = t_primary_rule()) != null  // t_primary
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '['
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('[')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
                // REMOVE result call (_literal = expect(Token.Kind.LSQB)) != null  // token='['
                (_literal = expect(Token.Kind.LSQB)) != null  // token='['
                &&
                // TODO visiting JavaParserGeneratorNamedItem: slices
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(slices)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slices) - should work
                // name = slices
                // REMOVE result call (slices_var = slices_rule()) != null  // slices
                (b = slices_rule()) != null  // slices
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ']'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(']')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
                // REMOVE result call (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
                (_literal_1 = expect(Token.Kind.RSQB)) != null  // token=']'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: &t_lookahead
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&t_lookahead)
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&t_lookahead)
                // TODO call is not created &t_lookahead -> creates artificial
                true
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("t_primary[" + pos + ", " + mark() +" ](level: " + level + ") t_primary '[' slices ']' &t_lookahead succeeded!");
                }
                // alt action: _PyAST_Subscript ( a , b , Load , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Subscript ( a , b , Load , EXTRA )
                return (SSTNode)cache.putResult(pos, T_PRIMARY_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Call ( a , CHECK ( asdl_expr_seq * , ( asdl_expr_seq * ) _PyPegen_singleton_seq ( p , b ) ) , NULL , EXTRA )
        {
            // visiting Alt: t_primary genexp &t_lookahead
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // name = t_primary
                // generated call: (t_primary_var = t_primary_rule()) != null  // t_primary
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(genexp) - should work
            // name = genexp
                // generated call: (genexp_var = genexp_rule()) != null  // genexp
            // collecting vars: SSTNode b
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&t_lookahead)
                // generated call: None
            // collecting vars: None None
            //    vars: {'a': 'SSTNode', 'b': 'SSTNode', None: None}
            SSTNode a;
            SSTNode b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: t_primary
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(t_primary)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
                // name = t_primary
                // REMOVE result call (t_primary_var = t_primary_rule()) != null  // t_primary
                (a = t_primary_rule()) != null  // t_primary
                &&
                // TODO visiting JavaParserGeneratorNamedItem: genexp
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(genexp)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(genexp) - should work
                // name = genexp
                // REMOVE result call (genexp_var = genexp_rule()) != null  // genexp
                (b = genexp_rule()) != null  // genexp
                &&
                // TODO visiting JavaParserGeneratorNamedItem: &t_lookahead
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&t_lookahead)
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&t_lookahead)
                // TODO call is not created &t_lookahead -> creates artificial
                true
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("t_primary[" + pos + ", " + mark() +" ](level: " + level + ") t_primary genexp &t_lookahead succeeded!");
                }
                // alt action: _PyAST_Call ( a , CHECK ( asdl_expr_seq * , ( asdl_expr_seq * ) _PyPegen_singleton_seq ( p , b ) ) , NULL , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Call ( a , CHECK ( asdl_expr_seq * , ( asdl_expr_seq * ) _PyPegen_singleton_seq ( p , b ) ) , NULL , EXTRA )
                return (SSTNode)cache.putResult(pos, T_PRIMARY_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Call ( a , ( b ) ? ( ( expr_ty ) b ) -> v . Call . args : NULL , ( b ) ? ( ( expr_ty ) b ) -> v . Call . keywords : NULL , EXTRA )
        {
            // visiting Alt: t_primary '(' arguments? ')' &t_lookahead
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
            // name = t_primary
                // generated call: (t_primary_var = t_primary_rule()) != null  // t_primary
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(arguments?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(arguments)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_189_var = _tmp_189_rule()) != null  // arguments
                // generated call: ((_opt_var = _tmp_189_rule()) != null || _opt_var == null)  // arguments?
            // collecting vars: None b
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // collecting vars: Token _literal_1
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&t_lookahead)
                // generated call: None
            // collecting vars: None None
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'b': None, '_literal_1': 'Token', None: None}
            Token _literal;
            Token _literal_1;
            SSTNode a;
            Object b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: t_primary
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(t_primary)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(t_primary) - should work
                // name = t_primary
                // REMOVE result call (t_primary_var = t_primary_rule()) != null  // t_primary
                (a = t_primary_rule()) != null  // t_primary
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                &&
                // TODO visiting JavaParserGeneratorNamedItem: arguments?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(arguments?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(arguments?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(arguments)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_189_var = _tmp_189_rule()) != null  // arguments
                // REMOVE result call ((_opt_var = _tmp_189_rule()) != null || _opt_var == null)  // arguments?
                ((b = _tmp_189_rule()) != null || b == null)  // arguments?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
                (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: &t_lookahead
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&t_lookahead)
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&t_lookahead)
                // TODO call is not created &t_lookahead -> creates artificial
                true
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("t_primary[" + pos + ", " + mark() +" ](level: " + level + ") t_primary '(' arguments? ')' &t_lookahead succeeded!");
                }
                // alt action: _PyAST_Call ( a , ( b ) ? ( ( expr_ty ) b ) -> v . Call . args : NULL , ( b ) ? ( ( expr_ty ) b ) -> v . Call . keywords : NULL , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Call ( a , ( b ) ? ( ( expr_ty ) b ) -> v . Call . args : NULL , ( b ) ? ( ( expr_ty ) b ) -> v . Call . keywords : NULL , EXTRA )
                return (SSTNode)cache.putResult(pos, T_PRIMARY_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: a
        {
            // visiting Alt: atom &t_lookahead
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(atom) - should work
            // name = atom
                // generated call: (atom_var = atom_rule()) != null  // atom
            // collecting vars: SSTNode a
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&t_lookahead)
                // generated call: None
            // collecting vars: None None
            //    vars: {'a': 'SSTNode', None: None}
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: atom
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(atom)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(atom) - should work
                // name = atom
                // REMOVE result call (atom_var = atom_rule()) != null  // atom
                (a = atom_rule()) != null  // atom
                &&
                // TODO visiting JavaParserGeneratorNamedItem: &t_lookahead
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&t_lookahead)
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&t_lookahead)
                // TODO call is not created &t_lookahead -> creates artificial
                true
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("t_primary[" + pos + ", " + mark() +" ](level: " + level + ") atom &t_lookahead succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode)cache.putResult(pos, T_PRIMARY_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, T_PRIMARY_ID, null);
    }

    // t_lookahead: '(' | '[' | '.'
    public Object t_lookahead_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: t_lookahead, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, T_LOOKAHEAD_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, T_LOOKAHEAD_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("t_lookahead[" + pos + ", " + mark() +" ](level: " + level + ") '(' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, T_LOOKAHEAD_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: '['
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
                // generated call: (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '['
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('[')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
                // REMOVE result call (_literal = expect(Token.Kind.LSQB)) != null  // token='['
                (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("t_lookahead[" + pos + ", " + mark() +" ](level: " + level + ") '[' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, T_LOOKAHEAD_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: '.'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
                // generated call: (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '.'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('.')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
                // REMOVE result call (_literal = expect(Token.Kind.DOT)) != null  // token='.'
                (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("t_lookahead[" + pos + ", " + mark() +" ](level: " + level + ") '.' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, T_LOOKAHEAD_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, T_LOOKAHEAD_ID, null);
    }

    // t_atom: NAME | '(' target ')' | '(' targets? ')' | '[' targets? ']'
    public SSTNode t_atom_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: t_atom, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, T_ATOM_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, T_ATOM_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_set_expr_context ( p , a , Store )
        {
            // visiting Alt: NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token a
            //    vars: {'a': 'Token'}
            Token a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (a = expect(Token.Kind.NAME)) != null  // NAME
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("t_atom[" + pos + ", " + mark() +" ](level: " + level + ") NAME succeeded!");
                }
                // alt action: _PyPegen_set_expr_context ( p , a , Store )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_set_expr_context ( p , a , Store )
                return (SSTNode)cache.putResult(pos, T_ATOM_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_set_expr_context ( p , a , Store )
        {
            // visiting Alt: '(' target ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(target) - should work
            // name = target
                // generated call: (target_var = target_rule()) != null  // target
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // collecting vars: Token _literal_1
            //    vars: {'_literal': 'Token', 'a': 'SSTNode', '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                &&
                // TODO visiting JavaParserGeneratorNamedItem: target
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(target)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(target) - should work
                // name = target
                // REMOVE result call (target_var = target_rule()) != null  // target
                (a = target_rule()) != null  // target
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
                (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("t_atom[" + pos + ", " + mark() +" ](level: " + level + ") '(' target ')' succeeded!");
                }
                // alt action: _PyPegen_set_expr_context ( p , a , Store )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_set_expr_context ( p , a , Store )
                return (SSTNode)cache.putResult(pos, T_ATOM_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_Tuple ( b , Store , EXTRA )
        {
            // visiting Alt: '(' targets? ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(targets?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(targets)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_190_var = _tmp_190_rule()) != null  // targets
                // generated call: ((_opt_var = _tmp_190_rule()) != null || _opt_var == null)  // targets?
            // collecting vars: None b
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // collecting vars: Token _literal_1
            //    vars: {'_literal': 'Token', 'b': None, '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            Object b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                &&
                // TODO visiting JavaParserGeneratorNamedItem: targets?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(targets?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(targets?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(targets)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_190_var = _tmp_190_rule()) != null  // targets
                // REMOVE result call ((_opt_var = _tmp_190_rule()) != null || _opt_var == null)  // targets?
                ((b = _tmp_190_rule()) != null || b == null)  // targets?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
                (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("t_atom[" + pos + ", " + mark() +" ](level: " + level + ") '(' targets? ')' succeeded!");
                }
                // alt action: _PyAST_Tuple ( b , Store , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_Tuple ( b , Store , EXTRA )
                return (SSTNode)cache.putResult(pos, T_ATOM_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyAST_List ( b , Store , EXTRA )
        {
            // visiting Alt: '[' targets? ']'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
                // generated call: (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(targets?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(targets)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_191_var = _tmp_191_rule()) != null  // targets
                // generated call: ((_opt_var = _tmp_191_rule()) != null || _opt_var == null)  // targets?
            // collecting vars: None b
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
                // generated call: (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
            // collecting vars: Token _literal_1
            //    vars: {'_literal': 'Token', 'b': None, '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            Object b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '['
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('[')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
                // REMOVE result call (_literal = expect(Token.Kind.LSQB)) != null  // token='['
                (_literal = expect(Token.Kind.LSQB)) != null  // token='['
                &&
                // TODO visiting JavaParserGeneratorNamedItem: targets?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(targets?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(targets?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(targets)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_191_var = _tmp_191_rule()) != null  // targets
                // REMOVE result call ((_opt_var = _tmp_191_rule()) != null || _opt_var == null)  // targets?
                ((b = _tmp_191_rule()) != null || b == null)  // targets?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ']'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(']')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(']')
                // REMOVE result call (_literal = expect(Token.Kind.RSQB)) != null  // token=']'
                (_literal_1 = expect(Token.Kind.RSQB)) != null  // token=']'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("t_atom[" + pos + ", " + mark() +" ](level: " + level + ") '[' targets? ']' succeeded!");
                }
                // alt action: _PyAST_List ( b , Store , EXTRA )
                Token endToken = getToken(mark());
                // node.action: _PyAST_List ( b , Store , EXTRA )
                return (SSTNode)cache.putResult(pos, T_ATOM_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, T_ATOM_ID, null);
    }

    // invalid_arguments:
    //     | args ',' '*'
    //     | expression for_if_clauses ',' [args | expression for_if_clauses]
    //     | args for_if_clauses
    //     | args ',' expression for_if_clauses
    //     | args ',' args
    public Object invalid_arguments_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: invalid_arguments, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_ARGUMENTS_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, INVALID_ARGUMENTS_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: RAISE_SYNTAX_ERROR ( "iterable argument unpacking follows keyword argument unpacking" )
        {
            // visiting Alt: args ',' '*'
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
            // name = args
                // generated call: (args_var = args_rule()) != null  // args
            // collecting vars: SSTNode args_var
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // collecting vars: Token _literal_1
            //    vars: {'args_var': 'SSTNode', '_literal': 'Token', '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            SSTNode args_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: args
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(args)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
                // name = args
                // REMOVE result call (args_var = args_rule()) != null  // args
                (args_var = args_rule()) != null  // args
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '*'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                (_literal_1 = expect(Token.Kind.STAR)) != null  // token='*'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_arguments[" + pos + ", " + mark() +" ](level: " + level + ") args ',' '*' succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR ( "iterable argument unpacking follows keyword argument unpacking" )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR ( "iterable argument unpacking follows keyword argument unpacking" )
                return (Object)cache.putResult(pos, INVALID_ARGUMENTS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "Generator expression must be parenthesized" )
        {
            // visiting Alt: expression for_if_clauses ',' [args | expression for_if_clauses]
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
            // name = for_if_clauses
            // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
                // generated call: (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            // collecting vars: SSTNode[] for_if_clauses_var
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt([args | expression for_if_clauses])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(args | expression for_if_clauses)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_192_var = _tmp_192_rule()) != null  // args | expression for_if_clauses
                // generated call: ((_opt_var = _tmp_192_rule()) != null || _opt_var == null)  // [args | expression for_if_clauses]
            // collecting vars: None _opt_var
            //    vars: {'a': 'SSTNode', 'for_if_clauses_var': 'SSTNode[]', '_literal': 'Token', '_opt_var': None}
            Token _literal;
            Object _opt_var;
            SSTNode a;
            SSTNode[] for_if_clauses_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (a = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: for_if_clauses
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(for_if_clauses)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
                // name = for_if_clauses
                // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
                // REMOVE result call (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
                (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: [args | expression for_if_clauses]
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem([args | expression for_if_clauses])
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt([args | expression for_if_clauses])
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(args | expression for_if_clauses)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_192_var = _tmp_192_rule()) != null  // args | expression for_if_clauses
                // REMOVE result call ((_opt_var = _tmp_192_rule()) != null || _opt_var == null)  // [args | expression for_if_clauses]
                ((_opt_var = _tmp_192_rule()) != null || _opt_var == null)  // [args | expression for_if_clauses]
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_arguments[" + pos + ", " + mark() +" ](level: " + level + ") expression for_if_clauses ',' [args | expression for_if_clauses] succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "Generator expression must be parenthesized" )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "Generator expression must be parenthesized" )
                return (Object)cache.putResult(pos, INVALID_ARGUMENTS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_nonparen_genexp_in_call ( p , a )
        {
            // visiting Alt: args for_if_clauses
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
            // name = args
                // generated call: (args_var = args_rule()) != null  // args
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
            // name = for_if_clauses
            // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
                // generated call: (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            // collecting vars: SSTNode[] for_if_clauses_var
            //    vars: {'a': 'SSTNode', 'for_if_clauses_var': 'SSTNode[]'}
            SSTNode a;
            SSTNode[] for_if_clauses_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: args
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(args)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
                // name = args
                // REMOVE result call (args_var = args_rule()) != null  // args
                (a = args_rule()) != null  // args
                &&
                // TODO visiting JavaParserGeneratorNamedItem: for_if_clauses
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(for_if_clauses)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
                // name = for_if_clauses
                // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
                // REMOVE result call (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
                (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_arguments[" + pos + ", " + mark() +" ](level: " + level + ") args for_if_clauses succeeded!");
                }
                // alt action: _PyPegen_nonparen_genexp_in_call ( p , a )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_nonparen_genexp_in_call ( p , a )
                return (Object)cache.putResult(pos, INVALID_ARGUMENTS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "Generator expression must be parenthesized" )
        {
            // visiting Alt: args ',' expression for_if_clauses
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
            // name = args
                // generated call: (args_var = args_rule()) != null  // args
            // collecting vars: SSTNode args_var
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
            // name = for_if_clauses
            // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
                // generated call: (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            // collecting vars: SSTNode[] for_if_clauses_var
            //    vars: {'args_var': 'SSTNode', '_literal': 'Token', 'a': 'SSTNode', 'for_if_clauses_var': 'SSTNode[]'}
            Token _literal;
            SSTNode a;
            SSTNode args_var;
            SSTNode[] for_if_clauses_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: args
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(args)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
                // name = args
                // REMOVE result call (args_var = args_rule()) != null  // args
                (args_var = args_rule()) != null  // args
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (a = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: for_if_clauses
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(for_if_clauses)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
                // name = for_if_clauses
                // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
                // REMOVE result call (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
                (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_arguments[" + pos + ", " + mark() +" ](level: " + level + ") args ',' expression for_if_clauses succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "Generator expression must be parenthesized" )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "Generator expression must be parenthesized" )
                return (Object)cache.putResult(pos, INVALID_ARGUMENTS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: _PyPegen_arguments_parsing_error ( p , a )
        {
            // visiting Alt: args ',' args
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
            // name = args
                // generated call: (args_var = args_rule()) != null  // args
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
            // name = args
                // generated call: (args_var = args_rule()) != null  // args
            // collecting vars: SSTNode args_var
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'args_var': 'SSTNode'}
            Token _literal;
            SSTNode a;
            SSTNode args_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: args
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(args)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
                // name = args
                // REMOVE result call (args_var = args_rule()) != null  // args
                (a = args_rule()) != null  // args
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: args
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(args)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
                // name = args
                // REMOVE result call (args_var = args_rule()) != null  // args
                (args_var = args_rule()) != null  // args
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_arguments[" + pos + ", " + mark() +" ](level: " + level + ") args ',' args succeeded!");
                }
                // alt action: _PyPegen_arguments_parsing_error ( p , a )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_arguments_parsing_error ( p , a )
                return (Object)cache.putResult(pos, INVALID_ARGUMENTS_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, INVALID_ARGUMENTS_ID, null);
    }

    // invalid_kwarg: expression '='
    public Object invalid_kwarg_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: invalid_kwarg, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_KWARG_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, INVALID_KWARG_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "expression cannot contain assignment, perhaps you meant \"==\"?" )
        {
            // visiting Alt: expression '='
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode expression_var
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // generated call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            // collecting vars: Token a
            //    vars: {'expression_var': 'SSTNode', 'a': 'Token'}
            Token a;
            SSTNode expression_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (expression_var = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // REMOVE result call (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
                (a = expect(Token.Kind.EQUAL)) != null  // token='='
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_kwarg[" + pos + ", " + mark() +" ](level: " + level + ") expression '=' succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "expression cannot contain assignment, perhaps you meant \"==\"?" )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "expression cannot contain assignment, perhaps you meant \"==\"?" )
                return (Object)cache.putResult(pos, INVALID_KWARG_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, INVALID_KWARG_ID, null);
    }

    // invalid_expression: !(NAME STRING | SOFT_KEYWORD) disjunction expression
    public Object invalid_expression_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: invalid_expression, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_EXPRESSION_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, INVALID_EXPRESSION_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: RAISE_ERROR_KNOWN_LOCATION ( p , PyExc_SyntaxError , a -> lineno , a -> end_col_offset - 1 , "invalid syntax. Perhaps you forgot a comma?" )
        {
            // visiting Alt: !(NAME STRING | SOFT_KEYWORD) disjunction expression
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!(NAME STRING | SOFT_KEYWORD))
            // TODO visiting JavaCallMakerVisitor.visit_Group((NAME STRING | SOFT_KEYWORD))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(NAME STRING | SOFT_KEYWORD)
            // lookahead_call_helper call: (_tmp_193_var = _tmp_193_rule()) != null  // NAME STRING | SOFT_KEYWORD
            //    call.nodetype: None
                // generated call: lookahed_tmp_193_rule(false)
            // collecting vars: boolean None
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
            // name = disjunction
                // generated call: (disjunction_var = disjunction_rule()) != null  // disjunction
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode expression_var
            //    vars: {None: 'boolean', 'a': 'SSTNode', 'expression_var': 'SSTNode'}
            SSTNode a;
            SSTNode expression_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: !(NAME STRING | SOFT_KEYWORD)
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!(NAME STRING | SOFT_KEYWORD))
                // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!(NAME STRING | SOFT_KEYWORD))
                // TODO visiting JavaCallMakerVisitor.visit_Group((NAME STRING | SOFT_KEYWORD))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(NAME STRING | SOFT_KEYWORD)
                // lookahead_call_helper call: (_tmp_193_var = _tmp_193_rule()) != null  // NAME STRING | SOFT_KEYWORD
                //    call.nodetype: None
                // REMOVE result call lookahed_tmp_193_rule(false)
                lookahed_tmp_193_rule(false)
                &&
                // TODO visiting JavaParserGeneratorNamedItem: disjunction
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(disjunction)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
                // name = disjunction
                // REMOVE result call (disjunction_var = disjunction_rule()) != null  // disjunction
                (a = disjunction_rule()) != null  // disjunction
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (expression_var = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_expression[" + pos + ", " + mark() +" ](level: " + level + ") !(NAME STRING | SOFT_KEYWORD) disjunction expression succeeded!");
                }
                // alt action: RAISE_ERROR_KNOWN_LOCATION ( p , PyExc_SyntaxError , a -> lineno , a -> end_col_offset - 1 , "invalid syntax. Perhaps you forgot a comma?" )
                Token endToken = getToken(mark());
                // node.action: RAISE_ERROR_KNOWN_LOCATION ( p , PyExc_SyntaxError , a -> lineno , a -> end_col_offset - 1 , "invalid syntax. Perhaps you forgot a comma?" )
                return (Object)cache.putResult(pos, INVALID_EXPRESSION_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, INVALID_EXPRESSION_ID, null);
    }

    // invalid_named_expression:
    //     | expression ':=' expression
    //     | NAME '=' bitwise_or !('=' | ':=' | ',')
    //     | !(list | tuple | genexp | 'True' | 'None' | 'False') bitwise_or '=' bitwise_or !('=' | ':=' | ',')
    public Object invalid_named_expression_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: invalid_named_expression, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_NAMED_EXPRESSION_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, INVALID_NAMED_EXPRESSION_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "cannot use assignment expressions with %s" , _PyPegen_get_expr_name ( a ) )
        {
            // visiting Alt: expression ':=' expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':=')
                // generated call: (_literal = expect(Token.Kind.COLONEQUAL)) != null  // token=':='
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode expression_var
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'expression_var': 'SSTNode'}
            Token _literal;
            SSTNode a;
            SSTNode expression_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (a = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ':='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':=')
                // REMOVE result call (_literal = expect(Token.Kind.COLONEQUAL)) != null  // token=':='
                (_literal = expect(Token.Kind.COLONEQUAL)) != null  // token=':='
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (expression_var = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_named_expression[" + pos + ", " + mark() +" ](level: " + level + ") expression ':=' expression succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "cannot use assignment expressions with %s" , _PyPegen_get_expr_name ( a ) )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "cannot use assignment expressions with %s" , _PyPegen_get_expr_name ( a ) )
                return (Object)cache.putResult(pos, INVALID_NAMED_EXPRESSION_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( b , "invalid syntax. Maybe you meant '==' or ':=' instead of '='?" )
        {
            // visiting Alt: NAME '=' bitwise_or !('=' | ':=' | ',')
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // generated call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            // collecting vars: Token b
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // name = bitwise_or
                // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // collecting vars: SSTNode bitwise_or_var
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!('=' | ':=' | ','))
            // TODO visiting JavaCallMakerVisitor.visit_Group(('=' | ':=' | ','))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('=' | ':=' | ',')
            // lookahead_call_helper call: (_tmp_194_var = _tmp_194_rule()) != null  // '=' | ':=' | ','
            //    call.nodetype: None
                // generated call: lookahed_tmp_194_rule(false)
            // collecting vars: boolean None
            //    vars: {'a': 'Token', 'b': 'Token', 'bitwise_or_var': 'SSTNode', None: 'boolean'}
            Token a;
            Token b;
            SSTNode bitwise_or_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (a = expect(Token.Kind.NAME)) != null  // NAME
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // REMOVE result call (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
                (b = expect(Token.Kind.EQUAL)) != null  // token='='
                &&
                // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
                // name = bitwise_or
                // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
                (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
                &&
                // TODO visiting JavaParserGeneratorNamedItem: !('=' | ':=' | ',')
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!('=' | ':=' | ','))
                // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!('=' | ':=' | ','))
                // TODO visiting JavaCallMakerVisitor.visit_Group(('=' | ':=' | ','))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('=' | ':=' | ',')
                // lookahead_call_helper call: (_tmp_194_var = _tmp_194_rule()) != null  // '=' | ':=' | ','
                //    call.nodetype: None
                // REMOVE result call lookahed_tmp_194_rule(false)
                lookahed_tmp_194_rule(false)
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_named_expression[" + pos + ", " + mark() +" ](level: " + level + ") NAME '=' bitwise_or !('=' | ':=' | ',') succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( b , "invalid syntax. Maybe you meant '==' or ':=' instead of '='?" )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( b , "invalid syntax. Maybe you meant '==' or ':=' instead of '='?" )
                return (Object)cache.putResult(pos, INVALID_NAMED_EXPRESSION_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( b , "cannot assign to %s here. Maybe you meant '==' instead of '='?" , _PyPegen_get_expr_name ( a ) )
        {
            // visiting Alt: !(list | tuple | genexp | 'True' | 'None' | 'False') bitwise_or '=' bitwise_or !('=' | ':=' | ',')
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!(list | tuple | genexp | 'True' | 'None' | 'False'))
            // TODO visiting JavaCallMakerVisitor.visit_Group((list | tuple | genexp | 'True' | 'None' | 'False'))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(list | tuple | genexp | 'True' | 'None' | 'False')
            // lookahead_call_helper call: (_tmp_195_var = _tmp_195_rule()) != null  // list | tuple | genexp | 'True' | 'None' | 'False'
            //    call.nodetype: None
                // generated call: lookahed_tmp_195_rule(false)
            // collecting vars: boolean None
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // name = bitwise_or
                // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // generated call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            // collecting vars: Token b
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // name = bitwise_or
                // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // collecting vars: SSTNode bitwise_or_var
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!('=' | ':=' | ','))
            // TODO visiting JavaCallMakerVisitor.visit_Group(('=' | ':=' | ','))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('=' | ':=' | ',')
            // lookahead_call_helper call: (_tmp_196_var = _tmp_196_rule()) != null  // '=' | ':=' | ','
            //    call.nodetype: None
                // generated call: lookahed_tmp_196_rule(false)
            // collecting vars: boolean None
            //    vars: {None: 'boolean', 'a': 'SSTNode', 'b': 'Token', 'bitwise_or_var': 'SSTNode'}
            SSTNode a;
            Token b;
            SSTNode bitwise_or_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: !(list | tuple | genexp | 'True' | 'None' | 'False')
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!(list | tuple | genexp | 'True' | 'None' | 'False'))
                // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!(list | tuple | genexp | 'True' | 'None' | 'False'))
                // TODO visiting JavaCallMakerVisitor.visit_Group((list | tuple | genexp | 'True' | 'None' | 'False'))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(list | tuple | genexp | 'True' | 'None' | 'False')
                // lookahead_call_helper call: (_tmp_195_var = _tmp_195_rule()) != null  // list | tuple | genexp | 'True' | 'None' | 'False'
                //    call.nodetype: None
                // REMOVE result call lookahed_tmp_195_rule(false)
                lookahed_tmp_195_rule(false)
                &&
                // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
                // name = bitwise_or
                // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
                (a = bitwise_or_rule()) != null  // bitwise_or
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // REMOVE result call (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
                (b = expect(Token.Kind.EQUAL)) != null  // token='='
                &&
                // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
                // name = bitwise_or
                // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
                (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
                &&
                // TODO visiting JavaParserGeneratorNamedItem: !('=' | ':=' | ',')
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!('=' | ':=' | ','))
                // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!('=' | ':=' | ','))
                // TODO visiting JavaCallMakerVisitor.visit_Group(('=' | ':=' | ','))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('=' | ':=' | ',')
                // lookahead_call_helper call: (_tmp_196_var = _tmp_196_rule()) != null  // '=' | ':=' | ','
                //    call.nodetype: None
                // REMOVE result call lookahed_tmp_196_rule(false)
                lookahed_tmp_196_rule(false)
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_named_expression[" + pos + ", " + mark() +" ](level: " + level + ") !(list | tuple | genexp | 'True' | 'None' | 'False') bitwise_or '=' bitwise_or !('=' | ':=' | ',') succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( b , "cannot assign to %s here. Maybe you meant '==' instead of '='?" , _PyPegen_get_expr_name ( a ) )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( b , "cannot assign to %s here. Maybe you meant '==' instead of '='?" , _PyPegen_get_expr_name ( a ) )
                return (Object)cache.putResult(pos, INVALID_NAMED_EXPRESSION_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, INVALID_NAMED_EXPRESSION_ID, null);
    }

    // invalid_assignment:
    //     | invalid_ann_assign_target ':' expression
    //     | star_named_expression ',' star_named_expressions* ':' expression
    //     | expression ':' expression
    //     | ((star_targets '='))* star_expressions '='
    //     | ((star_targets '='))* yield_expr '='
    //     | star_expressions augassign (yield_expr | star_expressions)
    public Object invalid_assignment_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: invalid_assignment, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_ASSIGNMENT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, INVALID_ASSIGNMENT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "only single target (not %s) can be annotated" , _PyPegen_get_expr_name ( a ) )
        {
            // visiting Alt: invalid_ann_assign_target ':' expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_ann_assign_target) - should work
            // name = invalid_ann_assign_target
                // generated call: (invalid_ann_assign_target_var = invalid_ann_assign_target_rule()) != null  // invalid_ann_assign_target
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode expression_var
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'expression_var': 'SSTNode'}
            Token _literal;
            SSTNode a;
            SSTNode expression_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: invalid_ann_assign_target
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_ann_assign_target)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_ann_assign_target) - should work
                // name = invalid_ann_assign_target
                // REMOVE result call (invalid_ann_assign_target_var = invalid_ann_assign_target_rule()) != null  // invalid_ann_assign_target
                (a = invalid_ann_assign_target_rule()) != null  // invalid_ann_assign_target
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (expression_var = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_assignment[" + pos + ", " + mark() +" ](level: " + level + ") invalid_ann_assign_target ':' expression succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "only single target (not %s) can be annotated" , _PyPegen_get_expr_name ( a ) )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "only single target (not %s) can be annotated" , _PyPegen_get_expr_name ( a ) )
                return (Object)cache.putResult(pos, INVALID_ASSIGNMENT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "only single target (not tuple) can be annotated" )
        {
            // visiting Alt: star_named_expression ',' star_named_expressions* ':' expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
            // name = star_named_expression
                // generated call: (star_named_expression_var = star_named_expression_rule()) != null  // star_named_expression
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(star_named_expressions*)
                // generated call: (_loop0_197_var = _loop0_197_rule()) != null  // star_named_expressions*
            // collecting vars: SSTNode[] _loop0_197_var
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // collecting vars: Token _literal_1
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode expression_var
            //    vars: {'a': 'SSTNode', '_literal': 'Token', '_loop0_197_var': 'SSTNode[]', '_literal_1': 'Token', 'expression_var': 'SSTNode'}
            Token _literal;
            Token _literal_1;
            SSTNode[] _loop0_197_var;
            SSTNode a;
            SSTNode expression_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_named_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_named_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
                // name = star_named_expression
                // REMOVE result call (star_named_expression_var = star_named_expression_rule()) != null  // star_named_expression
                (a = star_named_expression_rule()) != null  // star_named_expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: star_named_expressions*
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_named_expressions*)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat0(star_named_expressions*)
                // REMOVE result call (_loop0_197_var = _loop0_197_rule()) != null  // star_named_expressions*
                (_loop0_197_var = _loop0_197_rule()) != null  // star_named_expressions*
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                (_literal_1 = expect(Token.Kind.COLON)) != null  // token=':'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (expression_var = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_assignment[" + pos + ", " + mark() +" ](level: " + level + ") star_named_expression ',' star_named_expressions* ':' expression succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "only single target (not tuple) can be annotated" )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "only single target (not tuple) can be annotated" )
                return (Object)cache.putResult(pos, INVALID_ASSIGNMENT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "illegal target for annotation" )
        {
            // visiting Alt: expression ':' expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode expression_var
            //    vars: {'a': 'SSTNode', '_literal': 'Token', 'expression_var': 'SSTNode'}
            Token _literal;
            SSTNode a;
            SSTNode expression_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (a = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (expression_var = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_assignment[" + pos + ", " + mark() +" ](level: " + level + ") expression ':' expression succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "illegal target for annotation" )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "illegal target for annotation" )
                return (Object)cache.putResult(pos, INVALID_ASSIGNMENT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: RAISE_SYNTAX_ERROR_INVALID_TARGET ( STAR_TARGETS , a )
        {
            // visiting Alt: ((star_targets '='))* star_expressions '='
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(((star_targets '='))*)
                // generated call: (_loop0_198_var = _loop0_198_rule()) != null  // ((star_targets '='))*
            // collecting vars: SSTNode[] _loop0_198_var
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // name = star_expressions
                // generated call: (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // generated call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            // collecting vars: Token _literal
            //    vars: {'_loop0_198_var': 'SSTNode[]', 'a': 'SSTNode', '_literal': 'Token'}
            Token _literal;
            SSTNode[] _loop0_198_var;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ((star_targets '='))*
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(((star_targets '='))*)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat0(((star_targets '='))*)
                // REMOVE result call (_loop0_198_var = _loop0_198_rule()) != null  // ((star_targets '='))*
                (_loop0_198_var = _loop0_198_rule()) != null  // ((star_targets '='))*
                &&
                // TODO visiting JavaParserGeneratorNamedItem: star_expressions
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expressions)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
                // name = star_expressions
                // REMOVE result call (star_expressions_var = star_expressions_rule()) != null  // star_expressions
                (a = star_expressions_rule()) != null  // star_expressions
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // REMOVE result call (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
                (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_assignment[" + pos + ", " + mark() +" ](level: " + level + ") ((star_targets '='))* star_expressions '=' succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR_INVALID_TARGET ( STAR_TARGETS , a )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR_INVALID_TARGET ( STAR_TARGETS , a )
                return (Object)cache.putResult(pos, INVALID_ASSIGNMENT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "assignment to yield expression not possible" )
        {
            // visiting Alt: ((star_targets '='))* yield_expr '='
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(((star_targets '='))*)
                // generated call: (_loop0_199_var = _loop0_199_rule()) != null  // ((star_targets '='))*
            // collecting vars: SSTNode[] _loop0_199_var
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
            // name = yield_expr
                // generated call: (yield_expr_var = yield_expr_rule()) != null  // yield_expr
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // generated call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            // collecting vars: Token _literal
            //    vars: {'_loop0_199_var': 'SSTNode[]', 'a': 'SSTNode', '_literal': 'Token'}
            Token _literal;
            SSTNode[] _loop0_199_var;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ((star_targets '='))*
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(((star_targets '='))*)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat0(((star_targets '='))*)
                // REMOVE result call (_loop0_199_var = _loop0_199_rule()) != null  // ((star_targets '='))*
                (_loop0_199_var = _loop0_199_rule()) != null  // ((star_targets '='))*
                &&
                // TODO visiting JavaParserGeneratorNamedItem: yield_expr
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(yield_expr)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
                // name = yield_expr
                // REMOVE result call (yield_expr_var = yield_expr_rule()) != null  // yield_expr
                (a = yield_expr_rule()) != null  // yield_expr
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // REMOVE result call (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
                (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_assignment[" + pos + ", " + mark() +" ](level: " + level + ") ((star_targets '='))* yield_expr '=' succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "assignment to yield expression not possible" )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "assignment to yield expression not possible" )
                return (Object)cache.putResult(pos, INVALID_ASSIGNMENT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "'%s' is an illegal expression for augmented assignment" , _PyPegen_get_expr_name ( a ) )
        {
            // visiting Alt: star_expressions augassign (yield_expr | star_expressions)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // name = star_expressions
                // generated call: (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(augassign) - should work
            // name = augassign
            // TODO replacing AugOperator[] --> SSTNode[]
                // generated call: (augassign_var = augassign_rule()) != null  // augassign
            // collecting vars: SSTNode[] augassign_var
            // TODO visiting JavaCallMakerVisitor.visit_Group((yield_expr | star_expressions))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(yield_expr | star_expressions)
                // generated call: (_tmp_200_var = _tmp_200_rule()) != null  // yield_expr | star_expressions
            // collecting vars: None _tmp_200_var
            //    vars: {'a': 'SSTNode', 'augassign_var': 'SSTNode[]', '_tmp_200_var': None}
            Object _tmp_200_var;
            SSTNode a;
            SSTNode[] augassign_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_expressions
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expressions)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
                // name = star_expressions
                // REMOVE result call (star_expressions_var = star_expressions_rule()) != null  // star_expressions
                (a = star_expressions_rule()) != null  // star_expressions
                &&
                // TODO visiting JavaParserGeneratorNamedItem: augassign
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(augassign)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(augassign) - should work
                // name = augassign
                // TODO replacing AugOperator[] --> SSTNode[]
                // REMOVE result call (augassign_var = augassign_rule()) != null  // augassign
                (augassign_var = augassign_rule()) != null  // augassign
                &&
                // TODO visiting JavaParserGeneratorNamedItem: (yield_expr | star_expressions)
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((yield_expr | star_expressions))
                // TODO visiting JavaCallMakerVisitor.visit_Group((yield_expr | star_expressions))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(yield_expr | star_expressions)
                // REMOVE result call (_tmp_200_var = _tmp_200_rule()) != null  // yield_expr | star_expressions
                (_tmp_200_var = _tmp_200_rule()) != null  // yield_expr | star_expressions
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_assignment[" + pos + ", " + mark() +" ](level: " + level + ") star_expressions augassign (yield_expr | star_expressions) succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "'%s' is an illegal expression for augmented assignment" , _PyPegen_get_expr_name ( a ) )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "'%s' is an illegal expression for augmented assignment" , _PyPegen_get_expr_name ( a ) )
                return (Object)cache.putResult(pos, INVALID_ASSIGNMENT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, INVALID_ASSIGNMENT_ID, null);
    }

    // invalid_ann_assign_target: list | tuple | '(' invalid_ann_assign_target ')'
    public SSTNode invalid_ann_assign_target_rule() {
    // isLoop: False, isGather: False, type: SSTNode)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: invalid_ann_assign_target, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_ANN_ASSIGN_TARGET_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode)cache.getResult(pos, INVALID_ANN_ASSIGN_TARGET_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: None
        {
            // visiting Alt: list
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(list) - should work
            // name = list
                // generated call: (list_var = list_rule()) != null  // list
            // collecting vars: SSTNode list_var
            //    vars: {'list_var': 'SSTNode'}
            SSTNode list_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: list
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(list)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(list) - should work
                // name = list
                // REMOVE result call (list_var = list_rule()) != null  // list
                (list_var = list_rule()) != null  // list
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_ann_assign_target[" + pos + ", " + mark() +" ](level: " + level + ") list succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['list_var']
                result = list_var;
                return (SSTNode)cache.putResult(pos, INVALID_ANN_ASSIGN_TARGET_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: tuple
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(tuple) - should work
            // name = tuple
                // generated call: (tuple_var = tuple_rule()) != null  // tuple
            // collecting vars: SSTNode tuple_var
            //    vars: {'tuple_var': 'SSTNode'}
            SSTNode tuple_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: tuple
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(tuple)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(tuple) - should work
                // name = tuple
                // REMOVE result call (tuple_var = tuple_rule()) != null  // tuple
                (tuple_var = tuple_rule()) != null  // tuple
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_ann_assign_target[" + pos + ", " + mark() +" ](level: " + level + ") tuple succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['tuple_var']
                result = tuple_var;
                return (SSTNode)cache.putResult(pos, INVALID_ANN_ASSIGN_TARGET_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: a
        {
            // visiting Alt: '(' invalid_ann_assign_target ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_ann_assign_target) - should work
            // name = invalid_ann_assign_target
                // generated call: (invalid_ann_assign_target_var = invalid_ann_assign_target_rule()) != null  // invalid_ann_assign_target
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // collecting vars: Token _literal_1
            //    vars: {'_literal': 'Token', 'a': 'SSTNode', '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                &&
                // TODO visiting JavaParserGeneratorNamedItem: invalid_ann_assign_target
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_ann_assign_target)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_ann_assign_target) - should work
                // name = invalid_ann_assign_target
                // REMOVE result call (invalid_ann_assign_target_var = invalid_ann_assign_target_rule()) != null  // invalid_ann_assign_target
                (a = invalid_ann_assign_target_rule()) != null  // invalid_ann_assign_target
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
                (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_ann_assign_target[" + pos + ", " + mark() +" ](level: " + level + ") '(' invalid_ann_assign_target ')' succeeded!");
                }
                // alt action: a
                Token endToken = getToken(mark());
                // node.action: a
                result = a;
                return (SSTNode)cache.putResult(pos, INVALID_ANN_ASSIGN_TARGET_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode)cache.putResult(pos, INVALID_ANN_ASSIGN_TARGET_ID, null);
    }

    // invalid_del_stmt: 'del' star_expressions
    public Object invalid_del_stmt_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: invalid_del_stmt, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_DEL_STMT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, INVALID_DEL_STMT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: RAISE_SYNTAX_ERROR_INVALID_TARGET ( DEL_TARGETS , a )
        {
            // visiting Alt: 'del' star_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('del')
                // generated call: (_keyword = expect(KEYWORD_DEL)) != null  // token='del'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // name = star_expressions
                // generated call: (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            // collecting vars: SSTNode a
            //    vars: {'_keyword': 'Token', 'a': 'SSTNode'}
            Token _keyword;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'del'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('del')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('del')
                // REMOVE result call (_keyword = expect(KEYWORD_DEL)) != null  // token='del'
                (_keyword = expect(KEYWORD_DEL)) != null  // token='del'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: star_expressions
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expressions)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
                // name = star_expressions
                // REMOVE result call (star_expressions_var = star_expressions_rule()) != null  // star_expressions
                (a = star_expressions_rule()) != null  // star_expressions
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_del_stmt[" + pos + ", " + mark() +" ](level: " + level + ") 'del' star_expressions succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR_INVALID_TARGET ( DEL_TARGETS , a )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR_INVALID_TARGET ( DEL_TARGETS , a )
                return (Object)cache.putResult(pos, INVALID_DEL_STMT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, INVALID_DEL_STMT_ID, null);
    }

    // invalid_block: NEWLINE !INDENT
    public Object invalid_block_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: invalid_block, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_BLOCK_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, INVALID_BLOCK_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: RAISE_INDENTATION_ERROR ( "expected an indented block" )
        {
            // visiting Alt: NEWLINE !INDENT
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // name = NEWLINE
                // generated call: (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            // collecting vars: Token newline_var
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!INDENT)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(INDENT) - should work
            // name = INDENT
            // lookahead_call_helper call: (indent_var = expect(Token.Kind.INDENT)) != null  // token='INDENT'
            //    call.nodetype: GENERIC_TOKEN
                // generated call: lookahead(false, Token.Kind.INDENT)  // token=INDENT
            // collecting vars: boolean None
            //    vars: {'newline_var': 'Token', None: 'boolean'}
            Token newline_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: NEWLINE
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
                // name = NEWLINE
                // REMOVE result call (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
                (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: !INDENT
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!INDENT)
                // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!INDENT)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(INDENT) - should work
                // name = INDENT
                // lookahead_call_helper call: (indent_var = expect(Token.Kind.INDENT)) != null  // token='INDENT'
                //    call.nodetype: GENERIC_TOKEN
                // REMOVE result call lookahead(false, Token.Kind.INDENT)  // token=INDENT
                lookahead(false, Token.Kind.INDENT)  // token=INDENT
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_block[" + pos + ", " + mark() +" ](level: " + level + ") NEWLINE !INDENT succeeded!");
                }
                // alt action: RAISE_INDENTATION_ERROR ( "expected an indented block" )
                Token endToken = getToken(mark());
                // node.action: RAISE_INDENTATION_ERROR ( "expected an indented block" )
                return (Object)cache.putResult(pos, INVALID_BLOCK_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, INVALID_BLOCK_ID, null);
    }

    // Left-recursive
    // invalid_primary: primary '{'
    public Object invalid_primary_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: invalid_primary, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_PRIMARY_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, INVALID_PRIMARY_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "invalid syntax" )
        {
            // visiting Alt: primary '{'
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
            // name = primary
                // generated call: (primary_var = primary_rule()) != null  // primary
            // collecting vars: SSTNode primary_var
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
                // generated call: (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            // collecting vars: Token a
            //    vars: {'primary_var': 'SSTNode', 'a': 'Token'}
            Token a;
            SSTNode primary_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: primary
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(primary)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(primary) - should work
                // name = primary
                // REMOVE result call (primary_var = primary_rule()) != null  // primary
                (primary_var = primary_rule()) != null  // primary
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '{'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('{')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
                // REMOVE result call (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
                (a = expect(Token.Kind.LBRACE)) != null  // token='{'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_primary[" + pos + ", " + mark() +" ](level: " + level + ") primary '{' succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "invalid syntax" )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "invalid syntax" )
                return (Object)cache.putResult(pos, INVALID_PRIMARY_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, INVALID_PRIMARY_ID, null);
    }

    // invalid_comprehension:
    //     | ('[' | '(' | '{') starred_expression for_if_clauses
    //     | ('[' | '{') star_named_expression ',' star_named_expressions? for_if_clauses
    public Object invalid_comprehension_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: invalid_comprehension, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_COMPREHENSION_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, INVALID_COMPREHENSION_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "iterable unpacking cannot be used in comprehension" )
        {
            // visiting Alt: ('[' | '(' | '{') starred_expression for_if_clauses
            // TODO visiting JavaCallMakerVisitor.visit_Group(('[' | '(' | '{'))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('[' | '(' | '{')
                // generated call: (_tmp_201_var = _tmp_201_rule()) != null  // '[' | '(' | '{'
            // collecting vars: None _tmp_201_var
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(starred_expression) - should work
            // name = starred_expression
                // generated call: (starred_expression_var = starred_expression_rule()) != null  // starred_expression
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
            // name = for_if_clauses
            // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
                // generated call: (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            // collecting vars: SSTNode[] for_if_clauses_var
            //    vars: {'_tmp_201_var': None, 'a': 'SSTNode', 'for_if_clauses_var': 'SSTNode[]'}
            Object _tmp_201_var;
            SSTNode a;
            SSTNode[] for_if_clauses_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ('[' | '(' | '{')
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(('[' | '(' | '{'))
                // TODO visiting JavaCallMakerVisitor.visit_Group(('[' | '(' | '{'))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('[' | '(' | '{')
                // REMOVE result call (_tmp_201_var = _tmp_201_rule()) != null  // '[' | '(' | '{'
                (_tmp_201_var = _tmp_201_rule()) != null  // '[' | '(' | '{'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: starred_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(starred_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(starred_expression) - should work
                // name = starred_expression
                // REMOVE result call (starred_expression_var = starred_expression_rule()) != null  // starred_expression
                (a = starred_expression_rule()) != null  // starred_expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: for_if_clauses
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(for_if_clauses)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
                // name = for_if_clauses
                // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
                // REMOVE result call (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
                (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_comprehension[" + pos + ", " + mark() +" ](level: " + level + ") ('[' | '(' | '{') starred_expression for_if_clauses succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "iterable unpacking cannot be used in comprehension" )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "iterable unpacking cannot be used in comprehension" )
                return (Object)cache.putResult(pos, INVALID_COMPREHENSION_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "did you forget parentheses around the comprehension target?" )
        {
            // visiting Alt: ('[' | '{') star_named_expression ',' star_named_expressions? for_if_clauses
            // TODO visiting JavaCallMakerVisitor.visit_Group(('[' | '{'))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('[' | '{')
                // generated call: (_tmp_202_var = _tmp_202_rule()) != null  // '[' | '{'
            // collecting vars: None _tmp_202_var
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
            // name = star_named_expression
                // generated call: (star_named_expression_var = star_named_expression_rule()) != null  // star_named_expression
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_named_expressions?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_named_expressions)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_203_var = _tmp_203_rule()) != null  // star_named_expressions
                // generated call: ((_opt_var = _tmp_203_rule()) != null || _opt_var == null)  // star_named_expressions?
            // collecting vars: None _opt_var
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
            // name = for_if_clauses
            // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
                // generated call: (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            // collecting vars: SSTNode[] for_if_clauses_var
            //    vars: {'_tmp_202_var': None, 'a': 'SSTNode', '_literal': 'Token', '_opt_var': None, 'for_if_clauses_var': 'SSTNode[]'}
            Token _literal;
            Object _opt_var;
            Object _tmp_202_var;
            SSTNode a;
            SSTNode[] for_if_clauses_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ('[' | '{')
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(('[' | '{'))
                // TODO visiting JavaCallMakerVisitor.visit_Group(('[' | '{'))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('[' | '{')
                // REMOVE result call (_tmp_202_var = _tmp_202_rule()) != null  // '[' | '{'
                (_tmp_202_var = _tmp_202_rule()) != null  // '[' | '{'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: star_named_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_named_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
                // name = star_named_expression
                // REMOVE result call (star_named_expression_var = star_named_expression_rule()) != null  // star_named_expression
                (a = star_named_expression_rule()) != null  // star_named_expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: star_named_expressions?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_named_expressions?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_named_expressions?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_named_expressions)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_203_var = _tmp_203_rule()) != null  // star_named_expressions
                // REMOVE result call ((_opt_var = _tmp_203_rule()) != null || _opt_var == null)  // star_named_expressions?
                ((_opt_var = _tmp_203_rule()) != null || _opt_var == null)  // star_named_expressions?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: for_if_clauses
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(for_if_clauses)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
                // name = for_if_clauses
                // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
                // REMOVE result call (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
                (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_comprehension[" + pos + ", " + mark() +" ](level: " + level + ") ('[' | '{') star_named_expression ',' star_named_expressions? for_if_clauses succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "did you forget parentheses around the comprehension target?" )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "did you forget parentheses around the comprehension target?" )
                return (Object)cache.putResult(pos, INVALID_COMPREHENSION_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, INVALID_COMPREHENSION_ID, null);
    }

    // invalid_dict_comprehension: '{' '**' bitwise_or for_if_clauses '}'
    public Object invalid_dict_comprehension_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: invalid_dict_comprehension, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_DICT_COMPREHENSION_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, INVALID_DICT_COMPREHENSION_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "dict unpacking cannot be used in dict comprehension" )
        {
            // visiting Alt: '{' '**' bitwise_or for_if_clauses '}'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
                // generated call: (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
                // generated call: (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            // collecting vars: Token a
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // name = bitwise_or
                // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // collecting vars: SSTNode bitwise_or_var
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
            // name = for_if_clauses
            // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
                // generated call: (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            // collecting vars: SSTNode[] for_if_clauses_var
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
                // generated call: (_literal = expect(Token.Kind.RBRACE)) != null  // token='}'
            // collecting vars: Token _literal_1
            //    vars: {'_literal': 'Token', 'a': 'Token', 'bitwise_or_var': 'SSTNode', 'for_if_clauses_var': 'SSTNode[]', '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            Token a;
            SSTNode bitwise_or_var;
            SSTNode[] for_if_clauses_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '{'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('{')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
                // REMOVE result call (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
                (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '**'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('**')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
                // REMOVE result call (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
                (a = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
                // name = bitwise_or
                // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
                (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
                &&
                // TODO visiting JavaParserGeneratorNamedItem: for_if_clauses
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(for_if_clauses)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
                // name = for_if_clauses
                // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
                // REMOVE result call (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
                (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '}'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('}')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('}')
                // REMOVE result call (_literal = expect(Token.Kind.RBRACE)) != null  // token='}'
                (_literal_1 = expect(Token.Kind.RBRACE)) != null  // token='}'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_dict_comprehension[" + pos + ", " + mark() +" ](level: " + level + ") '{' '**' bitwise_or for_if_clauses '}' succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "dict unpacking cannot be used in dict comprehension" )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "dict unpacking cannot be used in dict comprehension" )
                return (Object)cache.putResult(pos, INVALID_DICT_COMPREHENSION_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, INVALID_DICT_COMPREHENSION_ID, null);
    }

    // invalid_parameters: param_no_default* invalid_parameters_helper param_no_default
    public Object invalid_parameters_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: invalid_parameters, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_PARAMETERS_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, INVALID_PARAMETERS_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: RAISE_SYNTAX_ERROR ( "non-default argument follows default argument" )
        {
            // visiting Alt: param_no_default* invalid_parameters_helper param_no_default
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_no_default*)
                // generated call: (_loop0_204_var = _loop0_204_rule()) != null  // param_no_default*
            // collecting vars: SSTNode[] _loop0_204_var
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_parameters_helper) - should work
            // name = invalid_parameters_helper
                // generated call: (invalid_parameters_helper_var = invalid_parameters_helper_rule()) != null  // invalid_parameters_helper
            // collecting vars: None invalid_parameters_helper_var
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
            // name = param_no_default
            // TODO replacing arg_ty --> SSTNode
                // generated call: (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            // collecting vars: SSTNode param_no_default_var
            //    vars: {'_loop0_204_var': 'SSTNode[]', 'invalid_parameters_helper_var': None, 'param_no_default_var': 'SSTNode'}
            SSTNode[] _loop0_204_var;
            Object invalid_parameters_helper_var;
            SSTNode param_no_default_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: param_no_default*
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default*)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat0(param_no_default*)
                // REMOVE result call (_loop0_204_var = _loop0_204_rule()) != null  // param_no_default*
                (_loop0_204_var = _loop0_204_rule()) != null  // param_no_default*
                &&
                // TODO visiting JavaParserGeneratorNamedItem: invalid_parameters_helper
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_parameters_helper)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_parameters_helper) - should work
                // name = invalid_parameters_helper
                // REMOVE result call (invalid_parameters_helper_var = invalid_parameters_helper_rule()) != null  // invalid_parameters_helper
                (invalid_parameters_helper_var = invalid_parameters_helper_rule()) != null  // invalid_parameters_helper
                &&
                // TODO visiting JavaParserGeneratorNamedItem: param_no_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
                // name = param_no_default
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (param_no_default_var = param_no_default_rule()) != null  // param_no_default
                (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_parameters[" + pos + ", " + mark() +" ](level: " + level + ") param_no_default* invalid_parameters_helper param_no_default succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR ( "non-default argument follows default argument" )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR ( "non-default argument follows default argument" )
                return (Object)cache.putResult(pos, INVALID_PARAMETERS_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, INVALID_PARAMETERS_ID, null);
    }

    // invalid_parameters_helper: slash_with_default | param_with_default+
    public Object invalid_parameters_helper_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: invalid_parameters_helper, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_PARAMETERS_HELPER_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, INVALID_PARAMETERS_HELPER_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_singleton_seq ( p , a )
        {
            // visiting Alt: slash_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slash_with_default) - should work
            // name = slash_with_default
            // TODO replacing SlashWithDefault[] --> SSTNode[]
                // generated call: (slash_with_default_var = slash_with_default_rule()) != null  // slash_with_default
            // collecting vars: SSTNode[] a
            //    vars: {'a': 'SSTNode[]'}
            SSTNode[] a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: slash_with_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(slash_with_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slash_with_default) - should work
                // name = slash_with_default
                // TODO replacing SlashWithDefault[] --> SSTNode[]
                // REMOVE result call (slash_with_default_var = slash_with_default_rule()) != null  // slash_with_default
                (a = slash_with_default_rule()) != null  // slash_with_default
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_parameters_helper[" + pos + ", " + mark() +" ](level: " + level + ") slash_with_default succeeded!");
                }
                // alt action: _PyPegen_singleton_seq ( p , a )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_singleton_seq ( p , a )
                return (Object)cache.putResult(pos, INVALID_PARAMETERS_HELPER_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: param_with_default+
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_with_default+)
                // generated call: (_loop1_205_var = _loop1_205_rule()) != null  // param_with_default+
            // collecting vars: SSTNode[] _loop1_205_var
            //    vars: {'_loop1_205_var': 'SSTNode[]'}
            SSTNode[] _loop1_205_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: param_with_default+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_with_default+)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat1(param_with_default+)
                // REMOVE result call (_loop1_205_var = _loop1_205_rule()) != null  // param_with_default+
                (_loop1_205_var = _loop1_205_rule()) != null  // param_with_default+
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_parameters_helper[" + pos + ", " + mark() +" ](level: " + level + ") param_with_default+ succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_loop1_205_var']
                result = _loop1_205_var;
                return (Object)cache.putResult(pos, INVALID_PARAMETERS_HELPER_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, INVALID_PARAMETERS_HELPER_ID, null);
    }

    // invalid_lambda_parameters:
    //     | lambda_param_no_default* invalid_lambda_parameters_helper lambda_param_no_default
    public Object invalid_lambda_parameters_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: invalid_lambda_parameters, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_LAMBDA_PARAMETERS_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, INVALID_LAMBDA_PARAMETERS_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: RAISE_SYNTAX_ERROR ( "non-default argument follows default argument" )
        {
            // visiting Alt: lambda_param_no_default* invalid_lambda_parameters_helper lambda_param_no_default
            // TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_no_default*)
                // generated call: (_loop0_206_var = _loop0_206_rule()) != null  // lambda_param_no_default*
            // collecting vars: SSTNode[] _loop0_206_var
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_lambda_parameters_helper) - should work
            // name = invalid_lambda_parameters_helper
                // generated call: (invalid_lambda_parameters_helper_var = invalid_lambda_parameters_helper_rule()) != null  // invalid_lambda_parameters_helper
            // collecting vars: None invalid_lambda_parameters_helper_var
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
            // name = lambda_param_no_default
            // TODO replacing arg_ty --> SSTNode
                // generated call: (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            // collecting vars: SSTNode lambda_param_no_default_var
            //    vars: {'_loop0_206_var': 'SSTNode[]', 'invalid_lambda_parameters_helper_var': None, 'lambda_param_no_default_var': 'SSTNode'}
            SSTNode[] _loop0_206_var;
            Object invalid_lambda_parameters_helper_var;
            SSTNode lambda_param_no_default_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default*
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default*)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat0(lambda_param_no_default*)
                // REMOVE result call (_loop0_206_var = _loop0_206_rule()) != null  // lambda_param_no_default*
                (_loop0_206_var = _loop0_206_rule()) != null  // lambda_param_no_default*
                &&
                // TODO visiting JavaParserGeneratorNamedItem: invalid_lambda_parameters_helper
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_lambda_parameters_helper)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_lambda_parameters_helper) - should work
                // name = invalid_lambda_parameters_helper
                // REMOVE result call (invalid_lambda_parameters_helper_var = invalid_lambda_parameters_helper_rule()) != null  // invalid_lambda_parameters_helper
                (invalid_lambda_parameters_helper_var = invalid_lambda_parameters_helper_rule()) != null  // invalid_lambda_parameters_helper
                &&
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
                // name = lambda_param_no_default
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
                (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_lambda_parameters[" + pos + ", " + mark() +" ](level: " + level + ") lambda_param_no_default* invalid_lambda_parameters_helper lambda_param_no_default succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR ( "non-default argument follows default argument" )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR ( "non-default argument follows default argument" )
                return (Object)cache.putResult(pos, INVALID_LAMBDA_PARAMETERS_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, INVALID_LAMBDA_PARAMETERS_ID, null);
    }

    // invalid_lambda_parameters_helper:
    //     | lambda_slash_with_default
    //     | lambda_param_with_default+
    public Object invalid_lambda_parameters_helper_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: invalid_lambda_parameters_helper, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_LAMBDA_PARAMETERS_HELPER_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, INVALID_LAMBDA_PARAMETERS_HELPER_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_singleton_seq ( p , a )
        {
            // visiting Alt: lambda_slash_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_slash_with_default) - should work
            // name = lambda_slash_with_default
            // TODO replacing SlashWithDefault[] --> SSTNode[]
                // generated call: (lambda_slash_with_default_var = lambda_slash_with_default_rule()) != null  // lambda_slash_with_default
            // collecting vars: SSTNode[] a
            //    vars: {'a': 'SSTNode[]'}
            SSTNode[] a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_slash_with_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_slash_with_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_slash_with_default) - should work
                // name = lambda_slash_with_default
                // TODO replacing SlashWithDefault[] --> SSTNode[]
                // REMOVE result call (lambda_slash_with_default_var = lambda_slash_with_default_rule()) != null  // lambda_slash_with_default
                (a = lambda_slash_with_default_rule()) != null  // lambda_slash_with_default
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_lambda_parameters_helper[" + pos + ", " + mark() +" ](level: " + level + ") lambda_slash_with_default succeeded!");
                }
                // alt action: _PyPegen_singleton_seq ( p , a )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_singleton_seq ( p , a )
                return (Object)cache.putResult(pos, INVALID_LAMBDA_PARAMETERS_HELPER_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: lambda_param_with_default+
            // TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_with_default+)
                // generated call: (_loop1_207_var = _loop1_207_rule()) != null  // lambda_param_with_default+
            // collecting vars: SSTNode[] _loop1_207_var
            //    vars: {'_loop1_207_var': 'SSTNode[]'}
            SSTNode[] _loop1_207_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_with_default+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_with_default+)
                // TODO visiting JavaCallMakerVisitor.visit_Repeat1(lambda_param_with_default+)
                // REMOVE result call (_loop1_207_var = _loop1_207_rule()) != null  // lambda_param_with_default+
                (_loop1_207_var = _loop1_207_rule()) != null  // lambda_param_with_default+
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_lambda_parameters_helper[" + pos + ", " + mark() +" ](level: " + level + ") lambda_param_with_default+ succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_loop1_207_var']
                result = _loop1_207_var;
                return (Object)cache.putResult(pos, INVALID_LAMBDA_PARAMETERS_HELPER_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, INVALID_LAMBDA_PARAMETERS_HELPER_ID, null);
    }

    // invalid_star_etc: '*' (')' | ',' (')' | '**')) | '*' ',' TYPE_COMMENT
    public Object invalid_star_etc_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: invalid_star_etc, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_STAR_ETC_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, INVALID_STAR_ETC_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: RAISE_SYNTAX_ERROR ( "named arguments must follow bare *" )
        {
            // visiting Alt: '*' (')' | ',' (')' | '**'))
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // collecting vars: Token _literal
            // TODO visiting JavaCallMakerVisitor.visit_Group((')' | ',' (')' | '**')))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(')' | ',' (')' | '**'))
                // generated call: (_tmp_208_var = _tmp_208_rule()) != null  // ')' | ',' (')' | '**')
            // collecting vars: None _tmp_208_var
            //    vars: {'_literal': 'Token', '_tmp_208_var': None}
            Token _literal;
            Object _tmp_208_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '*'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: (')' | ',' (')' | '**'))
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((')' | ',' (')' | '**')))
                // TODO visiting JavaCallMakerVisitor.visit_Group((')' | ',' (')' | '**')))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(')' | ',' (')' | '**'))
                // REMOVE result call (_tmp_208_var = _tmp_208_rule()) != null  // ')' | ',' (')' | '**')
                (_tmp_208_var = _tmp_208_rule()) != null  // ')' | ',' (')' | '**')
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_star_etc[" + pos + ", " + mark() +" ](level: " + level + ") '*' (')' | ',' (')' | '**')) succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR ( "named arguments must follow bare *" )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR ( "named arguments must follow bare *" )
                return (Object)cache.putResult(pos, INVALID_STAR_ETC_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: RAISE_SYNTAX_ERROR ( "bare * has associated type comment" )
        {
            // visiting Alt: '*' ',' TYPE_COMMENT
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal_1
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // name = TYPE_COMMENT
                // generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            // collecting vars: Token type_comment_var
            //    vars: {'_literal': 'Token', '_literal_1': 'Token', 'type_comment_var': 'Token'}
            Token _literal;
            Token _literal_1;
            Token type_comment_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '*'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal_1 = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
                // name = TYPE_COMMENT
                // REMOVE result call (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
                (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_star_etc[" + pos + ", " + mark() +" ](level: " + level + ") '*' ',' TYPE_COMMENT succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR ( "bare * has associated type comment" )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR ( "bare * has associated type comment" )
                return (Object)cache.putResult(pos, INVALID_STAR_ETC_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, INVALID_STAR_ETC_ID, null);
    }

    // invalid_lambda_star_etc: '*' (':' | ',' (':' | '**'))
    public Object invalid_lambda_star_etc_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: invalid_lambda_star_etc, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_LAMBDA_STAR_ETC_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, INVALID_LAMBDA_STAR_ETC_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: RAISE_SYNTAX_ERROR ( "named arguments must follow bare *" )
        {
            // visiting Alt: '*' (':' | ',' (':' | '**'))
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // collecting vars: Token _literal
            // TODO visiting JavaCallMakerVisitor.visit_Group((':' | ',' (':' | '**')))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(':' | ',' (':' | '**'))
                // generated call: (_tmp_209_var = _tmp_209_rule()) != null  // ':' | ',' (':' | '**')
            // collecting vars: None _tmp_209_var
            //    vars: {'_literal': 'Token', '_tmp_209_var': None}
            Token _literal;
            Object _tmp_209_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '*'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: (':' | ',' (':' | '**'))
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((':' | ',' (':' | '**')))
                // TODO visiting JavaCallMakerVisitor.visit_Group((':' | ',' (':' | '**')))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(':' | ',' (':' | '**'))
                // REMOVE result call (_tmp_209_var = _tmp_209_rule()) != null  // ':' | ',' (':' | '**')
                (_tmp_209_var = _tmp_209_rule()) != null  // ':' | ',' (':' | '**')
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_lambda_star_etc[" + pos + ", " + mark() +" ](level: " + level + ") '*' (':' | ',' (':' | '**')) succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR ( "named arguments must follow bare *" )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR ( "named arguments must follow bare *" )
                return (Object)cache.putResult(pos, INVALID_LAMBDA_STAR_ETC_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, INVALID_LAMBDA_STAR_ETC_ID, null);
    }

    // invalid_double_type_comments: TYPE_COMMENT NEWLINE TYPE_COMMENT NEWLINE INDENT
    public Object invalid_double_type_comments_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: invalid_double_type_comments, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_DOUBLE_TYPE_COMMENTS_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, INVALID_DOUBLE_TYPE_COMMENTS_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: RAISE_SYNTAX_ERROR ( "Cannot have two type comments on def" )
        {
            // visiting Alt: TYPE_COMMENT NEWLINE TYPE_COMMENT NEWLINE INDENT
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // name = TYPE_COMMENT
                // generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            // collecting vars: Token type_comment_var
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // name = NEWLINE
                // generated call: (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            // collecting vars: Token newline_var
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // name = TYPE_COMMENT
                // generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            // collecting vars: Token type_comment_var_1
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // name = NEWLINE
                // generated call: (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            // collecting vars: Token newline_var_1
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(INDENT) - should work
            // name = INDENT
                // generated call: (indent_var = expect(Token.Kind.INDENT)) != null  // token='INDENT'
            // collecting vars: Token indent_var
            //    vars: {'type_comment_var': 'Token', 'newline_var': 'Token', 'type_comment_var_1': 'Token', 'newline_var_1': 'Token', 'indent_var': 'Token'}
            Token indent_var;
            Token newline_var;
            Token newline_var_1;
            Token type_comment_var;
            Token type_comment_var_1;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
                // name = TYPE_COMMENT
                // REMOVE result call (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
                (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NEWLINE
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
                // name = NEWLINE
                // REMOVE result call (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
                (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
                // name = TYPE_COMMENT
                // REMOVE result call (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
                (type_comment_var_1 = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NEWLINE
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
                // name = NEWLINE
                // REMOVE result call (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
                (newline_var_1 = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: INDENT
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(INDENT)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(INDENT) - should work
                // name = INDENT
                // REMOVE result call (indent_var = expect(Token.Kind.INDENT)) != null  // token='INDENT'
                (indent_var = expect(Token.Kind.INDENT)) != null  // token='INDENT'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_double_type_comments[" + pos + ", " + mark() +" ](level: " + level + ") TYPE_COMMENT NEWLINE TYPE_COMMENT NEWLINE INDENT succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR ( "Cannot have two type comments on def" )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR ( "Cannot have two type comments on def" )
                return (Object)cache.putResult(pos, INVALID_DOUBLE_TYPE_COMMENTS_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, INVALID_DOUBLE_TYPE_COMMENTS_ID, null);
    }

    // invalid_with_item: expression 'as' expression &(',' | ')' | ':')
    public Object invalid_with_item_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: invalid_with_item, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_WITH_ITEM_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, INVALID_WITH_ITEM_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: RAISE_SYNTAX_ERROR_INVALID_TARGET ( STAR_TARGETS , a )
        {
            // visiting Alt: expression 'as' expression &(',' | ')' | ':')
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode expression_var
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
                // generated call: (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode a
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&(',' | ')' | ':'))
                // generated call: None
            // collecting vars: None None
            //    vars: {'expression_var': 'SSTNode', '_keyword': 'Token', 'a': 'SSTNode', None: None}
            Token _keyword;
            SSTNode a;
            SSTNode expression_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (expression_var = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: 'as'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('as')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
                // REMOVE result call (_keyword = expect(KEYWORD_AS)) != null  // token='as'
                (_keyword = expect(KEYWORD_AS)) != null  // token='as'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (a = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: &(',' | ')' | ':')
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&(',' | ')' | ':'))
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&(',' | ')' | ':'))
                // TODO call is not created &(',' | ')' | ':') -> creates artificial
                true
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_with_item[" + pos + ", " + mark() +" ](level: " + level + ") expression 'as' expression &(',' | ')' | ':') succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR_INVALID_TARGET ( STAR_TARGETS , a )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR_INVALID_TARGET ( STAR_TARGETS , a )
                return (Object)cache.putResult(pos, INVALID_WITH_ITEM_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, INVALID_WITH_ITEM_ID, null);
    }

    // invalid_for_target: ASYNC? 'for' star_expressions
    public Object invalid_for_target_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: invalid_for_target, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_FOR_TARGET_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, INVALID_FOR_TARGET_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: RAISE_SYNTAX_ERROR_INVALID_TARGET ( FOR_TARGETS , a )
        {
            // visiting Alt: ASYNC? 'for' star_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(ASYNC?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
            // name = ASYNC
                // JavaCallMakerVisitor.visit_Opt.generated call: (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
                // generated call: ((_opt_var = expect(Token.Kind.ASYNC)) != null || _opt_var == null)  // ASYNC?
            // collecting vars: None _opt_var
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('for')
                // generated call: (_keyword = expect(KEYWORD_FOR)) != null  // token='for'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // name = star_expressions
                // generated call: (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            // collecting vars: SSTNode a
            //    vars: {'_opt_var': None, '_keyword': 'Token', 'a': 'SSTNode'}
            Token _keyword;
            Object _opt_var;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ASYNC?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(ASYNC?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(ASYNC?)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
                // name = ASYNC
                    // JavaCallMakerVisitor.visit_Opt.generated call: (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
                // REMOVE result call ((_opt_var = expect(Token.Kind.ASYNC)) != null || _opt_var == null)  // ASYNC?
                ((_opt_var = expect(Token.Kind.ASYNC)) != null || _opt_var == null)  // ASYNC?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: 'for'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('for')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('for')
                // REMOVE result call (_keyword = expect(KEYWORD_FOR)) != null  // token='for'
                (_keyword = expect(KEYWORD_FOR)) != null  // token='for'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: star_expressions
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expressions)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
                // name = star_expressions
                // REMOVE result call (star_expressions_var = star_expressions_rule()) != null  // star_expressions
                (a = star_expressions_rule()) != null  // star_expressions
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_for_target[" + pos + ", " + mark() +" ](level: " + level + ") ASYNC? 'for' star_expressions succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR_INVALID_TARGET ( FOR_TARGETS , a )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR_INVALID_TARGET ( FOR_TARGETS , a )
                return (Object)cache.putResult(pos, INVALID_FOR_TARGET_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, INVALID_FOR_TARGET_ID, null);
    }

    // invalid_group: '(' starred_expression ')' | '(' '**' expression ')'
    public Object invalid_group_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: invalid_group, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_GROUP_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, INVALID_GROUP_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "cannot use starred expression here" )
        {
            // visiting Alt: '(' starred_expression ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(starred_expression) - should work
            // name = starred_expression
                // generated call: (starred_expression_var = starred_expression_rule()) != null  // starred_expression
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // collecting vars: Token _literal_1
            //    vars: {'_literal': 'Token', 'a': 'SSTNode', '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                &&
                // TODO visiting JavaParserGeneratorNamedItem: starred_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(starred_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(starred_expression) - should work
                // name = starred_expression
                // REMOVE result call (starred_expression_var = starred_expression_rule()) != null  // starred_expression
                (a = starred_expression_rule()) != null  // starred_expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
                (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_group[" + pos + ", " + mark() +" ](level: " + level + ") '(' starred_expression ')' succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "cannot use starred expression here" )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "cannot use starred expression here" )
                return (Object)cache.putResult(pos, INVALID_GROUP_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "cannot use double starred expression here" )
        {
            // visiting Alt: '(' '**' expression ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
                // generated call: (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            // collecting vars: Token a
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode expression_var
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // collecting vars: Token _literal_1
            //    vars: {'_literal': 'Token', 'a': 'Token', 'expression_var': 'SSTNode', '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            Token a;
            SSTNode expression_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '**'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('**')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
                // REMOVE result call (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
                (a = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (expression_var = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
                (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_group[" + pos + ", " + mark() +" ](level: " + level + ") '(' '**' expression ')' succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "cannot use double starred expression here" )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "cannot use double starred expression here" )
                return (Object)cache.putResult(pos, INVALID_GROUP_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, INVALID_GROUP_ID, null);
    }

    // invalid_import_from_targets: import_from_as_names ','
    public Object invalid_import_from_targets_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: invalid_import_from_targets, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_IMPORT_FROM_TARGETS_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, INVALID_IMPORT_FROM_TARGETS_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: RAISE_SYNTAX_ERROR ( "trailing comma not allowed without surrounding parentheses" )
        {
            // visiting Alt: import_from_as_names ','
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_as_names) - should work
            // name = import_from_as_names
            // TODO replacing asdl_alias_seq[] --> SSTNode[]
                // generated call: (import_from_as_names_var = import_from_as_names_rule()) != null  // import_from_as_names
            // collecting vars: SSTNode[] import_from_as_names_var
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            //    vars: {'import_from_as_names_var': 'SSTNode[]', '_literal': 'Token'}
            Token _literal;
            SSTNode[] import_from_as_names_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: import_from_as_names
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(import_from_as_names)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_as_names) - should work
                // name = import_from_as_names
                // TODO replacing asdl_alias_seq[] --> SSTNode[]
                // REMOVE result call (import_from_as_names_var = import_from_as_names_rule()) != null  // import_from_as_names
                (import_from_as_names_var = import_from_as_names_rule()) != null  // import_from_as_names
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_import_from_targets[" + pos + ", " + mark() +" ](level: " + level + ") import_from_as_names ',' succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR ( "trailing comma not allowed without surrounding parentheses" )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR ( "trailing comma not allowed without surrounding parentheses" )
                return (Object)cache.putResult(pos, INVALID_IMPORT_FROM_TARGETS_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, INVALID_IMPORT_FROM_TARGETS_ID, null);
    }

    // invalid_with_stmt:
    //     | ASYNC? 'with' ','.(expression ['as' star_target])+ &&':'
    //     | ASYNC? 'with' '(' ','.(expressions ['as' star_target])+ ','? ')' &&':'
    public Object invalid_with_stmt_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: invalid_with_stmt, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_WITH_STMT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, INVALID_WITH_STMT_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ASYNC? 'with' ','.(expression ['as' star_target])+ &&':'
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(ASYNC?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(ASYNC)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_210_var = _tmp_210_rule()) != null  // ASYNC
                // generated call: ((_opt_var = _tmp_210_rule()) != null || _opt_var == null)  // ASYNC?
            // collecting vars: None _opt_var
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
                // generated call: (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.(expression ['as' star_target])+)
                // generated call: (_gather_211_var = _gather_211_rule()) != null  // ','.(expression ['as' star_target])+
            // collecting vars: SSTNode[] _gather_211_var
            // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
                // generated call: None
            // collecting vars: None None
            //    vars: {'_opt_var': None, '_keyword': 'Token', '_gather_211_var': 'SSTNode[]', None: None}
            SSTNode[] _gather_211_var;
            Token _keyword;
            Object _opt_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ASYNC?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(ASYNC?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(ASYNC?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(ASYNC)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_210_var = _tmp_210_rule()) != null  // ASYNC
                // REMOVE result call ((_opt_var = _tmp_210_rule()) != null || _opt_var == null)  // ASYNC?
                ((_opt_var = _tmp_210_rule()) != null || _opt_var == null)  // ASYNC?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: 'with'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('with')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
                // REMOVE result call (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
                (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','.(expression ['as' star_target])+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.(expression ['as' star_target])+)
                // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.(expression ['as' star_target])+)
                // REMOVE result call (_gather_211_var = _gather_211_rule()) != null  // ','.(expression ['as' star_target])+
                (_gather_211_var = _gather_211_rule()) != null  // ','.(expression ['as' star_target])+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: &&':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&&':')
                // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
                // TODO call is not created &&':' -> creates artificial
                true
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_with_stmt[" + pos + ", " + mark() +" ](level: " + level + ") ASYNC? 'with' ','.(expression ['as' star_target])+ &&':' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_opt_var', '_keyword', '_gather_211_var']
                // TODO handle default action if there is more variables
                return (Object)cache.putResult(pos, INVALID_WITH_STMT_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ASYNC? 'with' '(' ','.(expressions ['as' star_target])+ ','? ')' &&':'
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(ASYNC?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(ASYNC)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_213_var = _tmp_213_rule()) != null  // ASYNC
                // generated call: ((_opt_var = _tmp_213_rule()) != null || _opt_var == null)  // ASYNC?
            // collecting vars: None _opt_var
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
                // generated call: (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.(expressions ['as' star_target])+)
                // generated call: (_gather_214_var = _gather_214_rule()) != null  // ','.(expressions ['as' star_target])+
            // collecting vars: SSTNode[] _gather_214_var
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                // generated call: ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
            // collecting vars: None _opt_var_1
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // collecting vars: Token _literal_1
            // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
                // generated call: None
            // collecting vars: None None
            //    vars: {'_opt_var': None, '_keyword': 'Token', '_literal': 'Token', '_gather_214_var': 'SSTNode[]', '_opt_var_1': None, '_literal_1': 'Token', None: None}
            SSTNode[] _gather_214_var;
            Token _keyword;
            Token _literal;
            Token _literal_1;
            Object _opt_var;
            Object _opt_var_1;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ASYNC?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(ASYNC?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(ASYNC?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(ASYNC)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_213_var = _tmp_213_rule()) != null  // ASYNC
                // REMOVE result call ((_opt_var = _tmp_213_rule()) != null || _opt_var == null)  // ASYNC?
                ((_opt_var = _tmp_213_rule()) != null || _opt_var == null)  // ASYNC?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: 'with'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('with')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('with')
                // REMOVE result call (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
                (_keyword = expect(KEYWORD_WITH)) != null  // token='with'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','.(expressions ['as' star_target])+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.(expressions ['as' star_target])+)
                // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.(expressions ['as' star_target])+)
                // REMOVE result call (_gather_214_var = _gather_214_rule()) != null  // ','.(expressions ['as' star_target])+
                (_gather_214_var = _gather_214_rule()) != null  // ','.(expressions ['as' star_target])+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(','?)
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                // REMOVE result call ((_opt_var = expect(Token.Kind.COMMA)) != null || _opt_var == null)  // ','?
                ((_opt_var_1 = expect(Token.Kind.COMMA)) != null || _opt_var_1 == null)  // ','?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
                (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: &&':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&&':')
                // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
                // TODO call is not created &&':' -> creates artificial
                true
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_with_stmt[" + pos + ", " + mark() +" ](level: " + level + ") ASYNC? 'with' '(' ','.(expressions ['as' star_target])+ ','? ')' &&':' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_opt_var', '_keyword', '_literal', '_gather_214_var', '_opt_var_1', '_literal_1']
                // TODO handle default action if there is more variables
                return (Object)cache.putResult(pos, INVALID_WITH_STMT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, INVALID_WITH_STMT_ID, null);
    }

    // invalid_except_block:
    //     | 'except' expression ',' expressions ['as' NAME] ':'
    //     | 'except' expression ['as' NAME] &&':'
    //     | 'except' &&':'
    public Object invalid_except_block_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: invalid_except_block, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_EXCEPT_BLOCK_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, INVALID_EXCEPT_BLOCK_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "exception group must be parenthesized" )
        {
            // visiting Alt: 'except' expression ',' expressions ['as' NAME] ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('except')
                // generated call: (_keyword = expect(KEYWORD_EXCEPT)) != null  // token='except'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode a
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expressions) - should work
            // name = expressions
                // generated call: (expressions_var = expressions_rule()) != null  // expressions
            // collecting vars: SSTNode expressions_var
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' NAME])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' NAME)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_216_var = _tmp_216_rule()) != null  // 'as' NAME
                // generated call: ((_opt_var = _tmp_216_rule()) != null || _opt_var == null)  // ['as' NAME]
            // collecting vars: None _opt_var
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // collecting vars: Token _literal_1
            //    vars: {'_keyword': 'Token', 'a': 'SSTNode', '_literal': 'Token', 'expressions_var': 'SSTNode', '_opt_var': None, '_literal_1': 'Token'}
            Token _keyword;
            Token _literal;
            Token _literal_1;
            Object _opt_var;
            SSTNode a;
            SSTNode expressions_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'except'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('except')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('except')
                // REMOVE result call (_keyword = expect(KEYWORD_EXCEPT)) != null  // token='except'
                (_keyword = expect(KEYWORD_EXCEPT)) != null  // token='except'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (a = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expressions
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expressions)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expressions) - should work
                // name = expressions
                // REMOVE result call (expressions_var = expressions_rule()) != null  // expressions
                (expressions_var = expressions_rule()) != null  // expressions
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ['as' NAME]
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(['as' NAME])
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' NAME])
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' NAME)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_216_var = _tmp_216_rule()) != null  // 'as' NAME
                // REMOVE result call ((_opt_var = _tmp_216_rule()) != null || _opt_var == null)  // ['as' NAME]
                ((_opt_var = _tmp_216_rule()) != null || _opt_var == null)  // ['as' NAME]
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                (_literal_1 = expect(Token.Kind.COLON)) != null  // token=':'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_except_block[" + pos + ", " + mark() +" ](level: " + level + ") 'except' expression ',' expressions ['as' NAME] ':' succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "exception group must be parenthesized" )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "exception group must be parenthesized" )
                return (Object)cache.putResult(pos, INVALID_EXCEPT_BLOCK_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: 'except' expression ['as' NAME] &&':'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('except')
                // generated call: (_keyword = expect(KEYWORD_EXCEPT)) != null  // token='except'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode expression_var
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' NAME])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' NAME)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_217_var = _tmp_217_rule()) != null  // 'as' NAME
                // generated call: ((_opt_var = _tmp_217_rule()) != null || _opt_var == null)  // ['as' NAME]
            // collecting vars: None _opt_var
            // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
                // generated call: None
            // collecting vars: None None
            //    vars: {'_keyword': 'Token', 'expression_var': 'SSTNode', '_opt_var': None, None: None}
            Token _keyword;
            Object _opt_var;
            SSTNode expression_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'except'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('except')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('except')
                // REMOVE result call (_keyword = expect(KEYWORD_EXCEPT)) != null  // token='except'
                (_keyword = expect(KEYWORD_EXCEPT)) != null  // token='except'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (expression_var = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ['as' NAME]
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(['as' NAME])
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' NAME])
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' NAME)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_217_var = _tmp_217_rule()) != null  // 'as' NAME
                // REMOVE result call ((_opt_var = _tmp_217_rule()) != null || _opt_var == null)  // ['as' NAME]
                ((_opt_var = _tmp_217_rule()) != null || _opt_var == null)  // ['as' NAME]
                &&
                // TODO visiting JavaParserGeneratorNamedItem: &&':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&&':')
                // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
                // TODO call is not created &&':' -> creates artificial
                true
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_except_block[" + pos + ", " + mark() +" ](level: " + level + ") 'except' expression ['as' NAME] &&':' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_keyword', 'expression_var', '_opt_var']
                // TODO handle default action if there is more variables
                return (Object)cache.putResult(pos, INVALID_EXCEPT_BLOCK_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: 'except' &&':'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('except')
                // generated call: (_keyword = expect(KEYWORD_EXCEPT)) != null  // token='except'
            // collecting vars: Token _keyword
            // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
                // generated call: None
            // collecting vars: None None
            //    vars: {'_keyword': 'Token', None: None}
            Token _keyword;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'except'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('except')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('except')
                // REMOVE result call (_keyword = expect(KEYWORD_EXCEPT)) != null  // token='except'
                (_keyword = expect(KEYWORD_EXCEPT)) != null  // token='except'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: &&':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&&':')
                // TODO visiting JavaCallMakerVisitor.visit_Forced(&&':')
                // TODO call is not created &&':' -> creates artificial
                true
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_except_block[" + pos + ", " + mark() +" ](level: " + level + ") 'except' &&':' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_keyword']
                result = _keyword;
                return (Object)cache.putResult(pos, INVALID_EXCEPT_BLOCK_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, INVALID_EXCEPT_BLOCK_ID, null);
    }

    // invalid_match_stmt: "match" subject_expr !':'
    public Object invalid_match_stmt_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: invalid_match_stmt, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_MATCH_STMT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, INVALID_MATCH_STMT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: CHECK_VERSION ( void * , 10 , "Pattern matching is" , RAISE_SYNTAX_ERROR ( "expected ':'" ) )
        {
            // visiting Alt: "match" subject_expr !':'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf("match")
                // generated call: (_keyword = expect("match")) != null  // soft_keyword='"match"'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(subject_expr) - should work
            // name = subject_expr
                // generated call: (subject_expr_var = subject_expr_rule()) != null  // subject_expr
            // collecting vars: SSTNode subject_expr_var
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // lookahead_call_helper call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            //    call.nodetype: GENERIC_TOKEN
                // generated call: lookahead(false, Token.Kind.COLON)  // token=':'
            // collecting vars: boolean None
            //    vars: {'_keyword': 'Token', 'subject_expr_var': 'SSTNode', None: 'boolean'}
            Token _keyword;
            SSTNode subject_expr_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: "match"
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem("match")
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf("match")
                // REMOVE result call (_keyword = expect("match")) != null  // soft_keyword='"match"'
                (_keyword = expect("match")) != null  // soft_keyword='"match"'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: subject_expr
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(subject_expr)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(subject_expr) - should work
                // name = subject_expr
                // REMOVE result call (subject_expr_var = subject_expr_rule()) != null  // subject_expr
                (subject_expr_var = subject_expr_rule()) != null  // subject_expr
                &&
                // TODO visiting JavaParserGeneratorNamedItem: !':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!':')
                // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // lookahead_call_helper call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                //    call.nodetype: GENERIC_TOKEN
                // REMOVE result call lookahead(false, Token.Kind.COLON)  // token=':'
                lookahead(false, Token.Kind.COLON)  // token=':'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_match_stmt[" + pos + ", " + mark() +" ](level: " + level + ") \"match\" subject_expr !':' succeeded!");
                }
                // alt action: CHECK_VERSION ( void * , 10 , "Pattern matching is" , RAISE_SYNTAX_ERROR ( "expected ':'" ) )
                Token endToken = getToken(mark());
                // node.action: CHECK_VERSION ( void * , 10 , "Pattern matching is" , RAISE_SYNTAX_ERROR ( "expected ':'" ) )
                return (Object)cache.putResult(pos, INVALID_MATCH_STMT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, INVALID_MATCH_STMT_ID, null);
    }

    // invalid_case_block: "case" patterns guard? !':'
    public Object invalid_case_block_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: invalid_case_block, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_CASE_BLOCK_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, INVALID_CASE_BLOCK_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: RAISE_SYNTAX_ERROR ( "expected ':'" )
        {
            // visiting Alt: "case" patterns guard? !':'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf("case")
                // generated call: (_keyword = expect("case")) != null  // soft_keyword='"case"'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(patterns) - should work
            // name = patterns
                // generated call: (patterns_var = patterns_rule()) != null  // patterns
            // collecting vars: SSTNode patterns_var
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(guard?)
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(guard) - should work
            // name = guard
                // JavaCallMakerVisitor.visit_Opt.generated call: (guard_var = guard_rule()) != null  // guard
                // generated call: ((_opt_var = guard_rule()) != null || _opt_var == null)  // guard?
            // collecting vars: None _opt_var
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!':')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
            // lookahead_call_helper call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            //    call.nodetype: GENERIC_TOKEN
                // generated call: lookahead(false, Token.Kind.COLON)  // token=':'
            // collecting vars: boolean None
            //    vars: {'_keyword': 'Token', 'patterns_var': 'SSTNode', '_opt_var': None, None: 'boolean'}
            Token _keyword;
            Object _opt_var;
            SSTNode patterns_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: "case"
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem("case")
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf("case")
                // REMOVE result call (_keyword = expect("case")) != null  // soft_keyword='"case"'
                (_keyword = expect("case")) != null  // soft_keyword='"case"'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: patterns
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(patterns)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(patterns) - should work
                // name = patterns
                // REMOVE result call (patterns_var = patterns_rule()) != null  // patterns
                (patterns_var = patterns_rule()) != null  // patterns
                &&
                // TODO visiting JavaParserGeneratorNamedItem: guard?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(guard?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(guard?)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(guard) - should work
                // name = guard
                    // JavaCallMakerVisitor.visit_Opt.generated call: (guard_var = guard_rule()) != null  // guard
                // REMOVE result call ((_opt_var = guard_rule()) != null || _opt_var == null)  // guard?
                ((_opt_var = guard_rule()) != null || _opt_var == null)  // guard?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: !':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!':')
                // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // lookahead_call_helper call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                //    call.nodetype: GENERIC_TOKEN
                // REMOVE result call lookahead(false, Token.Kind.COLON)  // token=':'
                lookahead(false, Token.Kind.COLON)  // token=':'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_case_block[" + pos + ", " + mark() +" ](level: " + level + ") \"case\" patterns guard? !':' succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR ( "expected ':'" )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR ( "expected ':'" )
                return (Object)cache.putResult(pos, INVALID_CASE_BLOCK_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, INVALID_CASE_BLOCK_ID, null);
    }

    // invalid_if_stmt: 'if' named_expression NEWLINE
    public Object invalid_if_stmt_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: invalid_if_stmt, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_IF_STMT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, INVALID_IF_STMT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: RAISE_SYNTAX_ERROR ( "expected ':'" )
        {
            // visiting Alt: 'if' named_expression NEWLINE
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
                // generated call: (_keyword = expect(KEYWORD_IF)) != null  // token='if'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // name = named_expression
                // generated call: (named_expression_var = named_expression_rule()) != null  // named_expression
            // collecting vars: SSTNode named_expression_var
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // name = NEWLINE
                // generated call: (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            // collecting vars: Token newline_var
            //    vars: {'_keyword': 'Token', 'named_expression_var': 'SSTNode', 'newline_var': 'Token'}
            Token _keyword;
            SSTNode named_expression_var;
            Token newline_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'if'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('if')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
                // REMOVE result call (_keyword = expect(KEYWORD_IF)) != null  // token='if'
                (_keyword = expect(KEYWORD_IF)) != null  // token='if'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: named_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(named_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
                // name = named_expression
                // REMOVE result call (named_expression_var = named_expression_rule()) != null  // named_expression
                (named_expression_var = named_expression_rule()) != null  // named_expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NEWLINE
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
                // name = NEWLINE
                // REMOVE result call (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
                (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_if_stmt[" + pos + ", " + mark() +" ](level: " + level + ") 'if' named_expression NEWLINE succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR ( "expected ':'" )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR ( "expected ':'" )
                return (Object)cache.putResult(pos, INVALID_IF_STMT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, INVALID_IF_STMT_ID, null);
    }

    // invalid_elif_stmt: 'elif' named_expression NEWLINE
    public Object invalid_elif_stmt_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: invalid_elif_stmt, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_ELIF_STMT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, INVALID_ELIF_STMT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: RAISE_SYNTAX_ERROR ( "expected ':'" )
        {
            // visiting Alt: 'elif' named_expression NEWLINE
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('elif')
                // generated call: (_keyword = expect(KEYWORD_ELIF)) != null  // token='elif'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // name = named_expression
                // generated call: (named_expression_var = named_expression_rule()) != null  // named_expression
            // collecting vars: SSTNode named_expression_var
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // name = NEWLINE
                // generated call: (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            // collecting vars: Token newline_var
            //    vars: {'_keyword': 'Token', 'named_expression_var': 'SSTNode', 'newline_var': 'Token'}
            Token _keyword;
            SSTNode named_expression_var;
            Token newline_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'elif'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('elif')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('elif')
                // REMOVE result call (_keyword = expect(KEYWORD_ELIF)) != null  // token='elif'
                (_keyword = expect(KEYWORD_ELIF)) != null  // token='elif'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: named_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(named_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
                // name = named_expression
                // REMOVE result call (named_expression_var = named_expression_rule()) != null  // named_expression
                (named_expression_var = named_expression_rule()) != null  // named_expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NEWLINE
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
                // name = NEWLINE
                // REMOVE result call (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
                (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_elif_stmt[" + pos + ", " + mark() +" ](level: " + level + ") 'elif' named_expression NEWLINE succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR ( "expected ':'" )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR ( "expected ':'" )
                return (Object)cache.putResult(pos, INVALID_ELIF_STMT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, INVALID_ELIF_STMT_ID, null);
    }

    // invalid_while_stmt: 'while' named_expression NEWLINE
    public Object invalid_while_stmt_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: invalid_while_stmt, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_WHILE_STMT_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, INVALID_WHILE_STMT_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: RAISE_SYNTAX_ERROR ( "expected ':'" )
        {
            // visiting Alt: 'while' named_expression NEWLINE
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('while')
                // generated call: (_keyword = expect(KEYWORD_WHILE)) != null  // token='while'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // name = named_expression
                // generated call: (named_expression_var = named_expression_rule()) != null  // named_expression
            // collecting vars: SSTNode named_expression_var
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // name = NEWLINE
                // generated call: (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            // collecting vars: Token newline_var
            //    vars: {'_keyword': 'Token', 'named_expression_var': 'SSTNode', 'newline_var': 'Token'}
            Token _keyword;
            SSTNode named_expression_var;
            Token newline_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'while'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('while')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('while')
                // REMOVE result call (_keyword = expect(KEYWORD_WHILE)) != null  // token='while'
                (_keyword = expect(KEYWORD_WHILE)) != null  // token='while'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: named_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(named_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
                // name = named_expression
                // REMOVE result call (named_expression_var = named_expression_rule()) != null  // named_expression
                (named_expression_var = named_expression_rule()) != null  // named_expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NEWLINE
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
                // name = NEWLINE
                // REMOVE result call (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
                (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_while_stmt[" + pos + ", " + mark() +" ](level: " + level + ") 'while' named_expression NEWLINE succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR ( "expected ':'" )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR ( "expected ':'" )
                return (Object)cache.putResult(pos, INVALID_WHILE_STMT_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, INVALID_WHILE_STMT_ID, null);
    }

    // invalid_double_starred_kvpairs:
    //     | ','.double_starred_kvpair+ ',' invalid_kvpair
    //     | expression ':' '*' bitwise_or
    //     | expression ':' &('}' | ',')
    public Object invalid_double_starred_kvpairs_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: invalid_double_starred_kvpairs, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_DOUBLE_STARRED_KVPAIRS_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, INVALID_DOUBLE_STARRED_KVPAIRS_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: None
        {
            // visiting Alt: ','.double_starred_kvpair+ ',' invalid_kvpair
            // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.double_starred_kvpair+)
                // generated call: (_gather_218_var = _gather_218_rule()) != null  // ','.double_starred_kvpair+
            // collecting vars: SSTNode[] _gather_218_var
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_kvpair) - should work
            // name = invalid_kvpair
                // generated call: (invalid_kvpair_var = invalid_kvpair_rule()) != null  // invalid_kvpair
            // collecting vars: None invalid_kvpair_var
            //    vars: {'_gather_218_var': 'SSTNode[]', '_literal': 'Token', 'invalid_kvpair_var': None}
            SSTNode[] _gather_218_var;
            Token _literal;
            Object invalid_kvpair_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','.double_starred_kvpair+
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(','.double_starred_kvpair+)
                // REMOVE visiting JavaCallMakerVisitor.visit_Gather(','.double_starred_kvpair+)
                // REMOVE result call (_gather_218_var = _gather_218_rule()) != null  // ','.double_starred_kvpair+
                (_gather_218_var = _gather_218_rule()) != null  // ','.double_starred_kvpair+
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: invalid_kvpair
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(invalid_kvpair)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(invalid_kvpair) - should work
                // name = invalid_kvpair
                // REMOVE result call (invalid_kvpair_var = invalid_kvpair_rule()) != null  // invalid_kvpair
                (invalid_kvpair_var = invalid_kvpair_rule()) != null  // invalid_kvpair
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_double_starred_kvpairs[" + pos + ", " + mark() +" ](level: " + level + ") ','.double_starred_kvpair+ ',' invalid_kvpair succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_gather_218_var', '_literal', 'invalid_kvpair_var']
                // TODO handle default action if there is more variables
                return (Object)cache.putResult(pos, INVALID_DOUBLE_STARRED_KVPAIRS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "cannot use a starred expression in a dictionary value" )
        {
            // visiting Alt: expression ':' '*' bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode expression_var
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // collecting vars: Token a
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // name = bitwise_or
                // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // collecting vars: SSTNode bitwise_or_var
            //    vars: {'expression_var': 'SSTNode', '_literal': 'Token', 'a': 'Token', 'bitwise_or_var': 'SSTNode'}
            Token _literal;
            Token a;
            SSTNode bitwise_or_var;
            SSTNode expression_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (expression_var = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '*'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                (a = expect(Token.Kind.STAR)) != null  // token='*'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
                // name = bitwise_or
                // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
                (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_double_starred_kvpairs[" + pos + ", " + mark() +" ](level: " + level + ") expression ':' '*' bitwise_or succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "cannot use a starred expression in a dictionary value" )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "cannot use a starred expression in a dictionary value" )
                return (Object)cache.putResult(pos, INVALID_DOUBLE_STARRED_KVPAIRS_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "expression expected after dictionary key and ':'" )
        {
            // visiting Alt: expression ':' &('}' | ',')
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode expression_var
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // collecting vars: Token a
            // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('}' | ','))
                // generated call: None
            // collecting vars: None None
            //    vars: {'expression_var': 'SSTNode', 'a': 'Token', None: None}
            Token a;
            SSTNode expression_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (expression_var = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                (a = expect(Token.Kind.COLON)) != null  // token=':'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: &('}' | ',')
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(&('}' | ','))
                // TODO visiting JavaCallMakerVisitor.visit_PositiveLookahead(&('}' | ','))
                // TODO call is not created &('}' | ',') -> creates artificial
                true
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_double_starred_kvpairs[" + pos + ", " + mark() +" ](level: " + level + ") expression ':' &('}' | ',') succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "expression expected after dictionary key and ':'" )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "expression expected after dictionary key and ':'" )
                return (Object)cache.putResult(pos, INVALID_DOUBLE_STARRED_KVPAIRS_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, INVALID_DOUBLE_STARRED_KVPAIRS_ID, null);
    }

    // invalid_kvpair: expression !(':') | expression ':' '*' bitwise_or | expression ':'
    public Object invalid_kvpair_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: invalid_kvpair, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, INVALID_KVPAIR_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, INVALID_KVPAIR_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: RAISE_ERROR_KNOWN_LOCATION ( p , PyExc_SyntaxError , a -> lineno , a -> end_col_offset - 1 , "':' expected after dictionary key" )
        {
            // visiting Alt: expression !(':')
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode a
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!(':'))
            // TODO visiting JavaCallMakerVisitor.visit_Group((':'))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(':')
            // lookahead_call_helper call: (_tmp_220_var = _tmp_220_rule()) != null  // ':'
            //    call.nodetype: None
                // generated call: lookahed_tmp_220_rule(false)
            // collecting vars: boolean None
            //    vars: {'a': 'SSTNode', None: 'boolean'}
            SSTNode a;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (a = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: !(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!(':'))
                // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!(':'))
                // TODO visiting JavaCallMakerVisitor.visit_Group((':'))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(':')
                // lookahead_call_helper call: (_tmp_220_var = _tmp_220_rule()) != null  // ':'
                //    call.nodetype: None
                // REMOVE result call lookahed_tmp_220_rule(false)
                lookahed_tmp_220_rule(false)
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_kvpair[" + pos + ", " + mark() +" ](level: " + level + ") expression !(':') succeeded!");
                }
                // alt action: RAISE_ERROR_KNOWN_LOCATION ( p , PyExc_SyntaxError , a -> lineno , a -> end_col_offset - 1 , "':' expected after dictionary key" )
                Token endToken = getToken(mark());
                // node.action: RAISE_ERROR_KNOWN_LOCATION ( p , PyExc_SyntaxError , a -> lineno , a -> end_col_offset - 1 , "':' expected after dictionary key" )
                return (Object)cache.putResult(pos, INVALID_KVPAIR_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "cannot use a starred expression in a dictionary value" )
        {
            // visiting Alt: expression ':' '*' bitwise_or
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode expression_var
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // generated call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            // collecting vars: Token a
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
            // name = bitwise_or
                // generated call: (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            // collecting vars: SSTNode bitwise_or_var
            //    vars: {'expression_var': 'SSTNode', '_literal': 'Token', 'a': 'Token', 'bitwise_or_var': 'SSTNode'}
            Token _literal;
            Token a;
            SSTNode bitwise_or_var;
            SSTNode expression_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (expression_var = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '*'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('*')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // REMOVE result call (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                (a = expect(Token.Kind.STAR)) != null  // token='*'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: bitwise_or
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(bitwise_or)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(bitwise_or) - should work
                // name = bitwise_or
                // REMOVE result call (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
                (bitwise_or_var = bitwise_or_rule()) != null  // bitwise_or
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_kvpair[" + pos + ", " + mark() +" ](level: " + level + ") expression ':' '*' bitwise_or succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "cannot use a starred expression in a dictionary value" )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "cannot use a starred expression in a dictionary value" )
                return (Object)cache.putResult(pos, INVALID_KVPAIR_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "expression expected after dictionary key and ':'" )
        {
            // visiting Alt: expression ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode expression_var
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // collecting vars: Token a
            //    vars: {'expression_var': 'SSTNode', 'a': 'Token'}
            Token a;
            SSTNode expression_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (expression_var = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                (a = expect(Token.Kind.COLON)) != null  // token=':'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("invalid_kvpair[" + pos + ", " + mark() +" ](level: " + level + ") expression ':' succeeded!");
                }
                // alt action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "expression expected after dictionary key and ':'" )
                Token endToken = getToken(mark());
                // node.action: RAISE_SYNTAX_ERROR_KNOWN_LOCATION ( a , "expression expected after dictionary key and ':'" )
                return (Object)cache.putResult(pos, INVALID_KVPAIR_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, INVALID_KVPAIR_ID, null);
    }

    // _tmp_1: statements
    public Object _tmp_1_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_1, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_1_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_1_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: statements
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(statements) - should work
            // name = statements
                // generated call: (statements_var = statements_rule()) != null  // statements
            // collecting vars: SSTNode[] statements_var
            //    vars: {'statements_var': 'SSTNode[]'}
            SSTNode[] statements_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: statements
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(statements)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(statements) - should work
                // name = statements
                // REMOVE result call (statements_var = statements_rule()) != null  // statements
                (statements_var = statements_rule()) != null  // statements
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_1[" + pos + ", " + mark() +" ](level: " + level + ") statements succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['statements_var']
                result = statements_var;
                return (Object)cache.putResult(pos, _TMP_1_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_1_ID, null);
    }

    // _loop0_2: NEWLINE
    public SSTNode[] _loop0_2_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_2, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: NEWLINE
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // name = NEWLINE
                // generated call: (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            // collecting vars: Token newline_var
            //    vars: {'newline_var': 'Token'}
            Object newline_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: NEWLINE
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
                // name = NEWLINE
                // REMOVE result call (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
                (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['newline_var']
                if (newline_var instanceof Token) {
                    // TODO
                } else if (newline_var instanceof SSTNode) {
                    children.add((SSTNode)newline_var);
                } else if (newline_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])newline_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_2_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_2_ID, null);
    }

    // _tmp_3: type_expressions
    public Object _tmp_3_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_3, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_3_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_3_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: type_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(type_expressions) - should work
            // name = type_expressions
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // generated call: (type_expressions_var = type_expressions_rule()) != null  // type_expressions
            // collecting vars: SSTNode[] type_expressions_var
            //    vars: {'type_expressions_var': 'SSTNode[]'}
            SSTNode[] type_expressions_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: type_expressions
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(type_expressions)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(type_expressions) - should work
                // name = type_expressions
                // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // REMOVE result call (type_expressions_var = type_expressions_rule()) != null  // type_expressions
                (type_expressions_var = type_expressions_rule()) != null  // type_expressions
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_3[" + pos + ", " + mark() +" ](level: " + level + ") type_expressions succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['type_expressions_var']
                result = type_expressions_var;
                return (Object)cache.putResult(pos, _TMP_3_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_3_ID, null);
    }

    // _loop0_4: NEWLINE
    public SSTNode[] _loop0_4_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_4, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: NEWLINE
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // name = NEWLINE
                // generated call: (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            // collecting vars: Token newline_var
            //    vars: {'newline_var': 'Token'}
            Object newline_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: NEWLINE
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
                // name = NEWLINE
                // REMOVE result call (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
                (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['newline_var']
                if (newline_var instanceof Token) {
                    // TODO
                } else if (newline_var instanceof SSTNode) {
                    children.add((SSTNode)newline_var);
                } else if (newline_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])newline_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_4_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_4_ID, null);
    }

    // _loop0_6: ',' expression
    public SSTNode[] _loop0_6_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_6, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: elem
        {
            // visiting Alt: ',' expression
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode elem
            //    vars: {'_literal': 'Token', 'elem': 'SSTNode'}
            Object _literal;
            Object elem;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (elem = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: elem
                Token endToken = getToken(mark());
                // node.action: elem
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_6_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_6_ID, null);
    }

    // _gather_5: expression _loop0_6
    public SSTNode[] _gather_5_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _gather_5, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _GATHER_5_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, _GATHER_5_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: expression _loop0_6
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode elem
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_6) - should work
            // name = _loop0_6
                // generated call: (_loop0_6_var = _loop0_6_rule()) != null  // _loop0_6
            // collecting vars: SSTNode[] seq
            //    vars: {'elem': 'SSTNode', 'seq': 'SSTNode[]'}
            SSTNode elem;
            SSTNode[] seq;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (elem = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: _loop0_6
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_6)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_6) - should work
                // name = _loop0_6
                // REMOVE result call (_loop0_6_var = _loop0_6_rule()) != null  // _loop0_6
                (seq = _loop0_6_rule()) != null  // _loop0_6
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_gather_5[" + pos + ", " + mark() +" ](level: " + level + ") expression _loop0_6 succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['elem', 'seq']
                // TODO handle default action if there is more variables
                return (SSTNode[])cache.putResult(pos, _GATHER_5_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _GATHER_5_ID, null);
    }

    // _loop0_8: ',' expression
    public SSTNode[] _loop0_8_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_8, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: elem
        {
            // visiting Alt: ',' expression
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode elem
            //    vars: {'_literal': 'Token', 'elem': 'SSTNode'}
            Object _literal;
            Object elem;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (elem = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: elem
                Token endToken = getToken(mark());
                // node.action: elem
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_8_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_8_ID, null);
    }

    // _gather_7: expression _loop0_8
    public SSTNode[] _gather_7_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _gather_7, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _GATHER_7_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, _GATHER_7_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: expression _loop0_8
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode elem
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_8) - should work
            // name = _loop0_8
                // generated call: (_loop0_8_var = _loop0_8_rule()) != null  // _loop0_8
            // collecting vars: SSTNode[] seq
            //    vars: {'elem': 'SSTNode', 'seq': 'SSTNode[]'}
            SSTNode elem;
            SSTNode[] seq;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (elem = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: _loop0_8
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_8)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_8) - should work
                // name = _loop0_8
                // REMOVE result call (_loop0_8_var = _loop0_8_rule()) != null  // _loop0_8
                (seq = _loop0_8_rule()) != null  // _loop0_8
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_gather_7[" + pos + ", " + mark() +" ](level: " + level + ") expression _loop0_8 succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['elem', 'seq']
                // TODO handle default action if there is more variables
                return (SSTNode[])cache.putResult(pos, _GATHER_7_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _GATHER_7_ID, null);
    }

    // _loop0_10: ',' expression
    public SSTNode[] _loop0_10_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_10, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: elem
        {
            // visiting Alt: ',' expression
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode elem
            //    vars: {'_literal': 'Token', 'elem': 'SSTNode'}
            Object _literal;
            Object elem;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (elem = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: elem
                Token endToken = getToken(mark());
                // node.action: elem
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_10_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_10_ID, null);
    }

    // _gather_9: expression _loop0_10
    public SSTNode[] _gather_9_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _gather_9, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _GATHER_9_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, _GATHER_9_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: expression _loop0_10
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode elem
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_10) - should work
            // name = _loop0_10
                // generated call: (_loop0_10_var = _loop0_10_rule()) != null  // _loop0_10
            // collecting vars: SSTNode[] seq
            //    vars: {'elem': 'SSTNode', 'seq': 'SSTNode[]'}
            SSTNode elem;
            SSTNode[] seq;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (elem = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: _loop0_10
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_10)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_10) - should work
                // name = _loop0_10
                // REMOVE result call (_loop0_10_var = _loop0_10_rule()) != null  // _loop0_10
                (seq = _loop0_10_rule()) != null  // _loop0_10
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_gather_9[" + pos + ", " + mark() +" ](level: " + level + ") expression _loop0_10 succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['elem', 'seq']
                // TODO handle default action if there is more variables
                return (SSTNode[])cache.putResult(pos, _GATHER_9_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _GATHER_9_ID, null);
    }

    // _loop0_12: ',' expression
    public SSTNode[] _loop0_12_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_12, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: elem
        {
            // visiting Alt: ',' expression
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode elem
            //    vars: {'_literal': 'Token', 'elem': 'SSTNode'}
            Object _literal;
            Object elem;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (elem = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: elem
                Token endToken = getToken(mark());
                // node.action: elem
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_12_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_12_ID, null);
    }

    // _gather_11: expression _loop0_12
    public SSTNode[] _gather_11_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _gather_11, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _GATHER_11_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, _GATHER_11_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: expression _loop0_12
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode elem
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_12) - should work
            // name = _loop0_12
                // generated call: (_loop0_12_var = _loop0_12_rule()) != null  // _loop0_12
            // collecting vars: SSTNode[] seq
            //    vars: {'elem': 'SSTNode', 'seq': 'SSTNode[]'}
            SSTNode elem;
            SSTNode[] seq;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (elem = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: _loop0_12
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_12)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_12) - should work
                // name = _loop0_12
                // REMOVE result call (_loop0_12_var = _loop0_12_rule()) != null  // _loop0_12
                (seq = _loop0_12_rule()) != null  // _loop0_12
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_gather_11[" + pos + ", " + mark() +" ](level: " + level + ") expression _loop0_12 succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['elem', 'seq']
                // TODO handle default action if there is more variables
                return (SSTNode[])cache.putResult(pos, _GATHER_11_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _GATHER_11_ID, null);
    }

    // _loop1_13: statement
    public SSTNode[] _loop1_13_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_13, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: statement
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(statement) - should work
            // name = statement
                // generated call: (statement_var = statement_rule()) != null  // statement
            // collecting vars: SSTNode[] statement_var
            //    vars: {'statement_var': 'SSTNode[]'}
            Object statement_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: statement
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(statement)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(statement) - should work
                // name = statement
                // REMOVE result call (statement_var = statement_rule()) != null  // statement
                (statement_var = statement_rule()) != null  // statement
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['statement_var']
                if (statement_var instanceof Token) {
                    // TODO
                } else if (statement_var instanceof SSTNode) {
                    children.add((SSTNode)statement_var);
                } else if (statement_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])statement_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP1_13_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP1_13_ID, null);
    }

    // _loop0_15: ';' simple_stmt
    public SSTNode[] _loop0_15_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_15, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: elem
        {
            // visiting Alt: ';' simple_stmt
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(';')
                // generated call: (_literal = expect(Token.Kind.SEMI)) != null  // token=';'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmt) - should work
            // name = simple_stmt
            // TODO replacing stmt_ty --> SSTNode
                // generated call: (simple_stmt_var = simple_stmt_rule()) != null  // simple_stmt
            // collecting vars: SSTNode elem
            //    vars: {'_literal': 'Token', 'elem': 'SSTNode'}
            Object _literal;
            Object elem;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ';'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(';')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(';')
                // REMOVE result call (_literal = expect(Token.Kind.SEMI)) != null  // token=';'
                (_literal = expect(Token.Kind.SEMI)) != null  // token=';'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: simple_stmt
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(simple_stmt)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmt) - should work
                // name = simple_stmt
                // TODO replacing stmt_ty --> SSTNode
                // REMOVE result call (simple_stmt_var = simple_stmt_rule()) != null  // simple_stmt
                (elem = simple_stmt_rule()) != null  // simple_stmt
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: elem
                Token endToken = getToken(mark());
                // node.action: elem
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_15_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_15_ID, null);
    }

    // _gather_14: simple_stmt _loop0_15
    public SSTNode[] _gather_14_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _gather_14, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _GATHER_14_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, _GATHER_14_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: simple_stmt _loop0_15
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmt) - should work
            // name = simple_stmt
            // TODO replacing stmt_ty --> SSTNode
                // generated call: (simple_stmt_var = simple_stmt_rule()) != null  // simple_stmt
            // collecting vars: SSTNode elem
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_15) - should work
            // name = _loop0_15
                // generated call: (_loop0_15_var = _loop0_15_rule()) != null  // _loop0_15
            // collecting vars: SSTNode[] seq
            //    vars: {'elem': 'SSTNode', 'seq': 'SSTNode[]'}
            SSTNode elem;
            SSTNode[] seq;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: simple_stmt
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(simple_stmt)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(simple_stmt) - should work
                // name = simple_stmt
                // TODO replacing stmt_ty --> SSTNode
                // REMOVE result call (simple_stmt_var = simple_stmt_rule()) != null  // simple_stmt
                (elem = simple_stmt_rule()) != null  // simple_stmt
                &&
                // TODO visiting JavaParserGeneratorNamedItem: _loop0_15
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_15)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_15) - should work
                // name = _loop0_15
                // REMOVE result call (_loop0_15_var = _loop0_15_rule()) != null  // _loop0_15
                (seq = _loop0_15_rule()) != null  // _loop0_15
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_gather_14[" + pos + ", " + mark() +" ](level: " + level + ") simple_stmt _loop0_15 succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['elem', 'seq']
                // TODO handle default action if there is more variables
                return (SSTNode[])cache.putResult(pos, _GATHER_14_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _GATHER_14_ID, null);
    }

    // _tmp_16: ';'
    public Object _tmp_16_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_16, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_16_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_16_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ';'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(';')
                // generated call: (_literal = expect(Token.Kind.SEMI)) != null  // token=';'
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ';'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(';')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(';')
                // REMOVE result call (_literal = expect(Token.Kind.SEMI)) != null  // token=';'
                (_literal = expect(Token.Kind.SEMI)) != null  // token=';'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_16[" + pos + ", " + mark() +" ](level: " + level + ") ';' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_16_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_16_ID, null);
    }

    // _tmp_17: '=' annotated_rhs
    public Object _tmp_17_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_17, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_17_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_17_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: d
        {
            // visiting Alt: '=' annotated_rhs
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // generated call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(annotated_rhs) - should work
            // name = annotated_rhs
                // generated call: (annotated_rhs_var = annotated_rhs_rule()) != null  // annotated_rhs
            // collecting vars: SSTNode d
            //    vars: {'_literal': 'Token', 'd': 'SSTNode'}
            Token _literal;
            SSTNode d;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // REMOVE result call (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
                (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
                &&
                // TODO visiting JavaParserGeneratorNamedItem: annotated_rhs
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(annotated_rhs)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(annotated_rhs) - should work
                // name = annotated_rhs
                // REMOVE result call (annotated_rhs_var = annotated_rhs_rule()) != null  // annotated_rhs
                (d = annotated_rhs_rule()) != null  // annotated_rhs
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_17[" + pos + ", " + mark() +" ](level: " + level + ") '=' annotated_rhs succeeded!");
                }
                // alt action: d
                Token endToken = getToken(mark());
                // node.action: d
                result = d;
                return (Object)cache.putResult(pos, _TMP_17_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_17_ID, null);
    }

    // _tmp_18: '(' single_target ')' | single_subscript_attribute_target
    public Object _tmp_18_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_18, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_18_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_18_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: b
        {
            // visiting Alt: '(' single_target ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(single_target) - should work
            // name = single_target
                // generated call: (single_target_var = single_target_rule()) != null  // single_target
            // collecting vars: SSTNode b
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // collecting vars: Token _literal_1
            //    vars: {'_literal': 'Token', 'b': 'SSTNode', '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            SSTNode b;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                &&
                // TODO visiting JavaParserGeneratorNamedItem: single_target
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(single_target)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(single_target) - should work
                // name = single_target
                // REMOVE result call (single_target_var = single_target_rule()) != null  // single_target
                (b = single_target_rule()) != null  // single_target
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
                (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_18[" + pos + ", " + mark() +" ](level: " + level + ") '(' single_target ')' succeeded!");
                }
                // alt action: b
                Token endToken = getToken(mark());
                // node.action: b
                result = b;
                return (Object)cache.putResult(pos, _TMP_18_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: single_subscript_attribute_target
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(single_subscript_attribute_target) - should work
            // name = single_subscript_attribute_target
                // generated call: (single_subscript_attribute_target_var = single_subscript_attribute_target_rule()) != null  // single_subscript_attribute_target
            // collecting vars: SSTNode single_subscript_attribute_target_var
            //    vars: {'single_subscript_attribute_target_var': 'SSTNode'}
            SSTNode single_subscript_attribute_target_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: single_subscript_attribute_target
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(single_subscript_attribute_target)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(single_subscript_attribute_target) - should work
                // name = single_subscript_attribute_target
                // REMOVE result call (single_subscript_attribute_target_var = single_subscript_attribute_target_rule()) != null  // single_subscript_attribute_target
                (single_subscript_attribute_target_var = single_subscript_attribute_target_rule()) != null  // single_subscript_attribute_target
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_18[" + pos + ", " + mark() +" ](level: " + level + ") single_subscript_attribute_target succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['single_subscript_attribute_target_var']
                result = single_subscript_attribute_target_var;
                return (Object)cache.putResult(pos, _TMP_18_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_18_ID, null);
    }

    // _tmp_19: '=' annotated_rhs
    public Object _tmp_19_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_19, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_19_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_19_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: d
        {
            // visiting Alt: '=' annotated_rhs
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // generated call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(annotated_rhs) - should work
            // name = annotated_rhs
                // generated call: (annotated_rhs_var = annotated_rhs_rule()) != null  // annotated_rhs
            // collecting vars: SSTNode d
            //    vars: {'_literal': 'Token', 'd': 'SSTNode'}
            Token _literal;
            SSTNode d;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // REMOVE result call (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
                (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
                &&
                // TODO visiting JavaParserGeneratorNamedItem: annotated_rhs
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(annotated_rhs)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(annotated_rhs) - should work
                // name = annotated_rhs
                // REMOVE result call (annotated_rhs_var = annotated_rhs_rule()) != null  // annotated_rhs
                (d = annotated_rhs_rule()) != null  // annotated_rhs
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_19[" + pos + ", " + mark() +" ](level: " + level + ") '=' annotated_rhs succeeded!");
                }
                // alt action: d
                Token endToken = getToken(mark());
                // node.action: d
                result = d;
                return (Object)cache.putResult(pos, _TMP_19_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_19_ID, null);
    }

    // _loop1_20: (star_targets '=')
    public SSTNode[] _loop1_20_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_20, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: (star_targets '=')
            // TODO visiting JavaCallMakerVisitor.visit_Group((star_targets '='))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_targets '=')
                // generated call: (_tmp_221_var = _tmp_221_rule()) != null  // star_targets '='
            // collecting vars: None _tmp_221_var
            //    vars: {'_tmp_221_var': None}
            Object _tmp_221_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: (star_targets '=')
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((star_targets '='))
                // TODO visiting JavaCallMakerVisitor.visit_Group((star_targets '='))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_targets '=')
                // REMOVE result call (_tmp_221_var = _tmp_221_rule()) != null  // star_targets '='
                (_tmp_221_var = _tmp_221_rule()) != null  // star_targets '='
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['_tmp_221_var']
                if (_tmp_221_var instanceof Token) {
                    // TODO
                } else if (_tmp_221_var instanceof SSTNode) {
                    children.add((SSTNode)_tmp_221_var);
                } else if (_tmp_221_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])_tmp_221_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP1_20_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP1_20_ID, null);
    }

    // _tmp_21: yield_expr | star_expressions
    public Object _tmp_21_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_21, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_21_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_21_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: yield_expr
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
            // name = yield_expr
                // generated call: (yield_expr_var = yield_expr_rule()) != null  // yield_expr
            // collecting vars: SSTNode yield_expr_var
            //    vars: {'yield_expr_var': 'SSTNode'}
            SSTNode yield_expr_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: yield_expr
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(yield_expr)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
                // name = yield_expr
                // REMOVE result call (yield_expr_var = yield_expr_rule()) != null  // yield_expr
                (yield_expr_var = yield_expr_rule()) != null  // yield_expr
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_21[" + pos + ", " + mark() +" ](level: " + level + ") yield_expr succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['yield_expr_var']
                result = yield_expr_var;
                return (Object)cache.putResult(pos, _TMP_21_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: star_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // name = star_expressions
                // generated call: (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            // collecting vars: SSTNode star_expressions_var
            //    vars: {'star_expressions_var': 'SSTNode'}
            SSTNode star_expressions_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_expressions
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expressions)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
                // name = star_expressions
                // REMOVE result call (star_expressions_var = star_expressions_rule()) != null  // star_expressions
                (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_21[" + pos + ", " + mark() +" ](level: " + level + ") star_expressions succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['star_expressions_var']
                result = star_expressions_var;
                return (Object)cache.putResult(pos, _TMP_21_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_21_ID, null);
    }

    // _tmp_22: TYPE_COMMENT
    public Object _tmp_22_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_22, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_22_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_22_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: TYPE_COMMENT
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // name = TYPE_COMMENT
                // generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            // collecting vars: Token type_comment_var
            //    vars: {'type_comment_var': 'Token'}
            Token type_comment_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
                // name = TYPE_COMMENT
                // REMOVE result call (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
                (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_22[" + pos + ", " + mark() +" ](level: " + level + ") TYPE_COMMENT succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['type_comment_var']
                result = type_comment_var;
                return (Object)cache.putResult(pos, _TMP_22_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_22_ID, null);
    }

    // _tmp_23: yield_expr | star_expressions
    public Object _tmp_23_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_23, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_23_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_23_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: yield_expr
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
            // name = yield_expr
                // generated call: (yield_expr_var = yield_expr_rule()) != null  // yield_expr
            // collecting vars: SSTNode yield_expr_var
            //    vars: {'yield_expr_var': 'SSTNode'}
            SSTNode yield_expr_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: yield_expr
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(yield_expr)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
                // name = yield_expr
                // REMOVE result call (yield_expr_var = yield_expr_rule()) != null  // yield_expr
                (yield_expr_var = yield_expr_rule()) != null  // yield_expr
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_23[" + pos + ", " + mark() +" ](level: " + level + ") yield_expr succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['yield_expr_var']
                result = yield_expr_var;
                return (Object)cache.putResult(pos, _TMP_23_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: star_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // name = star_expressions
                // generated call: (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            // collecting vars: SSTNode star_expressions_var
            //    vars: {'star_expressions_var': 'SSTNode'}
            SSTNode star_expressions_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_expressions
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expressions)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
                // name = star_expressions
                // REMOVE result call (star_expressions_var = star_expressions_rule()) != null  // star_expressions
                (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_23[" + pos + ", " + mark() +" ](level: " + level + ") star_expressions succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['star_expressions_var']
                result = star_expressions_var;
                return (Object)cache.putResult(pos, _TMP_23_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_23_ID, null);
    }

    // _loop0_25: ',' NAME
    public SSTNode[] _loop0_25_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_25, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: elem
        {
            // visiting Alt: ',' NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token elem
            //    vars: {'_literal': 'Token', 'elem': 'Token'}
            Object _literal;
            Object elem;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (elem = expect(Token.Kind.NAME)) != null  // NAME
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: elem
                Token endToken = getToken(mark());
                // node.action: elem
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_25_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_25_ID, null);
    }

    // _gather_24: NAME _loop0_25
    public SSTNode[] _gather_24_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _gather_24, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _GATHER_24_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, _GATHER_24_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: NAME _loop0_25
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token elem
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_25) - should work
            // name = _loop0_25
                // generated call: (_loop0_25_var = _loop0_25_rule()) != null  // _loop0_25
            // collecting vars: SSTNode[] seq
            //    vars: {'elem': 'Token', 'seq': 'SSTNode[]'}
            Token elem;
            SSTNode[] seq;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (elem = expect(Token.Kind.NAME)) != null  // NAME
                &&
                // TODO visiting JavaParserGeneratorNamedItem: _loop0_25
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_25)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_25) - should work
                // name = _loop0_25
                // REMOVE result call (_loop0_25_var = _loop0_25_rule()) != null  // _loop0_25
                (seq = _loop0_25_rule()) != null  // _loop0_25
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_gather_24[" + pos + ", " + mark() +" ](level: " + level + ") NAME _loop0_25 succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['elem', 'seq']
                // TODO handle default action if there is more variables
                return (SSTNode[])cache.putResult(pos, _GATHER_24_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _GATHER_24_ID, null);
    }

    // _loop0_27: ',' NAME
    public SSTNode[] _loop0_27_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_27, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: elem
        {
            // visiting Alt: ',' NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token elem
            //    vars: {'_literal': 'Token', 'elem': 'Token'}
            Object _literal;
            Object elem;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (elem = expect(Token.Kind.NAME)) != null  // NAME
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: elem
                Token endToken = getToken(mark());
                // node.action: elem
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_27_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_27_ID, null);
    }

    // _gather_26: NAME _loop0_27
    public SSTNode[] _gather_26_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _gather_26, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _GATHER_26_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, _GATHER_26_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: NAME _loop0_27
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token elem
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_27) - should work
            // name = _loop0_27
                // generated call: (_loop0_27_var = _loop0_27_rule()) != null  // _loop0_27
            // collecting vars: SSTNode[] seq
            //    vars: {'elem': 'Token', 'seq': 'SSTNode[]'}
            Token elem;
            SSTNode[] seq;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (elem = expect(Token.Kind.NAME)) != null  // NAME
                &&
                // TODO visiting JavaParserGeneratorNamedItem: _loop0_27
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_27)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_27) - should work
                // name = _loop0_27
                // REMOVE result call (_loop0_27_var = _loop0_27_rule()) != null  // _loop0_27
                (seq = _loop0_27_rule()) != null  // _loop0_27
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_gather_26[" + pos + ", " + mark() +" ](level: " + level + ") NAME _loop0_27 succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['elem', 'seq']
                // TODO handle default action if there is more variables
                return (SSTNode[])cache.putResult(pos, _GATHER_26_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _GATHER_26_ID, null);
    }

    // _tmp_28: ',' expression
    public Object _tmp_28_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_28, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_28_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_28_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: z
        {
            // visiting Alt: ',' expression
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode z
            //    vars: {'_literal': 'Token', 'z': 'SSTNode'}
            Token _literal;
            SSTNode z;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (z = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_28[" + pos + ", " + mark() +" ](level: " + level + ") ',' expression succeeded!");
                }
                // alt action: z
                Token endToken = getToken(mark());
                // node.action: z
                result = z;
                return (Object)cache.putResult(pos, _TMP_28_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_28_ID, null);
    }

    // _loop0_29: ('.' | '...')
    public SSTNode[] _loop0_29_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_29, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ('.' | '...')
            // TODO visiting JavaCallMakerVisitor.visit_Group(('.' | '...'))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('.' | '...')
                // generated call: (_tmp_222_var = _tmp_222_rule()) != null  // '.' | '...'
            // collecting vars: None _tmp_222_var
            //    vars: {'_tmp_222_var': None}
            Object _tmp_222_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ('.' | '...')
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(('.' | '...'))
                // TODO visiting JavaCallMakerVisitor.visit_Group(('.' | '...'))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('.' | '...')
                // REMOVE result call (_tmp_222_var = _tmp_222_rule()) != null  // '.' | '...'
                (_tmp_222_var = _tmp_222_rule()) != null  // '.' | '...'
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['_tmp_222_var']
                if (_tmp_222_var instanceof Token) {
                    // TODO
                } else if (_tmp_222_var instanceof SSTNode) {
                    children.add((SSTNode)_tmp_222_var);
                } else if (_tmp_222_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])_tmp_222_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_29_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_29_ID, null);
    }

    // _loop1_30: ('.' | '...')
    public SSTNode[] _loop1_30_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_30, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ('.' | '...')
            // TODO visiting JavaCallMakerVisitor.visit_Group(('.' | '...'))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('.' | '...')
                // generated call: (_tmp_223_var = _tmp_223_rule()) != null  // '.' | '...'
            // collecting vars: None _tmp_223_var
            //    vars: {'_tmp_223_var': None}
            Object _tmp_223_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ('.' | '...')
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(('.' | '...'))
                // TODO visiting JavaCallMakerVisitor.visit_Group(('.' | '...'))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('.' | '...')
                // REMOVE result call (_tmp_223_var = _tmp_223_rule()) != null  // '.' | '...'
                (_tmp_223_var = _tmp_223_rule()) != null  // '.' | '...'
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['_tmp_223_var']
                if (_tmp_223_var instanceof Token) {
                    // TODO
                } else if (_tmp_223_var instanceof SSTNode) {
                    children.add((SSTNode)_tmp_223_var);
                } else if (_tmp_223_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])_tmp_223_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP1_30_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP1_30_ID, null);
    }

    // _tmp_31: ','
    public Object _tmp_31_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_31, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_31_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_31_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_31[" + pos + ", " + mark() +" ](level: " + level + ") ',' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_31_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_31_ID, null);
    }

    // _loop0_33: ',' import_from_as_name
    public SSTNode[] _loop0_33_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_33, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: elem
        {
            // visiting Alt: ',' import_from_as_name
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_as_name) - should work
            // name = import_from_as_name
            // TODO replacing alias_ty --> SSTNode
                // generated call: (import_from_as_name_var = import_from_as_name_rule()) != null  // import_from_as_name
            // collecting vars: SSTNode elem
            //    vars: {'_literal': 'Token', 'elem': 'SSTNode'}
            Object _literal;
            Object elem;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: import_from_as_name
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(import_from_as_name)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_as_name) - should work
                // name = import_from_as_name
                // TODO replacing alias_ty --> SSTNode
                // REMOVE result call (import_from_as_name_var = import_from_as_name_rule()) != null  // import_from_as_name
                (elem = import_from_as_name_rule()) != null  // import_from_as_name
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: elem
                Token endToken = getToken(mark());
                // node.action: elem
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_33_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_33_ID, null);
    }

    // _gather_32: import_from_as_name _loop0_33
    public SSTNode[] _gather_32_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _gather_32, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _GATHER_32_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, _GATHER_32_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: import_from_as_name _loop0_33
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_as_name) - should work
            // name = import_from_as_name
            // TODO replacing alias_ty --> SSTNode
                // generated call: (import_from_as_name_var = import_from_as_name_rule()) != null  // import_from_as_name
            // collecting vars: SSTNode elem
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_33) - should work
            // name = _loop0_33
                // generated call: (_loop0_33_var = _loop0_33_rule()) != null  // _loop0_33
            // collecting vars: SSTNode[] seq
            //    vars: {'elem': 'SSTNode', 'seq': 'SSTNode[]'}
            SSTNode elem;
            SSTNode[] seq;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: import_from_as_name
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(import_from_as_name)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(import_from_as_name) - should work
                // name = import_from_as_name
                // TODO replacing alias_ty --> SSTNode
                // REMOVE result call (import_from_as_name_var = import_from_as_name_rule()) != null  // import_from_as_name
                (elem = import_from_as_name_rule()) != null  // import_from_as_name
                &&
                // TODO visiting JavaParserGeneratorNamedItem: _loop0_33
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_33)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_33) - should work
                // name = _loop0_33
                // REMOVE result call (_loop0_33_var = _loop0_33_rule()) != null  // _loop0_33
                (seq = _loop0_33_rule()) != null  // _loop0_33
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_gather_32[" + pos + ", " + mark() +" ](level: " + level + ") import_from_as_name _loop0_33 succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['elem', 'seq']
                // TODO handle default action if there is more variables
                return (SSTNode[])cache.putResult(pos, _GATHER_32_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _GATHER_32_ID, null);
    }

    // _tmp_34: 'as' NAME
    public Object _tmp_34_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_34, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_34_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_34_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: z
        {
            // visiting Alt: 'as' NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
                // generated call: (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token z
            //    vars: {'_keyword': 'Token', 'z': 'Token'}
            Token _keyword;
            Token z;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'as'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('as')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
                // REMOVE result call (_keyword = expect(KEYWORD_AS)) != null  // token='as'
                (_keyword = expect(KEYWORD_AS)) != null  // token='as'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (z = expect(Token.Kind.NAME)) != null  // NAME
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_34[" + pos + ", " + mark() +" ](level: " + level + ") 'as' NAME succeeded!");
                }
                // alt action: z
                Token endToken = getToken(mark());
                // node.action: z
                result = z;
                return (Object)cache.putResult(pos, _TMP_34_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_34_ID, null);
    }

    // _loop0_36: ',' dotted_as_name
    public SSTNode[] _loop0_36_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_36, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: elem
        {
            // visiting Alt: ',' dotted_as_name
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_as_name) - should work
            // name = dotted_as_name
            // TODO replacing alias_ty --> SSTNode
                // generated call: (dotted_as_name_var = dotted_as_name_rule()) != null  // dotted_as_name
            // collecting vars: SSTNode elem
            //    vars: {'_literal': 'Token', 'elem': 'SSTNode'}
            Object _literal;
            Object elem;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: dotted_as_name
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(dotted_as_name)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_as_name) - should work
                // name = dotted_as_name
                // TODO replacing alias_ty --> SSTNode
                // REMOVE result call (dotted_as_name_var = dotted_as_name_rule()) != null  // dotted_as_name
                (elem = dotted_as_name_rule()) != null  // dotted_as_name
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: elem
                Token endToken = getToken(mark());
                // node.action: elem
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_36_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_36_ID, null);
    }

    // _gather_35: dotted_as_name _loop0_36
    public SSTNode[] _gather_35_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _gather_35, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _GATHER_35_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, _GATHER_35_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: dotted_as_name _loop0_36
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_as_name) - should work
            // name = dotted_as_name
            // TODO replacing alias_ty --> SSTNode
                // generated call: (dotted_as_name_var = dotted_as_name_rule()) != null  // dotted_as_name
            // collecting vars: SSTNode elem
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_36) - should work
            // name = _loop0_36
                // generated call: (_loop0_36_var = _loop0_36_rule()) != null  // _loop0_36
            // collecting vars: SSTNode[] seq
            //    vars: {'elem': 'SSTNode', 'seq': 'SSTNode[]'}
            SSTNode elem;
            SSTNode[] seq;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: dotted_as_name
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(dotted_as_name)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dotted_as_name) - should work
                // name = dotted_as_name
                // TODO replacing alias_ty --> SSTNode
                // REMOVE result call (dotted_as_name_var = dotted_as_name_rule()) != null  // dotted_as_name
                (elem = dotted_as_name_rule()) != null  // dotted_as_name
                &&
                // TODO visiting JavaParserGeneratorNamedItem: _loop0_36
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_36)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_36) - should work
                // name = _loop0_36
                // REMOVE result call (_loop0_36_var = _loop0_36_rule()) != null  // _loop0_36
                (seq = _loop0_36_rule()) != null  // _loop0_36
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_gather_35[" + pos + ", " + mark() +" ](level: " + level + ") dotted_as_name _loop0_36 succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['elem', 'seq']
                // TODO handle default action if there is more variables
                return (SSTNode[])cache.putResult(pos, _GATHER_35_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _GATHER_35_ID, null);
    }

    // _tmp_37: 'as' NAME
    public Object _tmp_37_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_37, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_37_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_37_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: z
        {
            // visiting Alt: 'as' NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
                // generated call: (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token z
            //    vars: {'_keyword': 'Token', 'z': 'Token'}
            Token _keyword;
            Token z;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'as'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('as')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
                // REMOVE result call (_keyword = expect(KEYWORD_AS)) != null  // token='as'
                (_keyword = expect(KEYWORD_AS)) != null  // token='as'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (z = expect(Token.Kind.NAME)) != null  // NAME
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_37[" + pos + ", " + mark() +" ](level: " + level + ") 'as' NAME succeeded!");
                }
                // alt action: z
                Token endToken = getToken(mark());
                // node.action: z
                result = z;
                return (Object)cache.putResult(pos, _TMP_37_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_37_ID, null);
    }

    // _tmp_38: else_block
    public Object _tmp_38_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_38, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_38_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_38_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: else_block
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
            // name = else_block
                // generated call: (else_block_var = else_block_rule()) != null  // else_block
            // collecting vars: SSTNode[] else_block_var
            //    vars: {'else_block_var': 'SSTNode[]'}
            SSTNode[] else_block_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: else_block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(else_block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
                // name = else_block
                // REMOVE result call (else_block_var = else_block_rule()) != null  // else_block
                (else_block_var = else_block_rule()) != null  // else_block
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_38[" + pos + ", " + mark() +" ](level: " + level + ") else_block succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['else_block_var']
                result = else_block_var;
                return (Object)cache.putResult(pos, _TMP_38_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_38_ID, null);
    }

    // _tmp_39: else_block
    public Object _tmp_39_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_39, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_39_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_39_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: else_block
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
            // name = else_block
                // generated call: (else_block_var = else_block_rule()) != null  // else_block
            // collecting vars: SSTNode[] else_block_var
            //    vars: {'else_block_var': 'SSTNode[]'}
            SSTNode[] else_block_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: else_block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(else_block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
                // name = else_block
                // REMOVE result call (else_block_var = else_block_rule()) != null  // else_block
                (else_block_var = else_block_rule()) != null  // else_block
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_39[" + pos + ", " + mark() +" ](level: " + level + ") else_block succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['else_block_var']
                result = else_block_var;
                return (Object)cache.putResult(pos, _TMP_39_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_39_ID, null);
    }

    // _tmp_40: else_block
    public Object _tmp_40_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_40, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_40_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_40_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: else_block
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
            // name = else_block
                // generated call: (else_block_var = else_block_rule()) != null  // else_block
            // collecting vars: SSTNode[] else_block_var
            //    vars: {'else_block_var': 'SSTNode[]'}
            SSTNode[] else_block_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: else_block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(else_block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
                // name = else_block
                // REMOVE result call (else_block_var = else_block_rule()) != null  // else_block
                (else_block_var = else_block_rule()) != null  // else_block
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_40[" + pos + ", " + mark() +" ](level: " + level + ") else_block succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['else_block_var']
                result = else_block_var;
                return (Object)cache.putResult(pos, _TMP_40_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_40_ID, null);
    }

    // _tmp_41: TYPE_COMMENT
    public Object _tmp_41_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_41, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_41_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_41_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: TYPE_COMMENT
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // name = TYPE_COMMENT
                // generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            // collecting vars: Token type_comment_var
            //    vars: {'type_comment_var': 'Token'}
            Token type_comment_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
                // name = TYPE_COMMENT
                // REMOVE result call (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
                (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_41[" + pos + ", " + mark() +" ](level: " + level + ") TYPE_COMMENT succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['type_comment_var']
                result = type_comment_var;
                return (Object)cache.putResult(pos, _TMP_41_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_41_ID, null);
    }

    // _tmp_42: else_block
    public Object _tmp_42_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_42, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_42_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_42_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: else_block
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
            // name = else_block
                // generated call: (else_block_var = else_block_rule()) != null  // else_block
            // collecting vars: SSTNode[] else_block_var
            //    vars: {'else_block_var': 'SSTNode[]'}
            SSTNode[] else_block_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: else_block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(else_block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
                // name = else_block
                // REMOVE result call (else_block_var = else_block_rule()) != null  // else_block
                (else_block_var = else_block_rule()) != null  // else_block
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_42[" + pos + ", " + mark() +" ](level: " + level + ") else_block succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['else_block_var']
                result = else_block_var;
                return (Object)cache.putResult(pos, _TMP_42_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_42_ID, null);
    }

    // _tmp_43: TYPE_COMMENT
    public Object _tmp_43_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_43, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_43_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_43_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: TYPE_COMMENT
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // name = TYPE_COMMENT
                // generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            // collecting vars: Token type_comment_var
            //    vars: {'type_comment_var': 'Token'}
            Token type_comment_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
                // name = TYPE_COMMENT
                // REMOVE result call (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
                (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_43[" + pos + ", " + mark() +" ](level: " + level + ") TYPE_COMMENT succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['type_comment_var']
                result = type_comment_var;
                return (Object)cache.putResult(pos, _TMP_43_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_43_ID, null);
    }

    // _tmp_44: else_block
    public Object _tmp_44_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_44, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_44_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_44_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: else_block
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
            // name = else_block
                // generated call: (else_block_var = else_block_rule()) != null  // else_block
            // collecting vars: SSTNode[] else_block_var
            //    vars: {'else_block_var': 'SSTNode[]'}
            SSTNode[] else_block_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: else_block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(else_block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
                // name = else_block
                // REMOVE result call (else_block_var = else_block_rule()) != null  // else_block
                (else_block_var = else_block_rule()) != null  // else_block
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_44[" + pos + ", " + mark() +" ](level: " + level + ") else_block succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['else_block_var']
                result = else_block_var;
                return (Object)cache.putResult(pos, _TMP_44_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_44_ID, null);
    }

    // _loop0_46: ',' with_item
    public SSTNode[] _loop0_46_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_46, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: elem
        {
            // visiting Alt: ',' with_item
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
            // name = with_item
            // TODO replacing withitem_ty --> SSTNode
                // generated call: (with_item_var = with_item_rule()) != null  // with_item
            // collecting vars: SSTNode elem
            //    vars: {'_literal': 'Token', 'elem': 'SSTNode'}
            Object _literal;
            Object elem;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: with_item
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(with_item)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
                // name = with_item
                // TODO replacing withitem_ty --> SSTNode
                // REMOVE result call (with_item_var = with_item_rule()) != null  // with_item
                (elem = with_item_rule()) != null  // with_item
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: elem
                Token endToken = getToken(mark());
                // node.action: elem
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_46_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_46_ID, null);
    }

    // _gather_45: with_item _loop0_46
    public SSTNode[] _gather_45_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _gather_45, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _GATHER_45_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, _GATHER_45_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: with_item _loop0_46
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
            // name = with_item
            // TODO replacing withitem_ty --> SSTNode
                // generated call: (with_item_var = with_item_rule()) != null  // with_item
            // collecting vars: SSTNode elem
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_46) - should work
            // name = _loop0_46
                // generated call: (_loop0_46_var = _loop0_46_rule()) != null  // _loop0_46
            // collecting vars: SSTNode[] seq
            //    vars: {'elem': 'SSTNode', 'seq': 'SSTNode[]'}
            SSTNode elem;
            SSTNode[] seq;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: with_item
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(with_item)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
                // name = with_item
                // TODO replacing withitem_ty --> SSTNode
                // REMOVE result call (with_item_var = with_item_rule()) != null  // with_item
                (elem = with_item_rule()) != null  // with_item
                &&
                // TODO visiting JavaParserGeneratorNamedItem: _loop0_46
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_46)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_46) - should work
                // name = _loop0_46
                // REMOVE result call (_loop0_46_var = _loop0_46_rule()) != null  // _loop0_46
                (seq = _loop0_46_rule()) != null  // _loop0_46
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_gather_45[" + pos + ", " + mark() +" ](level: " + level + ") with_item _loop0_46 succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['elem', 'seq']
                // TODO handle default action if there is more variables
                return (SSTNode[])cache.putResult(pos, _GATHER_45_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _GATHER_45_ID, null);
    }

    // _loop0_48: ',' with_item
    public SSTNode[] _loop0_48_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_48, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: elem
        {
            // visiting Alt: ',' with_item
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
            // name = with_item
            // TODO replacing withitem_ty --> SSTNode
                // generated call: (with_item_var = with_item_rule()) != null  // with_item
            // collecting vars: SSTNode elem
            //    vars: {'_literal': 'Token', 'elem': 'SSTNode'}
            Object _literal;
            Object elem;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: with_item
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(with_item)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
                // name = with_item
                // TODO replacing withitem_ty --> SSTNode
                // REMOVE result call (with_item_var = with_item_rule()) != null  // with_item
                (elem = with_item_rule()) != null  // with_item
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: elem
                Token endToken = getToken(mark());
                // node.action: elem
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_48_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_48_ID, null);
    }

    // _gather_47: with_item _loop0_48
    public SSTNode[] _gather_47_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _gather_47, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _GATHER_47_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, _GATHER_47_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: with_item _loop0_48
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
            // name = with_item
            // TODO replacing withitem_ty --> SSTNode
                // generated call: (with_item_var = with_item_rule()) != null  // with_item
            // collecting vars: SSTNode elem
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_48) - should work
            // name = _loop0_48
                // generated call: (_loop0_48_var = _loop0_48_rule()) != null  // _loop0_48
            // collecting vars: SSTNode[] seq
            //    vars: {'elem': 'SSTNode', 'seq': 'SSTNode[]'}
            SSTNode elem;
            SSTNode[] seq;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: with_item
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(with_item)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
                // name = with_item
                // TODO replacing withitem_ty --> SSTNode
                // REMOVE result call (with_item_var = with_item_rule()) != null  // with_item
                (elem = with_item_rule()) != null  // with_item
                &&
                // TODO visiting JavaParserGeneratorNamedItem: _loop0_48
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_48)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_48) - should work
                // name = _loop0_48
                // REMOVE result call (_loop0_48_var = _loop0_48_rule()) != null  // _loop0_48
                (seq = _loop0_48_rule()) != null  // _loop0_48
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_gather_47[" + pos + ", " + mark() +" ](level: " + level + ") with_item _loop0_48 succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['elem', 'seq']
                // TODO handle default action if there is more variables
                return (SSTNode[])cache.putResult(pos, _GATHER_47_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _GATHER_47_ID, null);
    }

    // _tmp_49: TYPE_COMMENT
    public Object _tmp_49_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_49, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_49_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_49_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: TYPE_COMMENT
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // name = TYPE_COMMENT
                // generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            // collecting vars: Token type_comment_var
            //    vars: {'type_comment_var': 'Token'}
            Token type_comment_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
                // name = TYPE_COMMENT
                // REMOVE result call (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
                (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_49[" + pos + ", " + mark() +" ](level: " + level + ") TYPE_COMMENT succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['type_comment_var']
                result = type_comment_var;
                return (Object)cache.putResult(pos, _TMP_49_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_49_ID, null);
    }

    // _loop0_51: ',' with_item
    public SSTNode[] _loop0_51_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_51, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: elem
        {
            // visiting Alt: ',' with_item
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
            // name = with_item
            // TODO replacing withitem_ty --> SSTNode
                // generated call: (with_item_var = with_item_rule()) != null  // with_item
            // collecting vars: SSTNode elem
            //    vars: {'_literal': 'Token', 'elem': 'SSTNode'}
            Object _literal;
            Object elem;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: with_item
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(with_item)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
                // name = with_item
                // TODO replacing withitem_ty --> SSTNode
                // REMOVE result call (with_item_var = with_item_rule()) != null  // with_item
                (elem = with_item_rule()) != null  // with_item
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: elem
                Token endToken = getToken(mark());
                // node.action: elem
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_51_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_51_ID, null);
    }

    // _gather_50: with_item _loop0_51
    public SSTNode[] _gather_50_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _gather_50, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _GATHER_50_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, _GATHER_50_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: with_item _loop0_51
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
            // name = with_item
            // TODO replacing withitem_ty --> SSTNode
                // generated call: (with_item_var = with_item_rule()) != null  // with_item
            // collecting vars: SSTNode elem
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_51) - should work
            // name = _loop0_51
                // generated call: (_loop0_51_var = _loop0_51_rule()) != null  // _loop0_51
            // collecting vars: SSTNode[] seq
            //    vars: {'elem': 'SSTNode', 'seq': 'SSTNode[]'}
            SSTNode elem;
            SSTNode[] seq;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: with_item
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(with_item)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
                // name = with_item
                // TODO replacing withitem_ty --> SSTNode
                // REMOVE result call (with_item_var = with_item_rule()) != null  // with_item
                (elem = with_item_rule()) != null  // with_item
                &&
                // TODO visiting JavaParserGeneratorNamedItem: _loop0_51
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_51)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_51) - should work
                // name = _loop0_51
                // REMOVE result call (_loop0_51_var = _loop0_51_rule()) != null  // _loop0_51
                (seq = _loop0_51_rule()) != null  // _loop0_51
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_gather_50[" + pos + ", " + mark() +" ](level: " + level + ") with_item _loop0_51 succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['elem', 'seq']
                // TODO handle default action if there is more variables
                return (SSTNode[])cache.putResult(pos, _GATHER_50_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _GATHER_50_ID, null);
    }

    // _loop0_53: ',' with_item
    public SSTNode[] _loop0_53_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_53, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: elem
        {
            // visiting Alt: ',' with_item
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
            // name = with_item
            // TODO replacing withitem_ty --> SSTNode
                // generated call: (with_item_var = with_item_rule()) != null  // with_item
            // collecting vars: SSTNode elem
            //    vars: {'_literal': 'Token', 'elem': 'SSTNode'}
            Object _literal;
            Object elem;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: with_item
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(with_item)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
                // name = with_item
                // TODO replacing withitem_ty --> SSTNode
                // REMOVE result call (with_item_var = with_item_rule()) != null  // with_item
                (elem = with_item_rule()) != null  // with_item
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: elem
                Token endToken = getToken(mark());
                // node.action: elem
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_53_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_53_ID, null);
    }

    // _gather_52: with_item _loop0_53
    public SSTNode[] _gather_52_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _gather_52, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _GATHER_52_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, _GATHER_52_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: with_item _loop0_53
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
            // name = with_item
            // TODO replacing withitem_ty --> SSTNode
                // generated call: (with_item_var = with_item_rule()) != null  // with_item
            // collecting vars: SSTNode elem
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_53) - should work
            // name = _loop0_53
                // generated call: (_loop0_53_var = _loop0_53_rule()) != null  // _loop0_53
            // collecting vars: SSTNode[] seq
            //    vars: {'elem': 'SSTNode', 'seq': 'SSTNode[]'}
            SSTNode elem;
            SSTNode[] seq;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: with_item
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(with_item)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(with_item) - should work
                // name = with_item
                // TODO replacing withitem_ty --> SSTNode
                // REMOVE result call (with_item_var = with_item_rule()) != null  // with_item
                (elem = with_item_rule()) != null  // with_item
                &&
                // TODO visiting JavaParserGeneratorNamedItem: _loop0_53
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_53)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_53) - should work
                // name = _loop0_53
                // REMOVE result call (_loop0_53_var = _loop0_53_rule()) != null  // _loop0_53
                (seq = _loop0_53_rule()) != null  // _loop0_53
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_gather_52[" + pos + ", " + mark() +" ](level: " + level + ") with_item _loop0_53 succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['elem', 'seq']
                // TODO handle default action if there is more variables
                return (SSTNode[])cache.putResult(pos, _GATHER_52_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _GATHER_52_ID, null);
    }

    // _tmp_54: TYPE_COMMENT
    public Object _tmp_54_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_54, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_54_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_54_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: TYPE_COMMENT
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
            // name = TYPE_COMMENT
                // generated call: (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            // collecting vars: Token type_comment_var
            //    vars: {'type_comment_var': 'Token'}
            Token type_comment_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: TYPE_COMMENT
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(TYPE_COMMENT)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(TYPE_COMMENT) - should work
                // name = TYPE_COMMENT
                // REMOVE result call (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
                (type_comment_var = expect(Token.Kind.TYPE_COMMENT)) != null  // token='TYPE_COMMENT'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_54[" + pos + ", " + mark() +" ](level: " + level + ") TYPE_COMMENT succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['type_comment_var']
                result = type_comment_var;
                return (Object)cache.putResult(pos, _TMP_54_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_54_ID, null);
    }

    // _loop1_55: except_block
    public SSTNode[] _loop1_55_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_55, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: except_block
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(except_block) - should work
            // name = except_block
            // TODO replacing excepthandler_ty --> SSTNode
                // generated call: (except_block_var = except_block_rule()) != null  // except_block
            // collecting vars: SSTNode except_block_var
            //    vars: {'except_block_var': 'SSTNode'}
            Object except_block_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: except_block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(except_block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(except_block) - should work
                // name = except_block
                // TODO replacing excepthandler_ty --> SSTNode
                // REMOVE result call (except_block_var = except_block_rule()) != null  // except_block
                (except_block_var = except_block_rule()) != null  // except_block
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['except_block_var']
                if (except_block_var instanceof Token) {
                    // TODO
                } else if (except_block_var instanceof SSTNode) {
                    children.add((SSTNode)except_block_var);
                } else if (except_block_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])except_block_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP1_55_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP1_55_ID, null);
    }

    // _tmp_56: else_block
    public Object _tmp_56_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_56, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_56_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_56_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: else_block
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
            // name = else_block
                // generated call: (else_block_var = else_block_rule()) != null  // else_block
            // collecting vars: SSTNode[] else_block_var
            //    vars: {'else_block_var': 'SSTNode[]'}
            SSTNode[] else_block_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: else_block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(else_block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(else_block) - should work
                // name = else_block
                // REMOVE result call (else_block_var = else_block_rule()) != null  // else_block
                (else_block_var = else_block_rule()) != null  // else_block
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_56[" + pos + ", " + mark() +" ](level: " + level + ") else_block succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['else_block_var']
                result = else_block_var;
                return (Object)cache.putResult(pos, _TMP_56_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_56_ID, null);
    }

    // _tmp_57: finally_block
    public Object _tmp_57_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_57, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_57_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_57_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: finally_block
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(finally_block) - should work
            // name = finally_block
                // generated call: (finally_block_var = finally_block_rule()) != null  // finally_block
            // collecting vars: SSTNode[] finally_block_var
            //    vars: {'finally_block_var': 'SSTNode[]'}
            SSTNode[] finally_block_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: finally_block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(finally_block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(finally_block) - should work
                // name = finally_block
                // REMOVE result call (finally_block_var = finally_block_rule()) != null  // finally_block
                (finally_block_var = finally_block_rule()) != null  // finally_block
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_57[" + pos + ", " + mark() +" ](level: " + level + ") finally_block succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['finally_block_var']
                result = finally_block_var;
                return (Object)cache.putResult(pos, _TMP_57_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_57_ID, null);
    }

    // _tmp_58: 'as' NAME
    public Object _tmp_58_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_58, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_58_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_58_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: z
        {
            // visiting Alt: 'as' NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
                // generated call: (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token z
            //    vars: {'_keyword': 'Token', 'z': 'Token'}
            Token _keyword;
            Token z;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'as'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('as')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
                // REMOVE result call (_keyword = expect(KEYWORD_AS)) != null  // token='as'
                (_keyword = expect(KEYWORD_AS)) != null  // token='as'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (z = expect(Token.Kind.NAME)) != null  // NAME
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_58[" + pos + ", " + mark() +" ](level: " + level + ") 'as' NAME succeeded!");
                }
                // alt action: z
                Token endToken = getToken(mark());
                // node.action: z
                result = z;
                return (Object)cache.putResult(pos, _TMP_58_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_58_ID, null);
    }

    // _loop1_59: case_block
    public SSTNode[] _loop1_59_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_59, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: case_block
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(case_block) - should work
            // name = case_block
            // TODO replacing match_case_ty --> SSTNode
                // generated call: (case_block_var = case_block_rule()) != null  // case_block
            // collecting vars: SSTNode case_block_var
            //    vars: {'case_block_var': 'SSTNode'}
            Object case_block_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: case_block
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(case_block)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(case_block) - should work
                // name = case_block
                // TODO replacing match_case_ty --> SSTNode
                // REMOVE result call (case_block_var = case_block_rule()) != null  // case_block
                (case_block_var = case_block_rule()) != null  // case_block
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['case_block_var']
                if (case_block_var instanceof Token) {
                    // TODO
                } else if (case_block_var instanceof SSTNode) {
                    children.add((SSTNode)case_block_var);
                } else if (case_block_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])case_block_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP1_59_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP1_59_ID, null);
    }

    // _loop0_61: '|' closed_pattern
    public SSTNode[] _loop0_61_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_61, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: elem
        {
            // visiting Alt: '|' closed_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('|')
                // generated call: (_literal = expect(Token.Kind.VBAR)) != null  // token='|'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(closed_pattern) - should work
            // name = closed_pattern
                // generated call: (closed_pattern_var = closed_pattern_rule()) != null  // closed_pattern
            // collecting vars: SSTNode elem
            //    vars: {'_literal': 'Token', 'elem': 'SSTNode'}
            Object _literal;
            Object elem;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: '|'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('|')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('|')
                // REMOVE result call (_literal = expect(Token.Kind.VBAR)) != null  // token='|'
                (_literal = expect(Token.Kind.VBAR)) != null  // token='|'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: closed_pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(closed_pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(closed_pattern) - should work
                // name = closed_pattern
                // REMOVE result call (closed_pattern_var = closed_pattern_rule()) != null  // closed_pattern
                (elem = closed_pattern_rule()) != null  // closed_pattern
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: elem
                Token endToken = getToken(mark());
                // node.action: elem
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_61_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_61_ID, null);
    }

    // _gather_60: closed_pattern _loop0_61
    public SSTNode[] _gather_60_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _gather_60, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _GATHER_60_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, _GATHER_60_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: closed_pattern _loop0_61
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(closed_pattern) - should work
            // name = closed_pattern
                // generated call: (closed_pattern_var = closed_pattern_rule()) != null  // closed_pattern
            // collecting vars: SSTNode elem
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_61) - should work
            // name = _loop0_61
                // generated call: (_loop0_61_var = _loop0_61_rule()) != null  // _loop0_61
            // collecting vars: SSTNode[] seq
            //    vars: {'elem': 'SSTNode', 'seq': 'SSTNode[]'}
            SSTNode elem;
            SSTNode[] seq;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: closed_pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(closed_pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(closed_pattern) - should work
                // name = closed_pattern
                // REMOVE result call (closed_pattern_var = closed_pattern_rule()) != null  // closed_pattern
                (elem = closed_pattern_rule()) != null  // closed_pattern
                &&
                // TODO visiting JavaParserGeneratorNamedItem: _loop0_61
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_61)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_61) - should work
                // name = _loop0_61
                // REMOVE result call (_loop0_61_var = _loop0_61_rule()) != null  // _loop0_61
                (seq = _loop0_61_rule()) != null  // _loop0_61
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_gather_60[" + pos + ", " + mark() +" ](level: " + level + ") closed_pattern _loop0_61 succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['elem', 'seq']
                // TODO handle default action if there is more variables
                return (SSTNode[])cache.putResult(pos, _GATHER_60_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _GATHER_60_ID, null);
    }

    // _tmp_62: '+' | '-'
    public Object _tmp_62_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_62, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_62_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_62_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: '+'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('+')
                // generated call: (_literal = expect(Token.Kind.PLUS)) != null  // token='+'
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '+'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('+')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('+')
                // REMOVE result call (_literal = expect(Token.Kind.PLUS)) != null  // token='+'
                (_literal = expect(Token.Kind.PLUS)) != null  // token='+'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_62[" + pos + ", " + mark() +" ](level: " + level + ") '+' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_62_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: '-'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('-')
                // generated call: (_literal = expect(Token.Kind.MINUS)) != null  // token='-'
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '-'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('-')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('-')
                // REMOVE result call (_literal = expect(Token.Kind.MINUS)) != null  // token='-'
                (_literal = expect(Token.Kind.MINUS)) != null  // token='-'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_62[" + pos + ", " + mark() +" ](level: " + level + ") '-' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_62_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_62_ID, null);
    }

    // _tmp_63: '.' | '(' | '='
    public Object _tmp_63_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_63, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_63_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_63_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: '.'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
                // generated call: (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '.'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('.')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
                // REMOVE result call (_literal = expect(Token.Kind.DOT)) != null  // token='.'
                (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_63[" + pos + ", " + mark() +" ](level: " + level + ") '.' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_63_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_63[" + pos + ", " + mark() +" ](level: " + level + ") '(' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_63_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: '='
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // generated call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // REMOVE result call (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
                (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_63[" + pos + ", " + mark() +" ](level: " + level + ") '=' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_63_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_63_ID, null);
    }

    // _tmp_64: '.' | '(' | '='
    public Object _tmp_64_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_64, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_64_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_64_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: '.'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
                // generated call: (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '.'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('.')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
                // REMOVE result call (_literal = expect(Token.Kind.DOT)) != null  // token='.'
                (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_64[" + pos + ", " + mark() +" ](level: " + level + ") '.' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_64_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_64[" + pos + ", " + mark() +" ](level: " + level + ") '(' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_64_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: '='
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // generated call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // REMOVE result call (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
                (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_64[" + pos + ", " + mark() +" ](level: " + level + ") '=' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_64_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_64_ID, null);
    }

    // _loop0_66: ',' maybe_star_pattern
    public SSTNode[] _loop0_66_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_66, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: elem
        {
            // visiting Alt: ',' maybe_star_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(maybe_star_pattern) - should work
            // name = maybe_star_pattern
                // generated call: (maybe_star_pattern_var = maybe_star_pattern_rule()) != null  // maybe_star_pattern
            // collecting vars: SSTNode elem
            //    vars: {'_literal': 'Token', 'elem': 'SSTNode'}
            Object _literal;
            Object elem;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: maybe_star_pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(maybe_star_pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(maybe_star_pattern) - should work
                // name = maybe_star_pattern
                // REMOVE result call (maybe_star_pattern_var = maybe_star_pattern_rule()) != null  // maybe_star_pattern
                (elem = maybe_star_pattern_rule()) != null  // maybe_star_pattern
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: elem
                Token endToken = getToken(mark());
                // node.action: elem
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_66_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_66_ID, null);
    }

    // _gather_65: maybe_star_pattern _loop0_66
    public SSTNode[] _gather_65_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _gather_65, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _GATHER_65_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, _GATHER_65_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: maybe_star_pattern _loop0_66
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(maybe_star_pattern) - should work
            // name = maybe_star_pattern
                // generated call: (maybe_star_pattern_var = maybe_star_pattern_rule()) != null  // maybe_star_pattern
            // collecting vars: SSTNode elem
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_66) - should work
            // name = _loop0_66
                // generated call: (_loop0_66_var = _loop0_66_rule()) != null  // _loop0_66
            // collecting vars: SSTNode[] seq
            //    vars: {'elem': 'SSTNode', 'seq': 'SSTNode[]'}
            SSTNode elem;
            SSTNode[] seq;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: maybe_star_pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(maybe_star_pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(maybe_star_pattern) - should work
                // name = maybe_star_pattern
                // REMOVE result call (maybe_star_pattern_var = maybe_star_pattern_rule()) != null  // maybe_star_pattern
                (elem = maybe_star_pattern_rule()) != null  // maybe_star_pattern
                &&
                // TODO visiting JavaParserGeneratorNamedItem: _loop0_66
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_66)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_66) - should work
                // name = _loop0_66
                // REMOVE result call (_loop0_66_var = _loop0_66_rule()) != null  // _loop0_66
                (seq = _loop0_66_rule()) != null  // _loop0_66
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_gather_65[" + pos + ", " + mark() +" ](level: " + level + ") maybe_star_pattern _loop0_66 succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['elem', 'seq']
                // TODO handle default action if there is more variables
                return (SSTNode[])cache.putResult(pos, _GATHER_65_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _GATHER_65_ID, null);
    }

    // _tmp_67: capture_pattern | wildcard_pattern
    public Object _tmp_67_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_67, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_67_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_67_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: capture_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(capture_pattern) - should work
            // name = capture_pattern
                // generated call: (capture_pattern_var = capture_pattern_rule()) != null  // capture_pattern
            // collecting vars: SSTNode capture_pattern_var
            //    vars: {'capture_pattern_var': 'SSTNode'}
            SSTNode capture_pattern_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: capture_pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(capture_pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(capture_pattern) - should work
                // name = capture_pattern
                // REMOVE result call (capture_pattern_var = capture_pattern_rule()) != null  // capture_pattern
                (capture_pattern_var = capture_pattern_rule()) != null  // capture_pattern
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_67[" + pos + ", " + mark() +" ](level: " + level + ") capture_pattern succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['capture_pattern_var']
                result = capture_pattern_var;
                return (Object)cache.putResult(pos, _TMP_67_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: wildcard_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(wildcard_pattern) - should work
            // name = wildcard_pattern
                // generated call: (wildcard_pattern_var = wildcard_pattern_rule()) != null  // wildcard_pattern
            // collecting vars: SSTNode wildcard_pattern_var
            //    vars: {'wildcard_pattern_var': 'SSTNode'}
            SSTNode wildcard_pattern_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: wildcard_pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(wildcard_pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(wildcard_pattern) - should work
                // name = wildcard_pattern
                // REMOVE result call (wildcard_pattern_var = wildcard_pattern_rule()) != null  // wildcard_pattern
                (wildcard_pattern_var = wildcard_pattern_rule()) != null  // wildcard_pattern
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_67[" + pos + ", " + mark() +" ](level: " + level + ") wildcard_pattern succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['wildcard_pattern_var']
                result = wildcard_pattern_var;
                return (Object)cache.putResult(pos, _TMP_67_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_67_ID, null);
    }

    // _loop0_69: ',' key_value_pattern
    public SSTNode[] _loop0_69_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_69, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: elem
        {
            // visiting Alt: ',' key_value_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(key_value_pattern) - should work
            // name = key_value_pattern
            // TODO replacing KeyValuePair[] --> SSTNode[]
                // generated call: (key_value_pattern_var = key_value_pattern_rule()) != null  // key_value_pattern
            // collecting vars: SSTNode[] elem
            //    vars: {'_literal': 'Token', 'elem': 'SSTNode[]'}
            Object _literal;
            Object elem;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: key_value_pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(key_value_pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(key_value_pattern) - should work
                // name = key_value_pattern
                // TODO replacing KeyValuePair[] --> SSTNode[]
                // REMOVE result call (key_value_pattern_var = key_value_pattern_rule()) != null  // key_value_pattern
                (elem = key_value_pattern_rule()) != null  // key_value_pattern
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: elem
                Token endToken = getToken(mark());
                // node.action: elem
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_69_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_69_ID, null);
    }

    // _gather_68: key_value_pattern _loop0_69
    public SSTNode[] _gather_68_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _gather_68, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _GATHER_68_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, _GATHER_68_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: key_value_pattern _loop0_69
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(key_value_pattern) - should work
            // name = key_value_pattern
            // TODO replacing KeyValuePair[] --> SSTNode[]
                // generated call: (key_value_pattern_var = key_value_pattern_rule()) != null  // key_value_pattern
            // collecting vars: SSTNode[] elem
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_69) - should work
            // name = _loop0_69
                // generated call: (_loop0_69_var = _loop0_69_rule()) != null  // _loop0_69
            // collecting vars: SSTNode[] seq
            //    vars: {'elem': 'SSTNode[]', 'seq': 'SSTNode[]'}
            SSTNode[] elem;
            SSTNode[] seq;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: key_value_pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(key_value_pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(key_value_pattern) - should work
                // name = key_value_pattern
                // TODO replacing KeyValuePair[] --> SSTNode[]
                // REMOVE result call (key_value_pattern_var = key_value_pattern_rule()) != null  // key_value_pattern
                (elem = key_value_pattern_rule()) != null  // key_value_pattern
                &&
                // TODO visiting JavaParserGeneratorNamedItem: _loop0_69
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_69)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_69) - should work
                // name = _loop0_69
                // REMOVE result call (_loop0_69_var = _loop0_69_rule()) != null  // _loop0_69
                (seq = _loop0_69_rule()) != null  // _loop0_69
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_gather_68[" + pos + ", " + mark() +" ](level: " + level + ") key_value_pattern _loop0_69 succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['elem', 'seq']
                // TODO handle default action if there is more variables
                return (SSTNode[])cache.putResult(pos, _GATHER_68_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _GATHER_68_ID, null);
    }

    // _tmp_70: literal_pattern | value_pattern
    public Object _tmp_70_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_70, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_70_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_70_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: literal_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(literal_pattern) - should work
            // name = literal_pattern
                // generated call: (literal_pattern_var = literal_pattern_rule()) != null  // literal_pattern
            // collecting vars: SSTNode literal_pattern_var
            //    vars: {'literal_pattern_var': 'SSTNode'}
            SSTNode literal_pattern_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: literal_pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(literal_pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(literal_pattern) - should work
                // name = literal_pattern
                // REMOVE result call (literal_pattern_var = literal_pattern_rule()) != null  // literal_pattern
                (literal_pattern_var = literal_pattern_rule()) != null  // literal_pattern
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_70[" + pos + ", " + mark() +" ](level: " + level + ") literal_pattern succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['literal_pattern_var']
                result = literal_pattern_var;
                return (Object)cache.putResult(pos, _TMP_70_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: value_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(value_pattern) - should work
            // name = value_pattern
                // generated call: (value_pattern_var = value_pattern_rule()) != null  // value_pattern
            // collecting vars: SSTNode value_pattern_var
            //    vars: {'value_pattern_var': 'SSTNode'}
            SSTNode value_pattern_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: value_pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(value_pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(value_pattern) - should work
                // name = value_pattern
                // REMOVE result call (value_pattern_var = value_pattern_rule()) != null  // value_pattern
                (value_pattern_var = value_pattern_rule()) != null  // value_pattern
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_70[" + pos + ", " + mark() +" ](level: " + level + ") value_pattern succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['value_pattern_var']
                result = value_pattern_var;
                return (Object)cache.putResult(pos, _TMP_70_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_70_ID, null);
    }

    // _loop0_72: ',' pattern
    public SSTNode[] _loop0_72_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_72, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: elem
        {
            // visiting Alt: ',' pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
            // name = pattern
                // generated call: (pattern_var = pattern_rule()) != null  // pattern
            // collecting vars: SSTNode elem
            //    vars: {'_literal': 'Token', 'elem': 'SSTNode'}
            Object _literal;
            Object elem;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
                // name = pattern
                // REMOVE result call (pattern_var = pattern_rule()) != null  // pattern
                (elem = pattern_rule()) != null  // pattern
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: elem
                Token endToken = getToken(mark());
                // node.action: elem
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_72_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_72_ID, null);
    }

    // _gather_71: pattern _loop0_72
    public SSTNode[] _gather_71_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _gather_71, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _GATHER_71_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, _GATHER_71_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: pattern _loop0_72
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
            // name = pattern
                // generated call: (pattern_var = pattern_rule()) != null  // pattern
            // collecting vars: SSTNode elem
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_72) - should work
            // name = _loop0_72
                // generated call: (_loop0_72_var = _loop0_72_rule()) != null  // _loop0_72
            // collecting vars: SSTNode[] seq
            //    vars: {'elem': 'SSTNode', 'seq': 'SSTNode[]'}
            SSTNode elem;
            SSTNode[] seq;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(pattern) - should work
                // name = pattern
                // REMOVE result call (pattern_var = pattern_rule()) != null  // pattern
                (elem = pattern_rule()) != null  // pattern
                &&
                // TODO visiting JavaParserGeneratorNamedItem: _loop0_72
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_72)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_72) - should work
                // name = _loop0_72
                // REMOVE result call (_loop0_72_var = _loop0_72_rule()) != null  // _loop0_72
                (seq = _loop0_72_rule()) != null  // _loop0_72
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_gather_71[" + pos + ", " + mark() +" ](level: " + level + ") pattern _loop0_72 succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['elem', 'seq']
                // TODO handle default action if there is more variables
                return (SSTNode[])cache.putResult(pos, _GATHER_71_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _GATHER_71_ID, null);
    }

    // _loop0_74: ',' keyword_pattern
    public SSTNode[] _loop0_74_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_74, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: elem
        {
            // visiting Alt: ',' keyword_pattern
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(keyword_pattern) - should work
            // name = keyword_pattern
            // TODO replacing keyword_ty --> SSTNode
                // generated call: (keyword_pattern_var = keyword_pattern_rule()) != null  // keyword_pattern
            // collecting vars: SSTNode elem
            //    vars: {'_literal': 'Token', 'elem': 'SSTNode'}
            Object _literal;
            Object elem;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: keyword_pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(keyword_pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(keyword_pattern) - should work
                // name = keyword_pattern
                // TODO replacing keyword_ty --> SSTNode
                // REMOVE result call (keyword_pattern_var = keyword_pattern_rule()) != null  // keyword_pattern
                (elem = keyword_pattern_rule()) != null  // keyword_pattern
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: elem
                Token endToken = getToken(mark());
                // node.action: elem
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_74_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_74_ID, null);
    }

    // _gather_73: keyword_pattern _loop0_74
    public SSTNode[] _gather_73_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _gather_73, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _GATHER_73_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, _GATHER_73_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: keyword_pattern _loop0_74
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(keyword_pattern) - should work
            // name = keyword_pattern
            // TODO replacing keyword_ty --> SSTNode
                // generated call: (keyword_pattern_var = keyword_pattern_rule()) != null  // keyword_pattern
            // collecting vars: SSTNode elem
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_74) - should work
            // name = _loop0_74
                // generated call: (_loop0_74_var = _loop0_74_rule()) != null  // _loop0_74
            // collecting vars: SSTNode[] seq
            //    vars: {'elem': 'SSTNode', 'seq': 'SSTNode[]'}
            SSTNode elem;
            SSTNode[] seq;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: keyword_pattern
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(keyword_pattern)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(keyword_pattern) - should work
                // name = keyword_pattern
                // TODO replacing keyword_ty --> SSTNode
                // REMOVE result call (keyword_pattern_var = keyword_pattern_rule()) != null  // keyword_pattern
                (elem = keyword_pattern_rule()) != null  // keyword_pattern
                &&
                // TODO visiting JavaParserGeneratorNamedItem: _loop0_74
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_74)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_74) - should work
                // name = _loop0_74
                // REMOVE result call (_loop0_74_var = _loop0_74_rule()) != null  // _loop0_74
                (seq = _loop0_74_rule()) != null  // _loop0_74
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_gather_73[" + pos + ", " + mark() +" ](level: " + level + ") keyword_pattern _loop0_74 succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['elem', 'seq']
                // TODO handle default action if there is more variables
                return (SSTNode[])cache.putResult(pos, _GATHER_73_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _GATHER_73_ID, null);
    }

    // _tmp_75: star_expressions
    public Object _tmp_75_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_75, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_75_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_75_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: star_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // name = star_expressions
                // generated call: (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            // collecting vars: SSTNode star_expressions_var
            //    vars: {'star_expressions_var': 'SSTNode'}
            SSTNode star_expressions_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_expressions
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expressions)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
                // name = star_expressions
                // REMOVE result call (star_expressions_var = star_expressions_rule()) != null  // star_expressions
                (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_75[" + pos + ", " + mark() +" ](level: " + level + ") star_expressions succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['star_expressions_var']
                result = star_expressions_var;
                return (Object)cache.putResult(pos, _TMP_75_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_75_ID, null);
    }

    // _tmp_76: 'from' expression
    public Object _tmp_76_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_76, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_76_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_76_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: z
        {
            // visiting Alt: 'from' expression
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('from')
                // generated call: (_keyword = expect(KEYWORD_FROM)) != null  // token='from'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode z
            //    vars: {'_keyword': 'Token', 'z': 'SSTNode'}
            Token _keyword;
            SSTNode z;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'from'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('from')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('from')
                // REMOVE result call (_keyword = expect(KEYWORD_FROM)) != null  // token='from'
                (_keyword = expect(KEYWORD_FROM)) != null  // token='from'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (z = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_76[" + pos + ", " + mark() +" ](level: " + level + ") 'from' expression succeeded!");
                }
                // alt action: z
                Token endToken = getToken(mark());
                // node.action: z
                result = z;
                return (Object)cache.putResult(pos, _TMP_76_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_76_ID, null);
    }

    // _tmp_77: params
    public Object _tmp_77_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_77, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_77_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_77_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: params
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(params) - should work
            // name = params
            // TODO replacing arguments_ty --> SSTNode
                // generated call: (params_var = params_rule()) != null  // params
            // collecting vars: SSTNode params_var
            //    vars: {'params_var': 'SSTNode'}
            SSTNode params_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: params
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(params)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(params) - should work
                // name = params
                // TODO replacing arguments_ty --> SSTNode
                // REMOVE result call (params_var = params_rule()) != null  // params
                (params_var = params_rule()) != null  // params
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_77[" + pos + ", " + mark() +" ](level: " + level + ") params succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['params_var']
                result = params_var;
                return (Object)cache.putResult(pos, _TMP_77_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_77_ID, null);
    }

    // _tmp_78: '->' expression
    public Object _tmp_78_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_78, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_78_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_78_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: z
        {
            // visiting Alt: '->' expression
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('->')
                // generated call: (_literal = expect(Token.Kind.RARROW)) != null  // token='->'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode z
            //    vars: {'_literal': 'Token', 'z': 'SSTNode'}
            Token _literal;
            SSTNode z;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '->'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('->')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('->')
                // REMOVE result call (_literal = expect(Token.Kind.RARROW)) != null  // token='->'
                (_literal = expect(Token.Kind.RARROW)) != null  // token='->'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (z = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_78[" + pos + ", " + mark() +" ](level: " + level + ") '->' expression succeeded!");
                }
                // alt action: z
                Token endToken = getToken(mark());
                // node.action: z
                result = z;
                return (Object)cache.putResult(pos, _TMP_78_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_78_ID, null);
    }

    // _tmp_79: func_type_comment
    public Object _tmp_79_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_79, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_79_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_79_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: func_type_comment
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(func_type_comment) - should work
            // name = func_type_comment
            // TODO replacing Token[] --> SSTNode[]
                // generated call: (func_type_comment_var = func_type_comment_rule()) != null  // func_type_comment
            // collecting vars: SSTNode[] func_type_comment_var
            //    vars: {'func_type_comment_var': 'SSTNode[]'}
            SSTNode[] func_type_comment_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: func_type_comment
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(func_type_comment)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(func_type_comment) - should work
                // name = func_type_comment
                // TODO replacing Token[] --> SSTNode[]
                // REMOVE result call (func_type_comment_var = func_type_comment_rule()) != null  // func_type_comment
                (func_type_comment_var = func_type_comment_rule()) != null  // func_type_comment
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_79[" + pos + ", " + mark() +" ](level: " + level + ") func_type_comment succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['func_type_comment_var']
                result = func_type_comment_var;
                return (Object)cache.putResult(pos, _TMP_79_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_79_ID, null);
    }

    // _tmp_80: params
    public Object _tmp_80_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_80, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_80_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_80_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: params
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(params) - should work
            // name = params
            // TODO replacing arguments_ty --> SSTNode
                // generated call: (params_var = params_rule()) != null  // params
            // collecting vars: SSTNode params_var
            //    vars: {'params_var': 'SSTNode'}
            SSTNode params_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: params
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(params)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(params) - should work
                // name = params
                // TODO replacing arguments_ty --> SSTNode
                // REMOVE result call (params_var = params_rule()) != null  // params
                (params_var = params_rule()) != null  // params
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_80[" + pos + ", " + mark() +" ](level: " + level + ") params succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['params_var']
                result = params_var;
                return (Object)cache.putResult(pos, _TMP_80_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_80_ID, null);
    }

    // _tmp_81: '->' expression
    public Object _tmp_81_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_81, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_81_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_81_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: z
        {
            // visiting Alt: '->' expression
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('->')
                // generated call: (_literal = expect(Token.Kind.RARROW)) != null  // token='->'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode z
            //    vars: {'_literal': 'Token', 'z': 'SSTNode'}
            Token _literal;
            SSTNode z;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '->'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('->')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('->')
                // REMOVE result call (_literal = expect(Token.Kind.RARROW)) != null  // token='->'
                (_literal = expect(Token.Kind.RARROW)) != null  // token='->'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (z = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_81[" + pos + ", " + mark() +" ](level: " + level + ") '->' expression succeeded!");
                }
                // alt action: z
                Token endToken = getToken(mark());
                // node.action: z
                result = z;
                return (Object)cache.putResult(pos, _TMP_81_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_81_ID, null);
    }

    // _tmp_82: func_type_comment
    public Object _tmp_82_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_82, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_82_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_82_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: func_type_comment
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(func_type_comment) - should work
            // name = func_type_comment
            // TODO replacing Token[] --> SSTNode[]
                // generated call: (func_type_comment_var = func_type_comment_rule()) != null  // func_type_comment
            // collecting vars: SSTNode[] func_type_comment_var
            //    vars: {'func_type_comment_var': 'SSTNode[]'}
            SSTNode[] func_type_comment_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: func_type_comment
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(func_type_comment)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(func_type_comment) - should work
                // name = func_type_comment
                // TODO replacing Token[] --> SSTNode[]
                // REMOVE result call (func_type_comment_var = func_type_comment_rule()) != null  // func_type_comment
                (func_type_comment_var = func_type_comment_rule()) != null  // func_type_comment
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_82[" + pos + ", " + mark() +" ](level: " + level + ") func_type_comment succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['func_type_comment_var']
                result = func_type_comment_var;
                return (Object)cache.putResult(pos, _TMP_82_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_82_ID, null);
    }

    // _loop0_83: param_no_default
    public SSTNode[] _loop0_83_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_83, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
            // name = param_no_default
            // TODO replacing arg_ty --> SSTNode
                // generated call: (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            // collecting vars: SSTNode param_no_default_var
            //    vars: {'param_no_default_var': 'SSTNode'}
            Object param_no_default_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: param_no_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
                // name = param_no_default
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (param_no_default_var = param_no_default_rule()) != null  // param_no_default
                (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['param_no_default_var']
                if (param_no_default_var instanceof Token) {
                    // TODO
                } else if (param_no_default_var instanceof SSTNode) {
                    children.add((SSTNode)param_no_default_var);
                } else if (param_no_default_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])param_no_default_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_83_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_83_ID, null);
    }

    // _loop0_84: param_with_default
    public SSTNode[] _loop0_84_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_84, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: param_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
            // name = param_with_default
            // TODO replacing NameDefaultPair[] --> SSTNode[]
                // generated call: (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            // collecting vars: SSTNode[] param_with_default_var
            //    vars: {'param_with_default_var': 'SSTNode[]'}
            Object param_with_default_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: param_with_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_with_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
                // name = param_with_default
                // TODO replacing NameDefaultPair[] --> SSTNode[]
                // REMOVE result call (param_with_default_var = param_with_default_rule()) != null  // param_with_default
                (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['param_with_default_var']
                if (param_with_default_var instanceof Token) {
                    // TODO
                } else if (param_with_default_var instanceof SSTNode) {
                    children.add((SSTNode)param_with_default_var);
                } else if (param_with_default_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])param_with_default_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_84_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_84_ID, null);
    }

    // _tmp_85: star_etc
    public Object _tmp_85_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_85, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_85_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_85_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: star_etc
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_etc) - should work
            // name = star_etc
            // TODO replacing StarEtc[] --> SSTNode[]
                // generated call: (star_etc_var = star_etc_rule()) != null  // star_etc
            // collecting vars: SSTNode[] star_etc_var
            //    vars: {'star_etc_var': 'SSTNode[]'}
            SSTNode[] star_etc_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_etc
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_etc)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_etc) - should work
                // name = star_etc
                // TODO replacing StarEtc[] --> SSTNode[]
                // REMOVE result call (star_etc_var = star_etc_rule()) != null  // star_etc
                (star_etc_var = star_etc_rule()) != null  // star_etc
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_85[" + pos + ", " + mark() +" ](level: " + level + ") star_etc succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['star_etc_var']
                result = star_etc_var;
                return (Object)cache.putResult(pos, _TMP_85_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_85_ID, null);
    }

    // _loop0_86: param_with_default
    public SSTNode[] _loop0_86_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_86, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: param_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
            // name = param_with_default
            // TODO replacing NameDefaultPair[] --> SSTNode[]
                // generated call: (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            // collecting vars: SSTNode[] param_with_default_var
            //    vars: {'param_with_default_var': 'SSTNode[]'}
            Object param_with_default_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: param_with_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_with_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
                // name = param_with_default
                // TODO replacing NameDefaultPair[] --> SSTNode[]
                // REMOVE result call (param_with_default_var = param_with_default_rule()) != null  // param_with_default
                (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['param_with_default_var']
                if (param_with_default_var instanceof Token) {
                    // TODO
                } else if (param_with_default_var instanceof SSTNode) {
                    children.add((SSTNode)param_with_default_var);
                } else if (param_with_default_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])param_with_default_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_86_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_86_ID, null);
    }

    // _tmp_87: star_etc
    public Object _tmp_87_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_87, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_87_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_87_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: star_etc
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_etc) - should work
            // name = star_etc
            // TODO replacing StarEtc[] --> SSTNode[]
                // generated call: (star_etc_var = star_etc_rule()) != null  // star_etc
            // collecting vars: SSTNode[] star_etc_var
            //    vars: {'star_etc_var': 'SSTNode[]'}
            SSTNode[] star_etc_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_etc
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_etc)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_etc) - should work
                // name = star_etc
                // TODO replacing StarEtc[] --> SSTNode[]
                // REMOVE result call (star_etc_var = star_etc_rule()) != null  // star_etc
                (star_etc_var = star_etc_rule()) != null  // star_etc
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_87[" + pos + ", " + mark() +" ](level: " + level + ") star_etc succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['star_etc_var']
                result = star_etc_var;
                return (Object)cache.putResult(pos, _TMP_87_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_87_ID, null);
    }

    // _loop1_88: param_no_default
    public SSTNode[] _loop1_88_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_88, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
            // name = param_no_default
            // TODO replacing arg_ty --> SSTNode
                // generated call: (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            // collecting vars: SSTNode param_no_default_var
            //    vars: {'param_no_default_var': 'SSTNode'}
            Object param_no_default_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: param_no_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
                // name = param_no_default
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (param_no_default_var = param_no_default_rule()) != null  // param_no_default
                (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['param_no_default_var']
                if (param_no_default_var instanceof Token) {
                    // TODO
                } else if (param_no_default_var instanceof SSTNode) {
                    children.add((SSTNode)param_no_default_var);
                } else if (param_no_default_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])param_no_default_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP1_88_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP1_88_ID, null);
    }

    // _loop0_89: param_with_default
    public SSTNode[] _loop0_89_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_89, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: param_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
            // name = param_with_default
            // TODO replacing NameDefaultPair[] --> SSTNode[]
                // generated call: (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            // collecting vars: SSTNode[] param_with_default_var
            //    vars: {'param_with_default_var': 'SSTNode[]'}
            Object param_with_default_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: param_with_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_with_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
                // name = param_with_default
                // TODO replacing NameDefaultPair[] --> SSTNode[]
                // REMOVE result call (param_with_default_var = param_with_default_rule()) != null  // param_with_default
                (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['param_with_default_var']
                if (param_with_default_var instanceof Token) {
                    // TODO
                } else if (param_with_default_var instanceof SSTNode) {
                    children.add((SSTNode)param_with_default_var);
                } else if (param_with_default_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])param_with_default_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_89_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_89_ID, null);
    }

    // _tmp_90: star_etc
    public Object _tmp_90_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_90, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_90_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_90_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: star_etc
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_etc) - should work
            // name = star_etc
            // TODO replacing StarEtc[] --> SSTNode[]
                // generated call: (star_etc_var = star_etc_rule()) != null  // star_etc
            // collecting vars: SSTNode[] star_etc_var
            //    vars: {'star_etc_var': 'SSTNode[]'}
            SSTNode[] star_etc_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_etc
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_etc)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_etc) - should work
                // name = star_etc
                // TODO replacing StarEtc[] --> SSTNode[]
                // REMOVE result call (star_etc_var = star_etc_rule()) != null  // star_etc
                (star_etc_var = star_etc_rule()) != null  // star_etc
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_90[" + pos + ", " + mark() +" ](level: " + level + ") star_etc succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['star_etc_var']
                result = star_etc_var;
                return (Object)cache.putResult(pos, _TMP_90_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_90_ID, null);
    }

    // _loop1_91: param_with_default
    public SSTNode[] _loop1_91_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_91, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: param_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
            // name = param_with_default
            // TODO replacing NameDefaultPair[] --> SSTNode[]
                // generated call: (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            // collecting vars: SSTNode[] param_with_default_var
            //    vars: {'param_with_default_var': 'SSTNode[]'}
            Object param_with_default_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: param_with_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_with_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
                // name = param_with_default
                // TODO replacing NameDefaultPair[] --> SSTNode[]
                // REMOVE result call (param_with_default_var = param_with_default_rule()) != null  // param_with_default
                (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['param_with_default_var']
                if (param_with_default_var instanceof Token) {
                    // TODO
                } else if (param_with_default_var instanceof SSTNode) {
                    children.add((SSTNode)param_with_default_var);
                } else if (param_with_default_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])param_with_default_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP1_91_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP1_91_ID, null);
    }

    // _tmp_92: star_etc
    public Object _tmp_92_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_92, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_92_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_92_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: star_etc
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_etc) - should work
            // name = star_etc
            // TODO replacing StarEtc[] --> SSTNode[]
                // generated call: (star_etc_var = star_etc_rule()) != null  // star_etc
            // collecting vars: SSTNode[] star_etc_var
            //    vars: {'star_etc_var': 'SSTNode[]'}
            SSTNode[] star_etc_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_etc
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_etc)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_etc) - should work
                // name = star_etc
                // TODO replacing StarEtc[] --> SSTNode[]
                // REMOVE result call (star_etc_var = star_etc_rule()) != null  // star_etc
                (star_etc_var = star_etc_rule()) != null  // star_etc
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_92[" + pos + ", " + mark() +" ](level: " + level + ") star_etc succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['star_etc_var']
                result = star_etc_var;
                return (Object)cache.putResult(pos, _TMP_92_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_92_ID, null);
    }

    // _loop1_93: param_no_default
    public SSTNode[] _loop1_93_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_93, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
            // name = param_no_default
            // TODO replacing arg_ty --> SSTNode
                // generated call: (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            // collecting vars: SSTNode param_no_default_var
            //    vars: {'param_no_default_var': 'SSTNode'}
            Object param_no_default_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: param_no_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
                // name = param_no_default
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (param_no_default_var = param_no_default_rule()) != null  // param_no_default
                (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['param_no_default_var']
                if (param_no_default_var instanceof Token) {
                    // TODO
                } else if (param_no_default_var instanceof SSTNode) {
                    children.add((SSTNode)param_no_default_var);
                } else if (param_no_default_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])param_no_default_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP1_93_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP1_93_ID, null);
    }

    // _loop1_94: param_no_default
    public SSTNode[] _loop1_94_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_94, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
            // name = param_no_default
            // TODO replacing arg_ty --> SSTNode
                // generated call: (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            // collecting vars: SSTNode param_no_default_var
            //    vars: {'param_no_default_var': 'SSTNode'}
            Object param_no_default_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: param_no_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
                // name = param_no_default
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (param_no_default_var = param_no_default_rule()) != null  // param_no_default
                (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['param_no_default_var']
                if (param_no_default_var instanceof Token) {
                    // TODO
                } else if (param_no_default_var instanceof SSTNode) {
                    children.add((SSTNode)param_no_default_var);
                } else if (param_no_default_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])param_no_default_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP1_94_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP1_94_ID, null);
    }

    // _loop0_95: param_no_default
    public SSTNode[] _loop0_95_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_95, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
            // name = param_no_default
            // TODO replacing arg_ty --> SSTNode
                // generated call: (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            // collecting vars: SSTNode param_no_default_var
            //    vars: {'param_no_default_var': 'SSTNode'}
            Object param_no_default_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: param_no_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
                // name = param_no_default
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (param_no_default_var = param_no_default_rule()) != null  // param_no_default
                (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['param_no_default_var']
                if (param_no_default_var instanceof Token) {
                    // TODO
                } else if (param_no_default_var instanceof SSTNode) {
                    children.add((SSTNode)param_no_default_var);
                } else if (param_no_default_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])param_no_default_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_95_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_95_ID, null);
    }

    // _loop1_96: param_with_default
    public SSTNode[] _loop1_96_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_96, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: param_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
            // name = param_with_default
            // TODO replacing NameDefaultPair[] --> SSTNode[]
                // generated call: (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            // collecting vars: SSTNode[] param_with_default_var
            //    vars: {'param_with_default_var': 'SSTNode[]'}
            Object param_with_default_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: param_with_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_with_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
                // name = param_with_default
                // TODO replacing NameDefaultPair[] --> SSTNode[]
                // REMOVE result call (param_with_default_var = param_with_default_rule()) != null  // param_with_default
                (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['param_with_default_var']
                if (param_with_default_var instanceof Token) {
                    // TODO
                } else if (param_with_default_var instanceof SSTNode) {
                    children.add((SSTNode)param_with_default_var);
                } else if (param_with_default_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])param_with_default_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP1_96_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP1_96_ID, null);
    }

    // _loop0_97: param_no_default
    public SSTNode[] _loop0_97_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_97, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
            // name = param_no_default
            // TODO replacing arg_ty --> SSTNode
                // generated call: (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            // collecting vars: SSTNode param_no_default_var
            //    vars: {'param_no_default_var': 'SSTNode'}
            Object param_no_default_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: param_no_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
                // name = param_no_default
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (param_no_default_var = param_no_default_rule()) != null  // param_no_default
                (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['param_no_default_var']
                if (param_no_default_var instanceof Token) {
                    // TODO
                } else if (param_no_default_var instanceof SSTNode) {
                    children.add((SSTNode)param_no_default_var);
                } else if (param_no_default_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])param_no_default_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_97_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_97_ID, null);
    }

    // _loop1_98: param_with_default
    public SSTNode[] _loop1_98_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_98, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: param_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
            // name = param_with_default
            // TODO replacing NameDefaultPair[] --> SSTNode[]
                // generated call: (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            // collecting vars: SSTNode[] param_with_default_var
            //    vars: {'param_with_default_var': 'SSTNode[]'}
            Object param_with_default_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: param_with_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_with_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
                // name = param_with_default
                // TODO replacing NameDefaultPair[] --> SSTNode[]
                // REMOVE result call (param_with_default_var = param_with_default_rule()) != null  // param_with_default
                (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['param_with_default_var']
                if (param_with_default_var instanceof Token) {
                    // TODO
                } else if (param_with_default_var instanceof SSTNode) {
                    children.add((SSTNode)param_with_default_var);
                } else if (param_with_default_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])param_with_default_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP1_98_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP1_98_ID, null);
    }

    // _loop0_99: param_maybe_default
    public SSTNode[] _loop0_99_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_99, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: param_maybe_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_maybe_default) - should work
            // name = param_maybe_default
            // TODO replacing NameDefaultPair[] --> SSTNode[]
                // generated call: (param_maybe_default_var = param_maybe_default_rule()) != null  // param_maybe_default
            // collecting vars: SSTNode[] param_maybe_default_var
            //    vars: {'param_maybe_default_var': 'SSTNode[]'}
            Object param_maybe_default_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: param_maybe_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_maybe_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_maybe_default) - should work
                // name = param_maybe_default
                // TODO replacing NameDefaultPair[] --> SSTNode[]
                // REMOVE result call (param_maybe_default_var = param_maybe_default_rule()) != null  // param_maybe_default
                (param_maybe_default_var = param_maybe_default_rule()) != null  // param_maybe_default
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['param_maybe_default_var']
                if (param_maybe_default_var instanceof Token) {
                    // TODO
                } else if (param_maybe_default_var instanceof SSTNode) {
                    children.add((SSTNode)param_maybe_default_var);
                } else if (param_maybe_default_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])param_maybe_default_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_99_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_99_ID, null);
    }

    // _tmp_100: kwds
    public Object _tmp_100_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_100, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_100_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_100_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: kwds
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwds) - should work
            // name = kwds
            // TODO replacing arg_ty --> SSTNode
                // generated call: (kwds_var = kwds_rule()) != null  // kwds
            // collecting vars: SSTNode kwds_var
            //    vars: {'kwds_var': 'SSTNode'}
            SSTNode kwds_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: kwds
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kwds)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwds) - should work
                // name = kwds
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (kwds_var = kwds_rule()) != null  // kwds
                (kwds_var = kwds_rule()) != null  // kwds
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_100[" + pos + ", " + mark() +" ](level: " + level + ") kwds succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['kwds_var']
                result = kwds_var;
                return (Object)cache.putResult(pos, _TMP_100_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_100_ID, null);
    }

    // _loop1_101: param_maybe_default
    public SSTNode[] _loop1_101_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_101, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: param_maybe_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_maybe_default) - should work
            // name = param_maybe_default
            // TODO replacing NameDefaultPair[] --> SSTNode[]
                // generated call: (param_maybe_default_var = param_maybe_default_rule()) != null  // param_maybe_default
            // collecting vars: SSTNode[] param_maybe_default_var
            //    vars: {'param_maybe_default_var': 'SSTNode[]'}
            Object param_maybe_default_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: param_maybe_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_maybe_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_maybe_default) - should work
                // name = param_maybe_default
                // TODO replacing NameDefaultPair[] --> SSTNode[]
                // REMOVE result call (param_maybe_default_var = param_maybe_default_rule()) != null  // param_maybe_default
                (param_maybe_default_var = param_maybe_default_rule()) != null  // param_maybe_default
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['param_maybe_default_var']
                if (param_maybe_default_var instanceof Token) {
                    // TODO
                } else if (param_maybe_default_var instanceof SSTNode) {
                    children.add((SSTNode)param_maybe_default_var);
                } else if (param_maybe_default_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])param_maybe_default_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP1_101_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP1_101_ID, null);
    }

    // _tmp_102: kwds
    public Object _tmp_102_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_102, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_102_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_102_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: kwds
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwds) - should work
            // name = kwds
            // TODO replacing arg_ty --> SSTNode
                // generated call: (kwds_var = kwds_rule()) != null  // kwds
            // collecting vars: SSTNode kwds_var
            //    vars: {'kwds_var': 'SSTNode'}
            SSTNode kwds_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: kwds
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kwds)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwds) - should work
                // name = kwds
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (kwds_var = kwds_rule()) != null  // kwds
                (kwds_var = kwds_rule()) != null  // kwds
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_102[" + pos + ", " + mark() +" ](level: " + level + ") kwds succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['kwds_var']
                result = kwds_var;
                return (Object)cache.putResult(pos, _TMP_102_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_102_ID, null);
    }

    // _loop1_103: ('@' named_expression NEWLINE)
    public SSTNode[] _loop1_103_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_103, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ('@' named_expression NEWLINE)
            // TODO visiting JavaCallMakerVisitor.visit_Group(('@' named_expression NEWLINE))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('@' named_expression NEWLINE)
                // generated call: (_tmp_224_var = _tmp_224_rule()) != null  // '@' named_expression NEWLINE
            // collecting vars: None _tmp_224_var
            //    vars: {'_tmp_224_var': None}
            Object _tmp_224_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ('@' named_expression NEWLINE)
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(('@' named_expression NEWLINE))
                // TODO visiting JavaCallMakerVisitor.visit_Group(('@' named_expression NEWLINE))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('@' named_expression NEWLINE)
                // REMOVE result call (_tmp_224_var = _tmp_224_rule()) != null  // '@' named_expression NEWLINE
                (_tmp_224_var = _tmp_224_rule()) != null  // '@' named_expression NEWLINE
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['_tmp_224_var']
                if (_tmp_224_var instanceof Token) {
                    // TODO
                } else if (_tmp_224_var instanceof SSTNode) {
                    children.add((SSTNode)_tmp_224_var);
                } else if (_tmp_224_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])_tmp_224_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP1_103_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP1_103_ID, null);
    }

    // _tmp_104: '(' arguments? ')'
    public Object _tmp_104_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_104, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_104_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_104_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: z
        {
            // visiting Alt: '(' arguments? ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(arguments?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(arguments)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_225_var = _tmp_225_rule()) != null  // arguments
                // generated call: ((_opt_var = _tmp_225_rule()) != null || _opt_var == null)  // arguments?
            // collecting vars: None z
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // collecting vars: Token _literal_1
            //    vars: {'_literal': 'Token', 'z': None, '_literal_1': 'Token'}
            Token _literal;
            Token _literal_1;
            Object z;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                &&
                // TODO visiting JavaParserGeneratorNamedItem: arguments?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(arguments?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(arguments?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(arguments)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_225_var = _tmp_225_rule()) != null  // arguments
                // REMOVE result call ((_opt_var = _tmp_225_rule()) != null || _opt_var == null)  // arguments?
                ((z = _tmp_225_rule()) != null || z == null)  // arguments?
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
                (_literal_1 = expect(Token.Kind.RPAR)) != null  // token=')'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_104[" + pos + ", " + mark() +" ](level: " + level + ") '(' arguments? ')' succeeded!");
                }
                // alt action: z
                Token endToken = getToken(mark());
                // node.action: z
                result = z;
                return (Object)cache.putResult(pos, _TMP_104_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_104_ID, null);
    }

    // _loop1_105: (',' star_expression)
    public SSTNode[] _loop1_105_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_105, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: (',' star_expression)
            // TODO visiting JavaCallMakerVisitor.visit_Group((',' star_expression))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' star_expression)
                // generated call: (_tmp_226_var = _tmp_226_rule()) != null  // ',' star_expression
            // collecting vars: None _tmp_226_var
            //    vars: {'_tmp_226_var': None}
            Object _tmp_226_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: (',' star_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((',' star_expression))
                // TODO visiting JavaCallMakerVisitor.visit_Group((',' star_expression))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' star_expression)
                // REMOVE result call (_tmp_226_var = _tmp_226_rule()) != null  // ',' star_expression
                (_tmp_226_var = _tmp_226_rule()) != null  // ',' star_expression
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['_tmp_226_var']
                if (_tmp_226_var instanceof Token) {
                    // TODO
                } else if (_tmp_226_var instanceof SSTNode) {
                    children.add((SSTNode)_tmp_226_var);
                } else if (_tmp_226_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])_tmp_226_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP1_105_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP1_105_ID, null);
    }

    // _tmp_106: ','
    public Object _tmp_106_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_106, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_106_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_106_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_106[" + pos + ", " + mark() +" ](level: " + level + ") ',' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_106_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_106_ID, null);
    }

    // _loop0_108: ',' star_named_expression
    public SSTNode[] _loop0_108_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_108, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: elem
        {
            // visiting Alt: ',' star_named_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
            // name = star_named_expression
                // generated call: (star_named_expression_var = star_named_expression_rule()) != null  // star_named_expression
            // collecting vars: SSTNode elem
            //    vars: {'_literal': 'Token', 'elem': 'SSTNode'}
            Object _literal;
            Object elem;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: star_named_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_named_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
                // name = star_named_expression
                // REMOVE result call (star_named_expression_var = star_named_expression_rule()) != null  // star_named_expression
                (elem = star_named_expression_rule()) != null  // star_named_expression
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: elem
                Token endToken = getToken(mark());
                // node.action: elem
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_108_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_108_ID, null);
    }

    // _gather_107: star_named_expression _loop0_108
    public SSTNode[] _gather_107_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _gather_107, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _GATHER_107_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, _GATHER_107_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: star_named_expression _loop0_108
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
            // name = star_named_expression
                // generated call: (star_named_expression_var = star_named_expression_rule()) != null  // star_named_expression
            // collecting vars: SSTNode elem
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_108) - should work
            // name = _loop0_108
                // generated call: (_loop0_108_var = _loop0_108_rule()) != null  // _loop0_108
            // collecting vars: SSTNode[] seq
            //    vars: {'elem': 'SSTNode', 'seq': 'SSTNode[]'}
            SSTNode elem;
            SSTNode[] seq;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_named_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_named_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
                // name = star_named_expression
                // REMOVE result call (star_named_expression_var = star_named_expression_rule()) != null  // star_named_expression
                (elem = star_named_expression_rule()) != null  // star_named_expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: _loop0_108
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_108)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_108) - should work
                // name = _loop0_108
                // REMOVE result call (_loop0_108_var = _loop0_108_rule()) != null  // _loop0_108
                (seq = _loop0_108_rule()) != null  // _loop0_108
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_gather_107[" + pos + ", " + mark() +" ](level: " + level + ") star_named_expression _loop0_108 succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['elem', 'seq']
                // TODO handle default action if there is more variables
                return (SSTNode[])cache.putResult(pos, _GATHER_107_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _GATHER_107_ID, null);
    }

    // _tmp_109: ','
    public Object _tmp_109_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_109, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_109_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_109_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_109[" + pos + ", " + mark() +" ](level: " + level + ") ',' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_109_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_109_ID, null);
    }

    // _loop1_110: (',' expression)
    public SSTNode[] _loop1_110_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_110, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: (',' expression)
            // TODO visiting JavaCallMakerVisitor.visit_Group((',' expression))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' expression)
                // generated call: (_tmp_227_var = _tmp_227_rule()) != null  // ',' expression
            // collecting vars: None _tmp_227_var
            //    vars: {'_tmp_227_var': None}
            Object _tmp_227_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: (',' expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((',' expression))
                // TODO visiting JavaCallMakerVisitor.visit_Group((',' expression))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' expression)
                // REMOVE result call (_tmp_227_var = _tmp_227_rule()) != null  // ',' expression
                (_tmp_227_var = _tmp_227_rule()) != null  // ',' expression
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['_tmp_227_var']
                if (_tmp_227_var instanceof Token) {
                    // TODO
                } else if (_tmp_227_var instanceof SSTNode) {
                    children.add((SSTNode)_tmp_227_var);
                } else if (_tmp_227_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])_tmp_227_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP1_110_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP1_110_ID, null);
    }

    // _tmp_111: ','
    public Object _tmp_111_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_111, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_111_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_111_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_111[" + pos + ", " + mark() +" ](level: " + level + ") ',' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_111_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_111_ID, null);
    }

    // _tmp_112: lambda_params
    public Object _tmp_112_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_112, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_112_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_112_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: lambda_params
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_params) - should work
            // name = lambda_params
            // TODO replacing arguments_ty --> SSTNode
                // generated call: (lambda_params_var = lambda_params_rule()) != null  // lambda_params
            // collecting vars: SSTNode lambda_params_var
            //    vars: {'lambda_params_var': 'SSTNode'}
            SSTNode lambda_params_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_params
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_params)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_params) - should work
                // name = lambda_params
                // TODO replacing arguments_ty --> SSTNode
                // REMOVE result call (lambda_params_var = lambda_params_rule()) != null  // lambda_params
                (lambda_params_var = lambda_params_rule()) != null  // lambda_params
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_112[" + pos + ", " + mark() +" ](level: " + level + ") lambda_params succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['lambda_params_var']
                result = lambda_params_var;
                return (Object)cache.putResult(pos, _TMP_112_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_112_ID, null);
    }

    // _loop0_113: lambda_param_no_default
    public SSTNode[] _loop0_113_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_113, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: lambda_param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
            // name = lambda_param_no_default
            // TODO replacing arg_ty --> SSTNode
                // generated call: (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            // collecting vars: SSTNode lambda_param_no_default_var
            //    vars: {'lambda_param_no_default_var': 'SSTNode'}
            Object lambda_param_no_default_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
                // name = lambda_param_no_default
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
                (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['lambda_param_no_default_var']
                if (lambda_param_no_default_var instanceof Token) {
                    // TODO
                } else if (lambda_param_no_default_var instanceof SSTNode) {
                    children.add((SSTNode)lambda_param_no_default_var);
                } else if (lambda_param_no_default_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])lambda_param_no_default_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_113_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_113_ID, null);
    }

    // _loop0_114: lambda_param_with_default
    public SSTNode[] _loop0_114_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_114, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: lambda_param_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
            // name = lambda_param_with_default
            // TODO replacing NameDefaultPair[] --> SSTNode[]
                // generated call: (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            // collecting vars: SSTNode[] lambda_param_with_default_var
            //    vars: {'lambda_param_with_default_var': 'SSTNode[]'}
            Object lambda_param_with_default_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_with_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_with_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
                // name = lambda_param_with_default
                // TODO replacing NameDefaultPair[] --> SSTNode[]
                // REMOVE result call (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
                (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['lambda_param_with_default_var']
                if (lambda_param_with_default_var instanceof Token) {
                    // TODO
                } else if (lambda_param_with_default_var instanceof SSTNode) {
                    children.add((SSTNode)lambda_param_with_default_var);
                } else if (lambda_param_with_default_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])lambda_param_with_default_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_114_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_114_ID, null);
    }

    // _tmp_115: lambda_star_etc
    public Object _tmp_115_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_115, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_115_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_115_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: lambda_star_etc
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_star_etc) - should work
            // name = lambda_star_etc
            // TODO replacing StarEtc[] --> SSTNode[]
                // generated call: (lambda_star_etc_var = lambda_star_etc_rule()) != null  // lambda_star_etc
            // collecting vars: SSTNode[] lambda_star_etc_var
            //    vars: {'lambda_star_etc_var': 'SSTNode[]'}
            SSTNode[] lambda_star_etc_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_star_etc
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_star_etc)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_star_etc) - should work
                // name = lambda_star_etc
                // TODO replacing StarEtc[] --> SSTNode[]
                // REMOVE result call (lambda_star_etc_var = lambda_star_etc_rule()) != null  // lambda_star_etc
                (lambda_star_etc_var = lambda_star_etc_rule()) != null  // lambda_star_etc
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_115[" + pos + ", " + mark() +" ](level: " + level + ") lambda_star_etc succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['lambda_star_etc_var']
                result = lambda_star_etc_var;
                return (Object)cache.putResult(pos, _TMP_115_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_115_ID, null);
    }

    // _loop0_116: lambda_param_with_default
    public SSTNode[] _loop0_116_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_116, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: lambda_param_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
            // name = lambda_param_with_default
            // TODO replacing NameDefaultPair[] --> SSTNode[]
                // generated call: (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            // collecting vars: SSTNode[] lambda_param_with_default_var
            //    vars: {'lambda_param_with_default_var': 'SSTNode[]'}
            Object lambda_param_with_default_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_with_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_with_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
                // name = lambda_param_with_default
                // TODO replacing NameDefaultPair[] --> SSTNode[]
                // REMOVE result call (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
                (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['lambda_param_with_default_var']
                if (lambda_param_with_default_var instanceof Token) {
                    // TODO
                } else if (lambda_param_with_default_var instanceof SSTNode) {
                    children.add((SSTNode)lambda_param_with_default_var);
                } else if (lambda_param_with_default_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])lambda_param_with_default_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_116_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_116_ID, null);
    }

    // _tmp_117: lambda_star_etc
    public Object _tmp_117_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_117, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_117_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_117_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: lambda_star_etc
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_star_etc) - should work
            // name = lambda_star_etc
            // TODO replacing StarEtc[] --> SSTNode[]
                // generated call: (lambda_star_etc_var = lambda_star_etc_rule()) != null  // lambda_star_etc
            // collecting vars: SSTNode[] lambda_star_etc_var
            //    vars: {'lambda_star_etc_var': 'SSTNode[]'}
            SSTNode[] lambda_star_etc_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_star_etc
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_star_etc)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_star_etc) - should work
                // name = lambda_star_etc
                // TODO replacing StarEtc[] --> SSTNode[]
                // REMOVE result call (lambda_star_etc_var = lambda_star_etc_rule()) != null  // lambda_star_etc
                (lambda_star_etc_var = lambda_star_etc_rule()) != null  // lambda_star_etc
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_117[" + pos + ", " + mark() +" ](level: " + level + ") lambda_star_etc succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['lambda_star_etc_var']
                result = lambda_star_etc_var;
                return (Object)cache.putResult(pos, _TMP_117_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_117_ID, null);
    }

    // _loop1_118: lambda_param_no_default
    public SSTNode[] _loop1_118_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_118, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: lambda_param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
            // name = lambda_param_no_default
            // TODO replacing arg_ty --> SSTNode
                // generated call: (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            // collecting vars: SSTNode lambda_param_no_default_var
            //    vars: {'lambda_param_no_default_var': 'SSTNode'}
            Object lambda_param_no_default_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
                // name = lambda_param_no_default
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
                (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['lambda_param_no_default_var']
                if (lambda_param_no_default_var instanceof Token) {
                    // TODO
                } else if (lambda_param_no_default_var instanceof SSTNode) {
                    children.add((SSTNode)lambda_param_no_default_var);
                } else if (lambda_param_no_default_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])lambda_param_no_default_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP1_118_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP1_118_ID, null);
    }

    // _loop0_119: lambda_param_with_default
    public SSTNode[] _loop0_119_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_119, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: lambda_param_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
            // name = lambda_param_with_default
            // TODO replacing NameDefaultPair[] --> SSTNode[]
                // generated call: (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            // collecting vars: SSTNode[] lambda_param_with_default_var
            //    vars: {'lambda_param_with_default_var': 'SSTNode[]'}
            Object lambda_param_with_default_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_with_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_with_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
                // name = lambda_param_with_default
                // TODO replacing NameDefaultPair[] --> SSTNode[]
                // REMOVE result call (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
                (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['lambda_param_with_default_var']
                if (lambda_param_with_default_var instanceof Token) {
                    // TODO
                } else if (lambda_param_with_default_var instanceof SSTNode) {
                    children.add((SSTNode)lambda_param_with_default_var);
                } else if (lambda_param_with_default_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])lambda_param_with_default_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_119_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_119_ID, null);
    }

    // _tmp_120: lambda_star_etc
    public Object _tmp_120_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_120, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_120_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_120_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: lambda_star_etc
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_star_etc) - should work
            // name = lambda_star_etc
            // TODO replacing StarEtc[] --> SSTNode[]
                // generated call: (lambda_star_etc_var = lambda_star_etc_rule()) != null  // lambda_star_etc
            // collecting vars: SSTNode[] lambda_star_etc_var
            //    vars: {'lambda_star_etc_var': 'SSTNode[]'}
            SSTNode[] lambda_star_etc_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_star_etc
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_star_etc)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_star_etc) - should work
                // name = lambda_star_etc
                // TODO replacing StarEtc[] --> SSTNode[]
                // REMOVE result call (lambda_star_etc_var = lambda_star_etc_rule()) != null  // lambda_star_etc
                (lambda_star_etc_var = lambda_star_etc_rule()) != null  // lambda_star_etc
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_120[" + pos + ", " + mark() +" ](level: " + level + ") lambda_star_etc succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['lambda_star_etc_var']
                result = lambda_star_etc_var;
                return (Object)cache.putResult(pos, _TMP_120_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_120_ID, null);
    }

    // _loop1_121: lambda_param_with_default
    public SSTNode[] _loop1_121_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_121, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: lambda_param_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
            // name = lambda_param_with_default
            // TODO replacing NameDefaultPair[] --> SSTNode[]
                // generated call: (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            // collecting vars: SSTNode[] lambda_param_with_default_var
            //    vars: {'lambda_param_with_default_var': 'SSTNode[]'}
            Object lambda_param_with_default_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_with_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_with_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
                // name = lambda_param_with_default
                // TODO replacing NameDefaultPair[] --> SSTNode[]
                // REMOVE result call (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
                (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['lambda_param_with_default_var']
                if (lambda_param_with_default_var instanceof Token) {
                    // TODO
                } else if (lambda_param_with_default_var instanceof SSTNode) {
                    children.add((SSTNode)lambda_param_with_default_var);
                } else if (lambda_param_with_default_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])lambda_param_with_default_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP1_121_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP1_121_ID, null);
    }

    // _tmp_122: lambda_star_etc
    public Object _tmp_122_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_122, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_122_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_122_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: lambda_star_etc
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_star_etc) - should work
            // name = lambda_star_etc
            // TODO replacing StarEtc[] --> SSTNode[]
                // generated call: (lambda_star_etc_var = lambda_star_etc_rule()) != null  // lambda_star_etc
            // collecting vars: SSTNode[] lambda_star_etc_var
            //    vars: {'lambda_star_etc_var': 'SSTNode[]'}
            SSTNode[] lambda_star_etc_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_star_etc
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_star_etc)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_star_etc) - should work
                // name = lambda_star_etc
                // TODO replacing StarEtc[] --> SSTNode[]
                // REMOVE result call (lambda_star_etc_var = lambda_star_etc_rule()) != null  // lambda_star_etc
                (lambda_star_etc_var = lambda_star_etc_rule()) != null  // lambda_star_etc
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_122[" + pos + ", " + mark() +" ](level: " + level + ") lambda_star_etc succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['lambda_star_etc_var']
                result = lambda_star_etc_var;
                return (Object)cache.putResult(pos, _TMP_122_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_122_ID, null);
    }

    // _loop1_123: lambda_param_no_default
    public SSTNode[] _loop1_123_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_123, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: lambda_param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
            // name = lambda_param_no_default
            // TODO replacing arg_ty --> SSTNode
                // generated call: (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            // collecting vars: SSTNode lambda_param_no_default_var
            //    vars: {'lambda_param_no_default_var': 'SSTNode'}
            Object lambda_param_no_default_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
                // name = lambda_param_no_default
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
                (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['lambda_param_no_default_var']
                if (lambda_param_no_default_var instanceof Token) {
                    // TODO
                } else if (lambda_param_no_default_var instanceof SSTNode) {
                    children.add((SSTNode)lambda_param_no_default_var);
                } else if (lambda_param_no_default_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])lambda_param_no_default_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP1_123_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP1_123_ID, null);
    }

    // _loop1_124: lambda_param_no_default
    public SSTNode[] _loop1_124_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_124, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: lambda_param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
            // name = lambda_param_no_default
            // TODO replacing arg_ty --> SSTNode
                // generated call: (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            // collecting vars: SSTNode lambda_param_no_default_var
            //    vars: {'lambda_param_no_default_var': 'SSTNode'}
            Object lambda_param_no_default_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
                // name = lambda_param_no_default
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
                (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['lambda_param_no_default_var']
                if (lambda_param_no_default_var instanceof Token) {
                    // TODO
                } else if (lambda_param_no_default_var instanceof SSTNode) {
                    children.add((SSTNode)lambda_param_no_default_var);
                } else if (lambda_param_no_default_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])lambda_param_no_default_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP1_124_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP1_124_ID, null);
    }

    // _loop0_125: lambda_param_no_default
    public SSTNode[] _loop0_125_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_125, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: lambda_param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
            // name = lambda_param_no_default
            // TODO replacing arg_ty --> SSTNode
                // generated call: (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            // collecting vars: SSTNode lambda_param_no_default_var
            //    vars: {'lambda_param_no_default_var': 'SSTNode'}
            Object lambda_param_no_default_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
                // name = lambda_param_no_default
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
                (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['lambda_param_no_default_var']
                if (lambda_param_no_default_var instanceof Token) {
                    // TODO
                } else if (lambda_param_no_default_var instanceof SSTNode) {
                    children.add((SSTNode)lambda_param_no_default_var);
                } else if (lambda_param_no_default_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])lambda_param_no_default_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_125_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_125_ID, null);
    }

    // _loop1_126: lambda_param_with_default
    public SSTNode[] _loop1_126_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_126, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: lambda_param_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
            // name = lambda_param_with_default
            // TODO replacing NameDefaultPair[] --> SSTNode[]
                // generated call: (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            // collecting vars: SSTNode[] lambda_param_with_default_var
            //    vars: {'lambda_param_with_default_var': 'SSTNode[]'}
            Object lambda_param_with_default_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_with_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_with_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
                // name = lambda_param_with_default
                // TODO replacing NameDefaultPair[] --> SSTNode[]
                // REMOVE result call (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
                (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['lambda_param_with_default_var']
                if (lambda_param_with_default_var instanceof Token) {
                    // TODO
                } else if (lambda_param_with_default_var instanceof SSTNode) {
                    children.add((SSTNode)lambda_param_with_default_var);
                } else if (lambda_param_with_default_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])lambda_param_with_default_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP1_126_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP1_126_ID, null);
    }

    // _loop0_127: lambda_param_no_default
    public SSTNode[] _loop0_127_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_127, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: lambda_param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
            // name = lambda_param_no_default
            // TODO replacing arg_ty --> SSTNode
                // generated call: (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            // collecting vars: SSTNode lambda_param_no_default_var
            //    vars: {'lambda_param_no_default_var': 'SSTNode'}
            Object lambda_param_no_default_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
                // name = lambda_param_no_default
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
                (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['lambda_param_no_default_var']
                if (lambda_param_no_default_var instanceof Token) {
                    // TODO
                } else if (lambda_param_no_default_var instanceof SSTNode) {
                    children.add((SSTNode)lambda_param_no_default_var);
                } else if (lambda_param_no_default_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])lambda_param_no_default_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_127_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_127_ID, null);
    }

    // _loop1_128: lambda_param_with_default
    public SSTNode[] _loop1_128_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_128, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: lambda_param_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
            // name = lambda_param_with_default
            // TODO replacing NameDefaultPair[] --> SSTNode[]
                // generated call: (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            // collecting vars: SSTNode[] lambda_param_with_default_var
            //    vars: {'lambda_param_with_default_var': 'SSTNode[]'}
            Object lambda_param_with_default_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_with_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_with_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
                // name = lambda_param_with_default
                // TODO replacing NameDefaultPair[] --> SSTNode[]
                // REMOVE result call (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
                (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['lambda_param_with_default_var']
                if (lambda_param_with_default_var instanceof Token) {
                    // TODO
                } else if (lambda_param_with_default_var instanceof SSTNode) {
                    children.add((SSTNode)lambda_param_with_default_var);
                } else if (lambda_param_with_default_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])lambda_param_with_default_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP1_128_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP1_128_ID, null);
    }

    // _loop0_129: lambda_param_maybe_default
    public SSTNode[] _loop0_129_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_129, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: lambda_param_maybe_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_maybe_default) - should work
            // name = lambda_param_maybe_default
            // TODO replacing NameDefaultPair[] --> SSTNode[]
                // generated call: (lambda_param_maybe_default_var = lambda_param_maybe_default_rule()) != null  // lambda_param_maybe_default
            // collecting vars: SSTNode[] lambda_param_maybe_default_var
            //    vars: {'lambda_param_maybe_default_var': 'SSTNode[]'}
            Object lambda_param_maybe_default_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_maybe_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_maybe_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_maybe_default) - should work
                // name = lambda_param_maybe_default
                // TODO replacing NameDefaultPair[] --> SSTNode[]
                // REMOVE result call (lambda_param_maybe_default_var = lambda_param_maybe_default_rule()) != null  // lambda_param_maybe_default
                (lambda_param_maybe_default_var = lambda_param_maybe_default_rule()) != null  // lambda_param_maybe_default
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['lambda_param_maybe_default_var']
                if (lambda_param_maybe_default_var instanceof Token) {
                    // TODO
                } else if (lambda_param_maybe_default_var instanceof SSTNode) {
                    children.add((SSTNode)lambda_param_maybe_default_var);
                } else if (lambda_param_maybe_default_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])lambda_param_maybe_default_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_129_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_129_ID, null);
    }

    // _tmp_130: lambda_kwds
    public Object _tmp_130_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_130, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_130_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_130_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: lambda_kwds
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_kwds) - should work
            // name = lambda_kwds
            // TODO replacing arg_ty --> SSTNode
                // generated call: (lambda_kwds_var = lambda_kwds_rule()) != null  // lambda_kwds
            // collecting vars: SSTNode lambda_kwds_var
            //    vars: {'lambda_kwds_var': 'SSTNode'}
            SSTNode lambda_kwds_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_kwds
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_kwds)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_kwds) - should work
                // name = lambda_kwds
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (lambda_kwds_var = lambda_kwds_rule()) != null  // lambda_kwds
                (lambda_kwds_var = lambda_kwds_rule()) != null  // lambda_kwds
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_130[" + pos + ", " + mark() +" ](level: " + level + ") lambda_kwds succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['lambda_kwds_var']
                result = lambda_kwds_var;
                return (Object)cache.putResult(pos, _TMP_130_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_130_ID, null);
    }

    // _loop1_131: lambda_param_maybe_default
    public SSTNode[] _loop1_131_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_131, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: lambda_param_maybe_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_maybe_default) - should work
            // name = lambda_param_maybe_default
            // TODO replacing NameDefaultPair[] --> SSTNode[]
                // generated call: (lambda_param_maybe_default_var = lambda_param_maybe_default_rule()) != null  // lambda_param_maybe_default
            // collecting vars: SSTNode[] lambda_param_maybe_default_var
            //    vars: {'lambda_param_maybe_default_var': 'SSTNode[]'}
            Object lambda_param_maybe_default_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_maybe_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_maybe_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_maybe_default) - should work
                // name = lambda_param_maybe_default
                // TODO replacing NameDefaultPair[] --> SSTNode[]
                // REMOVE result call (lambda_param_maybe_default_var = lambda_param_maybe_default_rule()) != null  // lambda_param_maybe_default
                (lambda_param_maybe_default_var = lambda_param_maybe_default_rule()) != null  // lambda_param_maybe_default
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['lambda_param_maybe_default_var']
                if (lambda_param_maybe_default_var instanceof Token) {
                    // TODO
                } else if (lambda_param_maybe_default_var instanceof SSTNode) {
                    children.add((SSTNode)lambda_param_maybe_default_var);
                } else if (lambda_param_maybe_default_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])lambda_param_maybe_default_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP1_131_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP1_131_ID, null);
    }

    // _tmp_132: lambda_kwds
    public Object _tmp_132_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_132, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_132_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_132_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: lambda_kwds
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_kwds) - should work
            // name = lambda_kwds
            // TODO replacing arg_ty --> SSTNode
                // generated call: (lambda_kwds_var = lambda_kwds_rule()) != null  // lambda_kwds
            // collecting vars: SSTNode lambda_kwds_var
            //    vars: {'lambda_kwds_var': 'SSTNode'}
            SSTNode lambda_kwds_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_kwds
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_kwds)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_kwds) - should work
                // name = lambda_kwds
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (lambda_kwds_var = lambda_kwds_rule()) != null  // lambda_kwds
                (lambda_kwds_var = lambda_kwds_rule()) != null  // lambda_kwds
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_132[" + pos + ", " + mark() +" ](level: " + level + ") lambda_kwds succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['lambda_kwds_var']
                result = lambda_kwds_var;
                return (Object)cache.putResult(pos, _TMP_132_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_132_ID, null);
    }

    // _loop1_133: ('or' conjunction)
    public SSTNode[] _loop1_133_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_133, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ('or' conjunction)
            // TODO visiting JavaCallMakerVisitor.visit_Group(('or' conjunction))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('or' conjunction)
                // generated call: (_tmp_228_var = _tmp_228_rule()) != null  // 'or' conjunction
            // collecting vars: None _tmp_228_var
            //    vars: {'_tmp_228_var': None}
            Object _tmp_228_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ('or' conjunction)
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(('or' conjunction))
                // TODO visiting JavaCallMakerVisitor.visit_Group(('or' conjunction))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('or' conjunction)
                // REMOVE result call (_tmp_228_var = _tmp_228_rule()) != null  // 'or' conjunction
                (_tmp_228_var = _tmp_228_rule()) != null  // 'or' conjunction
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['_tmp_228_var']
                if (_tmp_228_var instanceof Token) {
                    // TODO
                } else if (_tmp_228_var instanceof SSTNode) {
                    children.add((SSTNode)_tmp_228_var);
                } else if (_tmp_228_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])_tmp_228_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP1_133_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP1_133_ID, null);
    }

    // _loop1_134: ('and' inversion)
    public SSTNode[] _loop1_134_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_134, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ('and' inversion)
            // TODO visiting JavaCallMakerVisitor.visit_Group(('and' inversion))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('and' inversion)
                // generated call: (_tmp_229_var = _tmp_229_rule()) != null  // 'and' inversion
            // collecting vars: None _tmp_229_var
            //    vars: {'_tmp_229_var': None}
            Object _tmp_229_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ('and' inversion)
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(('and' inversion))
                // TODO visiting JavaCallMakerVisitor.visit_Group(('and' inversion))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('and' inversion)
                // REMOVE result call (_tmp_229_var = _tmp_229_rule()) != null  // 'and' inversion
                (_tmp_229_var = _tmp_229_rule()) != null  // 'and' inversion
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['_tmp_229_var']
                if (_tmp_229_var instanceof Token) {
                    // TODO
                } else if (_tmp_229_var instanceof SSTNode) {
                    children.add((SSTNode)_tmp_229_var);
                } else if (_tmp_229_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])_tmp_229_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP1_134_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP1_134_ID, null);
    }

    // _loop1_135: compare_op_bitwise_or_pair
    public SSTNode[] _loop1_135_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_135, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: compare_op_bitwise_or_pair
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(compare_op_bitwise_or_pair) - should work
            // name = compare_op_bitwise_or_pair
            // TODO replacing CmpopExprPair[] --> SSTNode[]
                // generated call: (compare_op_bitwise_or_pair_var = compare_op_bitwise_or_pair_rule()) != null  // compare_op_bitwise_or_pair
            // collecting vars: SSTNode[] compare_op_bitwise_or_pair_var
            //    vars: {'compare_op_bitwise_or_pair_var': 'SSTNode[]'}
            Object compare_op_bitwise_or_pair_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: compare_op_bitwise_or_pair
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(compare_op_bitwise_or_pair)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(compare_op_bitwise_or_pair) - should work
                // name = compare_op_bitwise_or_pair
                // TODO replacing CmpopExprPair[] --> SSTNode[]
                // REMOVE result call (compare_op_bitwise_or_pair_var = compare_op_bitwise_or_pair_rule()) != null  // compare_op_bitwise_or_pair
                (compare_op_bitwise_or_pair_var = compare_op_bitwise_or_pair_rule()) != null  // compare_op_bitwise_or_pair
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['compare_op_bitwise_or_pair_var']
                if (compare_op_bitwise_or_pair_var instanceof Token) {
                    // TODO
                } else if (compare_op_bitwise_or_pair_var instanceof SSTNode) {
                    children.add((SSTNode)compare_op_bitwise_or_pair_var);
                } else if (compare_op_bitwise_or_pair_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])compare_op_bitwise_or_pair_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP1_135_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP1_135_ID, null);
    }

    // _tmp_136: '!='
    public Object _tmp_136_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_136, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_136_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_136_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_check_barry_as_flufl ( p , tok ) ? NULL : tok
        {
            // visiting Alt: '!='
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('!=')
                // generated call: (_literal = expect(Token.Kind.NOTEQUAL)) != null  // token='!='
            // collecting vars: Token tok
            //    vars: {'tok': 'Token'}
            Token tok;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '!='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('!=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('!=')
                // REMOVE result call (_literal = expect(Token.Kind.NOTEQUAL)) != null  // token='!='
                (tok = expect(Token.Kind.NOTEQUAL)) != null  // token='!='
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_136[" + pos + ", " + mark() +" ](level: " + level + ") '!=' succeeded!");
                }
                // alt action: _PyPegen_check_barry_as_flufl ( p , tok ) ? NULL : tok
                Token endToken = getToken(mark());
                // node.action: _PyPegen_check_barry_as_flufl ( p , tok ) ? NULL : tok
                return (Object)cache.putResult(pos, _TMP_136_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_136_ID, null);
    }

    // _tmp_137: arguments
    public Object _tmp_137_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_137, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_137_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_137_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: arguments
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(arguments) - should work
            // name = arguments
                // generated call: (arguments_var = arguments_rule()) != null  // arguments
            // collecting vars: SSTNode arguments_var
            //    vars: {'arguments_var': 'SSTNode'}
            SSTNode arguments_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: arguments
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(arguments)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(arguments) - should work
                // name = arguments
                // REMOVE result call (arguments_var = arguments_rule()) != null  // arguments
                (arguments_var = arguments_rule()) != null  // arguments
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_137[" + pos + ", " + mark() +" ](level: " + level + ") arguments succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['arguments_var']
                result = arguments_var;
                return (Object)cache.putResult(pos, _TMP_137_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_137_ID, null);
    }

    // _loop0_139: ',' slice
    public SSTNode[] _loop0_139_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_139, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: elem
        {
            // visiting Alt: ',' slice
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slice) - should work
            // name = slice
                // generated call: (slice_var = slice_rule()) != null  // slice
            // collecting vars: SSTNode elem
            //    vars: {'_literal': 'Token', 'elem': 'SSTNode'}
            Object _literal;
            Object elem;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: slice
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(slice)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slice) - should work
                // name = slice
                // REMOVE result call (slice_var = slice_rule()) != null  // slice
                (elem = slice_rule()) != null  // slice
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: elem
                Token endToken = getToken(mark());
                // node.action: elem
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_139_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_139_ID, null);
    }

    // _gather_138: slice _loop0_139
    public SSTNode[] _gather_138_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _gather_138, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _GATHER_138_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, _GATHER_138_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: slice _loop0_139
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slice) - should work
            // name = slice
                // generated call: (slice_var = slice_rule()) != null  // slice
            // collecting vars: SSTNode elem
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_139) - should work
            // name = _loop0_139
                // generated call: (_loop0_139_var = _loop0_139_rule()) != null  // _loop0_139
            // collecting vars: SSTNode[] seq
            //    vars: {'elem': 'SSTNode', 'seq': 'SSTNode[]'}
            SSTNode elem;
            SSTNode[] seq;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: slice
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(slice)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(slice) - should work
                // name = slice
                // REMOVE result call (slice_var = slice_rule()) != null  // slice
                (elem = slice_rule()) != null  // slice
                &&
                // TODO visiting JavaParserGeneratorNamedItem: _loop0_139
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_139)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_139) - should work
                // name = _loop0_139
                // REMOVE result call (_loop0_139_var = _loop0_139_rule()) != null  // _loop0_139
                (seq = _loop0_139_rule()) != null  // _loop0_139
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_gather_138[" + pos + ", " + mark() +" ](level: " + level + ") slice _loop0_139 succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['elem', 'seq']
                // TODO handle default action if there is more variables
                return (SSTNode[])cache.putResult(pos, _GATHER_138_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _GATHER_138_ID, null);
    }

    // _tmp_140: ','
    public Object _tmp_140_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_140, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_140_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_140_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_140[" + pos + ", " + mark() +" ](level: " + level + ") ',' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_140_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_140_ID, null);
    }

    // _tmp_141: expression
    public Object _tmp_141_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_141, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_141_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_141_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode expression_var
            //    vars: {'expression_var': 'SSTNode'}
            SSTNode expression_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (expression_var = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_141[" + pos + ", " + mark() +" ](level: " + level + ") expression succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['expression_var']
                result = expression_var;
                return (Object)cache.putResult(pos, _TMP_141_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_141_ID, null);
    }

    // _tmp_142: expression
    public Object _tmp_142_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_142, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_142_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_142_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode expression_var
            //    vars: {'expression_var': 'SSTNode'}
            SSTNode expression_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (expression_var = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_142[" + pos + ", " + mark() +" ](level: " + level + ") expression succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['expression_var']
                result = expression_var;
                return (Object)cache.putResult(pos, _TMP_142_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_142_ID, null);
    }

    // _tmp_143: ':' expression?
    public Object _tmp_143_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_143, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_143_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_143_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: d
        {
            // visiting Alt: ':' expression?
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(expression?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expression)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_230_var = _tmp_230_rule()) != null  // expression
                // generated call: ((_opt_var = _tmp_230_rule()) != null || _opt_var == null)  // expression?
            // collecting vars: None d
            //    vars: {'_literal': 'Token', 'd': None}
            Token _literal;
            Object d;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(expression?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expression)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_230_var = _tmp_230_rule()) != null  // expression
                // REMOVE result call ((_opt_var = _tmp_230_rule()) != null || _opt_var == null)  // expression?
                ((d = _tmp_230_rule()) != null || d == null)  // expression?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_143[" + pos + ", " + mark() +" ](level: " + level + ") ':' expression? succeeded!");
                }
                // alt action: d
                Token endToken = getToken(mark());
                // node.action: d
                result = d;
                return (Object)cache.putResult(pos, _TMP_143_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_143_ID, null);
    }

    // _tmp_144: tuple | group | genexp
    public Object _tmp_144_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_144, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_144_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_144_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: tuple
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(tuple) - should work
            // name = tuple
                // generated call: (tuple_var = tuple_rule()) != null  // tuple
            // collecting vars: SSTNode tuple_var
            //    vars: {'tuple_var': 'SSTNode'}
            SSTNode tuple_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: tuple
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(tuple)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(tuple) - should work
                // name = tuple
                // REMOVE result call (tuple_var = tuple_rule()) != null  // tuple
                (tuple_var = tuple_rule()) != null  // tuple
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_144[" + pos + ", " + mark() +" ](level: " + level + ") tuple succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['tuple_var']
                result = tuple_var;
                return (Object)cache.putResult(pos, _TMP_144_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: group
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(group) - should work
            // name = group
                // generated call: (group_var = group_rule()) != null  // group
            // collecting vars: SSTNode group_var
            //    vars: {'group_var': 'SSTNode'}
            SSTNode group_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: group
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(group)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(group) - should work
                // name = group
                // REMOVE result call (group_var = group_rule()) != null  // group
                (group_var = group_rule()) != null  // group
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_144[" + pos + ", " + mark() +" ](level: " + level + ") group succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['group_var']
                result = group_var;
                return (Object)cache.putResult(pos, _TMP_144_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: genexp
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(genexp) - should work
            // name = genexp
                // generated call: (genexp_var = genexp_rule()) != null  // genexp
            // collecting vars: SSTNode genexp_var
            //    vars: {'genexp_var': 'SSTNode'}
            SSTNode genexp_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: genexp
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(genexp)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(genexp) - should work
                // name = genexp
                // REMOVE result call (genexp_var = genexp_rule()) != null  // genexp
                (genexp_var = genexp_rule()) != null  // genexp
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_144[" + pos + ", " + mark() +" ](level: " + level + ") genexp succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['genexp_var']
                result = genexp_var;
                return (Object)cache.putResult(pos, _TMP_144_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_144_ID, null);
    }

    // _tmp_145: list | listcomp
    public Object _tmp_145_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_145, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_145_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_145_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: list
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(list) - should work
            // name = list
                // generated call: (list_var = list_rule()) != null  // list
            // collecting vars: SSTNode list_var
            //    vars: {'list_var': 'SSTNode'}
            SSTNode list_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: list
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(list)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(list) - should work
                // name = list
                // REMOVE result call (list_var = list_rule()) != null  // list
                (list_var = list_rule()) != null  // list
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_145[" + pos + ", " + mark() +" ](level: " + level + ") list succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['list_var']
                result = list_var;
                return (Object)cache.putResult(pos, _TMP_145_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: listcomp
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(listcomp) - should work
            // name = listcomp
                // generated call: (listcomp_var = listcomp_rule()) != null  // listcomp
            // collecting vars: SSTNode listcomp_var
            //    vars: {'listcomp_var': 'SSTNode'}
            SSTNode listcomp_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: listcomp
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(listcomp)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(listcomp) - should work
                // name = listcomp
                // REMOVE result call (listcomp_var = listcomp_rule()) != null  // listcomp
                (listcomp_var = listcomp_rule()) != null  // listcomp
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_145[" + pos + ", " + mark() +" ](level: " + level + ") listcomp succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['listcomp_var']
                result = listcomp_var;
                return (Object)cache.putResult(pos, _TMP_145_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_145_ID, null);
    }

    // _tmp_146: dict | set | dictcomp | setcomp
    public Object _tmp_146_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_146, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_146_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_146_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: dict
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dict) - should work
            // name = dict
                // generated call: (dict_var = dict_rule()) != null  // dict
            // collecting vars: SSTNode dict_var
            //    vars: {'dict_var': 'SSTNode'}
            SSTNode dict_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: dict
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(dict)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dict) - should work
                // name = dict
                // REMOVE result call (dict_var = dict_rule()) != null  // dict
                (dict_var = dict_rule()) != null  // dict
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_146[" + pos + ", " + mark() +" ](level: " + level + ") dict succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['dict_var']
                result = dict_var;
                return (Object)cache.putResult(pos, _TMP_146_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: set
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(set) - should work
            // name = set
                // generated call: (set_var = set_rule()) != null  // set
            // collecting vars: SSTNode set_var
            //    vars: {'set_var': 'SSTNode'}
            SSTNode set_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: set
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(set)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(set) - should work
                // name = set
                // REMOVE result call (set_var = set_rule()) != null  // set
                (set_var = set_rule()) != null  // set
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_146[" + pos + ", " + mark() +" ](level: " + level + ") set succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['set_var']
                result = set_var;
                return (Object)cache.putResult(pos, _TMP_146_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: dictcomp
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dictcomp) - should work
            // name = dictcomp
                // generated call: (dictcomp_var = dictcomp_rule()) != null  // dictcomp
            // collecting vars: SSTNode dictcomp_var
            //    vars: {'dictcomp_var': 'SSTNode'}
            SSTNode dictcomp_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: dictcomp
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(dictcomp)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(dictcomp) - should work
                // name = dictcomp
                // REMOVE result call (dictcomp_var = dictcomp_rule()) != null  // dictcomp
                (dictcomp_var = dictcomp_rule()) != null  // dictcomp
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_146[" + pos + ", " + mark() +" ](level: " + level + ") dictcomp succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['dictcomp_var']
                result = dictcomp_var;
                return (Object)cache.putResult(pos, _TMP_146_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: setcomp
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(setcomp) - should work
            // name = setcomp
                // generated call: (setcomp_var = setcomp_rule()) != null  // setcomp
            // collecting vars: SSTNode setcomp_var
            //    vars: {'setcomp_var': 'SSTNode'}
            SSTNode setcomp_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: setcomp
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(setcomp)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(setcomp) - should work
                // name = setcomp
                // REMOVE result call (setcomp_var = setcomp_rule()) != null  // setcomp
                (setcomp_var = setcomp_rule()) != null  // setcomp
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_146[" + pos + ", " + mark() +" ](level: " + level + ") setcomp succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['setcomp_var']
                result = setcomp_var;
                return (Object)cache.putResult(pos, _TMP_146_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_146_ID, null);
    }

    // _loop1_147: STRING
    public SSTNode[] _loop1_147_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_147, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: STRING
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(STRING) - should work
            // name = STRING
                // generated call: (string_var = expect(Token.Kind.STRING)) != null  // STRING
            // collecting vars: Token string_var
            //    vars: {'string_var': 'Token'}
            Object string_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: STRING
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(STRING)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(STRING) - should work
                // name = STRING
                // REMOVE result call (string_var = expect(Token.Kind.STRING)) != null  // STRING
                (string_var = expect(Token.Kind.STRING)) != null  // STRING
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['string_var']
                if (string_var instanceof Token) {
                    // TODO
                } else if (string_var instanceof SSTNode) {
                    children.add((SSTNode)string_var);
                } else if (string_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])string_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP1_147_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP1_147_ID, null);
    }

    // _tmp_148: star_named_expressions
    public Object _tmp_148_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_148, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_148_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_148_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: star_named_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
            // name = star_named_expressions
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // generated call: (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
            // collecting vars: SSTNode[] star_named_expressions_var
            //    vars: {'star_named_expressions_var': 'SSTNode[]'}
            SSTNode[] star_named_expressions_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_named_expressions
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_named_expressions)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
                // name = star_named_expressions
                // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // REMOVE result call (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
                (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_148[" + pos + ", " + mark() +" ](level: " + level + ") star_named_expressions succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['star_named_expressions_var']
                result = star_named_expressions_var;
                return (Object)cache.putResult(pos, _TMP_148_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_148_ID, null);
    }

    // _tmp_149: star_named_expression ',' star_named_expressions?
    public Object _tmp_149_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_149, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_149_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_149_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: _PyPegen_seq_insert_in_front ( p , y , z )
        {
            // visiting Alt: star_named_expression ',' star_named_expressions?
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
            // name = star_named_expression
                // generated call: (star_named_expression_var = star_named_expression_rule()) != null  // star_named_expression
            // collecting vars: SSTNode y
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_named_expressions?)
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_named_expressions)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_231_var = _tmp_231_rule()) != null  // star_named_expressions
                // generated call: ((_opt_var = _tmp_231_rule()) != null || _opt_var == null)  // star_named_expressions?
            // collecting vars: None z
            //    vars: {'y': 'SSTNode', '_literal': 'Token', 'z': None}
            Token _literal;
            SSTNode y;
            Object z;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_named_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_named_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expression) - should work
                // name = star_named_expression
                // REMOVE result call (star_named_expression_var = star_named_expression_rule()) != null  // star_named_expression
                (y = star_named_expression_rule()) != null  // star_named_expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: star_named_expressions?
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_named_expressions?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(star_named_expressions?)
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_named_expressions)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_231_var = _tmp_231_rule()) != null  // star_named_expressions
                // REMOVE result call ((_opt_var = _tmp_231_rule()) != null || _opt_var == null)  // star_named_expressions?
                ((z = _tmp_231_rule()) != null || z == null)  // star_named_expressions?
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_149[" + pos + ", " + mark() +" ](level: " + level + ") star_named_expression ',' star_named_expressions? succeeded!");
                }
                // alt action: _PyPegen_seq_insert_in_front ( p , y , z )
                Token endToken = getToken(mark());
                // node.action: _PyPegen_seq_insert_in_front ( p , y , z )
                return (Object)cache.putResult(pos, _TMP_149_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_149_ID, null);
    }

    // _tmp_150: yield_expr | named_expression
    public Object _tmp_150_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_150, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_150_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_150_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: yield_expr
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
            // name = yield_expr
                // generated call: (yield_expr_var = yield_expr_rule()) != null  // yield_expr
            // collecting vars: SSTNode yield_expr_var
            //    vars: {'yield_expr_var': 'SSTNode'}
            SSTNode yield_expr_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: yield_expr
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(yield_expr)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
                // name = yield_expr
                // REMOVE result call (yield_expr_var = yield_expr_rule()) != null  // yield_expr
                (yield_expr_var = yield_expr_rule()) != null  // yield_expr
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_150[" + pos + ", " + mark() +" ](level: " + level + ") yield_expr succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['yield_expr_var']
                result = yield_expr_var;
                return (Object)cache.putResult(pos, _TMP_150_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: named_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // name = named_expression
                // generated call: (named_expression_var = named_expression_rule()) != null  // named_expression
            // collecting vars: SSTNode named_expression_var
            //    vars: {'named_expression_var': 'SSTNode'}
            SSTNode named_expression_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: named_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(named_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
                // name = named_expression
                // REMOVE result call (named_expression_var = named_expression_rule()) != null  // named_expression
                (named_expression_var = named_expression_rule()) != null  // named_expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_150[" + pos + ", " + mark() +" ](level: " + level + ") named_expression succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['named_expression_var']
                result = named_expression_var;
                return (Object)cache.putResult(pos, _TMP_150_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_150_ID, null);
    }

    // _tmp_151: double_starred_kvpairs
    public Object _tmp_151_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_151, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_151_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_151_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: double_starred_kvpairs
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_starred_kvpairs) - should work
            // name = double_starred_kvpairs
            // TODO replacing asdl_seq[] --> SSTNode[]
                // generated call: (double_starred_kvpairs_var = double_starred_kvpairs_rule()) != null  // double_starred_kvpairs
            // collecting vars: SSTNode[] double_starred_kvpairs_var
            //    vars: {'double_starred_kvpairs_var': 'SSTNode[]'}
            SSTNode[] double_starred_kvpairs_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: double_starred_kvpairs
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(double_starred_kvpairs)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_starred_kvpairs) - should work
                // name = double_starred_kvpairs
                // TODO replacing asdl_seq[] --> SSTNode[]
                // REMOVE result call (double_starred_kvpairs_var = double_starred_kvpairs_rule()) != null  // double_starred_kvpairs
                (double_starred_kvpairs_var = double_starred_kvpairs_rule()) != null  // double_starred_kvpairs
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_151[" + pos + ", " + mark() +" ](level: " + level + ") double_starred_kvpairs succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['double_starred_kvpairs_var']
                result = double_starred_kvpairs_var;
                return (Object)cache.putResult(pos, _TMP_151_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_151_ID, null);
    }

    // _loop0_153: ',' double_starred_kvpair
    public SSTNode[] _loop0_153_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_153, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: elem
        {
            // visiting Alt: ',' double_starred_kvpair
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_starred_kvpair) - should work
            // name = double_starred_kvpair
            // TODO replacing KeyValuePair[] --> SSTNode[]
                // generated call: (double_starred_kvpair_var = double_starred_kvpair_rule()) != null  // double_starred_kvpair
            // collecting vars: SSTNode[] elem
            //    vars: {'_literal': 'Token', 'elem': 'SSTNode[]'}
            Object _literal;
            Object elem;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: double_starred_kvpair
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(double_starred_kvpair)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_starred_kvpair) - should work
                // name = double_starred_kvpair
                // TODO replacing KeyValuePair[] --> SSTNode[]
                // REMOVE result call (double_starred_kvpair_var = double_starred_kvpair_rule()) != null  // double_starred_kvpair
                (elem = double_starred_kvpair_rule()) != null  // double_starred_kvpair
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: elem
                Token endToken = getToken(mark());
                // node.action: elem
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_153_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_153_ID, null);
    }

    // _gather_152: double_starred_kvpair _loop0_153
    public SSTNode[] _gather_152_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _gather_152, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _GATHER_152_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, _GATHER_152_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: double_starred_kvpair _loop0_153
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_starred_kvpair) - should work
            // name = double_starred_kvpair
            // TODO replacing KeyValuePair[] --> SSTNode[]
                // generated call: (double_starred_kvpair_var = double_starred_kvpair_rule()) != null  // double_starred_kvpair
            // collecting vars: SSTNode[] elem
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_153) - should work
            // name = _loop0_153
                // generated call: (_loop0_153_var = _loop0_153_rule()) != null  // _loop0_153
            // collecting vars: SSTNode[] seq
            //    vars: {'elem': 'SSTNode[]', 'seq': 'SSTNode[]'}
            SSTNode[] elem;
            SSTNode[] seq;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: double_starred_kvpair
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(double_starred_kvpair)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_starred_kvpair) - should work
                // name = double_starred_kvpair
                // TODO replacing KeyValuePair[] --> SSTNode[]
                // REMOVE result call (double_starred_kvpair_var = double_starred_kvpair_rule()) != null  // double_starred_kvpair
                (elem = double_starred_kvpair_rule()) != null  // double_starred_kvpair
                &&
                // TODO visiting JavaParserGeneratorNamedItem: _loop0_153
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_153)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_153) - should work
                // name = _loop0_153
                // REMOVE result call (_loop0_153_var = _loop0_153_rule()) != null  // _loop0_153
                (seq = _loop0_153_rule()) != null  // _loop0_153
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_gather_152[" + pos + ", " + mark() +" ](level: " + level + ") double_starred_kvpair _loop0_153 succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['elem', 'seq']
                // TODO handle default action if there is more variables
                return (SSTNode[])cache.putResult(pos, _GATHER_152_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _GATHER_152_ID, null);
    }

    // _tmp_154: ','
    public Object _tmp_154_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_154, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_154_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_154_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_154[" + pos + ", " + mark() +" ](level: " + level + ") ',' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_154_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_154_ID, null);
    }

    // _loop1_155: for_if_clause
    public SSTNode[] _loop1_155_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_155, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: for_if_clause
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clause) - should work
            // name = for_if_clause
            // TODO replacing comprehension_ty --> SSTNode
                // generated call: (for_if_clause_var = for_if_clause_rule()) != null  // for_if_clause
            // collecting vars: SSTNode for_if_clause_var
            //    vars: {'for_if_clause_var': 'SSTNode'}
            Object for_if_clause_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: for_if_clause
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(for_if_clause)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clause) - should work
                // name = for_if_clause
                // TODO replacing comprehension_ty --> SSTNode
                // REMOVE result call (for_if_clause_var = for_if_clause_rule()) != null  // for_if_clause
                (for_if_clause_var = for_if_clause_rule()) != null  // for_if_clause
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['for_if_clause_var']
                if (for_if_clause_var instanceof Token) {
                    // TODO
                } else if (for_if_clause_var instanceof SSTNode) {
                    children.add((SSTNode)for_if_clause_var);
                } else if (for_if_clause_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])for_if_clause_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP1_155_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP1_155_ID, null);
    }

    // _loop0_156: ('if' disjunction)
    public SSTNode[] _loop0_156_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_156, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ('if' disjunction)
            // TODO visiting JavaCallMakerVisitor.visit_Group(('if' disjunction))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('if' disjunction)
                // generated call: (_tmp_232_var = _tmp_232_rule()) != null  // 'if' disjunction
            // collecting vars: None _tmp_232_var
            //    vars: {'_tmp_232_var': None}
            Object _tmp_232_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ('if' disjunction)
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(('if' disjunction))
                // TODO visiting JavaCallMakerVisitor.visit_Group(('if' disjunction))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('if' disjunction)
                // REMOVE result call (_tmp_232_var = _tmp_232_rule()) != null  // 'if' disjunction
                (_tmp_232_var = _tmp_232_rule()) != null  // 'if' disjunction
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['_tmp_232_var']
                if (_tmp_232_var instanceof Token) {
                    // TODO
                } else if (_tmp_232_var instanceof SSTNode) {
                    children.add((SSTNode)_tmp_232_var);
                } else if (_tmp_232_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])_tmp_232_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_156_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_156_ID, null);
    }

    // _loop0_157: ('if' disjunction)
    public SSTNode[] _loop0_157_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_157, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ('if' disjunction)
            // TODO visiting JavaCallMakerVisitor.visit_Group(('if' disjunction))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('if' disjunction)
                // generated call: (_tmp_233_var = _tmp_233_rule()) != null  // 'if' disjunction
            // collecting vars: None _tmp_233_var
            //    vars: {'_tmp_233_var': None}
            Object _tmp_233_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ('if' disjunction)
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(('if' disjunction))
                // TODO visiting JavaCallMakerVisitor.visit_Group(('if' disjunction))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('if' disjunction)
                // REMOVE result call (_tmp_233_var = _tmp_233_rule()) != null  // 'if' disjunction
                (_tmp_233_var = _tmp_233_rule()) != null  // 'if' disjunction
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['_tmp_233_var']
                if (_tmp_233_var instanceof Token) {
                    // TODO
                } else if (_tmp_233_var instanceof SSTNode) {
                    children.add((SSTNode)_tmp_233_var);
                } else if (_tmp_233_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])_tmp_233_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_157_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_157_ID, null);
    }

    // _tmp_158: star_expressions
    public Object _tmp_158_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_158, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_158_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_158_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: star_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // name = star_expressions
                // generated call: (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            // collecting vars: SSTNode star_expressions_var
            //    vars: {'star_expressions_var': 'SSTNode'}
            SSTNode star_expressions_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_expressions
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expressions)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
                // name = star_expressions
                // REMOVE result call (star_expressions_var = star_expressions_rule()) != null  // star_expressions
                (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_158[" + pos + ", " + mark() +" ](level: " + level + ") star_expressions succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['star_expressions_var']
                result = star_expressions_var;
                return (Object)cache.putResult(pos, _TMP_158_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_158_ID, null);
    }

    // _tmp_159: ','
    public Object _tmp_159_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_159, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_159_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_159_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_159[" + pos + ", " + mark() +" ](level: " + level + ") ',' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_159_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_159_ID, null);
    }

    // _loop0_161: ',' (starred_expression | direct_named_expression !'=')
    public SSTNode[] _loop0_161_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_161, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: elem
        {
            // visiting Alt: ',' (starred_expression | direct_named_expression !'=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // TODO visiting JavaCallMakerVisitor.visit_Group((starred_expression | direct_named_expression !'='))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(starred_expression | direct_named_expression !'=')
                // generated call: (_tmp_234_var = _tmp_234_rule()) != null  // starred_expression | direct_named_expression !'='
            // collecting vars: None elem
            //    vars: {'_literal': 'Token', 'elem': None}
            Object _literal;
            Object elem;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: (starred_expression | direct_named_expression !'=')
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((starred_expression | direct_named_expression !'='))
                // TODO visiting JavaCallMakerVisitor.visit_Group((starred_expression | direct_named_expression !'='))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(starred_expression | direct_named_expression !'=')
                // REMOVE result call (_tmp_234_var = _tmp_234_rule()) != null  // starred_expression | direct_named_expression !'='
                (elem = _tmp_234_rule()) != null  // starred_expression | direct_named_expression !'='
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: elem
                Token endToken = getToken(mark());
                // node.action: elem
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_161_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_161_ID, null);
    }

    // _gather_160: (starred_expression | direct_named_expression !'=') _loop0_161
    public SSTNode[] _gather_160_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _gather_160, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _GATHER_160_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, _GATHER_160_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: (starred_expression | direct_named_expression !'=') _loop0_161
            // TODO visiting JavaCallMakerVisitor.visit_Group((starred_expression | direct_named_expression !'='))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(starred_expression | direct_named_expression !'=')
                // generated call: (elem = _tmp_234_rule()) != null  // starred_expression | direct_named_expression !'='
            // collecting vars: None elem
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_161) - should work
            // name = _loop0_161
                // generated call: (_loop0_161_var = _loop0_161_rule()) != null  // _loop0_161
            // collecting vars: SSTNode[] seq
            //    vars: {'elem': None, 'seq': 'SSTNode[]'}
            Object elem;
            SSTNode[] seq;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: (starred_expression | direct_named_expression !'=')
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((starred_expression | direct_named_expression !'='))
                // TODO visiting JavaCallMakerVisitor.visit_Group((starred_expression | direct_named_expression !'='))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(starred_expression | direct_named_expression !'=')
                // REMOVE result call (elem = _tmp_234_rule()) != null  // starred_expression | direct_named_expression !'='
                (elem = _tmp_234_rule()) != null  // starred_expression | direct_named_expression !'='
                &&
                // TODO visiting JavaParserGeneratorNamedItem: _loop0_161
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_161)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_161) - should work
                // name = _loop0_161
                // REMOVE result call (_loop0_161_var = _loop0_161_rule()) != null  // _loop0_161
                (seq = _loop0_161_rule()) != null  // _loop0_161
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_gather_160[" + pos + ", " + mark() +" ](level: " + level + ") (starred_expression | direct_named_expression !'=') _loop0_161 succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['elem', 'seq']
                // TODO handle default action if there is more variables
                return (SSTNode[])cache.putResult(pos, _GATHER_160_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _GATHER_160_ID, null);
    }

    // _tmp_162: ',' kwargs
    public Object _tmp_162_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_162, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_162_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_162_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: k
        {
            // visiting Alt: ',' kwargs
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwargs) - should work
            // name = kwargs
            // TODO replacing asdl_seq[] --> SSTNode[]
                // generated call: (kwargs_var = kwargs_rule()) != null  // kwargs
            // collecting vars: SSTNode[] k
            //    vars: {'_literal': 'Token', 'k': 'SSTNode[]'}
            Token _literal;
            SSTNode[] k;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: kwargs
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kwargs)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwargs) - should work
                // name = kwargs
                // TODO replacing asdl_seq[] --> SSTNode[]
                // REMOVE result call (kwargs_var = kwargs_rule()) != null  // kwargs
                (k = kwargs_rule()) != null  // kwargs
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_162[" + pos + ", " + mark() +" ](level: " + level + ") ',' kwargs succeeded!");
                }
                // alt action: k
                Token endToken = getToken(mark());
                // node.action: k
                result = k;
                return (Object)cache.putResult(pos, _TMP_162_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_162_ID, null);
    }

    // _loop0_164: ',' kwarg_or_starred
    public SSTNode[] _loop0_164_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_164, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: elem
        {
            // visiting Alt: ',' kwarg_or_starred
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_starred) - should work
            // name = kwarg_or_starred
            // TODO replacing KeywordOrStarred[] --> SSTNode[]
                // generated call: (kwarg_or_starred_var = kwarg_or_starred_rule()) != null  // kwarg_or_starred
            // collecting vars: SSTNode[] elem
            //    vars: {'_literal': 'Token', 'elem': 'SSTNode[]'}
            Object _literal;
            Object elem;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: kwarg_or_starred
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kwarg_or_starred)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_starred) - should work
                // name = kwarg_or_starred
                // TODO replacing KeywordOrStarred[] --> SSTNode[]
                // REMOVE result call (kwarg_or_starred_var = kwarg_or_starred_rule()) != null  // kwarg_or_starred
                (elem = kwarg_or_starred_rule()) != null  // kwarg_or_starred
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: elem
                Token endToken = getToken(mark());
                // node.action: elem
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_164_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_164_ID, null);
    }

    // _gather_163: kwarg_or_starred _loop0_164
    public SSTNode[] _gather_163_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _gather_163, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _GATHER_163_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, _GATHER_163_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: kwarg_or_starred _loop0_164
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_starred) - should work
            // name = kwarg_or_starred
            // TODO replacing KeywordOrStarred[] --> SSTNode[]
                // generated call: (kwarg_or_starred_var = kwarg_or_starred_rule()) != null  // kwarg_or_starred
            // collecting vars: SSTNode[] elem
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_164) - should work
            // name = _loop0_164
                // generated call: (_loop0_164_var = _loop0_164_rule()) != null  // _loop0_164
            // collecting vars: SSTNode[] seq
            //    vars: {'elem': 'SSTNode[]', 'seq': 'SSTNode[]'}
            SSTNode[] elem;
            SSTNode[] seq;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: kwarg_or_starred
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kwarg_or_starred)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_starred) - should work
                // name = kwarg_or_starred
                // TODO replacing KeywordOrStarred[] --> SSTNode[]
                // REMOVE result call (kwarg_or_starred_var = kwarg_or_starred_rule()) != null  // kwarg_or_starred
                (elem = kwarg_or_starred_rule()) != null  // kwarg_or_starred
                &&
                // TODO visiting JavaParserGeneratorNamedItem: _loop0_164
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_164)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_164) - should work
                // name = _loop0_164
                // REMOVE result call (_loop0_164_var = _loop0_164_rule()) != null  // _loop0_164
                (seq = _loop0_164_rule()) != null  // _loop0_164
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_gather_163[" + pos + ", " + mark() +" ](level: " + level + ") kwarg_or_starred _loop0_164 succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['elem', 'seq']
                // TODO handle default action if there is more variables
                return (SSTNode[])cache.putResult(pos, _GATHER_163_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _GATHER_163_ID, null);
    }

    // _loop0_166: ',' kwarg_or_double_starred
    public SSTNode[] _loop0_166_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_166, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: elem
        {
            // visiting Alt: ',' kwarg_or_double_starred
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_double_starred) - should work
            // name = kwarg_or_double_starred
            // TODO replacing KeywordOrStarred[] --> SSTNode[]
                // generated call: (kwarg_or_double_starred_var = kwarg_or_double_starred_rule()) != null  // kwarg_or_double_starred
            // collecting vars: SSTNode[] elem
            //    vars: {'_literal': 'Token', 'elem': 'SSTNode[]'}
            Object _literal;
            Object elem;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: kwarg_or_double_starred
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kwarg_or_double_starred)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_double_starred) - should work
                // name = kwarg_or_double_starred
                // TODO replacing KeywordOrStarred[] --> SSTNode[]
                // REMOVE result call (kwarg_or_double_starred_var = kwarg_or_double_starred_rule()) != null  // kwarg_or_double_starred
                (elem = kwarg_or_double_starred_rule()) != null  // kwarg_or_double_starred
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: elem
                Token endToken = getToken(mark());
                // node.action: elem
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_166_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_166_ID, null);
    }

    // _gather_165: kwarg_or_double_starred _loop0_166
    public SSTNode[] _gather_165_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _gather_165, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _GATHER_165_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, _GATHER_165_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: kwarg_or_double_starred _loop0_166
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_double_starred) - should work
            // name = kwarg_or_double_starred
            // TODO replacing KeywordOrStarred[] --> SSTNode[]
                // generated call: (kwarg_or_double_starred_var = kwarg_or_double_starred_rule()) != null  // kwarg_or_double_starred
            // collecting vars: SSTNode[] elem
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_166) - should work
            // name = _loop0_166
                // generated call: (_loop0_166_var = _loop0_166_rule()) != null  // _loop0_166
            // collecting vars: SSTNode[] seq
            //    vars: {'elem': 'SSTNode[]', 'seq': 'SSTNode[]'}
            SSTNode[] elem;
            SSTNode[] seq;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: kwarg_or_double_starred
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kwarg_or_double_starred)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_double_starred) - should work
                // name = kwarg_or_double_starred
                // TODO replacing KeywordOrStarred[] --> SSTNode[]
                // REMOVE result call (kwarg_or_double_starred_var = kwarg_or_double_starred_rule()) != null  // kwarg_or_double_starred
                (elem = kwarg_or_double_starred_rule()) != null  // kwarg_or_double_starred
                &&
                // TODO visiting JavaParserGeneratorNamedItem: _loop0_166
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_166)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_166) - should work
                // name = _loop0_166
                // REMOVE result call (_loop0_166_var = _loop0_166_rule()) != null  // _loop0_166
                (seq = _loop0_166_rule()) != null  // _loop0_166
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_gather_165[" + pos + ", " + mark() +" ](level: " + level + ") kwarg_or_double_starred _loop0_166 succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['elem', 'seq']
                // TODO handle default action if there is more variables
                return (SSTNode[])cache.putResult(pos, _GATHER_165_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _GATHER_165_ID, null);
    }

    // _loop0_168: ',' kwarg_or_starred
    public SSTNode[] _loop0_168_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_168, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: elem
        {
            // visiting Alt: ',' kwarg_or_starred
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_starred) - should work
            // name = kwarg_or_starred
            // TODO replacing KeywordOrStarred[] --> SSTNode[]
                // generated call: (kwarg_or_starred_var = kwarg_or_starred_rule()) != null  // kwarg_or_starred
            // collecting vars: SSTNode[] elem
            //    vars: {'_literal': 'Token', 'elem': 'SSTNode[]'}
            Object _literal;
            Object elem;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: kwarg_or_starred
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kwarg_or_starred)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_starred) - should work
                // name = kwarg_or_starred
                // TODO replacing KeywordOrStarred[] --> SSTNode[]
                // REMOVE result call (kwarg_or_starred_var = kwarg_or_starred_rule()) != null  // kwarg_or_starred
                (elem = kwarg_or_starred_rule()) != null  // kwarg_or_starred
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: elem
                Token endToken = getToken(mark());
                // node.action: elem
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_168_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_168_ID, null);
    }

    // _gather_167: kwarg_or_starred _loop0_168
    public SSTNode[] _gather_167_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _gather_167, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _GATHER_167_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, _GATHER_167_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: kwarg_or_starred _loop0_168
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_starred) - should work
            // name = kwarg_or_starred
            // TODO replacing KeywordOrStarred[] --> SSTNode[]
                // generated call: (kwarg_or_starred_var = kwarg_or_starred_rule()) != null  // kwarg_or_starred
            // collecting vars: SSTNode[] elem
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_168) - should work
            // name = _loop0_168
                // generated call: (_loop0_168_var = _loop0_168_rule()) != null  // _loop0_168
            // collecting vars: SSTNode[] seq
            //    vars: {'elem': 'SSTNode[]', 'seq': 'SSTNode[]'}
            SSTNode[] elem;
            SSTNode[] seq;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: kwarg_or_starred
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kwarg_or_starred)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_starred) - should work
                // name = kwarg_or_starred
                // TODO replacing KeywordOrStarred[] --> SSTNode[]
                // REMOVE result call (kwarg_or_starred_var = kwarg_or_starred_rule()) != null  // kwarg_or_starred
                (elem = kwarg_or_starred_rule()) != null  // kwarg_or_starred
                &&
                // TODO visiting JavaParserGeneratorNamedItem: _loop0_168
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_168)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_168) - should work
                // name = _loop0_168
                // REMOVE result call (_loop0_168_var = _loop0_168_rule()) != null  // _loop0_168
                (seq = _loop0_168_rule()) != null  // _loop0_168
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_gather_167[" + pos + ", " + mark() +" ](level: " + level + ") kwarg_or_starred _loop0_168 succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['elem', 'seq']
                // TODO handle default action if there is more variables
                return (SSTNode[])cache.putResult(pos, _GATHER_167_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _GATHER_167_ID, null);
    }

    // _loop0_170: ',' kwarg_or_double_starred
    public SSTNode[] _loop0_170_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_170, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: elem
        {
            // visiting Alt: ',' kwarg_or_double_starred
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_double_starred) - should work
            // name = kwarg_or_double_starred
            // TODO replacing KeywordOrStarred[] --> SSTNode[]
                // generated call: (kwarg_or_double_starred_var = kwarg_or_double_starred_rule()) != null  // kwarg_or_double_starred
            // collecting vars: SSTNode[] elem
            //    vars: {'_literal': 'Token', 'elem': 'SSTNode[]'}
            Object _literal;
            Object elem;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: kwarg_or_double_starred
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kwarg_or_double_starred)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_double_starred) - should work
                // name = kwarg_or_double_starred
                // TODO replacing KeywordOrStarred[] --> SSTNode[]
                // REMOVE result call (kwarg_or_double_starred_var = kwarg_or_double_starred_rule()) != null  // kwarg_or_double_starred
                (elem = kwarg_or_double_starred_rule()) != null  // kwarg_or_double_starred
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: elem
                Token endToken = getToken(mark());
                // node.action: elem
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_170_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_170_ID, null);
    }

    // _gather_169: kwarg_or_double_starred _loop0_170
    public SSTNode[] _gather_169_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _gather_169, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _GATHER_169_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, _GATHER_169_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: kwarg_or_double_starred _loop0_170
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_double_starred) - should work
            // name = kwarg_or_double_starred
            // TODO replacing KeywordOrStarred[] --> SSTNode[]
                // generated call: (kwarg_or_double_starred_var = kwarg_or_double_starred_rule()) != null  // kwarg_or_double_starred
            // collecting vars: SSTNode[] elem
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_170) - should work
            // name = _loop0_170
                // generated call: (_loop0_170_var = _loop0_170_rule()) != null  // _loop0_170
            // collecting vars: SSTNode[] seq
            //    vars: {'elem': 'SSTNode[]', 'seq': 'SSTNode[]'}
            SSTNode[] elem;
            SSTNode[] seq;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: kwarg_or_double_starred
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(kwarg_or_double_starred)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(kwarg_or_double_starred) - should work
                // name = kwarg_or_double_starred
                // TODO replacing KeywordOrStarred[] --> SSTNode[]
                // REMOVE result call (kwarg_or_double_starred_var = kwarg_or_double_starred_rule()) != null  // kwarg_or_double_starred
                (elem = kwarg_or_double_starred_rule()) != null  // kwarg_or_double_starred
                &&
                // TODO visiting JavaParserGeneratorNamedItem: _loop0_170
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_170)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_170) - should work
                // name = _loop0_170
                // REMOVE result call (_loop0_170_var = _loop0_170_rule()) != null  // _loop0_170
                (seq = _loop0_170_rule()) != null  // _loop0_170
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_gather_169[" + pos + ", " + mark() +" ](level: " + level + ") kwarg_or_double_starred _loop0_170 succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['elem', 'seq']
                // TODO handle default action if there is more variables
                return (SSTNode[])cache.putResult(pos, _GATHER_169_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _GATHER_169_ID, null);
    }

    // _loop0_171: (',' star_target)
    public SSTNode[] _loop0_171_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_171, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: (',' star_target)
            // TODO visiting JavaCallMakerVisitor.visit_Group((',' star_target))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' star_target)
                // generated call: (_tmp_235_var = _tmp_235_rule()) != null  // ',' star_target
            // collecting vars: None _tmp_235_var
            //    vars: {'_tmp_235_var': None}
            Object _tmp_235_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: (',' star_target)
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((',' star_target))
                // TODO visiting JavaCallMakerVisitor.visit_Group((',' star_target))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' star_target)
                // REMOVE result call (_tmp_235_var = _tmp_235_rule()) != null  // ',' star_target
                (_tmp_235_var = _tmp_235_rule()) != null  // ',' star_target
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['_tmp_235_var']
                if (_tmp_235_var instanceof Token) {
                    // TODO
                } else if (_tmp_235_var instanceof SSTNode) {
                    children.add((SSTNode)_tmp_235_var);
                } else if (_tmp_235_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])_tmp_235_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_171_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_171_ID, null);
    }

    // _tmp_172: ','
    public Object _tmp_172_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_172, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_172_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_172_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_172[" + pos + ", " + mark() +" ](level: " + level + ") ',' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_172_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_172_ID, null);
    }

    // _loop0_174: ',' star_target
    public SSTNode[] _loop0_174_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_174, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: elem
        {
            // visiting Alt: ',' star_target
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // name = star_target
                // generated call: (star_target_var = star_target_rule()) != null  // star_target
            // collecting vars: SSTNode elem
            //    vars: {'_literal': 'Token', 'elem': 'SSTNode'}
            Object _literal;
            Object elem;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: star_target
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_target)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
                // name = star_target
                // REMOVE result call (star_target_var = star_target_rule()) != null  // star_target
                (elem = star_target_rule()) != null  // star_target
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: elem
                Token endToken = getToken(mark());
                // node.action: elem
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_174_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_174_ID, null);
    }

    // _gather_173: star_target _loop0_174
    public SSTNode[] _gather_173_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _gather_173, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _GATHER_173_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, _GATHER_173_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: star_target _loop0_174
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // name = star_target
                // generated call: (star_target_var = star_target_rule()) != null  // star_target
            // collecting vars: SSTNode elem
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_174) - should work
            // name = _loop0_174
                // generated call: (_loop0_174_var = _loop0_174_rule()) != null  // _loop0_174
            // collecting vars: SSTNode[] seq
            //    vars: {'elem': 'SSTNode', 'seq': 'SSTNode[]'}
            SSTNode elem;
            SSTNode[] seq;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_target
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_target)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
                // name = star_target
                // REMOVE result call (star_target_var = star_target_rule()) != null  // star_target
                (elem = star_target_rule()) != null  // star_target
                &&
                // TODO visiting JavaParserGeneratorNamedItem: _loop0_174
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_174)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_174) - should work
                // name = _loop0_174
                // REMOVE result call (_loop0_174_var = _loop0_174_rule()) != null  // _loop0_174
                (seq = _loop0_174_rule()) != null  // _loop0_174
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_gather_173[" + pos + ", " + mark() +" ](level: " + level + ") star_target _loop0_174 succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['elem', 'seq']
                // TODO handle default action if there is more variables
                return (SSTNode[])cache.putResult(pos, _GATHER_173_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _GATHER_173_ID, null);
    }

    // _tmp_175: ','
    public Object _tmp_175_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_175, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_175_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_175_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_175[" + pos + ", " + mark() +" ](level: " + level + ") ',' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_175_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_175_ID, null);
    }

    // _loop1_176: (',' star_target)
    public SSTNode[] _loop1_176_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_176, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: (',' star_target)
            // TODO visiting JavaCallMakerVisitor.visit_Group((',' star_target))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' star_target)
                // generated call: (_tmp_236_var = _tmp_236_rule()) != null  // ',' star_target
            // collecting vars: None _tmp_236_var
            //    vars: {'_tmp_236_var': None}
            Object _tmp_236_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: (',' star_target)
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((',' star_target))
                // TODO visiting JavaCallMakerVisitor.visit_Group((',' star_target))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(',' star_target)
                // REMOVE result call (_tmp_236_var = _tmp_236_rule()) != null  // ',' star_target
                (_tmp_236_var = _tmp_236_rule()) != null  // ',' star_target
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['_tmp_236_var']
                if (_tmp_236_var instanceof Token) {
                    // TODO
                } else if (_tmp_236_var instanceof SSTNode) {
                    children.add((SSTNode)_tmp_236_var);
                } else if (_tmp_236_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])_tmp_236_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP1_176_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP1_176_ID, null);
    }

    // _tmp_177: ','
    public Object _tmp_177_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_177, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_177_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_177_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_177[" + pos + ", " + mark() +" ](level: " + level + ") ',' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_177_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_177_ID, null);
    }

    // _tmp_178: !'*' star_target
    public Object _tmp_178_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_178, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_178_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_178_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: !'*' star_target
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!'*')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
            // lookahead_call_helper call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
            //    call.nodetype: GENERIC_TOKEN
                // generated call: lookahead(false, Token.Kind.STAR)  // token='*'
            // collecting vars: boolean None
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // name = star_target
                // generated call: (star_target_var = star_target_rule()) != null  // star_target
            // collecting vars: SSTNode star_target_var
            //    vars: {None: 'boolean', 'star_target_var': 'SSTNode'}
            SSTNode star_target_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: !'*'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!'*')
                // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!'*')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('*')
                // lookahead_call_helper call: (_literal = expect(Token.Kind.STAR)) != null  // token='*'
                //    call.nodetype: GENERIC_TOKEN
                // REMOVE result call lookahead(false, Token.Kind.STAR)  // token='*'
                lookahead(false, Token.Kind.STAR)  // token='*'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: star_target
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_target)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
                // name = star_target
                // REMOVE result call (star_target_var = star_target_rule()) != null  // star_target
                (star_target_var = star_target_rule()) != null  // star_target
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_178[" + pos + ", " + mark() +" ](level: " + level + ") !'*' star_target succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['star_target_var']
                result = star_target_var;
                return (Object)cache.putResult(pos, _TMP_178_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_178_ID, null);
    }

    // _tmp_179: star_targets_tuple_seq
    public Object _tmp_179_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_179, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_179_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_179_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: star_targets_tuple_seq
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets_tuple_seq) - should work
            // name = star_targets_tuple_seq
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // generated call: (star_targets_tuple_seq_var = star_targets_tuple_seq_rule()) != null  // star_targets_tuple_seq
            // collecting vars: SSTNode[] star_targets_tuple_seq_var
            //    vars: {'star_targets_tuple_seq_var': 'SSTNode[]'}
            SSTNode[] star_targets_tuple_seq_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_targets_tuple_seq
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_targets_tuple_seq)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets_tuple_seq) - should work
                // name = star_targets_tuple_seq
                // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // REMOVE result call (star_targets_tuple_seq_var = star_targets_tuple_seq_rule()) != null  // star_targets_tuple_seq
                (star_targets_tuple_seq_var = star_targets_tuple_seq_rule()) != null  // star_targets_tuple_seq
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_179[" + pos + ", " + mark() +" ](level: " + level + ") star_targets_tuple_seq succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['star_targets_tuple_seq_var']
                result = star_targets_tuple_seq_var;
                return (Object)cache.putResult(pos, _TMP_179_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_179_ID, null);
    }

    // _tmp_180: star_targets_list_seq
    public Object _tmp_180_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_180, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_180_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_180_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: star_targets_list_seq
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets_list_seq) - should work
            // name = star_targets_list_seq
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // generated call: (star_targets_list_seq_var = star_targets_list_seq_rule()) != null  // star_targets_list_seq
            // collecting vars: SSTNode[] star_targets_list_seq_var
            //    vars: {'star_targets_list_seq_var': 'SSTNode[]'}
            SSTNode[] star_targets_list_seq_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_targets_list_seq
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_targets_list_seq)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets_list_seq) - should work
                // name = star_targets_list_seq
                // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // REMOVE result call (star_targets_list_seq_var = star_targets_list_seq_rule()) != null  // star_targets_list_seq
                (star_targets_list_seq_var = star_targets_list_seq_rule()) != null  // star_targets_list_seq
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_180[" + pos + ", " + mark() +" ](level: " + level + ") star_targets_list_seq succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['star_targets_list_seq_var']
                result = star_targets_list_seq_var;
                return (Object)cache.putResult(pos, _TMP_180_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_180_ID, null);
    }

    // _loop0_182: ',' del_target
    public SSTNode[] _loop0_182_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_182, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: elem
        {
            // visiting Alt: ',' del_target
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_target) - should work
            // name = del_target
                // generated call: (del_target_var = del_target_rule()) != null  // del_target
            // collecting vars: SSTNode elem
            //    vars: {'_literal': 'Token', 'elem': 'SSTNode'}
            Object _literal;
            Object elem;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: del_target
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(del_target)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_target) - should work
                // name = del_target
                // REMOVE result call (del_target_var = del_target_rule()) != null  // del_target
                (elem = del_target_rule()) != null  // del_target
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: elem
                Token endToken = getToken(mark());
                // node.action: elem
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_182_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_182_ID, null);
    }

    // _gather_181: del_target _loop0_182
    public SSTNode[] _gather_181_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _gather_181, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _GATHER_181_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, _GATHER_181_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: del_target _loop0_182
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_target) - should work
            // name = del_target
                // generated call: (del_target_var = del_target_rule()) != null  // del_target
            // collecting vars: SSTNode elem
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_182) - should work
            // name = _loop0_182
                // generated call: (_loop0_182_var = _loop0_182_rule()) != null  // _loop0_182
            // collecting vars: SSTNode[] seq
            //    vars: {'elem': 'SSTNode', 'seq': 'SSTNode[]'}
            SSTNode elem;
            SSTNode[] seq;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: del_target
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(del_target)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_target) - should work
                // name = del_target
                // REMOVE result call (del_target_var = del_target_rule()) != null  // del_target
                (elem = del_target_rule()) != null  // del_target
                &&
                // TODO visiting JavaParserGeneratorNamedItem: _loop0_182
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_182)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_182) - should work
                // name = _loop0_182
                // REMOVE result call (_loop0_182_var = _loop0_182_rule()) != null  // _loop0_182
                (seq = _loop0_182_rule()) != null  // _loop0_182
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_gather_181[" + pos + ", " + mark() +" ](level: " + level + ") del_target _loop0_182 succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['elem', 'seq']
                // TODO handle default action if there is more variables
                return (SSTNode[])cache.putResult(pos, _GATHER_181_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _GATHER_181_ID, null);
    }

    // _tmp_183: ','
    public Object _tmp_183_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_183, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_183_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_183_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_183[" + pos + ", " + mark() +" ](level: " + level + ") ',' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_183_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_183_ID, null);
    }

    // _tmp_184: del_targets
    public Object _tmp_184_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_184, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_184_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_184_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: del_targets
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_targets) - should work
            // name = del_targets
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // generated call: (del_targets_var = del_targets_rule()) != null  // del_targets
            // collecting vars: SSTNode[] del_targets_var
            //    vars: {'del_targets_var': 'SSTNode[]'}
            SSTNode[] del_targets_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: del_targets
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(del_targets)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_targets) - should work
                // name = del_targets
                // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // REMOVE result call (del_targets_var = del_targets_rule()) != null  // del_targets
                (del_targets_var = del_targets_rule()) != null  // del_targets
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_184[" + pos + ", " + mark() +" ](level: " + level + ") del_targets succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['del_targets_var']
                result = del_targets_var;
                return (Object)cache.putResult(pos, _TMP_184_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_184_ID, null);
    }

    // _tmp_185: del_targets
    public Object _tmp_185_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_185, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_185_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_185_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: del_targets
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_targets) - should work
            // name = del_targets
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // generated call: (del_targets_var = del_targets_rule()) != null  // del_targets
            // collecting vars: SSTNode[] del_targets_var
            //    vars: {'del_targets_var': 'SSTNode[]'}
            SSTNode[] del_targets_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: del_targets
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(del_targets)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(del_targets) - should work
                // name = del_targets
                // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // REMOVE result call (del_targets_var = del_targets_rule()) != null  // del_targets
                (del_targets_var = del_targets_rule()) != null  // del_targets
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_185[" + pos + ", " + mark() +" ](level: " + level + ") del_targets succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['del_targets_var']
                result = del_targets_var;
                return (Object)cache.putResult(pos, _TMP_185_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_185_ID, null);
    }

    // _loop0_187: ',' target
    public SSTNode[] _loop0_187_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_187, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: elem
        {
            // visiting Alt: ',' target
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(target) - should work
            // name = target
                // generated call: (target_var = target_rule()) != null  // target
            // collecting vars: SSTNode elem
            //    vars: {'_literal': 'Token', 'elem': 'SSTNode'}
            Object _literal;
            Object elem;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: target
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(target)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(target) - should work
                // name = target
                // REMOVE result call (target_var = target_rule()) != null  // target
                (elem = target_rule()) != null  // target
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: elem
                Token endToken = getToken(mark());
                // node.action: elem
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_187_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_187_ID, null);
    }

    // _gather_186: target _loop0_187
    public SSTNode[] _gather_186_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _gather_186, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _GATHER_186_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, _GATHER_186_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: target _loop0_187
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(target) - should work
            // name = target
                // generated call: (target_var = target_rule()) != null  // target
            // collecting vars: SSTNode elem
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_187) - should work
            // name = _loop0_187
                // generated call: (_loop0_187_var = _loop0_187_rule()) != null  // _loop0_187
            // collecting vars: SSTNode[] seq
            //    vars: {'elem': 'SSTNode', 'seq': 'SSTNode[]'}
            SSTNode elem;
            SSTNode[] seq;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: target
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(target)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(target) - should work
                // name = target
                // REMOVE result call (target_var = target_rule()) != null  // target
                (elem = target_rule()) != null  // target
                &&
                // TODO visiting JavaParserGeneratorNamedItem: _loop0_187
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_187)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_187) - should work
                // name = _loop0_187
                // REMOVE result call (_loop0_187_var = _loop0_187_rule()) != null  // _loop0_187
                (seq = _loop0_187_rule()) != null  // _loop0_187
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_gather_186[" + pos + ", " + mark() +" ](level: " + level + ") target _loop0_187 succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['elem', 'seq']
                // TODO handle default action if there is more variables
                return (SSTNode[])cache.putResult(pos, _GATHER_186_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _GATHER_186_ID, null);
    }

    // _tmp_188: ','
    public Object _tmp_188_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_188, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_188_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_188_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_188[" + pos + ", " + mark() +" ](level: " + level + ") ',' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_188_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_188_ID, null);
    }

    // _tmp_189: arguments
    public Object _tmp_189_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_189, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_189_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_189_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: arguments
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(arguments) - should work
            // name = arguments
                // generated call: (arguments_var = arguments_rule()) != null  // arguments
            // collecting vars: SSTNode arguments_var
            //    vars: {'arguments_var': 'SSTNode'}
            SSTNode arguments_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: arguments
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(arguments)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(arguments) - should work
                // name = arguments
                // REMOVE result call (arguments_var = arguments_rule()) != null  // arguments
                (arguments_var = arguments_rule()) != null  // arguments
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_189[" + pos + ", " + mark() +" ](level: " + level + ") arguments succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['arguments_var']
                result = arguments_var;
                return (Object)cache.putResult(pos, _TMP_189_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_189_ID, null);
    }

    // _tmp_190: targets
    public Object _tmp_190_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_190, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_190_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_190_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: targets
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(targets) - should work
            // name = targets
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // generated call: (targets_var = targets_rule()) != null  // targets
            // collecting vars: SSTNode[] targets_var
            //    vars: {'targets_var': 'SSTNode[]'}
            SSTNode[] targets_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: targets
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(targets)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(targets) - should work
                // name = targets
                // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // REMOVE result call (targets_var = targets_rule()) != null  // targets
                (targets_var = targets_rule()) != null  // targets
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_190[" + pos + ", " + mark() +" ](level: " + level + ") targets succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['targets_var']
                result = targets_var;
                return (Object)cache.putResult(pos, _TMP_190_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_190_ID, null);
    }

    // _tmp_191: targets
    public Object _tmp_191_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_191, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_191_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_191_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: targets
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(targets) - should work
            // name = targets
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // generated call: (targets_var = targets_rule()) != null  // targets
            // collecting vars: SSTNode[] targets_var
            //    vars: {'targets_var': 'SSTNode[]'}
            SSTNode[] targets_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: targets
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(targets)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(targets) - should work
                // name = targets
                // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // REMOVE result call (targets_var = targets_rule()) != null  // targets
                (targets_var = targets_rule()) != null  // targets
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_191[" + pos + ", " + mark() +" ](level: " + level + ") targets succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['targets_var']
                result = targets_var;
                return (Object)cache.putResult(pos, _TMP_191_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_191_ID, null);
    }

    // _tmp_192: args | expression for_if_clauses
    public Object _tmp_192_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_192, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_192_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_192_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: args
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
            // name = args
                // generated call: (args_var = args_rule()) != null  // args
            // collecting vars: SSTNode args_var
            //    vars: {'args_var': 'SSTNode'}
            SSTNode args_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: args
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(args)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(args) - should work
                // name = args
                // REMOVE result call (args_var = args_rule()) != null  // args
                (args_var = args_rule()) != null  // args
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_192[" + pos + ", " + mark() +" ](level: " + level + ") args succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['args_var']
                result = args_var;
                return (Object)cache.putResult(pos, _TMP_192_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: expression for_if_clauses
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode expression_var
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
            // name = for_if_clauses
            // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
                // generated call: (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            // collecting vars: SSTNode[] for_if_clauses_var
            //    vars: {'expression_var': 'SSTNode', 'for_if_clauses_var': 'SSTNode[]'}
            SSTNode expression_var;
            SSTNode[] for_if_clauses_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (expression_var = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: for_if_clauses
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(for_if_clauses)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(for_if_clauses) - should work
                // name = for_if_clauses
                // TODO replacing asdl_comprehension_seq[] --> SSTNode[]
                // REMOVE result call (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
                (for_if_clauses_var = for_if_clauses_rule()) != null  // for_if_clauses
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_192[" + pos + ", " + mark() +" ](level: " + level + ") expression for_if_clauses succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['expression_var', 'for_if_clauses_var']
                // TODO handle default action if there is more variables
                return (Object)cache.putResult(pos, _TMP_192_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_192_ID, null);
    }

    // _tmp_193: NAME STRING | SOFT_KEYWORD
    public Object _tmp_193_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_193, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_193_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_193_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: NAME STRING
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token name_var
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(STRING) - should work
            // name = STRING
                // generated call: (string_var = expect(Token.Kind.STRING)) != null  // STRING
            // collecting vars: Token string_var
            //    vars: {'name_var': 'Token', 'string_var': 'Token'}
            Token name_var;
            Token string_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (name_var = expect(Token.Kind.NAME)) != null  // NAME
                &&
                // TODO visiting JavaParserGeneratorNamedItem: STRING
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(STRING)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(STRING) - should work
                // name = STRING
                // REMOVE result call (string_var = expect(Token.Kind.STRING)) != null  // STRING
                (string_var = expect(Token.Kind.STRING)) != null  // STRING
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_193[" + pos + ", " + mark() +" ](level: " + level + ") NAME STRING succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['name_var', 'string_var']
                // TODO handle default action if there is more variables
                return (Object)cache.putResult(pos, _TMP_193_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: SOFT_KEYWORD
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(SOFT_KEYWORD) - should work
            // name = SOFT_KEYWORD
                // generated call: (soft_keyword_var = softKeywordToken()) != null  // SOFT_KEYWORD
            // collecting vars: Token soft_keyword_var
            //    vars: {'soft_keyword_var': 'Token'}
            Token soft_keyword_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: SOFT_KEYWORD
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(SOFT_KEYWORD)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(SOFT_KEYWORD) - should work
                // name = SOFT_KEYWORD
                // REMOVE result call (soft_keyword_var = softKeywordToken()) != null  // SOFT_KEYWORD
                (soft_keyword_var = softKeywordToken()) != null  // SOFT_KEYWORD
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_193[" + pos + ", " + mark() +" ](level: " + level + ") SOFT_KEYWORD succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['soft_keyword_var']
                result = soft_keyword_var;
                return (Object)cache.putResult(pos, _TMP_193_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_193_ID, null);
    }

    // _tmp_194: '=' | ':=' | ','
    public Object _tmp_194_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_194, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_194_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_194_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: '='
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // generated call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // REMOVE result call (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
                (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_194[" + pos + ", " + mark() +" ](level: " + level + ") '=' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_194_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ':='
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':=')
                // generated call: (_literal = expect(Token.Kind.COLONEQUAL)) != null  // token=':='
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ':='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':=')
                // REMOVE result call (_literal = expect(Token.Kind.COLONEQUAL)) != null  // token=':='
                (_literal = expect(Token.Kind.COLONEQUAL)) != null  // token=':='
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_194[" + pos + ", " + mark() +" ](level: " + level + ") ':=' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_194_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_194[" + pos + ", " + mark() +" ](level: " + level + ") ',' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_194_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_194_ID, null);
    }

    // _tmp_195: list | tuple | genexp | 'True' | 'None' | 'False'
    public Object _tmp_195_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_195, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_195_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_195_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: list
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(list) - should work
            // name = list
                // generated call: (list_var = list_rule()) != null  // list
            // collecting vars: SSTNode list_var
            //    vars: {'list_var': 'SSTNode'}
            SSTNode list_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: list
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(list)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(list) - should work
                // name = list
                // REMOVE result call (list_var = list_rule()) != null  // list
                (list_var = list_rule()) != null  // list
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_195[" + pos + ", " + mark() +" ](level: " + level + ") list succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['list_var']
                result = list_var;
                return (Object)cache.putResult(pos, _TMP_195_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: tuple
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(tuple) - should work
            // name = tuple
                // generated call: (tuple_var = tuple_rule()) != null  // tuple
            // collecting vars: SSTNode tuple_var
            //    vars: {'tuple_var': 'SSTNode'}
            SSTNode tuple_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: tuple
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(tuple)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(tuple) - should work
                // name = tuple
                // REMOVE result call (tuple_var = tuple_rule()) != null  // tuple
                (tuple_var = tuple_rule()) != null  // tuple
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_195[" + pos + ", " + mark() +" ](level: " + level + ") tuple succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['tuple_var']
                result = tuple_var;
                return (Object)cache.putResult(pos, _TMP_195_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: genexp
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(genexp) - should work
            // name = genexp
                // generated call: (genexp_var = genexp_rule()) != null  // genexp
            // collecting vars: SSTNode genexp_var
            //    vars: {'genexp_var': 'SSTNode'}
            SSTNode genexp_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: genexp
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(genexp)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(genexp) - should work
                // name = genexp
                // REMOVE result call (genexp_var = genexp_rule()) != null  // genexp
                (genexp_var = genexp_rule()) != null  // genexp
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_195[" + pos + ", " + mark() +" ](level: " + level + ") genexp succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['genexp_var']
                result = genexp_var;
                return (Object)cache.putResult(pos, _TMP_195_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: 'True'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('True')
                // generated call: (_keyword = expect(KEYWORD_TRUE)) != null  // token='True'
            // collecting vars: Token _keyword
            //    vars: {'_keyword': 'Token'}
            Token _keyword;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'True'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('True')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('True')
                // REMOVE result call (_keyword = expect(KEYWORD_TRUE)) != null  // token='True'
                (_keyword = expect(KEYWORD_TRUE)) != null  // token='True'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_195[" + pos + ", " + mark() +" ](level: " + level + ") 'True' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_keyword']
                result = _keyword;
                return (Object)cache.putResult(pos, _TMP_195_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: 'None'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('None')
                // generated call: (_keyword = expect(KEYWORD_NONE)) != null  // token='None'
            // collecting vars: Token _keyword
            //    vars: {'_keyword': 'Token'}
            Token _keyword;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'None'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('None')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('None')
                // REMOVE result call (_keyword = expect(KEYWORD_NONE)) != null  // token='None'
                (_keyword = expect(KEYWORD_NONE)) != null  // token='None'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_195[" + pos + ", " + mark() +" ](level: " + level + ") 'None' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_keyword']
                result = _keyword;
                return (Object)cache.putResult(pos, _TMP_195_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: 'False'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('False')
                // generated call: (_keyword = expect(KEYWORD_FALSE)) != null  // token='False'
            // collecting vars: Token _keyword
            //    vars: {'_keyword': 'Token'}
            Token _keyword;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'False'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('False')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('False')
                // REMOVE result call (_keyword = expect(KEYWORD_FALSE)) != null  // token='False'
                (_keyword = expect(KEYWORD_FALSE)) != null  // token='False'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_195[" + pos + ", " + mark() +" ](level: " + level + ") 'False' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_keyword']
                result = _keyword;
                return (Object)cache.putResult(pos, _TMP_195_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_195_ID, null);
    }

    // _tmp_196: '=' | ':=' | ','
    public Object _tmp_196_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_196, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_196_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_196_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: '='
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // generated call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // REMOVE result call (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
                (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_196[" + pos + ", " + mark() +" ](level: " + level + ") '=' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_196_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ':='
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':=')
                // generated call: (_literal = expect(Token.Kind.COLONEQUAL)) != null  // token=':='
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ':='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':=')
                // REMOVE result call (_literal = expect(Token.Kind.COLONEQUAL)) != null  // token=':='
                (_literal = expect(Token.Kind.COLONEQUAL)) != null  // token=':='
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_196[" + pos + ", " + mark() +" ](level: " + level + ") ':=' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_196_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ','
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_196[" + pos + ", " + mark() +" ](level: " + level + ") ',' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_196_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_196_ID, null);
    }

    // _loop0_197: star_named_expressions
    public SSTNode[] _loop0_197_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_197, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: star_named_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
            // name = star_named_expressions
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // generated call: (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
            // collecting vars: SSTNode[] star_named_expressions_var
            //    vars: {'star_named_expressions_var': 'SSTNode[]'}
            Object star_named_expressions_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: star_named_expressions
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_named_expressions)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
                // name = star_named_expressions
                // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // REMOVE result call (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
                (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['star_named_expressions_var']
                if (star_named_expressions_var instanceof Token) {
                    // TODO
                } else if (star_named_expressions_var instanceof SSTNode) {
                    children.add((SSTNode)star_named_expressions_var);
                } else if (star_named_expressions_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])star_named_expressions_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_197_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_197_ID, null);
    }

    // _loop0_198: (star_targets '=')
    public SSTNode[] _loop0_198_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_198, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: (star_targets '=')
            // TODO visiting JavaCallMakerVisitor.visit_Group((star_targets '='))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_targets '=')
                // generated call: (_tmp_237_var = _tmp_237_rule()) != null  // star_targets '='
            // collecting vars: None _tmp_237_var
            //    vars: {'_tmp_237_var': None}
            Object _tmp_237_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: (star_targets '=')
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((star_targets '='))
                // TODO visiting JavaCallMakerVisitor.visit_Group((star_targets '='))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_targets '=')
                // REMOVE result call (_tmp_237_var = _tmp_237_rule()) != null  // star_targets '='
                (_tmp_237_var = _tmp_237_rule()) != null  // star_targets '='
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['_tmp_237_var']
                if (_tmp_237_var instanceof Token) {
                    // TODO
                } else if (_tmp_237_var instanceof SSTNode) {
                    children.add((SSTNode)_tmp_237_var);
                } else if (_tmp_237_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])_tmp_237_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_198_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_198_ID, null);
    }

    // _loop0_199: (star_targets '=')
    public SSTNode[] _loop0_199_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_199, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: (star_targets '=')
            // TODO visiting JavaCallMakerVisitor.visit_Group((star_targets '='))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_targets '=')
                // generated call: (_tmp_238_var = _tmp_238_rule()) != null  // star_targets '='
            // collecting vars: None _tmp_238_var
            //    vars: {'_tmp_238_var': None}
            Object _tmp_238_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: (star_targets '=')
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((star_targets '='))
                // TODO visiting JavaCallMakerVisitor.visit_Group((star_targets '='))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(star_targets '=')
                // REMOVE result call (_tmp_238_var = _tmp_238_rule()) != null  // star_targets '='
                (_tmp_238_var = _tmp_238_rule()) != null  // star_targets '='
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['_tmp_238_var']
                if (_tmp_238_var instanceof Token) {
                    // TODO
                } else if (_tmp_238_var instanceof SSTNode) {
                    children.add((SSTNode)_tmp_238_var);
                } else if (_tmp_238_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])_tmp_238_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_199_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_199_ID, null);
    }

    // _tmp_200: yield_expr | star_expressions
    public Object _tmp_200_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_200, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_200_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_200_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: yield_expr
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
            // name = yield_expr
                // generated call: (yield_expr_var = yield_expr_rule()) != null  // yield_expr
            // collecting vars: SSTNode yield_expr_var
            //    vars: {'yield_expr_var': 'SSTNode'}
            SSTNode yield_expr_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: yield_expr
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(yield_expr)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(yield_expr) - should work
                // name = yield_expr
                // REMOVE result call (yield_expr_var = yield_expr_rule()) != null  // yield_expr
                (yield_expr_var = yield_expr_rule()) != null  // yield_expr
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_200[" + pos + ", " + mark() +" ](level: " + level + ") yield_expr succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['yield_expr_var']
                result = yield_expr_var;
                return (Object)cache.putResult(pos, _TMP_200_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: star_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
            // name = star_expressions
                // generated call: (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            // collecting vars: SSTNode star_expressions_var
            //    vars: {'star_expressions_var': 'SSTNode'}
            SSTNode star_expressions_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_expressions
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expressions)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expressions) - should work
                // name = star_expressions
                // REMOVE result call (star_expressions_var = star_expressions_rule()) != null  // star_expressions
                (star_expressions_var = star_expressions_rule()) != null  // star_expressions
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_200[" + pos + ", " + mark() +" ](level: " + level + ") star_expressions succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['star_expressions_var']
                result = star_expressions_var;
                return (Object)cache.putResult(pos, _TMP_200_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_200_ID, null);
    }

    // _tmp_201: '[' | '(' | '{'
    public Object _tmp_201_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_201, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_201_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_201_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: '['
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
                // generated call: (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '['
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('[')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
                // REMOVE result call (_literal = expect(Token.Kind.LSQB)) != null  // token='['
                (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_201[" + pos + ", " + mark() +" ](level: " + level + ") '[' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_201_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: '('
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // generated call: (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '('
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('(')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('(')
                // REMOVE result call (_literal = expect(Token.Kind.LPAR)) != null  // token='('
                (_literal = expect(Token.Kind.LPAR)) != null  // token='('
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_201[" + pos + ", " + mark() +" ](level: " + level + ") '(' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_201_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: '{'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
                // generated call: (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '{'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('{')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
                // REMOVE result call (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
                (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_201[" + pos + ", " + mark() +" ](level: " + level + ") '{' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_201_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_201_ID, null);
    }

    // _tmp_202: '[' | '{'
    public Object _tmp_202_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_202, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_202_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_202_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: '['
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
                // generated call: (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '['
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('[')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('[')
                // REMOVE result call (_literal = expect(Token.Kind.LSQB)) != null  // token='['
                (_literal = expect(Token.Kind.LSQB)) != null  // token='['
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_202[" + pos + ", " + mark() +" ](level: " + level + ") '[' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_202_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: '{'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
                // generated call: (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '{'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('{')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('{')
                // REMOVE result call (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
                (_literal = expect(Token.Kind.LBRACE)) != null  // token='{'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_202[" + pos + ", " + mark() +" ](level: " + level + ") '{' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_202_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_202_ID, null);
    }

    // _tmp_203: star_named_expressions
    public Object _tmp_203_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_203, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_203_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_203_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: star_named_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
            // name = star_named_expressions
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // generated call: (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
            // collecting vars: SSTNode[] star_named_expressions_var
            //    vars: {'star_named_expressions_var': 'SSTNode[]'}
            SSTNode[] star_named_expressions_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_named_expressions
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_named_expressions)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
                // name = star_named_expressions
                // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // REMOVE result call (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
                (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_203[" + pos + ", " + mark() +" ](level: " + level + ") star_named_expressions succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['star_named_expressions_var']
                result = star_named_expressions_var;
                return (Object)cache.putResult(pos, _TMP_203_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_203_ID, null);
    }

    // _loop0_204: param_no_default
    public SSTNode[] _loop0_204_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_204, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
            // name = param_no_default
            // TODO replacing arg_ty --> SSTNode
                // generated call: (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            // collecting vars: SSTNode param_no_default_var
            //    vars: {'param_no_default_var': 'SSTNode'}
            Object param_no_default_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: param_no_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_no_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_no_default) - should work
                // name = param_no_default
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (param_no_default_var = param_no_default_rule()) != null  // param_no_default
                (param_no_default_var = param_no_default_rule()) != null  // param_no_default
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['param_no_default_var']
                if (param_no_default_var instanceof Token) {
                    // TODO
                } else if (param_no_default_var instanceof SSTNode) {
                    children.add((SSTNode)param_no_default_var);
                } else if (param_no_default_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])param_no_default_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_204_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_204_ID, null);
    }

    // _loop1_205: param_with_default
    public SSTNode[] _loop1_205_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_205, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: param_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
            // name = param_with_default
            // TODO replacing NameDefaultPair[] --> SSTNode[]
                // generated call: (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            // collecting vars: SSTNode[] param_with_default_var
            //    vars: {'param_with_default_var': 'SSTNode[]'}
            Object param_with_default_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: param_with_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(param_with_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(param_with_default) - should work
                // name = param_with_default
                // TODO replacing NameDefaultPair[] --> SSTNode[]
                // REMOVE result call (param_with_default_var = param_with_default_rule()) != null  // param_with_default
                (param_with_default_var = param_with_default_rule()) != null  // param_with_default
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['param_with_default_var']
                if (param_with_default_var instanceof Token) {
                    // TODO
                } else if (param_with_default_var instanceof SSTNode) {
                    children.add((SSTNode)param_with_default_var);
                } else if (param_with_default_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])param_with_default_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP1_205_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP1_205_ID, null);
    }

    // _loop0_206: lambda_param_no_default
    public SSTNode[] _loop0_206_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_206, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: lambda_param_no_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
            // name = lambda_param_no_default
            // TODO replacing arg_ty --> SSTNode
                // generated call: (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            // collecting vars: SSTNode lambda_param_no_default_var
            //    vars: {'lambda_param_no_default_var': 'SSTNode'}
            Object lambda_param_no_default_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_no_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_no_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_no_default) - should work
                // name = lambda_param_no_default
                // TODO replacing arg_ty --> SSTNode
                // REMOVE result call (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
                (lambda_param_no_default_var = lambda_param_no_default_rule()) != null  // lambda_param_no_default
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['lambda_param_no_default_var']
                if (lambda_param_no_default_var instanceof Token) {
                    // TODO
                } else if (lambda_param_no_default_var instanceof SSTNode) {
                    children.add((SSTNode)lambda_param_no_default_var);
                } else if (lambda_param_no_default_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])lambda_param_no_default_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_206_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_206_ID, null);
    }

    // _loop1_207: lambda_param_with_default
    public SSTNode[] _loop1_207_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop1_207, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: lambda_param_with_default
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
            // name = lambda_param_with_default
            // TODO replacing NameDefaultPair[] --> SSTNode[]
                // generated call: (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            // collecting vars: SSTNode[] lambda_param_with_default_var
            //    vars: {'lambda_param_with_default_var': 'SSTNode[]'}
            Object lambda_param_with_default_var;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: lambda_param_with_default
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(lambda_param_with_default)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(lambda_param_with_default) - should work
                // name = lambda_param_with_default
                // TODO replacing NameDefaultPair[] --> SSTNode[]
                // REMOVE result call (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
                (lambda_param_with_default_var = lambda_param_with_default_rule()) != null  // lambda_param_with_default
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: None
                // self.local_variable_names: ['lambda_param_with_default_var']
                if (lambda_param_with_default_var instanceof Token) {
                    // TODO
                } else if (lambda_param_with_default_var instanceof SSTNode) {
                    children.add((SSTNode)lambda_param_with_default_var);
                } else if (lambda_param_with_default_var instanceof SSTNode[]) {
                    for (SSTNode node: (SSTNode[])lambda_param_with_default_var) {
                        children.add(node);
                    }
                }
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP1_207_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP1_207_ID, null);
    }

    // _tmp_208: ')' | ',' (')' | '**')
    public Object _tmp_208_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_208, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_208_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_208_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
                (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_208[" + pos + ", " + mark() +" ](level: " + level + ") ')' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_208_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ',' (')' | '**')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // TODO visiting JavaCallMakerVisitor.visit_Group((')' | '**'))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(')' | '**')
                // generated call: (_tmp_239_var = _tmp_239_rule()) != null  // ')' | '**'
            // collecting vars: None _tmp_239_var
            //    vars: {'_literal': 'Token', '_tmp_239_var': None}
            Token _literal;
            Object _tmp_239_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: (')' | '**')
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((')' | '**'))
                // TODO visiting JavaCallMakerVisitor.visit_Group((')' | '**'))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(')' | '**')
                // REMOVE result call (_tmp_239_var = _tmp_239_rule()) != null  // ')' | '**'
                (_tmp_239_var = _tmp_239_rule()) != null  // ')' | '**'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_208[" + pos + ", " + mark() +" ](level: " + level + ") ',' (')' | '**') succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal', '_tmp_239_var']
                // TODO handle default action if there is more variables
                return (Object)cache.putResult(pos, _TMP_208_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_208_ID, null);
    }

    // _tmp_209: ':' | ',' (':' | '**')
    public Object _tmp_209_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_209, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_209_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_209_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_209[" + pos + ", " + mark() +" ](level: " + level + ") ':' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_209_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ',' (':' | '**')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // TODO visiting JavaCallMakerVisitor.visit_Group((':' | '**'))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(':' | '**')
                // generated call: (_tmp_240_var = _tmp_240_rule()) != null  // ':' | '**'
            // collecting vars: None _tmp_240_var
            //    vars: {'_literal': 'Token', '_tmp_240_var': None}
            Token _literal;
            Object _tmp_240_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: (':' | '**')
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((':' | '**'))
                // TODO visiting JavaCallMakerVisitor.visit_Group((':' | '**'))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(':' | '**')
                // REMOVE result call (_tmp_240_var = _tmp_240_rule()) != null  // ':' | '**'
                (_tmp_240_var = _tmp_240_rule()) != null  // ':' | '**'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_209[" + pos + ", " + mark() +" ](level: " + level + ") ',' (':' | '**') succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal', '_tmp_240_var']
                // TODO handle default action if there is more variables
                return (Object)cache.putResult(pos, _TMP_209_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_209_ID, null);
    }

    // _tmp_210: ASYNC
    public Object _tmp_210_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_210, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_210_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_210_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ASYNC
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
            // name = ASYNC
                // generated call: (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            // collecting vars: Token async_var
            //    vars: {'async_var': 'Token'}
            Token async_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ASYNC
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(ASYNC)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
                // name = ASYNC
                // REMOVE result call (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
                (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_210[" + pos + ", " + mark() +" ](level: " + level + ") ASYNC succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['async_var']
                result = async_var;
                return (Object)cache.putResult(pos, _TMP_210_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_210_ID, null);
    }

    // _loop0_212: ',' (expression ['as' star_target])
    public SSTNode[] _loop0_212_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_212, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: elem
        {
            // visiting Alt: ',' (expression ['as' star_target])
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // TODO visiting JavaCallMakerVisitor.visit_Group((expression ['as' star_target]))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expression ['as' star_target])
                // generated call: (_tmp_241_var = _tmp_241_rule()) != null  // expression ['as' star_target]
            // collecting vars: None elem
            //    vars: {'_literal': 'Token', 'elem': None}
            Object _literal;
            Object elem;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: (expression ['as' star_target])
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((expression ['as' star_target]))
                // TODO visiting JavaCallMakerVisitor.visit_Group((expression ['as' star_target]))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expression ['as' star_target])
                // REMOVE result call (_tmp_241_var = _tmp_241_rule()) != null  // expression ['as' star_target]
                (elem = _tmp_241_rule()) != null  // expression ['as' star_target]
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: elem
                Token endToken = getToken(mark());
                // node.action: elem
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_212_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_212_ID, null);
    }

    // _gather_211: (expression ['as' star_target]) _loop0_212
    public SSTNode[] _gather_211_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _gather_211, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _GATHER_211_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, _GATHER_211_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: (expression ['as' star_target]) _loop0_212
            // TODO visiting JavaCallMakerVisitor.visit_Group((expression ['as' star_target]))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expression ['as' star_target])
                // generated call: (elem = _tmp_241_rule()) != null  // expression ['as' star_target]
            // collecting vars: None elem
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_212) - should work
            // name = _loop0_212
                // generated call: (_loop0_212_var = _loop0_212_rule()) != null  // _loop0_212
            // collecting vars: SSTNode[] seq
            //    vars: {'elem': None, 'seq': 'SSTNode[]'}
            Object elem;
            SSTNode[] seq;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: (expression ['as' star_target])
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((expression ['as' star_target]))
                // TODO visiting JavaCallMakerVisitor.visit_Group((expression ['as' star_target]))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expression ['as' star_target])
                // REMOVE result call (elem = _tmp_241_rule()) != null  // expression ['as' star_target]
                (elem = _tmp_241_rule()) != null  // expression ['as' star_target]
                &&
                // TODO visiting JavaParserGeneratorNamedItem: _loop0_212
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_212)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_212) - should work
                // name = _loop0_212
                // REMOVE result call (_loop0_212_var = _loop0_212_rule()) != null  // _loop0_212
                (seq = _loop0_212_rule()) != null  // _loop0_212
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_gather_211[" + pos + ", " + mark() +" ](level: " + level + ") (expression ['as' star_target]) _loop0_212 succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['elem', 'seq']
                // TODO handle default action if there is more variables
                return (SSTNode[])cache.putResult(pos, _GATHER_211_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _GATHER_211_ID, null);
    }

    // _tmp_213: ASYNC
    public Object _tmp_213_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_213, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_213_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_213_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ASYNC
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
            // name = ASYNC
                // generated call: (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            // collecting vars: Token async_var
            //    vars: {'async_var': 'Token'}
            Token async_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ASYNC
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(ASYNC)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(ASYNC) - should work
                // name = ASYNC
                // REMOVE result call (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
                (async_var = expect(Token.Kind.ASYNC)) != null  // token='ASYNC'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_213[" + pos + ", " + mark() +" ](level: " + level + ") ASYNC succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['async_var']
                result = async_var;
                return (Object)cache.putResult(pos, _TMP_213_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_213_ID, null);
    }

    // _loop0_215: ',' (expressions ['as' star_target])
    public SSTNode[] _loop0_215_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_215, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: elem
        {
            // visiting Alt: ',' (expressions ['as' star_target])
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // TODO visiting JavaCallMakerVisitor.visit_Group((expressions ['as' star_target]))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expressions ['as' star_target])
                // generated call: (_tmp_242_var = _tmp_242_rule()) != null  // expressions ['as' star_target]
            // collecting vars: None elem
            //    vars: {'_literal': 'Token', 'elem': None}
            Object _literal;
            Object elem;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: (expressions ['as' star_target])
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((expressions ['as' star_target]))
                // TODO visiting JavaCallMakerVisitor.visit_Group((expressions ['as' star_target]))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expressions ['as' star_target])
                // REMOVE result call (_tmp_242_var = _tmp_242_rule()) != null  // expressions ['as' star_target]
                (elem = _tmp_242_rule()) != null  // expressions ['as' star_target]
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: elem
                Token endToken = getToken(mark());
                // node.action: elem
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_215_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_215_ID, null);
    }

    // _gather_214: (expressions ['as' star_target]) _loop0_215
    public SSTNode[] _gather_214_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _gather_214, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _GATHER_214_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, _GATHER_214_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: (expressions ['as' star_target]) _loop0_215
            // TODO visiting JavaCallMakerVisitor.visit_Group((expressions ['as' star_target]))
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expressions ['as' star_target])
                // generated call: (elem = _tmp_242_rule()) != null  // expressions ['as' star_target]
            // collecting vars: None elem
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_215) - should work
            // name = _loop0_215
                // generated call: (_loop0_215_var = _loop0_215_rule()) != null  // _loop0_215
            // collecting vars: SSTNode[] seq
            //    vars: {'elem': None, 'seq': 'SSTNode[]'}
            Object elem;
            SSTNode[] seq;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: (expressions ['as' star_target])
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem((expressions ['as' star_target]))
                // TODO visiting JavaCallMakerVisitor.visit_Group((expressions ['as' star_target]))
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs(expressions ['as' star_target])
                // REMOVE result call (elem = _tmp_242_rule()) != null  // expressions ['as' star_target]
                (elem = _tmp_242_rule()) != null  // expressions ['as' star_target]
                &&
                // TODO visiting JavaParserGeneratorNamedItem: _loop0_215
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_215)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_215) - should work
                // name = _loop0_215
                // REMOVE result call (_loop0_215_var = _loop0_215_rule()) != null  // _loop0_215
                (seq = _loop0_215_rule()) != null  // _loop0_215
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_gather_214[" + pos + ", " + mark() +" ](level: " + level + ") (expressions ['as' star_target]) _loop0_215 succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['elem', 'seq']
                // TODO handle default action if there is more variables
                return (SSTNode[])cache.putResult(pos, _GATHER_214_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _GATHER_214_ID, null);
    }

    // _tmp_216: 'as' NAME
    public Object _tmp_216_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_216, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_216_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_216_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: 'as' NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
                // generated call: (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token name_var
            //    vars: {'_keyword': 'Token', 'name_var': 'Token'}
            Token _keyword;
            Token name_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'as'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('as')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
                // REMOVE result call (_keyword = expect(KEYWORD_AS)) != null  // token='as'
                (_keyword = expect(KEYWORD_AS)) != null  // token='as'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (name_var = expect(Token.Kind.NAME)) != null  // NAME
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_216[" + pos + ", " + mark() +" ](level: " + level + ") 'as' NAME succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_keyword', 'name_var']
                // TODO handle default action if there is more variables
                return (Object)cache.putResult(pos, _TMP_216_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_216_ID, null);
    }

    // _tmp_217: 'as' NAME
    public Object _tmp_217_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_217, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_217_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_217_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: 'as' NAME
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
                // generated call: (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
            // name = NAME
                // generated call: (name_var = expect(Token.Kind.NAME)) != null  // NAME
            // collecting vars: Token name_var
            //    vars: {'_keyword': 'Token', 'name_var': 'Token'}
            Token _keyword;
            Token name_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'as'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('as')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
                // REMOVE result call (_keyword = expect(KEYWORD_AS)) != null  // token='as'
                (_keyword = expect(KEYWORD_AS)) != null  // token='as'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NAME
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NAME)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NAME) - should work
                // name = NAME
                // REMOVE result call (name_var = expect(Token.Kind.NAME)) != null  // NAME
                (name_var = expect(Token.Kind.NAME)) != null  // NAME
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_217[" + pos + ", " + mark() +" ](level: " + level + ") 'as' NAME succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_keyword', 'name_var']
                // TODO handle default action if there is more variables
                return (Object)cache.putResult(pos, _TMP_217_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_217_ID, null);
    }

    // _loop0_219: ',' double_starred_kvpair
    public SSTNode[] _loop0_219_rule() {
    // isLoop: True, isGather: False, type: None)
        // loop rule body
        int pos = mark();
        List<SSTNode> children = new ArrayList();
        if (DEBUG) {
            debugMessageln("Rule: _loop0_219, pos: " + pos + ", level: " + level);
            this.level++;
        }
        // the result should be constructed through action: elem
        {
            // visiting Alt: ',' double_starred_kvpair
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_starred_kvpair) - should work
            // name = double_starred_kvpair
            // TODO replacing KeyValuePair[] --> SSTNode[]
                // generated call: (double_starred_kvpair_var = double_starred_kvpair_rule()) != null  // double_starred_kvpair
            // collecting vars: SSTNode[] elem
            //    vars: {'_literal': 'Token', 'elem': 'SSTNode[]'}
            Object _literal;
            Object elem;
            while (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: double_starred_kvpair
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(double_starred_kvpair)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_starred_kvpair) - should work
                // name = double_starred_kvpair
                // TODO replacing KeyValuePair[] --> SSTNode[]
                // REMOVE result call (double_starred_kvpair_var = double_starred_kvpair_rule()) != null  // double_starred_kvpair
                (elem = double_starred_kvpair_rule()) != null  // double_starred_kvpair
            ) {
                if (DEBUG) {
                    debugMessageln("Succeeded - adding one result to collection!");
                }
                // alt action: elem
                Token endToken = getToken(mark());
                // node.action: elem
                pos = mark();
            }
            reset(pos);
            if (children.size() > 0) {
                return (SSTNode[])cache.putResult(pos, _LOOP0_219_ID, children.toArray(new SSTNode[children.size()]));
            }
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _LOOP0_219_ID, null);
    }

    // _gather_218: double_starred_kvpair _loop0_219
    public SSTNode[] _gather_218_rule() {
    // isLoop: False, isGather: True, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _gather_218, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _GATHER_218_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (SSTNode[])cache.getResult(pos, _GATHER_218_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: double_starred_kvpair _loop0_219
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_starred_kvpair) - should work
            // name = double_starred_kvpair
            // TODO replacing KeyValuePair[] --> SSTNode[]
                // generated call: (double_starred_kvpair_var = double_starred_kvpair_rule()) != null  // double_starred_kvpair
            // collecting vars: SSTNode[] elem
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_219) - should work
            // name = _loop0_219
                // generated call: (_loop0_219_var = _loop0_219_rule()) != null  // _loop0_219
            // collecting vars: SSTNode[] seq
            //    vars: {'elem': 'SSTNode[]', 'seq': 'SSTNode[]'}
            SSTNode[] elem;
            SSTNode[] seq;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: double_starred_kvpair
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(double_starred_kvpair)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(double_starred_kvpair) - should work
                // name = double_starred_kvpair
                // TODO replacing KeyValuePair[] --> SSTNode[]
                // REMOVE result call (double_starred_kvpair_var = double_starred_kvpair_rule()) != null  // double_starred_kvpair
                (elem = double_starred_kvpair_rule()) != null  // double_starred_kvpair
                &&
                // TODO visiting JavaParserGeneratorNamedItem: _loop0_219
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(_loop0_219)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(_loop0_219) - should work
                // name = _loop0_219
                // REMOVE result call (_loop0_219_var = _loop0_219_rule()) != null  // _loop0_219
                (seq = _loop0_219_rule()) != null  // _loop0_219
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_gather_218[" + pos + ", " + mark() +" ](level: " + level + ") double_starred_kvpair _loop0_219 succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['elem', 'seq']
                // TODO handle default action if there is more variables
                return (SSTNode[])cache.putResult(pos, _GATHER_218_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (SSTNode[])cache.putResult(pos, _GATHER_218_ID, null);
    }

    // _tmp_220: ':'
    public Object _tmp_220_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_220, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_220_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_220_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_220[" + pos + ", " + mark() +" ](level: " + level + ") ':' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_220_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_220_ID, null);
    }

    // _tmp_221: star_targets '='
    public Object _tmp_221_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_221, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_221_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_221_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: z
        {
            // visiting Alt: star_targets '='
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
            // name = star_targets
                // generated call: (star_targets_var = star_targets_rule()) != null  // star_targets
            // collecting vars: SSTNode z
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // generated call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            // collecting vars: Token _literal
            //    vars: {'z': 'SSTNode', '_literal': 'Token'}
            Token _literal;
            SSTNode z;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_targets
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_targets)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
                // name = star_targets
                // REMOVE result call (star_targets_var = star_targets_rule()) != null  // star_targets
                (z = star_targets_rule()) != null  // star_targets
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // REMOVE result call (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
                (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_221[" + pos + ", " + mark() +" ](level: " + level + ") star_targets '=' succeeded!");
                }
                // alt action: z
                Token endToken = getToken(mark());
                // node.action: z
                result = z;
                return (Object)cache.putResult(pos, _TMP_221_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_221_ID, null);
    }

    // _tmp_222: '.' | '...'
    public Object _tmp_222_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_222, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_222_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_222_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: '.'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
                // generated call: (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '.'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('.')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
                // REMOVE result call (_literal = expect(Token.Kind.DOT)) != null  // token='.'
                (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_222[" + pos + ", " + mark() +" ](level: " + level + ") '.' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_222_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: '...'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('...')
                // generated call: (_literal = expect(Token.Kind.ELLIPSIS)) != null  // token='...'
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '...'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('...')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('...')
                // REMOVE result call (_literal = expect(Token.Kind.ELLIPSIS)) != null  // token='...'
                (_literal = expect(Token.Kind.ELLIPSIS)) != null  // token='...'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_222[" + pos + ", " + mark() +" ](level: " + level + ") '...' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_222_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_222_ID, null);
    }

    // _tmp_223: '.' | '...'
    public Object _tmp_223_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_223, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_223_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_223_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: '.'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
                // generated call: (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '.'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('.')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('.')
                // REMOVE result call (_literal = expect(Token.Kind.DOT)) != null  // token='.'
                (_literal = expect(Token.Kind.DOT)) != null  // token='.'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_223[" + pos + ", " + mark() +" ](level: " + level + ") '.' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_223_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: '...'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('...')
                // generated call: (_literal = expect(Token.Kind.ELLIPSIS)) != null  // token='...'
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '...'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('...')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('...')
                // REMOVE result call (_literal = expect(Token.Kind.ELLIPSIS)) != null  // token='...'
                (_literal = expect(Token.Kind.ELLIPSIS)) != null  // token='...'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_223[" + pos + ", " + mark() +" ](level: " + level + ") '...' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_223_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_223_ID, null);
    }

    // _tmp_224: '@' named_expression NEWLINE
    public Object _tmp_224_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_224, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_224_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_224_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: f
        {
            // visiting Alt: '@' named_expression NEWLINE
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('@')
                // generated call: (_literal = expect(Token.Kind.AT)) != null  // token='@'
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
            // name = named_expression
                // generated call: (named_expression_var = named_expression_rule()) != null  // named_expression
            // collecting vars: SSTNode f
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
            // name = NEWLINE
                // generated call: (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            // collecting vars: Token newline_var
            //    vars: {'_literal': 'Token', 'f': 'SSTNode', 'newline_var': 'Token'}
            Token _literal;
            SSTNode f;
            Token newline_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '@'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('@')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('@')
                // REMOVE result call (_literal = expect(Token.Kind.AT)) != null  // token='@'
                (_literal = expect(Token.Kind.AT)) != null  // token='@'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: named_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(named_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(named_expression) - should work
                // name = named_expression
                // REMOVE result call (named_expression_var = named_expression_rule()) != null  // named_expression
                (f = named_expression_rule()) != null  // named_expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: NEWLINE
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(NEWLINE)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(NEWLINE) - should work
                // name = NEWLINE
                // REMOVE result call (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
                (newline_var = expect(Token.Kind.NEWLINE)) != null  // token='NEWLINE'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_224[" + pos + ", " + mark() +" ](level: " + level + ") '@' named_expression NEWLINE succeeded!");
                }
                // alt action: f
                Token endToken = getToken(mark());
                // node.action: f
                result = f;
                return (Object)cache.putResult(pos, _TMP_224_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_224_ID, null);
    }

    // _tmp_225: arguments
    public Object _tmp_225_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_225, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_225_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_225_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: arguments
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(arguments) - should work
            // name = arguments
                // generated call: (arguments_var = arguments_rule()) != null  // arguments
            // collecting vars: SSTNode arguments_var
            //    vars: {'arguments_var': 'SSTNode'}
            SSTNode arguments_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: arguments
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(arguments)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(arguments) - should work
                // name = arguments
                // REMOVE result call (arguments_var = arguments_rule()) != null  // arguments
                (arguments_var = arguments_rule()) != null  // arguments
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_225[" + pos + ", " + mark() +" ](level: " + level + ") arguments succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['arguments_var']
                result = arguments_var;
                return (Object)cache.putResult(pos, _TMP_225_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_225_ID, null);
    }

    // _tmp_226: ',' star_expression
    public Object _tmp_226_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_226, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_226_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_226_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: c
        {
            // visiting Alt: ',' star_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expression) - should work
            // name = star_expression
                // generated call: (star_expression_var = star_expression_rule()) != null  // star_expression
            // collecting vars: SSTNode c
            //    vars: {'_literal': 'Token', 'c': 'SSTNode'}
            Token _literal;
            SSTNode c;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: star_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_expression) - should work
                // name = star_expression
                // REMOVE result call (star_expression_var = star_expression_rule()) != null  // star_expression
                (c = star_expression_rule()) != null  // star_expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_226[" + pos + ", " + mark() +" ](level: " + level + ") ',' star_expression succeeded!");
                }
                // alt action: c
                Token endToken = getToken(mark());
                // node.action: c
                result = c;
                return (Object)cache.putResult(pos, _TMP_226_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_226_ID, null);
    }

    // _tmp_227: ',' expression
    public Object _tmp_227_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_227, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_227_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_227_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: c
        {
            // visiting Alt: ',' expression
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode c
            //    vars: {'_literal': 'Token', 'c': 'SSTNode'}
            Token _literal;
            SSTNode c;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (c = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_227[" + pos + ", " + mark() +" ](level: " + level + ") ',' expression succeeded!");
                }
                // alt action: c
                Token endToken = getToken(mark());
                // node.action: c
                result = c;
                return (Object)cache.putResult(pos, _TMP_227_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_227_ID, null);
    }

    // _tmp_228: 'or' conjunction
    public Object _tmp_228_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_228, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_228_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_228_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: c
        {
            // visiting Alt: 'or' conjunction
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('or')
                // generated call: (_keyword = expect(KEYWORD_OR)) != null  // token='or'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(conjunction) - should work
            // name = conjunction
                // generated call: (conjunction_var = conjunction_rule()) != null  // conjunction
            // collecting vars: SSTNode c
            //    vars: {'_keyword': 'Token', 'c': 'SSTNode'}
            Token _keyword;
            SSTNode c;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'or'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('or')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('or')
                // REMOVE result call (_keyword = expect(KEYWORD_OR)) != null  // token='or'
                (_keyword = expect(KEYWORD_OR)) != null  // token='or'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: conjunction
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(conjunction)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(conjunction) - should work
                // name = conjunction
                // REMOVE result call (conjunction_var = conjunction_rule()) != null  // conjunction
                (c = conjunction_rule()) != null  // conjunction
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_228[" + pos + ", " + mark() +" ](level: " + level + ") 'or' conjunction succeeded!");
                }
                // alt action: c
                Token endToken = getToken(mark());
                // node.action: c
                result = c;
                return (Object)cache.putResult(pos, _TMP_228_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_228_ID, null);
    }

    // _tmp_229: 'and' inversion
    public Object _tmp_229_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_229, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_229_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_229_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: c
        {
            // visiting Alt: 'and' inversion
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('and')
                // generated call: (_keyword = expect(KEYWORD_AND)) != null  // token='and'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(inversion) - should work
            // name = inversion
                // generated call: (inversion_var = inversion_rule()) != null  // inversion
            // collecting vars: SSTNode c
            //    vars: {'_keyword': 'Token', 'c': 'SSTNode'}
            Token _keyword;
            SSTNode c;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'and'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('and')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('and')
                // REMOVE result call (_keyword = expect(KEYWORD_AND)) != null  // token='and'
                (_keyword = expect(KEYWORD_AND)) != null  // token='and'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: inversion
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(inversion)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(inversion) - should work
                // name = inversion
                // REMOVE result call (inversion_var = inversion_rule()) != null  // inversion
                (c = inversion_rule()) != null  // inversion
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_229[" + pos + ", " + mark() +" ](level: " + level + ") 'and' inversion succeeded!");
                }
                // alt action: c
                Token endToken = getToken(mark());
                // node.action: c
                result = c;
                return (Object)cache.putResult(pos, _TMP_229_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_229_ID, null);
    }

    // _tmp_230: expression
    public Object _tmp_230_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_230, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_230_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_230_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode expression_var
            //    vars: {'expression_var': 'SSTNode'}
            SSTNode expression_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (expression_var = expression_rule()) != null  // expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_230[" + pos + ", " + mark() +" ](level: " + level + ") expression succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['expression_var']
                result = expression_var;
                return (Object)cache.putResult(pos, _TMP_230_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_230_ID, null);
    }

    // _tmp_231: star_named_expressions
    public Object _tmp_231_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_231, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_231_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_231_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: star_named_expressions
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
            // name = star_named_expressions
            // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // generated call: (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
            // collecting vars: SSTNode[] star_named_expressions_var
            //    vars: {'star_named_expressions_var': 'SSTNode[]'}
            SSTNode[] star_named_expressions_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_named_expressions
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_named_expressions)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_named_expressions) - should work
                // name = star_named_expressions
                // TODO replacing asdl_expr_seq[] --> SSTNode[]
                // REMOVE result call (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
                (star_named_expressions_var = star_named_expressions_rule()) != null  // star_named_expressions
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_231[" + pos + ", " + mark() +" ](level: " + level + ") star_named_expressions succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['star_named_expressions_var']
                result = star_named_expressions_var;
                return (Object)cache.putResult(pos, _TMP_231_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_231_ID, null);
    }

    // _tmp_232: 'if' disjunction
    public Object _tmp_232_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_232, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_232_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_232_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: z
        {
            // visiting Alt: 'if' disjunction
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
                // generated call: (_keyword = expect(KEYWORD_IF)) != null  // token='if'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
            // name = disjunction
                // generated call: (disjunction_var = disjunction_rule()) != null  // disjunction
            // collecting vars: SSTNode z
            //    vars: {'_keyword': 'Token', 'z': 'SSTNode'}
            Token _keyword;
            SSTNode z;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'if'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('if')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
                // REMOVE result call (_keyword = expect(KEYWORD_IF)) != null  // token='if'
                (_keyword = expect(KEYWORD_IF)) != null  // token='if'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: disjunction
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(disjunction)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
                // name = disjunction
                // REMOVE result call (disjunction_var = disjunction_rule()) != null  // disjunction
                (z = disjunction_rule()) != null  // disjunction
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_232[" + pos + ", " + mark() +" ](level: " + level + ") 'if' disjunction succeeded!");
                }
                // alt action: z
                Token endToken = getToken(mark());
                // node.action: z
                result = z;
                return (Object)cache.putResult(pos, _TMP_232_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_232_ID, null);
    }

    // _tmp_233: 'if' disjunction
    public Object _tmp_233_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_233, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_233_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_233_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: z
        {
            // visiting Alt: 'if' disjunction
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
                // generated call: (_keyword = expect(KEYWORD_IF)) != null  // token='if'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
            // name = disjunction
                // generated call: (disjunction_var = disjunction_rule()) != null  // disjunction
            // collecting vars: SSTNode z
            //    vars: {'_keyword': 'Token', 'z': 'SSTNode'}
            Token _keyword;
            SSTNode z;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'if'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('if')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('if')
                // REMOVE result call (_keyword = expect(KEYWORD_IF)) != null  // token='if'
                (_keyword = expect(KEYWORD_IF)) != null  // token='if'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: disjunction
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(disjunction)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(disjunction) - should work
                // name = disjunction
                // REMOVE result call (disjunction_var = disjunction_rule()) != null  // disjunction
                (z = disjunction_rule()) != null  // disjunction
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_233[" + pos + ", " + mark() +" ](level: " + level + ") 'if' disjunction succeeded!");
                }
                // alt action: z
                Token endToken = getToken(mark());
                // node.action: z
                result = z;
                return (Object)cache.putResult(pos, _TMP_233_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_233_ID, null);
    }

    // _tmp_234: starred_expression | direct_named_expression !'='
    public Object _tmp_234_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_234, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_234_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_234_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: starred_expression
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(starred_expression) - should work
            // name = starred_expression
                // generated call: (starred_expression_var = starred_expression_rule()) != null  // starred_expression
            // collecting vars: SSTNode starred_expression_var
            //    vars: {'starred_expression_var': 'SSTNode'}
            SSTNode starred_expression_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: starred_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(starred_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(starred_expression) - should work
                // name = starred_expression
                // REMOVE result call (starred_expression_var = starred_expression_rule()) != null  // starred_expression
                (starred_expression_var = starred_expression_rule()) != null  // starred_expression
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_234[" + pos + ", " + mark() +" ](level: " + level + ") starred_expression succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['starred_expression_var']
                result = starred_expression_var;
                return (Object)cache.putResult(pos, _TMP_234_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: direct_named_expression !'='
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(direct_named_expression) - should work
            // name = direct_named_expression
                // generated call: (direct_named_expression_var = direct_named_expression_rule()) != null  // direct_named_expression
            // collecting vars: SSTNode direct_named_expression_var
            // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!'=')
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
            // lookahead_call_helper call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            //    call.nodetype: GENERIC_TOKEN
                // generated call: lookahead(false, Token.Kind.EQUAL)  // token='='
            // collecting vars: boolean None
            //    vars: {'direct_named_expression_var': 'SSTNode', None: 'boolean'}
            SSTNode direct_named_expression_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: direct_named_expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(direct_named_expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(direct_named_expression) - should work
                // name = direct_named_expression
                // REMOVE result call (direct_named_expression_var = direct_named_expression_rule()) != null  // direct_named_expression
                (direct_named_expression_var = direct_named_expression_rule()) != null  // direct_named_expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: !'='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(!'=')
                // TODO visiting JavaCallMakerVisitor.visit_NegativeLookahead(!'=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // lookahead_call_helper call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
                //    call.nodetype: GENERIC_TOKEN
                // REMOVE result call lookahead(false, Token.Kind.EQUAL)  // token='='
                lookahead(false, Token.Kind.EQUAL)  // token='='
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_234[" + pos + ", " + mark() +" ](level: " + level + ") direct_named_expression !'=' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['direct_named_expression_var']
                result = direct_named_expression_var;
                return (Object)cache.putResult(pos, _TMP_234_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_234_ID, null);
    }

    // _tmp_235: ',' star_target
    public Object _tmp_235_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_235, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_235_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_235_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: c
        {
            // visiting Alt: ',' star_target
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // name = star_target
                // generated call: (star_target_var = star_target_rule()) != null  // star_target
            // collecting vars: SSTNode c
            //    vars: {'_literal': 'Token', 'c': 'SSTNode'}
            Token _literal;
            SSTNode c;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: star_target
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_target)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
                // name = star_target
                // REMOVE result call (star_target_var = star_target_rule()) != null  // star_target
                (c = star_target_rule()) != null  // star_target
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_235[" + pos + ", " + mark() +" ](level: " + level + ") ',' star_target succeeded!");
                }
                // alt action: c
                Token endToken = getToken(mark());
                // node.action: c
                result = c;
                return (Object)cache.putResult(pos, _TMP_235_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_235_ID, null);
    }

    // _tmp_236: ',' star_target
    public Object _tmp_236_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_236, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_236_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_236_ID);
        }
        Token startToken = getToken(pos);
        // the result should be constructed through action: c
        {
            // visiting Alt: ',' star_target
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // generated call: (_literal = expect(Token.Kind.COMMA)) != null  // token=','
            // collecting vars: Token _literal
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // name = star_target
                // generated call: (star_target_var = star_target_rule()) != null  // star_target
            // collecting vars: SSTNode c
            //    vars: {'_literal': 'Token', 'c': 'SSTNode'}
            Token _literal;
            SSTNode c;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ','
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(',')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(',')
                // REMOVE result call (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                (_literal = expect(Token.Kind.COMMA)) != null  // token=','
                &&
                // TODO visiting JavaParserGeneratorNamedItem: star_target
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_target)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
                // name = star_target
                // REMOVE result call (star_target_var = star_target_rule()) != null  // star_target
                (c = star_target_rule()) != null  // star_target
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_236[" + pos + ", " + mark() +" ](level: " + level + ") ',' star_target succeeded!");
                }
                // alt action: c
                Token endToken = getToken(mark());
                // node.action: c
                result = c;
                return (Object)cache.putResult(pos, _TMP_236_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_236_ID, null);
    }

    // _tmp_237: star_targets '='
    public Object _tmp_237_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_237, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_237_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_237_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: star_targets '='
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
            // name = star_targets
                // generated call: (star_targets_var = star_targets_rule()) != null  // star_targets
            // collecting vars: SSTNode star_targets_var
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // generated call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            // collecting vars: Token _literal
            //    vars: {'star_targets_var': 'SSTNode', '_literal': 'Token'}
            Token _literal;
            SSTNode star_targets_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_targets
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_targets)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
                // name = star_targets
                // REMOVE result call (star_targets_var = star_targets_rule()) != null  // star_targets
                (star_targets_var = star_targets_rule()) != null  // star_targets
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // REMOVE result call (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
                (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_237[" + pos + ", " + mark() +" ](level: " + level + ") star_targets '=' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['star_targets_var', '_literal']
                // TODO handle default action if there is more variables
                return (Object)cache.putResult(pos, _TMP_237_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_237_ID, null);
    }

    // _tmp_238: star_targets '='
    public Object _tmp_238_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_238, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_238_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_238_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: star_targets '='
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
            // name = star_targets
                // generated call: (star_targets_var = star_targets_rule()) != null  // star_targets
            // collecting vars: SSTNode star_targets_var
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // generated call: (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            // collecting vars: Token _literal
            //    vars: {'star_targets_var': 'SSTNode', '_literal': 'Token'}
            Token _literal;
            SSTNode star_targets_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: star_targets
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_targets)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_targets) - should work
                // name = star_targets
                // REMOVE result call (star_targets_var = star_targets_rule()) != null  // star_targets
                (star_targets_var = star_targets_rule()) != null  // star_targets
                &&
                // TODO visiting JavaParserGeneratorNamedItem: '='
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('=')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('=')
                // REMOVE result call (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
                (_literal = expect(Token.Kind.EQUAL)) != null  // token='='
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_238[" + pos + ", " + mark() +" ](level: " + level + ") star_targets '=' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['star_targets_var', '_literal']
                // TODO handle default action if there is more variables
                return (Object)cache.putResult(pos, _TMP_238_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_238_ID, null);
    }

    // _tmp_239: ')' | '**'
    public Object _tmp_239_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_239, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_239_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_239_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ')'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // generated call: (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ')'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(')')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(')')
                // REMOVE result call (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
                (_literal = expect(Token.Kind.RPAR)) != null  // token=')'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_239[" + pos + ", " + mark() +" ](level: " + level + ") ')' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_239_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: '**'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
                // generated call: (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '**'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('**')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
                // REMOVE result call (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
                (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_239[" + pos + ", " + mark() +" ](level: " + level + ") '**' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_239_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_239_ID, null);
    }

    // _tmp_240: ':' | '**'
    public Object _tmp_240_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_240, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_240_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_240_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: ':'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // generated call: (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: ':'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(':')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf(':')
                // REMOVE result call (_literal = expect(Token.Kind.COLON)) != null  // token=':'
                (_literal = expect(Token.Kind.COLON)) != null  // token=':'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_240[" + pos + ", " + mark() +" ](level: " + level + ") ':' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_240_ID, result);
            }
            reset(pos);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: '**'
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
                // generated call: (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            // collecting vars: Token _literal
            //    vars: {'_literal': 'Token'}
            Token _literal;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: '**'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('**')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('**')
                // REMOVE result call (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
                (_literal = expect(Token.Kind.DOUBLESTAR)) != null  // token='**'
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_240[" + pos + ", " + mark() +" ](level: " + level + ") '**' succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_literal']
                result = _literal;
                return (Object)cache.putResult(pos, _TMP_240_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_240_ID, null);
    }

    // _tmp_241: expression ['as' star_target]
    public Object _tmp_241_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_241, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_241_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_241_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: expression ['as' star_target]
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
            // name = expression
                // generated call: (expression_var = expression_rule()) != null  // expression
            // collecting vars: SSTNode expression_var
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' star_target])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' star_target)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_243_var = _tmp_243_rule()) != null  // 'as' star_target
                // generated call: ((_opt_var = _tmp_243_rule()) != null || _opt_var == null)  // ['as' star_target]
            // collecting vars: None _opt_var
            //    vars: {'expression_var': 'SSTNode', '_opt_var': None}
            Object _opt_var;
            SSTNode expression_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: expression
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expression)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expression) - should work
                // name = expression
                // REMOVE result call (expression_var = expression_rule()) != null  // expression
                (expression_var = expression_rule()) != null  // expression
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ['as' star_target]
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(['as' star_target])
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' star_target])
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' star_target)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_243_var = _tmp_243_rule()) != null  // 'as' star_target
                // REMOVE result call ((_opt_var = _tmp_243_rule()) != null || _opt_var == null)  // ['as' star_target]
                ((_opt_var = _tmp_243_rule()) != null || _opt_var == null)  // ['as' star_target]
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_241[" + pos + ", " + mark() +" ](level: " + level + ") expression ['as' star_target] succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['expression_var', '_opt_var']
                // TODO handle default action if there is more variables
                return (Object)cache.putResult(pos, _TMP_241_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_241_ID, null);
    }

    // _tmp_242: expressions ['as' star_target]
    public Object _tmp_242_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_242, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_242_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_242_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: expressions ['as' star_target]
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expressions) - should work
            // name = expressions
                // generated call: (expressions_var = expressions_rule()) != null  // expressions
            // collecting vars: SSTNode expressions_var
            // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' star_target])
            // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' star_target)
                // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_244_var = _tmp_244_rule()) != null  // 'as' star_target
                // generated call: ((_opt_var = _tmp_244_rule()) != null || _opt_var == null)  // ['as' star_target]
            // collecting vars: None _opt_var
            //    vars: {'expressions_var': 'SSTNode', '_opt_var': None}
            Object _opt_var;
            SSTNode expressions_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: expressions
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(expressions)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(expressions) - should work
                // name = expressions
                // REMOVE result call (expressions_var = expressions_rule()) != null  // expressions
                (expressions_var = expressions_rule()) != null  // expressions
                &&
                // TODO visiting JavaParserGeneratorNamedItem: ['as' star_target]
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(['as' star_target])
                // REMOVE visiting JavaCallMakerVisitor.visit_Opt(['as' star_target])
                // REMOVE visiting JavaCallMakerVisitor.visit_Rhs('as' star_target)
                    // JavaCallMakerVisitor.visit_Opt.generated call: (_tmp_244_var = _tmp_244_rule()) != null  // 'as' star_target
                // REMOVE result call ((_opt_var = _tmp_244_rule()) != null || _opt_var == null)  // ['as' star_target]
                ((_opt_var = _tmp_244_rule()) != null || _opt_var == null)  // ['as' star_target]
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_242[" + pos + ", " + mark() +" ](level: " + level + ") expressions ['as' star_target] succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['expressions_var', '_opt_var']
                // TODO handle default action if there is more variables
                return (Object)cache.putResult(pos, _TMP_242_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_242_ID, null);
    }

    // _tmp_243: 'as' star_target
    public Object _tmp_243_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_243, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_243_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_243_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: 'as' star_target
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
                // generated call: (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // name = star_target
                // generated call: (star_target_var = star_target_rule()) != null  // star_target
            // collecting vars: SSTNode star_target_var
            //    vars: {'_keyword': 'Token', 'star_target_var': 'SSTNode'}
            Token _keyword;
            SSTNode star_target_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'as'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('as')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
                // REMOVE result call (_keyword = expect(KEYWORD_AS)) != null  // token='as'
                (_keyword = expect(KEYWORD_AS)) != null  // token='as'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: star_target
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_target)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
                // name = star_target
                // REMOVE result call (star_target_var = star_target_rule()) != null  // star_target
                (star_target_var = star_target_rule()) != null  // star_target
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_243[" + pos + ", " + mark() +" ](level: " + level + ") 'as' star_target succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_keyword', 'star_target_var']
                // TODO handle default action if there is more variables
                return (Object)cache.putResult(pos, _TMP_243_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_243_ID, null);
    }

    // _tmp_244: 'as' star_target
    public Object _tmp_244_rule() {
    // isLoop: False, isGather: False, type: None)
        // default rule body
        int pos = mark();
        Object result = null;
        if (DEBUG) {
            debugMessageln("Rule: _tmp_244, pos: " + pos+ ", level: " + level);
            this.level++;
        }
        if (cache.hasResult(pos, _TMP_244_ID)) {
            if (DEBUG) {
                this.level--;
                debugMessageln("Taken from cache, level: " + level);
            }
            return (Object)cache.getResult(pos, _TMP_244_ID);
        }
        // the result should be constructed through action: None
        {
            // visiting Alt: 'as' star_target
            // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
                // generated call: (_keyword = expect(KEYWORD_AS)) != null  // token='as'
            // collecting vars: Token _keyword
            // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
            // name = star_target
                // generated call: (star_target_var = star_target_rule()) != null  // star_target
            // collecting vars: SSTNode star_target_var
            //    vars: {'_keyword': 'Token', 'star_target_var': 'SSTNode'}
            Token _keyword;
            SSTNode star_target_var;
            if (
                // TODO visiting JavaParserGeneratorNamedItem: 'as'
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem('as')
                // REMOVE visiting JavaCallMakerVisitor.visit_StringLeaf('as')
                // REMOVE result call (_keyword = expect(KEYWORD_AS)) != null  // token='as'
                (_keyword = expect(KEYWORD_AS)) != null  // token='as'
                &&
                // TODO visiting JavaParserGeneratorNamedItem: star_target
                // REMOVE visiting JavaCallMakerVisitor.visit_NamedItem(star_target)
                // REMOVE visiting JavaCallMakerVisitor.visit_NameLeaf(star_target) - should work
                // name = star_target
                // REMOVE result call (star_target_var = star_target_rule()) != null  // star_target
                (star_target_var = star_target_rule()) != null  // star_target
            ) {
                if (DEBUG) {
                    this.level--;
                    debugMessageln("_tmp_244[" + pos + ", " + mark() +" ](level: " + level + ") 'as' star_target succeeded!");
                }
                // alt action: None
                // self.local_variable_names: ['_keyword', 'star_target_var']
                // TODO handle default action if there is more variables
                return (Object)cache.putResult(pos, _TMP_244_ID, result);
            }
            reset(pos);
        }
        if (DEBUG) {
            this.level--;
            debugMessageln("Result: null, level: " + level);
        }
        return (Object)cache.putResult(pos, _TMP_244_ID, null);
    }

    // lookahead methods generated
    private boolean lookahed_tmp_62_rule(boolean match){
        int tmpPos = mark();
        // TODO the return type of this call in not set -> Object is used
        Object result = _tmp_62_rule();
        reset(tmpPos);
        return (result != null) == match;
    }

    private boolean lookahed_tmp_63_rule(boolean match){
        int tmpPos = mark();
        // TODO the return type of this call in not set -> Object is used
        Object result = _tmp_63_rule();
        reset(tmpPos);
        return (result != null) == match;
    }

    private boolean lookahed_tmp_64_rule(boolean match){
        int tmpPos = mark();
        // TODO the return type of this call in not set -> Object is used
        Object result = _tmp_64_rule();
        reset(tmpPos);
        return (result != null) == match;
    }

    private boolean lookahedt_lookahead_rule(boolean match){
        int tmpPos = mark();
        // TODO the return type of this call in not set -> Object is used
        Object result = t_lookahead_rule();
        reset(tmpPos);
        return (result != null) == match;
    }

    private boolean lookahed_tmp_193_rule(boolean match){
        int tmpPos = mark();
        // TODO the return type of this call in not set -> Object is used
        Object result = _tmp_193_rule();
        reset(tmpPos);
        return (result != null) == match;
    }

    private boolean lookahed_tmp_194_rule(boolean match){
        int tmpPos = mark();
        // TODO the return type of this call in not set -> Object is used
        Object result = _tmp_194_rule();
        reset(tmpPos);
        return (result != null) == match;
    }

    private boolean lookahed_tmp_195_rule(boolean match){
        int tmpPos = mark();
        // TODO the return type of this call in not set -> Object is used
        Object result = _tmp_195_rule();
        reset(tmpPos);
        return (result != null) == match;
    }

    private boolean lookahed_tmp_196_rule(boolean match){
        int tmpPos = mark();
        // TODO the return type of this call in not set -> Object is used
        Object result = _tmp_196_rule();
        reset(tmpPos);
        return (result != null) == match;
    }

    private boolean lookahed_tmp_220_rule(boolean match){
        int tmpPos = mark();
        // TODO the return type of this call in not set -> Object is used
        Object result = _tmp_220_rule();
        reset(tmpPos);
        return (result != null) == match;
    }

    
    // lookahead methods written in generator
    private boolean lookahead(boolean match, Token.Kind kind) {
        int pos = mark();
        Token token = expect(kind);
        reset(pos);
        return (token != null) == match;
    }
    
    private boolean lookahead(boolean match, String text) {
        int pos = mark();
        Token token = expect(text);
        reset(pos);
        return (token != null) == match;
    }
    
    private boolean lookaheadSoftKeyword(boolean match) {
        int pos = mark();
        Token token = softKeywordToken();
        reset(pos);
        return (token != null) == match;
    }
    
    private Token softKeywordToken() {
        Token t = expect(Token.Kind.NAME);
        if (t != null) {
            String text = getText(t);
            if (softKeywords.contains(text)) {
                return t;
            }
        }
        return null;
    }
    
    
    private void indent(StringBuffer sb) {
        for (int i = 0; i < level; i++) {
            sb.append("  ");
        }
    }
    
    void debugMessage(String text) {
        debugMessage(text, true);
    }
    
    void debugMessage(String text, boolean indent) {
        StringBuffer sb = new StringBuffer();
        if(indent) {
            indent(sb);
        }
        sb.append(text);
        System.out.print(sb.toString());
    }

    void debugMessageln(String text) {
        debugMessageln(text, true);
    }
    
    void debugMessageln(String text, boolean indent) {
        StringBuffer sb = new StringBuffer();
        if (indent) {
            indent(sb);
        }
        sb.append(text);
        System.out.println(sb.toString());
    }
}
