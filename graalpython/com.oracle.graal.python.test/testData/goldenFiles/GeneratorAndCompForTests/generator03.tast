ModuleRootNode Name: <module 'generator03'> SourceSection: [0,47]`def fn():↵  c = 10↵ ...`
  Signature: varArgs=False, varKeywordArgs=False, noArguments=True, positionalOnly=True, requiresKeywordArgs=False
  FreeVars: None
  NeedsCellFrame: False
  FrameDescriptor:  Empty
  Documentation: None
  InnerRootNode SourceSection: [0,47]`def fn():↵  c = 10↵ ...`
    ExpressionWithSideEffect SourceSection: [0,47]`def fn():↵  c = 10↵ ...`
      Expression:
        EmptyNode SourceSection: None
      SideEffect:
        WriteNameNodeGen SourceSection: [0,47]`def fn():↵  c = 10↵ ...`
          Identifier: fn
          FunctionDefinitionNode Name: fn SourceSection: None
            Arguments: None
            KwArguments: None
            Documentation: None
            FreeVarSlots: None
            ExecutionSlots:
              FreeVarsSlots: None
              CellVarsSlots: c, 
            FunctionRootNode SourceSection: [0,47]`def fn():↵  c = 10↵ ...`
              Name: fn
              Signature: varArgs=False, varKeywordArgs=False, noArguments=True, positionalOnly=True, requiresKeywordArgs=False
              CelVars: c
              FreeVars: None
              NeedsCellFrame: False
              FrameDescriptor: 2 slots [c, <return_val>]
              ExecutionSlots:
                FreeVarsSlots: None
                CellVarsSlots: c, 
              InnerRootNode SourceSection: [0,47]`def fn():↵  c = 10↵ ...`
                ReturnTargetNode SourceSection: [0,47]`def fn():↵  c = 10↵ ...`
                  Body: BlockNode SourceSection: None
                    BlockNode SourceSection: None
                    FunctionBodyNode SourceSection: [12,46]`c = 10↵  (x + c for ...`
                      WriteLocalCellNodeGen SourceSection: [12,18]`c = 10`
                        Identifier: c
                        ReadLocalVariableNodeGen SourceSection: None
                          Frame: [0,c,Illegal]
                        IntegerLiteralNode SourceSection: [16,18]`10`
                          Value: 10
                      ExpressionStatementNode SourceSection: [22,46]`x + c for x in range...`
                        GeneratorExpressionNode SourceSection: [22,46]`x + c for x in range...`
                          Name: <genexpr>
                          FrameDescriptor: 3 slots [x, c, <return_val>]
                          Enclosing
                            FrameDescriptor: 2 slots [c, <return_val>]
                          Active Flags: 2
                          For Nodes: 1
                          Block Nodes: 0
                          Is Enclosing Frame Generator: false
                          FunctionRootNode SourceSection: [22,46]`x + c for x in range...`
                            Name: <genexpr>
                            Signature: varArgs=False, varKeywordArgs=False, noArguments=True, positionalOnly=True, requiresKeywordArgs=False
                            CelVars: None
                            FreeVars: c
                            NeedsCellFrame: False
                            FrameDescriptor: 3 slots [x, c, <return_val>]
                            ExecutionSlots:
                              FreeVarsSlots: c, 
                              CellVarsSlots: None
                            InnerRootNode SourceSection: [22,46]`x + c for x in range...`
                              GeneratorReturnTargetNode SourceSection: [22,46]`x + c for x in range...`
                                flagSlot: 1
                                GeneratorForNode SourceSection: [22,46]`x + c for x in range...`
                                  ExpressionStatementNode SourceSection: [22,27]`x + c`
                                    YieldNode SourceSection: [22,27]`x + c`
                                      flagSlot: 0
                                      BinaryArithmeticExpression SourceSection: [22,27]`x + c`
                                        LookupAndCallBinaryNodeGen SourceSection: None
                                          Op: __add__
                                        ReadGeneratorFrameVariableNodeGen SourceSection: [22,23]`x`
                                          Frame: [0,x,Illegal]
                                        ReadLocalCellNodeGen SourceSection: [26,27]`c`
                                          ReadGeneratorFrameVariableNodeGen SourceSection: None
                                            Frame: [1,c,Illegal]
                                          ReadFromCellNodeGen SourceSection: None
                                      GeneratorAccessNode SourceSection: None
                                  WriteGeneratorFrameVariableNodeGen SourceSection: None
                                    Identifier: x
                                    Frame: [0,x,Illegal]
                                  ArgumentExpressionNode SourceSection: None
                                    ReadIndexedArgumentNodeGen SourceSection: None
                                      Index: 0
                                  GetNextNode SourceSection: None
                                  GeneratorAccessNode SourceSection: None
                                  IsBuiltinClassProfile SourceSection: None
                                    CachedDispatchFirst SourceSection: None
                                ReadGeneratorFrameVariableNodeGen SourceSection: None
                                  Frame: [2,<return_val>,Illegal]
                                BlockNode SourceSection: None
                                GeneratorAccessNode SourceSection: None
                                PRaiseNodeGen SourceSection: None
                          GetIteratorExpressionNodeGen SourceSection: [37,46]`range(10)`
                            PythonCallUnary SourceSection: [37,46]`range(10)`
                              CallUnaryMethodNodeGen SourceSection: None
                              ReadGlobalOrBuiltinNodeGen SourceSection: [37,42]`range`
                                Identifier: range
                                ReadAttributeFromObjectNotTypeNodeGen SourceSection: None
                              IntegerLiteralNode SourceSection: [43,45]`10`
                                Value: 10
                          PythonObjectFactoryNodeGen SourceSection: None
                  Return Expresssion: ReadLocalVariableNodeGen SourceSection: None
                    Frame: [1,<return_val>,Illegal]
