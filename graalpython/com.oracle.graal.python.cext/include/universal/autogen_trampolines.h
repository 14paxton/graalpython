/* MIT License
 *  
 * Copyright (c) 2020, Oracle and/or its affiliates. 
 * Copyright (c) 2019 pyhandle
 *  
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *  
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *  
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


/*
   DO NOT EDIT THIS FILE!

   This file is automatically generated by tools/autogen.py from tools/public_api.h.
   Run this to regenerate:
       make autogen

*/

#define UNWRAP(_h) ((_h)._i)
#define WRAP(_ptr) ((HPy){(_ptr)})

static inline HPy HPyModule_Create(HPyContext ctx, HPyModuleDef *def) {
     return WRAP(ctx->ctx_Module_Create ( ctx, def ));
}

static inline HPy HPy_Dup(HPyContext ctx, HPy h) {
     return WRAP(ctx->ctx_Dup ( ctx, UNWRAP(h) ));
}

static inline void HPy_Close(HPyContext ctx, HPy h) {
     ctx->ctx_Close ( ctx, UNWRAP(h) );
}

static inline HPy HPyLong_FromLong(HPyContext ctx, long value) {
     return WRAP(ctx->ctx_Long_FromLong ( ctx, value ));
}

static inline HPy HPyLong_FromLongLong(HPyContext ctx, long long v) {
     return WRAP(ctx->ctx_Long_FromLongLong ( ctx, v ));
}

static inline HPy HPyLong_FromUnsignedLongLong(HPyContext ctx, unsigned long long v) {
     return WRAP(ctx->ctx_Long_FromUnsignedLongLong ( ctx, v ));
}

static inline long HPyLong_AsLong(HPyContext ctx, HPy h) {
     return ctx->ctx_Long_AsLong ( ctx, UNWRAP(h) );
}

static inline HPy HPyFloat_FromDouble(HPyContext ctx, double v) {
     return WRAP(ctx->ctx_Float_FromDouble ( ctx, v ));
}

static inline HPy HPyNumber_Add(HPyContext ctx, HPy h1, HPy h2) {
     return WRAP(ctx->ctx_Number_Add ( ctx, UNWRAP(h1), UNWRAP(h2) ));
}

static inline void HPyErr_SetString(HPyContext ctx, HPy h_type, const char *message) {
     ctx->ctx_Err_SetString ( ctx, UNWRAP(h_type), message );
}

static inline int HPyErr_Occurred(HPyContext ctx) {
     return ctx->ctx_Err_Occurred ( ctx );
}

static inline int HPyObject_IsTrue(HPyContext ctx, HPy h) {
     return ctx->ctx_Object_IsTrue ( ctx, UNWRAP(h) );
}

static inline HPy HPy_GetAttr(HPyContext ctx, HPy obj, HPy name) {
     return WRAP(ctx->ctx_GetAttr ( ctx, UNWRAP(obj), UNWRAP(name) ));
}

static inline HPy HPy_GetAttr_s(HPyContext ctx, HPy obj, const char *name) {
     return WRAP(ctx->ctx_GetAttr_s ( ctx, UNWRAP(obj), name ));
}

static inline int HPy_HasAttr(HPyContext ctx, HPy obj, HPy name) {
     return ctx->ctx_HasAttr ( ctx, UNWRAP(obj), UNWRAP(name) );
}

static inline int HPy_HasAttr_s(HPyContext ctx, HPy obj, const char *name) {
     return ctx->ctx_HasAttr_s ( ctx, UNWRAP(obj), name );
}

static inline int HPy_SetAttr(HPyContext ctx, HPy obj, HPy name, HPy value) {
     return ctx->ctx_SetAttr ( ctx, UNWRAP(obj), UNWRAP(name), UNWRAP(value));
}

static inline int HPy_SetAttr_s(HPyContext ctx, HPy obj, const char *name, HPy value) {
     return ctx->ctx_SetAttr_s ( ctx, UNWRAP(obj), name, UNWRAP(value));
}

static inline HPy HPy_GetItem(HPyContext ctx, HPy obj, HPy key) {
     return WRAP(ctx->ctx_GetItem ( ctx, UNWRAP(obj), UNWRAP(key)));
}

static inline HPy HPy_GetItem_i(HPyContext ctx, HPy obj, HPy_ssize_t idx) {
     return WRAP(ctx->ctx_GetItem_i ( ctx, UNWRAP(obj), idx ));
}

static inline HPy HPy_GetItem_s(HPyContext ctx, HPy obj, const char *key) {
     return WRAP(ctx->ctx_GetItem_s ( ctx, UNWRAP(obj), key ));
}

static inline int HPy_SetItem(HPyContext ctx, HPy obj, HPy key, HPy value) {
     return ctx->ctx_SetItem ( ctx, UNWRAP(obj), UNWRAP(key), UNWRAP(value));
}

static inline int HPy_SetItem_i(HPyContext ctx, HPy obj, HPy_ssize_t idx, HPy value) {
     return ctx->ctx_SetItem_i ( ctx, UNWRAP(obj), idx, UNWRAP(value));
}

static inline int HPy_SetItem_s(HPyContext ctx, HPy obj, const char *key, HPy value) {
     return ctx->ctx_SetItem_s ( ctx, UNWRAP(obj), key, UNWRAP(value));
}

static inline int HPyBytes_Check(HPyContext ctx, HPy h) {
     return ctx->ctx_Bytes_Check ( ctx, UNWRAP(h) );
}

static inline HPy_ssize_t HPyBytes_Size(HPyContext ctx, HPy h) {
     return ctx->ctx_Bytes_Size ( ctx, UNWRAP(h) );
}

static inline HPy_ssize_t HPyBytes_GET_SIZE(HPyContext ctx, HPy h) {
     return ctx->ctx_Bytes_GET_SIZE ( ctx, UNWRAP(h) );
}

static inline char *HPyBytes_AsString(HPyContext ctx, HPy h) {
     return ctx->ctx_Bytes_AsString ( ctx, UNWRAP(h) );
}

static inline char *HPyBytes_AS_STRING(HPyContext ctx, HPy h) {
     return ctx->ctx_Bytes_AS_STRING ( ctx, UNWRAP(h) );
}

static inline HPy HPyUnicode_FromString(HPyContext ctx, const char *utf8) {
     return WRAP(ctx->ctx_Unicode_FromString ( ctx, utf8 ));
}

static inline int HPyUnicode_Check(HPyContext ctx, HPy h) {
     return ctx->ctx_Unicode_Check ( ctx, UNWRAP(h) );
}

static inline HPy HPyUnicode_AsUTF8String(HPyContext ctx, HPy h) {
     return WRAP(ctx->ctx_Unicode_AsUTF8String ( ctx, UNWRAP(h) ));
}

static inline HPy HPyUnicode_FromWideChar(HPyContext ctx, const wchar_t *w, HPy_ssize_t size) {
     return WRAP(ctx->ctx_Unicode_FromWideChar ( ctx, w, size ));
}

static inline HPy HPyList_New(HPyContext ctx, HPy_ssize_t len) {
     return WRAP(ctx->ctx_List_New ( ctx, len ));
}

static inline int HPyList_Append(HPyContext ctx, HPy h_list, HPy h_item) {
     return ctx->ctx_List_Append ( ctx, UNWRAP(h_list), UNWRAP(h_item) );
}

static inline HPy HPyDict_New(HPyContext ctx) {
     return WRAP(ctx->ctx_Dict_New ( ctx ));
}

static inline int HPyDict_SetItem(HPyContext ctx, HPy h_dict, HPy h_key, HPy h_val) {
     return ctx->ctx_Dict_SetItem ( ctx, UNWRAP(h_dict), UNWRAP(h_key), UNWRAP(h_val) );
}

static inline HPy HPyDict_GetItem(HPyContext ctx, HPy h_dict, HPy h_key) {
     return WRAP(ctx->ctx_Dict_GetItem ( ctx, UNWRAP(h_dict), UNWRAP(h_key) ));
}

static inline HPy HPy_FromPyObject(HPyContext ctx, struct _object *obj) {
     return WRAP(ctx->ctx_FromPyObject ( ctx, obj ));
}

static inline struct _object *HPy_AsPyObject(HPyContext ctx, HPy h) {
     return ctx->ctx_AsPyObject ( ctx, UNWRAP(h) );
}

static inline struct _object *_HPy_CallRealFunctionFromTrampoline(HPyContext ctx, struct _object *self, struct _object *args, struct _object *kw, void *func, int ml_flags) {
     return ctx->ctx_CallRealFunctionFromTrampoline ( ctx, self, args, kw, func, ml_flags );
}

