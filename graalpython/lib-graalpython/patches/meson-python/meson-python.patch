diff --git a/mesonpy/_tags.py b/mesonpy/_tags.py
index 7e44eb4..6245cb4 100644
--- a/mesonpy/_tags.py
+++ b/mesonpy/_tags.py
@@ -53,40 +53,7 @@ def _get_cpython_abi() -> str:
 
 
 def get_abi_tag() -> str:
-    # The best solution to obtain the Python ABI is to parse the
-    # $SOABI or $EXT_SUFFIX sysconfig variables as defined in PEP-314.
-
-    # PyPy reports a $SOABI that does not agree with $EXT_SUFFIX.
-    # Using $EXT_SUFFIX will not break when PyPy will fix this.
-    # See https://foss.heptapod.net/pypy/pypy/-/issues/3816 and
-    # https://github.com/pypa/packaging/pull/607.
-    try:
-        empty, abi, ext = str(sysconfig.get_config_var('EXT_SUFFIX')).split('.')
-    except ValueError as exc:
-        # CPython <= 3.8.7 on Windows does not implement PEP3149 and
-        # uses '.pyd' as $EXT_SUFFIX, which does not allow to extract
-        # the interpreter ABI.  Check that the fallback is not hit for
-        # any other Python implementation.
-        if sys.implementation.name != 'cpython':
-            raise NotImplementedError from exc
-        return _get_cpython_abi()
-
-    # The packaging module initially based his understanding of the
-    # $SOABI variable on the inconsistent value reported by PyPy, and
-    # did not strip architecture information from it.  Therefore the
-    # ABI tag for later Python implementations (all the ones not
-    # explicitly handled below) contains architecture information too.
-    # Unfortunately, fixing this now would break compatibility.
-
-    if abi.startswith('cpython'):
-        abi = 'cp' + abi.split('-')[1]
-    elif abi.startswith('cp'):
-        abi = abi.split('-')[0]
-    elif abi.startswith('pypy'):
-        abi = '_'.join(abi.split('-')[:2])
-    elif abi.startswith('graalpy'):
-        abi = '_'.join(abi.split('-')[:3])
-
+    abi = sysconfig.get_config_var("SOABI")
     return abi.replace('.', '_').replace('-', '_')
 
 
