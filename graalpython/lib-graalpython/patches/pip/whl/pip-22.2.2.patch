diff --git a/pip/_internal/cli/cmdoptions.py b/pip/_internal/cli/cmdoptions.py
index 47ed92779..1d182ded3 100644
--- a/pip/_internal/cli/cmdoptions.py
+++ b/pip/_internal/cli/cmdoptions.py
@@ -891,7 +891,7 @@ disable_pip_version_check: Callable[..., Option] = partial(
     "--disable-pip-version-check",
     dest="disable_pip_version_check",
     action="store_true",
-    default=False,
+    default=True, # GraalPy: we do not want to incentivize the upgrade
     help="Don't periodically check PyPI to determine whether a new version "
     "of pip is available for download. Implied with --no-index.",
 )
diff --git a/pip/_internal/index/package_finder.py b/pip/_internal/index/package_finder.py
index 9bf247f02..816734859 100644
--- a/pip/_internal/index/package_finder.py
+++ b/pip/_internal/index/package_finder.py
@@ -38,6 +38,7 @@ from pip._internal.utils.logging import indent_log
 from pip._internal.utils.misc import build_netloc
 from pip._internal.utils.packaging import check_requires_python
 from pip._internal.utils.unpacking import SUPPORTED_EXTENSIONS
+from pip._internal.utils.graalpy import apply_graalpy_sort_order
 
 __all__ = ["FormatControl", "BestCandidateResult", "PackageFinder"]
 
@@ -487,6 +488,7 @@ class CandidateEvaluator:
 
         return sorted(filtered_applicable_candidates, key=self._sort_key)
 
+    @apply_graalpy_sort_order
     def _sort_key(self, candidate: InstallationCandidate) -> CandidateSortingKey:
         """
         Function to pass as the `key` argument to a call to sorted() to sort
diff --git a/pip/_internal/operations/install/wheel.py b/pip/_internal/operations/install/wheel.py
index 1af8978d4..15fee7f35 100644
--- a/pip/_internal/operations/install/wheel.py
+++ b/pip/_internal/operations/install/wheel.py
@@ -587,6 +587,9 @@ def _install_wheel(
         file.save()
         record_installed(file.src_record_path, file.dest_path, file.changed)
 
+    from pip._internal.utils.graalpy import apply_graalpy_patches
+    apply_graalpy_patches(wheel_path, lib_dir)
+
     def pyc_source_file_paths() -> Generator[str, None, None]:
         # We de-duplicate installation paths, since there can be overlap (e.g.
         # file in .data maps to same location as file in wheel root).
diff --git a/pip/_internal/utils/graalpy.py b/pip/_internal/utils/graalpy.py
new file mode 100644
index 000000000..d8d97eb4b
--- /dev/null
+++ b/pip/_internal/utils/graalpy.py
@@ -0,0 +1,145 @@
+# ATTENTION: GraalPy uses existence of this module to verify that it is
+# running a patched pip in pip_hook.py
+import os
+from pip._internal.cli.base_command import Command
+from pip._vendor.packaging.requirements import Requirement
+
+NAME_VER_PATTERN = "(.+)-(\\d+)(.\\d+)?(.\\d+)?"
+PATCHES_BASE_DIRS = [os.path.join(__graalpython__.core_home, "patches")]
+if hasattr(__graalpython__, "tdebug"):
+    PATCHES_BASE_DIRS += os.environ.get('PIPLOADER_PATCHES_BASE_DIRS', "").split(",")
+
+BUNDLED_WHEELS_PATH = None
+
+def is_bundled_wheel(location, package_name):
+    return os.path.exists(os.path.join(location, package_name, '.graalpy_bundled'))
+
+
+def apply_graalpy_patches(filename, location):
+    """
+    Applies any GraalPy patches to package extracted from 'filename' into 'location'.
+    Note that 'location' must be the parent directory of the package directory itself.
+    For example: /path/to/site-package and not /path/to/site-packages/mypackage.
+    """
+    import re
+    import subprocess
+
+    # we expect filename to be something like "pytest-5.4.2-py3-none-any.whl"
+    # some packages may have only major.minor or just major version
+    archive_name = os.path.basename(filename)
+    name_ver_match = re.search("^{0}.*\\.(tar\\.gz|tar|whl|zip)$".format(NAME_VER_PATTERN), archive_name)
+    if not name_ver_match:
+        print("GraalPy warning: could not parse package name, version, or format from '{}'.\n"
+              "Could not determine if any GraalPy specific patches need to be applied.".format(archive_name))
+        return
+
+    suffix = name_ver_match.group(5)
+    package_name = name_ver_match.group(1)
+
+    # Avoid applying patches to bundled wheels, they are already patched
+    if suffix == "whl" and is_bundled_wheel(location, package_name):
+        return
+
+    is_sdist = suffix in ("tar.gz", "zip")
+
+    # NOTE: Following 3 functions are duplicated in ginstall.py:
+    # creates a search list of a versioned file:
+    # {name}-X.Y.Z.{suffix}, {name}-X.Y.{suffix}, {name}-X.{suffix}, {name}.{suffix}
+    # 'versions' is a result of re.search
+    def list_versioned(pkg_name, versions, dir, suffix):
+        acc = ""
+        res = []
+        for i in range(2, 5):
+            v = versions.group(i)
+            if v is not None:
+                acc = acc + v
+                res.append(acc)
+        res.reverse()
+        res = [os.path.join(dir, pkg_name + "-" + ver + suffix) for ver in res]
+        res.append(os.path.join(dir, pkg_name + suffix))
+        return res
+
+    def first_existing(pkg_name, versions, dir, suffix):
+        for filename in list_versioned(pkg_name, versions, dir, suffix):
+            if os.path.exists(filename):
+                return filename
+
+    def read_first_existing(pkg_name, versions, dir, suffix):
+        filename = first_existing(pkg_name, versions, dir, suffix)
+        if filename:
+            with open(filename, "r") as f:
+                return f.read()
+
+    # end of code duplicated in ginstall.py
+
+    def apply_first_existing(dir, suffix, wd=''):
+        filename = first_existing(package_name, name_ver_match, dir, suffix)
+        if filename:
+            print("Patching package " + package_name + " using " + filename)
+            try:
+                subprocess.run(["patch", "-f", "-d", os.path.join(location, wd), "-p1", "-i", filename], check=True)
+            except FileNotFoundError:
+                print(
+                    "WARNING: GraalPy needs the 'patch' utility to apply compatibility patches. Please install it using your system's package manager.")
+            except subprocess.CalledProcessError:
+                print("Applying GraalPy patch failed for %s. The package may still work." % package_name)
+        elif os.path.isdir(dir):
+            patchfiles = [f for f in os.listdir(dir) if re.match("{0}{1}$".format(NAME_VER_PATTERN, suffix), f)]
+            if patchfiles:
+                print("We have patches to make this package work on GraalVM for some version(s).")
+                print(
+                    "If installing or running fails, consider using one of the versions that we have patches for:\n\t",
+                    "\n\t".join(patchfiles), sep="")
+
+    print("Looking for GraalPy patches for " + package_name)
+
+    for pbd in PATCHES_BASE_DIRS:
+        # patches intended for binary distribution:
+        # we may need to change wd if we are actually patching a source distribution
+        # with a patch intended for a binary distribution, because in the source
+        # distribution the actual deployed sources may be in a subdirectory (typically "src")
+        bdist_dir = os.path.join(pbd, package_name, "whl")
+        bdist_patch_wd = read_first_existing(package_name, name_ver_match, bdist_dir, ".dir") if is_sdist else ''
+        apply_first_existing(bdist_dir, ".patch", bdist_patch_wd)
+
+        # patches intended for source distribution if applicable
+        if is_sdist:
+            sdist_dir = os.path.join(pbd, package_name, "sdist")
+            apply_first_existing(sdist_dir, ".patch")
+
+
+AVAILABLE_PATCHES = {}
+
+
+def apply_graalpy_sort_order(sort_key_func):
+    def wrapper(self, candidate):
+        default_sort_key = sort_key_func(self, candidate)
+        name = candidate.name
+        if name not in AVAILABLE_PATCHES:
+            AVAILABLE_PATCHES[name] = find_patched_version(name)
+        patched_version_candidates = AVAILABLE_PATCHES[name]
+        for patched_version in patched_version_candidates:
+            if candidate.version.release[:len(patched_version)] == patched_version:
+                return (1,) + default_sort_key
+        return (0,) + default_sort_key
+    return wrapper
+
+
+def find_patched_version(name):
+    # we may find a patch directory, and then we should prefer a
+    # version with a patch from that directory
+    import re
+    patchfiles = []
+    for pbd in PATCHES_BASE_DIRS:
+        for sfx in ["whl", "sdist"]:
+            dir = os.path.join(pbd, name, sfx)
+            if os.path.isdir(dir):
+                for f in os.listdir(dir):
+                    if f == f"{name}.patch":
+                        # generic patch available, don't care about
+                        # the version
+                        return []
+                    if m := re.match(f"{NAME_VER_PATTERN}\\.patch", f):
+                        version = (int(g.strip(".")) for g in m.group(2, 3, 4) if g)
+                        patchfiles.append(tuple(version))
+    return patchfiles
diff --git a/pip/_internal/utils/unpacking.py b/pip/_internal/utils/unpacking.py
index 78b5c13ce..18a184c4f 100644
--- a/pip/_internal/utils/unpacking.py
+++ b/pip/_internal/utils/unpacking.py
@@ -255,3 +255,5 @@ def unpack_file(
             content_type,
         )
         raise InstallationError(f"Cannot determine archive format of {location}")
+    from pip._internal.utils.graalpy import apply_graalpy_patches
+    apply_graalpy_patches(filename, location)
