diff --git a/bazel/ray.bzl b/bazel/ray.bzl
index 4cd1aa2..95250a4 100644
--- a/bazel/ray.bzl
+++ b/bazel/ray.bzl
@@ -30,6 +30,9 @@ PYX_COPTS = select({
     "//conditions:default": [
         # Ignore this warning since CPython and Cython have issue removing deprecated tp_print on MacOS
         "-Wno-deprecated-declarations",
+        "-Wno-unused-variable",
+        "-Wno-unused-function",
+        "-Wno-sign-compare",
     ],
 }) + select({
     "@bazel_tools//src/conditions:windows": [
diff --git a/bazel/ray_deps_setup.bzl b/bazel/ray_deps_setup.bzl
index f91eb30..b0d11ea 100644
--- a/bazel/ray_deps_setup.bzl
+++ b/bazel/ray_deps_setup.bzl
@@ -188,6 +188,10 @@ def ray_deps_setup():
         build_file = True,
         url = "https://github.com/cython/cython/archive/c48361d0a0969206e227ec016f654c9d941c2b69.tar.gz",
         sha256 = "37c466fea398da9785bc37fe16f1455d2645d21a72e402103991d9e2fa1c6ff3",
+        patch_cmds = [
+            'graalpy -m autopatch_capi .',
+            '''patch -p1 < "$(graalpy -c 'print(__graalpython__.core_home)')/patches/Cython/Cython-0.29.32.patch"''',
+        ],
     )
 
     auto_http_archive(
diff --git a/dashboard/optional_deps.py b/dashboard/optional_deps.py
index 1dfaaca..6eeb618 100644
--- a/dashboard/optional_deps.py
+++ b/dashboard/optional_deps.py
@@ -15,7 +15,7 @@ import aiohttp_cors  # noqa: F401
 from aiohttp import hdrs  # noqa: F401
 from aiohttp.typedefs import PathLike  # noqa: F401
 from aiohttp.web import RouteDef  # noqa: F401
-import pydantic  # noqa: F401
+# import pydantic  # noqa: F401
 import grpc  # noqa: F401
 
 # Adding new modules should also be reflected in the
diff --git a/pyproject.toml b/pyproject.toml
new file mode 100644
index 0000000..d69f0ac
--- /dev/null
+++ b/pyproject.toml
@@ -0,0 +1,4 @@
+[build-system]
+requires = ["setuptools >= 40.6.0", "wheel", "pip", "psutil", "setproctitle==1.2.2", "colorama", "aiohttp"]
+build-backend = "ray_build_backend"
+backend-path = ["."]
diff --git a/python/ray/_private/services.py b/python/ray/_private/services.py
index 867b748..40b3fb2 100644
--- a/python/ray/_private/services.py
+++ b/python/ray/_private/services.py
@@ -1000,7 +1000,7 @@ def start_ray_process(
         stdout=stdout_file,
         stderr=stderr_file,
         stdin=subprocess.PIPE if pipe_stdin else None,
-        preexec_fn=preexec_fn if sys.platform != "win32" else None,
+        #preexec_fn=preexec_fn if sys.platform != "win32" else None,
         creationflags=CREATE_SUSPENDED if win32_fate_sharing else 0,
     )
 
diff --git a/python/ray/cloudpickle/cloudpickle.py b/python/ray/cloudpickle/cloudpickle.py
index 9c67ec6..12fda5a 100644
--- a/python/ray/cloudpickle/cloudpickle.py
+++ b/python/ray/cloudpickle/cloudpickle.py
@@ -521,10 +521,8 @@ def _walk_global_ops(code):
     """
     Yield referenced name for all global-referencing instructions in *code*.
     """
-    for instr in dis.get_instructions(code):
-        op = instr.opcode
-        if op in GLOBAL_OPS:
-            yield instr.argval
+    # GraalPy change: we don't support dis
+    yield from code.co_names
 
 
 def _extract_class_dict(cls):
diff --git a/python/setup.py b/python/setup.py
index a34a39c..6ac7ac5 100644
--- a/python/setup.py
+++ b/python/setup.py
@@ -535,19 +535,19 @@ def build(build_python, build_java, build_cpp):
             env=dict(os.environ, CC="gcc"),
         )
 
-    # runtime env agent dependenceis
-    runtime_env_agent_pip_packages = ["aiohttp"]
-    subprocess.check_call(
-        [
-            sys.executable,
-            "-m",
-            "pip",
-            "install",
-            "-q",
-            "--target=" + os.path.join(ROOT_DIR, RUNTIME_ENV_AGENT_THIRDPARTY_SUBDIR),
-        ]
-        + runtime_env_agent_pip_packages
-    )
+        # runtime env agent dependenceis
+        runtime_env_agent_pip_packages = ["aiohttp"]
+        subprocess.check_call(
+            [
+                sys.executable,
+                "-m",
+                "pip",
+                "install",
+                "-q",
+                "--target=" + os.path.join(ROOT_DIR, RUNTIME_ENV_AGENT_THIRDPARTY_SUBDIR),
+            ]
+            + runtime_env_agent_pip_packages
+        )
 
     bazel_flags = ["--verbose_failures"]
     if BAZEL_ARGS:
diff --git a/ray_build_backend.py b/ray_build_backend.py
new file mode 100644
index 0000000..9e7f3fd
--- /dev/null
+++ b/ray_build_backend.py
@@ -0,0 +1,117 @@
+# We need a whole custom build backend just because the setup.py is in a subdir
+import os
+import re
+import sys
+import tarfile
+import subprocess
+import shutil
+from pathlib import Path
+import venv
+
+SUB_VENV_PATH = Path(os.path.dirname(__file__)) / ('bazel-venv-' + sys.implementation.name)
+SUB_VENV_BIN = SUB_VENV_PATH / 'bin'
+SUB_VENV_PYTHON = SUB_VENV_BIN / 'python3'
+
+BAZEL = "bazel"
+
+def install_thirdparty_pkgs():
+    # During the installation process `pip` isn't available to use,
+    # So, we create a new environment to have access for fresh `pip` during bazel build.
+    if not os.path.isdir(SUB_VENV_PATH):
+        venv.create(SUB_VENV_PATH, with_pip=True)
+    print('Using virtual env in:\n\t' + str(SUB_VENV_PATH))
+    env = dict(os.environ)
+    env['PATH'] = os.pathsep.join([str(SUB_VENV_BIN), *os.environ.get("PATH", "").split(os.pathsep)])
+    env['VIRTUAL_ENV'] = str(SUB_VENV_PATH)
+    del_keys = [
+        'PIP_BUILD_TRACKER',
+        'PEP517_BUILD_BACKEND',
+        'PEP517_BACKEND_PATH',
+        'PYTHONPATH',
+        'PYTHONNOUSERSITE',
+    ]
+    for k in del_keys:
+        if k in env:
+            del env[k]
+
+    assert os.path.isdir(str(SUB_VENV_BIN))
+
+    THIRDPARTY_SUBDIR = os.path.join("ray", "thirdparty_files")
+    RUNTIME_ENV_AGENT_THIRDPARTY_SUBDIR = os.path.join(
+        "ray", "_private", "runtime_env", "agent", "thirdparty_files"
+    )
+
+    CLEANABLE_SUBDIRS = [
+        THIRDPARTY_SUBDIR,
+        RUNTIME_ENV_AGENT_THIRDPARTY_SUBDIR,
+        os.path.join("ray", "_raylet.so"),
+        os.path.join("ray", "cpp"),
+        "build",
+    ]
+
+    ROOT_DIR = os.path.join(os.path.dirname(__file__), 'python')
+    for subdir in CLEANABLE_SUBDIRS:
+        try:
+            shutil.rmtree(os.path.join(ROOT_DIR, subdir))
+        except:
+            pass
+
+    # copied from python/setup.py:523
+    pip_packages = ["psutil", "setproctitle==1.2.2", "colorama"]
+    subprocess.check_call(
+        [
+            str(SUB_VENV_PYTHON),
+            "-m",
+            "pip",
+            "install",
+            "-q",
+            "--target=" + os.path.join(ROOT_DIR, THIRDPARTY_SUBDIR),
+        ]
+        + pip_packages,
+        env=dict(os.environ, CC="gcc"),
+    )
+
+    runtime_env_agent_pip_packages = ["aiohttp"]
+    subprocess.check_call(
+        [
+            str(SUB_VENV_PYTHON),
+            "-m",
+            "pip",
+            "install",
+            "-q",
+            "--target=" + os.path.join(ROOT_DIR, RUNTIME_ENV_AGENT_THIRDPARTY_SUBDIR),
+        ]
+        + runtime_env_agent_pip_packages
+    )
+
+def build_sdist(sdist_directory, config_settings=None):
+    nv = 'ray-2.9.1'
+    srcdir = Path(__file__).parent
+    archive_path = Path(sdist_directory) / f'{nv}.tar.gz'
+
+    def tarfilter(info):
+        if re.match(r'\./(?:.git|bazel-|venv|[^-/]+-venv|dist)', info.name):
+            return None
+        info.name = f'./{nv}/{info.name}'
+        return info
+
+    with tarfile.open(archive_path, 'w:gz') as tar:
+        tar.add('.', filter=tarfilter)
+    return archive_path.name
+
+
+def build_wheel(wheel_directory, config_settings=None, metadata_directory=None):
+    install_thirdparty_pkgs()
+    wheel_directory = Path(wheel_directory).absolute()
+    os.chdir('python')
+    env = os.environ.copy()
+    env['SKIP_THIRDPARTY_INSTALL'] = 'true'
+    try:
+        subprocess.run([sys.executable, 'setup.py', 'bdist_wheel'], env=env, check=True)
+        wheels = list(Path('dist').glob('*.whl'))
+        assert len(wheels) == 1, f"Expected 1 wheel, found {len(wheels)}"
+        wheel = wheels[0]
+        shutil.copyfile(wheel, wheel_directory / wheel.name)
+        return str(wheel.name)
+    finally:
+        os.chdir('..')
diff --git a/src/ray/util/logging.cc b/src/ray/util/logging.cc
index f41aa65..f8e895d 100644
--- a/src/ray/util/logging.cc
+++ b/src/ray/util/logging.cc
@@ -374,6 +374,7 @@ bool RayLog::IsFailureSignalHandlerEnabled() {
 }
 
 void RayLog::InstallFailureSignalHandler(const char *argv0, bool call_previous_handler) {
+    /*
 #ifdef _WIN32
   // If process fails to initialize, don't display an error window.
   SetErrorMode(GetErrorMode() | SEM_FAILCRITICALERRORS);
@@ -389,6 +390,7 @@ void RayLog::InstallFailureSignalHandler(const char *argv0, bool call_previous_h
   options.writerfn = WriteFailureMessage;
   absl::InstallFailureSignalHandler(options);
   is_failure_signal_handler_installed_ = true;
+  */
 }
 
 void RayLog::InstallTerminateHandler() { std::set_terminate(TerminateHandler); }
