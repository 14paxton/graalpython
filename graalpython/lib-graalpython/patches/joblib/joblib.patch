diff --git a/joblib/externals/cloudpickle/cloudpickle.py b/joblib/externals/cloudpickle/cloudpickle.py
index 317be69..0c23e88 100644
--- a/joblib/externals/cloudpickle/cloudpickle.py
+++ b/joblib/externals/cloudpickle/cloudpickle.py
@@ -512,10 +512,12 @@ def _walk_global_ops(code):
     """
     Yield referenced name for all global-referencing instructions in *code*.
     """
-    for instr in dis.get_instructions(code):
-        op = instr.opcode
-        if op in GLOBAL_OPS:
-            yield instr.argval
+    # GraalPy change: we don't support dis
+    yield from code.co_names
+    # for instr in dis.get_instructions(code):
+    #     op = instr.opcode
+    #     if op in GLOBAL_OPS:
+    #         yield instr.argval
 
 
 def _extract_class_dict(cls):
diff --git a/joblib/externals/cloudpickle/cloudpickle_fast.py b/joblib/externals/cloudpickle/cloudpickle_fast.py
index 8741dcb..6c8b938 100644
--- a/joblib/externals/cloudpickle/cloudpickle_fast.py
+++ b/joblib/externals/cloudpickle/cloudpickle_fast.py
@@ -663,7 +663,7 @@ class CloudPickler(Pickler):
             self.globals_ref = {}
             assert hasattr(self, 'proto')
 
-    if pickle.HIGHEST_PROTOCOL >= 5 and not PYPY:
+    if pickle.HIGHEST_PROTOCOL >= 5 and not hasattr(Pickler, 'dispatch'):
         # Pickler is the C implementation of the CPython pickler and therefore
         # we rely on reduce_override method to customize the pickler behavior.
 
diff --git a/joblib/externals/loky/backend/fork_exec.py b/joblib/externals/loky/backend/fork_exec.py
index 2353c42..f083a63 100644
--- a/joblib/externals/loky/backend/fork_exec.py
+++ b/joblib/externals/loky/backend/fork_exec.py
@@ -35,9 +35,6 @@ def fork_exec(cmd, keep_fds, env=None):
     env = env or {}
     child_env = {**os.environ, **env}
 
-    pid = os.fork()
-    if pid == 0:  # pragma: no cover
-        close_fds(keep_fds)
-        os.execve(sys.executable, cmd, child_env)
-    else:
-        return pid
+    import subprocess
+    p = subprocess.Popen(cmd, executable=sys.executable, pass_fds=keep_fds, env=child_env)
+    return p.pid
