diff --git a/pythran/pythonic/python/core.hpp b/pythran/pythonic/python/core.hpp
index 4cbe3e0..24340b0 100644
--- a/pythran/pythonic/python/core.hpp
+++ b/pythran/pythonic/python/core.hpp
@@ -53,7 +53,14 @@ namespace python
 {
 
 #ifndef PyString_AS_STRING
-#define PyString_AS_STRING (char *)_PyUnicode_COMPACT_DATA
+  static inline const char* PyString_AS_STRING(PyObject* obj) {
+      const char* str = PyUnicode_AsUTF8(obj);
+      if (!str) {
+          PyErr_Clear();
+          str = "<invalid string>";
+      }
+      return str;
+  }
 #endif
 
   inline void PyObject_TypePrettyPrinter(std::ostream &oss, PyObject *obj)
diff --git a/pythran/pythonic/types/str.hpp b/pythran/pythonic/types/str.hpp
index e5dbe60..41d1658 100644
--- a/pythran/pythonic/types/str.hpp
+++ b/pythran/pythonic/types/str.hpp
@@ -741,10 +741,17 @@ namespace std
 #define PyString_FromStringAndSize PyUnicode_FromStringAndSize
 
 #ifndef PyString_Check
-#define PyString_Check(x) PyUnicode_Check(x) && PyUnicode_IS_COMPACT_ASCII(x)
+#define PyString_Check(x) PyUnicode_Check(x)
 #endif
 #ifndef PyString_AS_STRING
-#define PyString_AS_STRING (char *)_PyUnicode_COMPACT_DATA
+  static inline const char* PyString_AS_STRING(PyObject* obj) {
+      const char* str = PyUnicode_AsUTF8(obj);
+      if (!str) {
+          PyErr_Clear();
+          str = "<invalid string>";
+      }
+      return str;
+  }
 #endif
 #ifndef PyString_GET_SIZE
 #define PyString_GET_SIZE PyUnicode_GET_LENGTH
diff --git a/pythran/tables.py b/pythran/tables.py
index d62abe1..4ba279d 100644
--- a/pythran/tables.py
+++ b/pythran/tables.py
@@ -4617,7 +4617,10 @@ def save_arguments(module_name, elements):
             # some function are actually forward function, detect those
             # and accept to use our description instead.
             if looks_like_a_forward_function(spec):
-                assert signature.args.args, "{} require an explicit description".format(elem)
+                # GraalPy change: we have signatures for more builtins than
+                # CPython and this trips up on type constructors like `dict` or
+                # `BaseException`.
+                # assert signature.args.args, "{} require an explicit description".format(elem)
                 continue
 
             args = [ast.Name(arg, ast.Param(), None, None)
@@ -4630,7 +4633,8 @@ def save_arguments(module_name, elements):
             defaults = list(spec.defaults or [])
             args += [ast.Name(arg, ast.Param(), None, None)
                      for arg in spec.kwonlyargs]
-            defaults += [spec.kwonlydefaults[kw] for kw in spec.kwonlyargs]
+            if spec.kwonlydefaults:
+                defaults += [spec.kwonlydefaults[kw] for kw in spec.kwonlyargs]
 
             # Check if we already have a pythran description for that object
             if signature.args.args:
